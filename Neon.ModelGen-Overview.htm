<html><head><!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-151329628-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-151329628-1');
</script>
<meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="styles/branding.css" /><link rel="stylesheet" type="text/css" href="styles/branding-en-US.css" /><script type="text/javascript" src="scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Overview</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="Neon.ModelGen-Overview" /><meta name="Description" content="This is still a work in progress. The INotifyPropertyChanged and REST client generation support works now but the round-trip functionally doesn't work yet." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="styles/highlight.css" /><script type="text/javascript" src="scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="styles/branding-Website.css" /><script type="text/javascript" src="scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="scripts/branding-Website.js"></script><script type="text/javascript" src="scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Neon and neonKUBE class libraries and tools<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="Neon and neonKUBE class libraries and tools" tocid="roottoc">Neon and neonKUBE class libraries and tools</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.ModelGen-Overview.htm" title="Neon.ModelGen" tocid="b59be93a-2a66-41de-ab5e-e8110ea07f1c">Neon.ModelGen</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="Neon.ModelGen-Overview.htm" title="Overview" tocid="2962db0e-03c4-4a07-b8f8-807825db6863">Overview</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="icons/Help.png" /></td><td class="titleColumn"><h1>Overview</h1></td></tr></table><span class="introStyle"></span> <div id="ID1RBSection" class="collapsibleSection"><div class="alert"><table><tr><th><img src="icons/AlertCaution.png" alt="Caution note" />Â Caution</th></tr><tr><td><p>
            This is still a work in progress.  The <strong>INotifyPropertyChanged</strong>
            and REST client generation support works now but the round-trip functionally doesn't work yet.
          </p></td></tr></table></div><p>
          The Neon.ModelGenerator package is designed to convert compiled .NET interface
          definitions into data model classes that can support round-trip data transmission without 
          loss in many common scenarios providing a way to help future-proof your applications.
          This also can support generating the boilerplate code implementing 
          <strong>INotifyPropertyChanged</strong> for UX applications a well
          as generating REST service clients.
        </p><p>
          The essential idea here is that you'll define your data and service models as
          classes, structs, and enumerations in one or more model definition libraries in your solution
          and then use the neon-modelgen tool included in the Neon.ModelGenerator 
          package to reflect the types from your model definition libraries into source files
          that will be then compiled into your model library.
        </p><p>
          After referencing this package in your project, you'll need to manually edit
          your project file adding <span class="code">GeneratePathProperty=true</span> to the\
          package reference and then add a build target to call neon-modelgen to have
          it generate the model source code.
        </p><ol><li><p>Add <span class="code">GeneratePathProperty=true</span> to your package reference:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABBDABAAA_tab1" class="codeSnippetContainerTabSingle">XML</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABBDABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EABBDABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABBDABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">ItemGroup</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">PackageReference</span> <span class="highlight-xml-attribute-name">Include</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"Neon.ModelGenerator"</span> <span class="highlight-xml-attribute-name">Version</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"2.11.0"</span> <span class="highlight-xml-attribute-name">GeneratePathProperty</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"true"</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">PrivateAssets</span><span class="highlight-xml-bracket">&gt;</span>all<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">PrivateAssets</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">IncludeAssets</span><span class="highlight-xml-bracket">&gt;</span>runtime; build; native; contentfiles; analyzers; buildtransitive<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">IncludeAssets</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">PackageReference</span><span class="highlight-xml-bracket">&gt;</span>
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">ItemGroup</span><span class="highlight-xml-bracket">&gt;</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABBDABAAA");</script><p>
              Adding this causes MSBuild to define the <span class="code">$(PkgNeon_ModelGenerator)</span> variable
              which will reference the directory where the package is persisted in your
              workstation's global package cache, as described here:
              <a href="https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#generatepathproperty" target="_blank">Reference Cached Package Contents</a></p></li><li><p>
              Add a pre-build target that uses neon-modelgen to generate your models:
            </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADADABAAA_tab1" class="codeSnippetContainerTabSingle">XML</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADADABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EADADABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADADABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Target</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"ModelGen"</span> <span class="highlight-xml-attribute-name">BeforeTargets</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"BeforeCompile"</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Exec</span> <span class="highlight-xml-attribute-name">Command</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"&amp;quot;$(PkgNeon_ModelGenerator)\contentFiles\any\netstandard2.0\win-x64\neon-modelgen&amp;quot; -ux foo.dll foo.cs"</span> <span class="highlight-xml-bracket">/&gt;</span>
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Target</span><span class="highlight-xml-bracket">&gt;</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADADABAAA");</script><p>
              This example executes the win-x64 version of neon-modelgen located in the cached package
              directory, having it read model definitions from foo.dll and write the generated models 
              to foo.cs.  Note that you'll generally reference the source assembly from another project's
              build output and you'll need to configure your build dependencies such that the source
              project builds first.
            </p><p>
              We add surround the command path with &amp;quot; to handle the case where path may include
              spaces.  The $(PkgNeon_ModelGenerator) variable will expand into a reference to the folder
              where the package is cached.  The remaining path references a specific build of neon-modelgen.              
            </p><p>
              The Neon.ModelGenerator package includes three versions neon-modelgen for 
              linux-x64, osx-x64 and win-x64.  You need to select the correct one for 
              your build environment by editing the last directory name.
            </p></li></ol><p>
          Here's some documentation for the underlying model generator class as well as the neon-modelgen
          command line tool itself:
        </p><p><a href="https://doc.neonkube.com/Neon.ModelGen-Overview.htm" target="_blank">ModelGen Reference</a></p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">neon-modelgen
-------------
Generates C# source code for data and service models defined as interfaces
within a compiled assembly.

USAGE:

    neon-modelgen [OPTIONS] ASSEMBLY-PATH [OUTPUT-PATH]

ARGUMENTS:

    ASSEMBLY-PATH       - Path to the assembly being scanned.

    OUTPUT-PATH         - Optional path to the output file, otherwise
                          the generated code will be written to STDOUT.

OPTIONS:

    --source-namespace=VALUE    - Specifies the namespace to be used when
                                  scanning for models.  By default, all
                                  classes within the assembly wll be scanned.

    --target-namespace=VALUE    - Specifies the namespace to be used when
                                  generating the models.  This overrides 
                                  the original type namespaces as scanned
                                  from the source assembly.

    --persisted                 - Generate database persistence related code.

                                  NOTE: This only supports Couchbase

    --ux=xaml                   - Generate additional code for the specified
                                  UX framework.  Currently, only [xaml] is
                                  supported

    --no-services               - Don't generate any service clients.

    --targets=LIST              - Specifies the comma separated list of target 
                                  names.  Any input models that are not tagged
                                  with one of these names will not be generated.

    --debug-allow-stepinto      - Indicates that generated class methods will
                                  not include the [DebuggerStepThrough]
                                  attribute allowing the debugger to step
                                  into the generated methods.

    --v1compatible              - Generates models using the v1.x compatible
                                  ""__T"" property name rather than ""T$$""
                                  which is generated by ModelGen v2+.

    --log=PATH                  - Optionally outputs any errors to the specified 
                                  log file and supresses potentially spurious
                                  from the standard output and exit code.

REMARKS:

This command is used to generate enhanced JSON based data models and
REST API clients suitable for applications based on flexible noSQL
style design conventions.  See this GitHub issue for more information:

    https://github.com/nforgeio/neonKUBE/issues/463</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABAAA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />See Also</span></div><div id="ID2RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Neon_ModelGen.htm">Neon.ModelGen</a></div></div></div></div><div id="pageFooter" class="pageFooter">Offline help available for Windows: <a href="neon.chm">neon.chm</a><br />
Report any issues at: <a href="https://github.com/nforgeio/neonKUBE">https://github.com/nforgeio/neonKUBE</a><p>Copyright (c) 2005-2020 by neonFORGE LLC.  All rights reserved.</p></div></body></html>