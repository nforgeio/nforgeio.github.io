<html><head><!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-151329628-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-151329628-1');
</script>
<meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="styles/branding.css" /><link rel="stylesheet" type="text/css" href="styles/branding-en-US.css" /><script type="text/javascript" src="scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>TemporalClient Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="TemporalClient class" /><meta name="System.Keywords" content="Neon.Temporal.TemporalClient class" /><meta name="Microsoft.Help.F1" content="Neon.Temporal.TemporalClient" /><meta name="Microsoft.Help.Id" content="T:Neon.Temporal.TemporalClient" /><meta name="Description" content="Implements a client that will be connected to a Temporal cluster and be used to create and manage workflows." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Neon.Temporal" /><meta name="file" content="T_Neon_Temporal_TemporalClient" /><meta name="guid" content="T_Neon_Temporal_TemporalClient" /><link rel="stylesheet" type="text/css" href="styles/branding-Website.css" /><script type="text/javascript" src="scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="scripts/branding-Website.js"></script><script type="text/javascript" src="scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Neon and neonKUBE class libraries and tools<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="Neon and neonKUBE class libraries and tools" tocid="roottoc">Neon and neonKUBE class libraries and tools</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_neon.htm" title="Neon Namespaces" tocid="R_Project_neon">Neon Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Neon_Temporal.htm" title="Neon.Temporal" tocid="N_Neon_Temporal">Neon.Temporal</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Neon_Temporal_TemporalClient.htm" title="TemporalClient Class" tocid="T_Neon_Temporal_TemporalClient">TemporalClient Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Properties_T_Neon_Temporal_TemporalClient.htm" title="TemporalClient Properties" tocid="Properties_T_Neon_Temporal_TemporalClient">TemporalClient Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_Neon_Temporal_TemporalClient.htm" title="TemporalClient Methods" tocid="Methods_T_Neon_Temporal_TemporalClient">TemporalClient Methods</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Events_T_Neon_Temporal_TemporalClient.htm" title="TemporalClient Events" tocid="Events_T_Neon_Temporal_TemporalClient">TemporalClient Events</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="icons/Help.png" /></td><td class="titleColumn"><h1>TemporalClient Class</h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Implements a client that will be connected to a Temporal cluster and be used
            to create and manage workflows.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">System<span id="LST2959818D_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <span class="selflink">Neon.Temporal<span id="LST2959818D_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>TemporalClient</span><br /></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Neon_Temporal.htm">Neon.Temporal</a><br />
    <strong>Assembly:</strong>
   Neon.Temporal (in Neon.Temporal.dll) Version: 2.3.2-alpha<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EDCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','cs','1','4');return false;">C#</a></div><div id="ID1EDCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','vb','2','4');return false;">VB</a></div><div id="ID1EDCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','cpp','3','4');return false;">C++</a></div><div id="ID1EDCA_tab4" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EDCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EDCA');return false;" title="Copy">Copy</a></div></div><div id="ID1EDCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">TemporalClient</span> : <span class="identifier">IDisposable</span></pre></div><div id="ID1EDCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">TemporalClient</span>
	<span class="keyword">Implements</span> <span class="identifier">IDisposable</span></pre></div><div id="ID1EDCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">TemporalClient</span> : <span class="identifier">IDisposable</span></pre></div><div id="ID1EDCA_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">type</span> <span class="identifier">TemporalClient</span> =  
    <span class="keyword">class</span>
        <span class="keyword">interface</span> <span class="identifier">IDisposable</span>
    <span class="keyword">end</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EDCA");</script></div><p>The <span class="selflink">TemporalClient</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Properties</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Neon_Temporal_TemporalClient_DataConverter.htm">DataConverter</a></td><td><div class="summary"><p>
            Specifies the <a href="T_Neon_Temporal_IDataConverter.htm">IDataConverter</a> used for workflows and activities managed by the client.
            This defaults to <a href="T_Neon_Temporal_JsonDataConverter.htm">JsonDataConverter</a>.
            </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td>
            When you need a custom data converter, you must set this immediately after connecting
            the client.  You must not change the converter after you've started workers.
            </td></tr></table></div></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Neon_Temporal_TemporalClient_ListenUri.htm">ListenUri</a></td><td><div class="summary">
            Returns the URI the client is listening on for requests from the <b>temporal-proxy</b>.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Neon_Temporal_TemporalClient_ProxyUri.htm">ProxyUri</a></td><td><div class="summary">
            Returns the URI the associated <b>temporal-proxy</b> instance is listening on.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Neon_Temporal_TemporalClient_Settings.htm">Settings</a></td><td><div class="summary">
            Returns the settings used to create the client.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Neon_Temporal_TemporalClient_SyncSignalRetry.htm">SyncSignalRetry</a></td><td><div class="summary"><p>
            Controls how synchronous signals operations are polled until the signal operation is
            completed.  This defaults to something reasonable.
            </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td>
            The transient detector function specified by the policy passed is ignore and is
            replaced by a function that considers all exceptions to be transient.
            </td></tr></table></div></div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Methods</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_ActivityCompleteByIdAsync.htm">ActivityCompleteByIdAsync</a></td><td><div class="summary">
            Used to externally complete an activity identified by <a href="T_Neon_Temporal_WorkflowExecution.htm">WorkflowExecution</a> and activity ID.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_ActivityCompleteByTokenAsync.htm">ActivityCompleteByTokenAsync</a></td><td><div class="summary">
            Used to externally complete an activity identified by task token.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_ActivityErrorByIdAsync.htm">ActivityErrorByIdAsync</a></td><td><div class="summary">
            Used to externally fail an activity by <a href="T_Neon_Temporal_WorkflowExecution.htm">WorkflowExecution</a> and activity ID.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_ActivityErrorByTokenAsync.htm">ActivityErrorByTokenAsync</a></td><td><div class="summary">
            Used to externally fail an activity by task token.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_ActivityHeartbeatByIdAsync.htm">ActivityHeartbeatByIdAsync</a></td><td><div class="summary">
            Used to send record activity heartbeat externally by <a href="T_Neon_Temporal_WorkflowExecution.htm">WorkflowExecution</a> and activity ID.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_ActivityHeartbeatByTokenAsync.htm">ActivityHeartbeatByTokenAsync</a></td><td><div class="summary">
            Used to send record activity heartbeat externally by task token.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Neon_Temporal_TemporalClient_BuildActivityStub__1.htm">BuildActivityStub<span id="LST2959818D_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_2?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>TActivity<span id="LST2959818D_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_3?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script></a></td><td><div class="summary">
            Prebuilds and caches the internal activity stub class backing the
            <span class="typeparameter">TActivity</span> interface.  Subsequent calls for the
            same activity interface can be made but actually do nothing.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Neon_Temporal_TemporalClient_BuildAssemblyStubs.htm">BuildAssemblyStubs</a></td><td><div class="summary">
            Scans the assembly passed for any workflow or activity interfaces and
            pebuilds and caches the generated internal backing classes.  Subsequent 
            calls for the same assembly can be made but actually do nothing.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Neon_Temporal_TemporalClient_BuildWorkflowStub__1.htm">BuildWorkflowStub<span id="LST2959818D_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_4?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>TWorkflow<span id="LST2959818D_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_5?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script></a></td><td><div class="summary">
            Prebuilds and caches the internal workflow stub class backing the
            <span class="typeparameter">TWorkflow</span> interface.  Subsequent calls for the
            same workflow interface can be made but actually do nothing.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Neon_Temporal_TemporalClient_ConnectAsync.htm">ConnectAsync</a></td><td><div class="summary">
            Establishes a connection to a Temporal cluster.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_DebugLog.htm">DebugLog</a></td><td><div class="summary"><p><b>INTERNAL USE ONLY:</b> Appends a line of text to the debug log which is
            used internally to debug generated code like stubs.  This hardcodes its
            output to <b>C:\Temp\temporal-debug.log</b> so this currently only works
            on Windows.
            </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td>
            This method doesn't actually log anything unless <a href="P_Neon_Temporal_TemporalSettings_Debug.htm">Debug</a>
            is set to <span class="code">true</span>.
            </td></tr></table></div></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_DescribeNamespaceAsync.htm">DescribeNamespaceAsync</a></td><td><div class="summary">
            Describes the named Temporal namespace.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_DescribeNamespaceByIdAsync.htm">DescribeNamespaceByIdAsync</a></td><td><div class="summary">
            Describes a Temporal namespace by UUID.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_DescribeQueueListAsync.htm">DescribeQueueListAsync</a></td><td><div class="summary">
            Returns information about pollers (AKA workers) that have communicated 
            with the Temporal cluster in the last few minutes.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_DescribeWorkflowExecutionAsync.htm">DescribeWorkflowExecutionAsync(WorkflowExecution, String)</a></td><td><div class="summary">
            Returns the current state of a running workflow.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_DescribeWorkflowExecutionAsync_1.htm">DescribeWorkflowExecutionAsync(String, String, String)</a></td><td><div class="summary">
            Describes a workflow execution by explicit IDs.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_Dispose.htm">Dispose<span id="LST2959818D_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_6?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td><div class="summary">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</div></td></tr><tr data="protected;declared;notNetfw;"><td><img src="icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Neon_Temporal_TemporalClient_Dispose_1.htm">Dispose(Boolean)</a></td><td><div class="summary">
            Releases all associated resources.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.equals#System_Object_Equals_System_Object_" target="_blank">Equals</a></td><td><div class="summary">Determines whether the specified object is equal to the current object.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="public;static;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Neon_Temporal_TemporalClient_ExtractTemporalProxy.htm">ExtractTemporalProxy</a></td><td><div class="summary"><p>
            Writes the <b>temporal-proxy</b> binaries to the specified folder.  This is
            provided so that you can pre-provision the executable and then use the 
            <a href="P_Neon_Temporal_TemporalSettings_BinaryPath.htm">BinaryPath</a> setting to reference it.
            These files will be written:
            </p><div class="tableSection"><table><tr><td><b>temporal-proxy.win.exe</b></td><td>
                The Windows AMD64 executable
                </td></tr><tr><td><b>temporal-proxy.linux</b></td><td>
                The Linux AMD64 executable
                </td></tr><tr><td><b>temporal-proxy.osx</b></td><td>
                The OS/X AMD64 executable
                </td></tr></table></div><p>
            This is useful for situations where the executable must be pre-provisioned for
            security.  One example is deploying Temporal workers to a Docker container with
            a read-only file system.
            </p></div></td></tr><tr data="protected;declared;notNetfw;"><td><img src="icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Neon_Temporal_TemporalClient_Finalize.htm">Finalize</a></td><td><div class="summary">
            Finalizer.
            </div> (Overrides <a href="https://docs.microsoft.com/dotnet/api/system.object.finalize#System_Object_Finalize" target="_blank">Object<span id="LST2959818D_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_7?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Finalize<span id="LST2959818D_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_8?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.gethashcode#System_Object_GetHashCode" target="_blank">GetHashCode</a></td><td><div class="summary">Serves as the default hash function.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.gettype#System_Object_GetType" target="_blank">GetType</a></td><td><div class="summary">Gets the <a href="https://docs.microsoft.com/dotnet/api/system.type" target="_blank">Type</a> of the current instance.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_GetWorkflowCacheSizeAsync.htm">GetWorkflowCacheSizeAsync</a></td><td><div class="summary">
            Returns the current maximum number of sticky workflows for which history
            will be retained as a performance optimization.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_ListNamespacesAsync.htm">ListNamespacesAsync</a></td><td><div class="summary">
            Lists the Temporal namespaces.
            </div></td></tr><tr data="protected;inherited;notNetfw;"><td><img src="icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.memberwiseclone#System_Object_MemberwiseClone" target="_blank">MemberwiseClone</a></td><td><div class="summary">Creates a shallow copy of the current <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_NewUntypedWorkflowStub_1.htm">NewUntypedWorkflowStub(String, WorkflowOptions)</a></td><td><div class="summary">
            Creates an untyped stub that can be used to start a single workflow execution.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_NewUntypedWorkflowStub.htm">NewUntypedWorkflowStub(WorkflowExecution, String)</a></td><td><div class="summary">
            Creates an untyped stub for a known workflow execution.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_NewUntypedWorkflowStub_2.htm">NewUntypedWorkflowStub(String, String, String)</a></td><td><div class="summary">
            Creates an untyped stub for a known workflow execution.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_NewWorkerAsync.htm">NewWorkerAsync</a></td><td><div class="summary">
            Creates a new Temporal <a href="T_Neon_Temporal_Worker.htm">Worker</a> attached to the current client.  You'll
            use this to register your workflow and/or activity implementations with Temporal and
            the start the worker to signal Temporal that the worker is ready for business.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_NewWorkflowFutureStub__1.htm">NewWorkflowFutureStub<span id="LST2959818D_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_9?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>TWorkflowInterface<span id="LST2959818D_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_10?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script></a></td><td><div class="summary">
            Creates a stub suitable for starting an external workflow and then waiting
            for the result as separate operations.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_NewWorkflowStub.htm">NewWorkflowStub(String, WorkflowOptions)</a></td><td><div class="summary">
            Creates an untyped workflow stub to be used for launching a workflow.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_NewWorkflowStub__1.htm">NewWorkflowStub<span id="LST2959818D_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_11?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>TWorkflowInterface<span id="LST2959818D_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_12?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>(WorkflowExecution, String)</a></td><td><div class="summary">
            Creates a typed workflow stub connected to a known workflow execution
            using a <a href="T_Neon_Temporal_WorkflowExecution.htm">WorkflowExecution</a>.  This can be used to signal and
            query the workflow via the type-safe interface methods.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_NewWorkflowStub__1_1.htm">NewWorkflowStub<span id="LST2959818D_13"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_13?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>TWorkflowInterface<span id="LST2959818D_14"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_14?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>(WorkflowOptions, String)</a></td><td><div class="summary">
            Creates a typed workflow stub that can be used to start as well as 
            query and signal the workflow via the type-safe interface methods.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_NewWorkflowStub__1_2.htm">NewWorkflowStub<span id="LST2959818D_15"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_15?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>TWorkflowInterface<span id="LST2959818D_16"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_16?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>(String, String, String)</a></td><td><div class="summary">
            Creates a typed workflow stub connected to a known workflow execution
            using IDs.  This can be used to signal and query the workflow via the 
            type-safe interface methods.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_PingAsync.htm">PingAsync</a></td><td><div class="summary">
            Pings the <b>temporal-proxy</b> and waits for the reply.  This is used 
            mainly for low-level performance and load testing but can also be used
            to explicitly verify that the <b>temporal-proxy</b> is still alive.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_RegisterNamespaceAsync.htm">RegisterNamespaceAsync</a></td><td><div class="summary">
            Registers a Temporal namespace using the specified parameters.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_SetCacheMaximumSizeAsync.htm">SetCacheMaximumSizeAsync</a></td><td><div class="summary"><p>
            Sets the maximum number of sticky workflows for which of history will be 
            retained for workflow workers created by this client as a performance 
            optimization.  When this is exceeded, Temporal will may need to retrieve 
            the entire workflow history from the Temporal cluster when a workflow is 
            scheduled on the client's workers.
            </p><p>
            This defaults to <b>10K</b> sticky workflows.
            </p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_TerminateWorkflowAsync.htm">TerminateWorkflowAsync</a></td><td><div class="summary">
            Terminates a workflow if it has not already finished.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.tostring#System_Object_ToString" target="_blank">ToString</a></td><td><div class="summary">Returns a string that represents the current object.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_UpdateNamespaceAsync.htm">UpdateNamespaceAsync</a></td><td><div class="summary">
            Updates the named Temporal namespace.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Temporal_TemporalClient_WaitForWorkflowStartAsync.htm">WaitForWorkflowStartAsync</a></td><td><div class="summary">
            Waits for a resonable period of time for Temporal to start a workflow.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Events</span></div><div id="ID5RBSection" class="collapsibleSection"><table class="members" id="eventList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubevent.gif" alt="Public event" title="Public event" /></td><td><a href="E_Neon_Temporal_TemporalClient_ConnectionClosed.htm">ConnectionClosed</a></td><td><div class="summary">
            Raised when the connection is closed.  You can determine whether the connection
            was closed normally or due to an error by examining the <a href="T_Neon_Temporal_TemporalClientClosedArgs.htm">TemporalClientClosedArgs</a>
            arguments passed to the handler.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Remarks</span></div><div id="ID6RBSection" class="collapsibleSection"><p>
            To get started with Temporal, you'll need to deploy a Temporal cluster with
            one or more nodes and the establish a connection to the cluster from your
            workflow/activity implementations and management tools.  This is pretty
            easy to do.
            </p><p>
            Temporal clusters interacts with client APIs via gRPC on <b>port 7233</b> (by default).
            Server nodes are typically configured behind a TCP load balancer or a DNS
            name is configured such that it returns the IP addresses for each server
            node.  The <a href="P_Neon_Temporal_TemporalSettings_HostPort.htm">HostPort</a> property is used to 
            specify how to connect to the cluster.  For single node clusters or clusters
            behind a load balancer, you'll typically specify <b>HOST:7233</b> where
            <b>HOST</b> is the DNS name or IP address for the node.
            </p><p>
            Alternatively, if you've configured DNS to return IP addresses for each cluster node,
            you can specify <b>dns:///host:port</b>.  In this case, the client will 
            round-robin between the node addresses returned to locate healthy nodes
            to communicate with.
            </p><p>
            To establish a connection, you'll construct a <a href="T_Neon_Temporal_TemporalSettings.htm">TemporalSettings</a>
            and add your cluster endpoint to the <a href="P_Neon_Temporal_TemporalSettings_HostPort.htm">HostPort</a>
            and then call the static <a href="M_Neon_Temporal_TemporalClient_ConnectAsync.htm">ConnectAsync(TemporalSettings)</a>
            method to obtain a connected <span class="selflink">TemporalClient</span>.  You'll use this
            for registering workflows and activities types as well as the workers that
            indicate that workflows and activities can be executed in the current process.
            </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><b>IMPORTANT:</b> The current .NET Temporal client release supports having only
            one client open at a time.  A <a href="https://docs.microsoft.com/dotnet/api/system.notsupportedexception" target="_blank">NotSupportedException</a> will be thrown
            when attempting to connect a second client.  This restriction may be relaxed
            for future releases.
            </td></tr></table></div><p>
            You'll implement your workflows and activities by implementing classes that
            derive from <a href="T_Neon_Temporal_WorkflowBase.htm">WorkflowBase</a> and <a href="T_Neon_Temporal_ActivityBase.htm">ActivityBase</a> and then
            registering these types with Temporal.  Then you'll start workflow or activity
            workers so that Temporal will begin scheduling operations for execution by your code.
            Workflows and activities are registered using the fully qualified names 
            of the derived <a href="T_Neon_Temporal_WorkflowBase.htm">WorkflowBase</a> and <a href="T_Neon_Temporal_ActivityBase.htm">ActivityBase</a> types
            by defaut, but you can customize this if desired.
            </p><p>
            Temporal supports the concept of <b>namespaces</b> and task lists.  Temporal is multi-tenant and
            namespaces are simply string names used to isolate deployments.  For example, you could
            define a <b>PROD</b> namespace for your production workflows and <b>STAGE</b> for preproduction.
            It's also often useful to organize namespaces by the teams implementing and managing their
            workflows.  Each <span class="selflink">TemporalClient</span> is assigned to a default namespace via
            <a href="P_Neon_Temporal_TemporalSettings_Namespace.htm">Namespace</a> and this defaults to <b>"default"</b> unless you
            specify something different when connecting the client.
            </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td>
            You can override the default client namespace for specific operations via <a href="T_Neon_Temporal_WorkerOptions.htm">WorkerOptions</a>,
            <a href="T_Neon_Temporal_WorkflowOptions.htm">WorkflowOptions</a>, <a href="T_Neon_Temporal_ChildWorkflowOptions.htm">ChildWorkflowOptions</a>, <a href="T_Neon_Temporal_ActivityOptions.htm">ActivityOptions</a> as
            well as via the <a href="T_Neon_Temporal_WorkflowInterfaceAttribute.htm">WorkflowInterfaceAttribute</a>, <a href="T_Neon_Temporal_WorkflowMethodAttribute.htm">WorkflowMethodAttribute</a>,
            <a href="T_Neon_Temporal_ActivityInterfaceAttribute.htm">ActivityInterfaceAttribute</a> and <a href="T_Neon_Temporal_ActivityMethodAttribute.htm">ActivityMethodAttribute</a> attributes
            decorating your workflow and activity interface definitions.
            </td></tr></table></div><p>
            Once you have a connected <span class="selflink">TemporalClient</span>, you can create and manage Temporal namespaces
            via methods like <a href="M_Neon_Temporal_TemporalClient_RegisterNamespaceAsync.htm">RegisterNamespaceAsync(String, String, String, Int32, Boolean)</a>,
            <a href="M_Neon_Temporal_TemporalClient_DescribeNamespaceAsync.htm">DescribeNamespaceAsync(String)</a>, and <a href="M_Neon_Temporal_TemporalClient_UpdateNamespaceAsync.htm">UpdateNamespaceAsync(String, UpdateNamespaceRequest)</a>.
            </p><p>
            Workflows and activities are implemented by creating a <a href="T_Neon_Temporal_Worker.htm">Worker</a> via <a href="M_Neon_Temporal_TemporalClient_NewWorkerAsync.htm">NewWorkerAsync(WorkerOptions)</a>,
            registering your workflow and activity implementations with the worker and then starting
            the worker via <a href="M_Neon_Temporal_Worker_StartAsync.htm">StartAsync<span id="LST2959818D_17"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_17?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>.  Temporal will begin scheduling pending
            workflows and activities on workers after they've been started.
            </p><p>
            The <a href="T_Neon_Temporal_Worker.htm">Worker</a> class provides methods for registering individual workflow and
            activity implementations, including <a href="M_Neon_Temporal_Worker_RegisterWorkflowAsync__1.htm">RegisterWorkflowAsync<span id="LST2959818D_18"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_18?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>TWorkflow<span id="LST2959818D_19"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_19?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>(Boolean)</a> 
            and <a href="M_Neon_Temporal_Worker_RegisterActivityAsync__1.htm">RegisterActivityAsync<span id="LST2959818D_20"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_20?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>TActivity<span id="LST2959818D_21"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_21?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>(Boolean)</a> as well as methods
            that register all workflow and activity implementation discovered in an assembly:
            <a href="M_Neon_Temporal_Worker_RegisterAssemblyActivitiesAsync.htm">RegisterAssemblyActivitiesAsync(Assembly, Boolean)</a>,
            <a href="M_Neon_Temporal_Worker_RegisterAssemblyWorkflowsAsync.htm">RegisterAssemblyWorkflowsAsync(Assembly, Boolean)</a>, and
            <a href="M_Neon_Temporal_Worker_RegisterAssemblyAsync.htm">RegisterAssemblyAsync(Assembly, Boolean)</a> (which registers
            both workflow and assembly implementations).
            </p><p>
            Workflows are implemented by defining an interface describing the workflow methods
            and then writing a class the implements your interface and also inherits <a href="T_Neon_Temporal_WorkflowBase.htm">WorkflowBase</a>.  
            Your workflow interface  must define at least one entry point method tagged by <a href="T_Neon_Temporal_WorkflowMethodAttribute.htm">WorkflowMethodAttribute</a> and
            may optionally include signal and query methods  tagged by <a href="T_Neon_Temporal_SignalMethodAttribute.htm">SignalMethodAttribute</a> 
            and <a href="T_Neon_Temporal_QueryMethodAttribute.htm">QueryMethodAttribute</a>.
            </p><p>
            Activities are implemented in the same way by defining an activity interface and then writing a class
            that implements this  interface. and inherits <a href="T_Neon_Temporal_ActivityBase.htm">ActivityBase</a>.  Your activity interface
            must define at least one entry point method.
            </p><p>
            You'll generally create stub classes to start and manage workflows and activities.
            These come in various flavors with the most important being typed and untyped stubs.
            Typed stubs are nice because they implement your workflow or activity interface so
            that the C# compiler can provide compile-time type checking.  Untyped stubs provide
            a way to interact with workflows and activities written on other languages or for
            which you don't have source code.
            </p><p>
            You can create typed external workflow stubs via <a href="M_Neon_Temporal_TemporalClient_NewWorkflowStub__1_2.htm">NewWorkflowStub<span id="LST2959818D_22"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_22?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>TWorkflowInterface<span id="LST2959818D_23"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_23?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>(String, String, String)</a>
            and <a href="M_Neon_Temporal_TemporalClient_NewWorkflowStub__1_1.htm">NewWorkflowStub<span id="LST2959818D_24"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_24?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>TWorkflowInterface<span id="LST2959818D_25"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_25?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>(WorkflowOptions, String)</a>.
            </p><p>
            Workflows can use their <a href="T_Neon_Temporal_Workflow.htm">Workflow</a> property to create child workflow as
            well as activity stubs.
            </p><p><b>Task Lists</b></p><p>
            Task lists are used by Temporal to identify the set of workflows and activities that
            are implemented by workers.  For example, if you deploy a program called <b>payments.exe</b>
            that implements payment related workflows and activities like <b>validate</b>,
            <b>debit</b>, <b>credit</b>,... you could register these and then start a worker using
            <b>taskqueue=payments</b>.
            </p><p>
            You'll need to provide the correct task queue when executing a workflow or normal (non-local)
            activity.  Temporal will schedule the workflow or activity on one of the workers that
            was started with the specified task queue.  The most convienent way to specify the task queue
            is to tag your workflow and activity interfaces with <span class="code">[WorkflowInterface(TaskQueue = "payments")]</span>
            and <span class="code">[ActivityInterface(TaskQueue = "payments")]</span> attributes, specifying the target task queue.
            </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td>
            You may specify a default task queue when connecting a <span class="selflink">TemporalClient</span> via
            <a href="P_Neon_Temporal_TemporalSettings_DefaultTaskQueue.htm">DefaultTaskQueue</a> (which defaults to <span class="code">null</span>).  This may
            be convienent for simple deployments.
            </td></tr></table></div><p>
            You may also specify a custom task queue in the workflow and activity options used when
            executing a workflow or activity.  A task queue specified in one of these options takes
            precedence over the task queue specified in an attribute.
            </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td>
            The .NET client will complain if a task queue is not specified in either an interface
            attribute via options and the there's no client default task queue set.
            </td></tr></table></div><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p><b>IMPORTANT:</b> You need to take care to ensure that the task lists you use for your
            workers uniquely identify the set of workflows and activities implemented by your the workers.
            For example, if you start two workers, <b>worker-a</b> and <b>worker-b</b> using the same
            task queue, but <b>worker-a</b> registers the <b>foo</b> workflow and <b>worker-b</b>
            registers the <span class="code">bar</span> activity, you're going run into trouble.
            </p><p>
            The problem is that Cadence assumes that both workers implement the same workflows, both
            <b>foo</b> and <b>bar</b> in this case.  Say you start a <b>foo</b> workflow.  Temporal
            will select one of <b>worker-a</b> or <b>worker-b</b> to run the workflow.  If Temporal
            happens to select <b>worker-a</b> everything will work as expected because <b>foo</b>
            is registered there.  If Temporal selects <b>worker-b</b> the initial execution will fail
            because <b>foo</b> is not registered there.  Temporal handles this a decision task failure
            and will attempt to reschedule the workflow on another worker (hopefully <b>worker-a</b>
            this time).
            </p><p>
            Temporal fault tolerance will probably end up being able to handle this sort misconfiguration,
            but at the cost of additional delays as well as unnecessary communication overhead to workers
            that will never be able to execute unregistered workflows and activities.
            </p><p>
            So the moral of this store is carefully choose your task lists to match the set of workflows
            and activities implemented by your application.  One common approach is to name the task queue
            after the service or application that implements the workflow anbd activities.
            </p></td></tr></table></div><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            Activity and workflow stubs are generated and compiled on demand by default.  This takes 
            about 500ms for each stub.  This generally works fine but may cause decision task timeouts 
            for workflows that call a lot of different child workflows or activities.
            </p><p>
            The default workflow decision task timeout is 10 seconds, so a workflow
            that creates 22 stubs when its first called will have a decent chance
            of timing out due to the 500ms * 22 = 11 seconds it will take for the 
            .NET client generate and build the backing classes.
            </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td>
            This is only an issue the first time a stub classes are built, so it'll
            be very likely that the workflow will proceed the second time it's invoked
            on the same worker because the generated stub classes are cached.
            </td></tr></table></div><p>
            You can proactively address this by prebuilding stub classes before starting
            any workers by calling <a href="M_Neon_Temporal_TemporalClient_BuildActivityStub__1.htm">BuildActivityStub<span id="LST2959818D_26"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_26?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>TActivity<span id="LST2959818D_27"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_27?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><span id="LST2959818D_28"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_28?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>, 
            <a href="M_Neon_Temporal_TemporalClient_BuildWorkflowStub__1.htm">BuildWorkflowStub<span id="LST2959818D_29"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_29?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>TWorkflow<span id="LST2959818D_30"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_30?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><span id="LST2959818D_31"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2959818D_31?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>, and/or <a href="M_Neon_Temporal_TemporalClient_BuildAssemblyStubs.htm">BuildAssemblyStubs(Assembly)</a>.
            After doing this, the specified stubs will already be generated and compiled
            when the worker starts and begins invoking workflows and activities.
            </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />See Also</span></div><div id="ID7RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Neon_Temporal.htm">Neon.Temporal Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Offline help available for Windows: <a href="neon.chm">neon.chm</a><br />
Report any issues at: <a href="https://github.com/nforgeio/neonKUBE">https://github.com/nforgeio/neonKUBE</a><p>Copyright (c) 2005-2020 by neonFORGE, LLC.  All rights reserved.</p> </div></body></html>