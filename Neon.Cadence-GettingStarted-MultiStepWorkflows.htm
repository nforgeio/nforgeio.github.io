<html><head><!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-151329628-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-151329628-1');
</script>
<meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="styles/branding.css" /><link rel="stylesheet" type="text/css" href="styles/branding-en-US.css" /><script type="text/javascript" src="scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Multi-step workflows</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="Neon.Cadence-GettingStarted-MultiStepWorkflows" /><meta name="Description" content="So far we've looked at some very simple workflows and activities. It's time to look at something a bit more advanced:" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="styles/highlight.css" /><script type="text/javascript" src="scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="styles/branding-Website.css" /><script type="text/javascript" src="scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="scripts/branding-Website.js"></script><script type="text/javascript" src="scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Neon and neonKUBE class libraries and tools<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="Neon and neonKUBE class libraries and tools" tocid="roottoc">Neon and neonKUBE class libraries and tools</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Cadence-Overview.htm" title="Neon.Cadence" tocid="35e5c662-a338-4959-8807-e140161190a4">Neon.Cadence</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Cadence-GettingStarted-BasicWorkflow.htm" title="Getting started" tocid="e0ed9856-440c-48d4-8ca6-1d917f62ee13">Getting started</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-GettingStarted-BasicWorkflow.htm" title="Basic workflow" tocid="1576a65f-94bd-4bed-9ff6-935b1c20fd87">Basic workflow</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-GettingStarted-BasicActivity.htm" title="Basic activity" tocid="2084205f-aa66-4426-a559-063658da86aa">Basic activity</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-GettingStarted-MultiStepWorkflows.htm" title="Multi-step workflows" tocid="77bd3d69-f67d-4d4e-9e97-631439d19e8f">Multi-step workflows</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-GettingStarted-Samples.htm" title="Cadence samples" tocid="f1fd2005-7e8f-4d93-8278-5752d1576cd4">Cadence samples</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="icons/Help.png" /></td><td class="titleColumn"><h1>Multi-step workflows</h1></td></tr></table><span class="introStyle"></span> <div id="ID1RBSection" class="collapsibleSection"><p>
          So far we've looked at some very simple workflows and activities.  It's time to look at
          something a bit more advanced:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EANABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EANABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EANABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EANABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[ActivityInterface(TaskList = <span class="highlight-literal">"my-tasks"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IEmailActivity : IActivity
{
    [ActivityMethod(Name = <span class="highlight-literal">"get-email-list"</span>)]
    Task&lt;List&lt;<span class="highlight-keyword">string</span>&gt;&gt; GetEmailListAsync();

    [ActivityMethod(Name = <span class="highlight-literal">"send-message"</span>)]
    Task SendMessageAsync(<span class="highlight-keyword">string</span> email, <span class="highlight-keyword">string</span> messageText);
}

[Activity(AutoRegister = <span class="highlight-keyword">true</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> EmailActivity : ActivityBase, IEmailActivity
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task&lt;List&lt;<span class="highlight-keyword">string</span>&gt;&gt; GetEmailListAsync()
    {
        <span class="highlight-comment">// Pretend that this activity is querying a database or REST API to</span>
        <span class="highlight-comment">// obtain the email list.</span>

        <span class="highlight-keyword">var</span> list = <span class="highlight-keyword">new</span> List&lt;<span class="highlight-keyword">string</span>&gt;();

        list.Add(<span class="highlight-literal">"jeff@my-company.com"</span>);
        list.Add(<span class="highlight-literal">"jill@my-company.com"</span>);
        list.Add(<span class="highlight-literal">"jack@my-company.com"</span>);
        list.Add(<span class="highlight-literal">"nancy@my-company.com"</span>);

        <span class="highlight-keyword">return</span> <span class="highlight-keyword">await</span> Task.FromResult(list);
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task SendMessageAsync(<span class="highlight-keyword">string</span> email, <span class="highlight-keyword">string</span> messageText)
    {
        <span class="highlight-keyword">var</span> smtp    = <span class="highlight-keyword">new</span> SmtpClient(<span class="highlight-literal">"mail.my-company.com"</span>);
        <span class="highlight-keyword">var</span> message = <span class="highlight-keyword">new</span> MailMessage(<span class="highlight-literal">"bot@my-company.com"</span>, email);

        message.Body = messageText;

        smtp.Send(message);
    }
}

[WorkflowInterface(TaskList = <span class="highlight-literal">"my-tasks"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IEmailWorkflow : IWorkflow
{
    [WorkflowMethod]
    Task SendMessagesAsync();
}

[Workflow(AutoRegister = <span class="highlight-keyword">true</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> EmailWorkflow : WorkflowBase, IEmailWorkflow
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task SendMessagesAsync()
    {
        <span class="highlight-keyword">var</span> activityStub = Workflow.NewActivityStub&lt;IEmailActivity&gt;();
        <span class="highlight-keyword">var</span> emailList    = <span class="highlight-keyword">await</span> activityStub.GetEmailListAsync();

        <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> email <span class="highlight-keyword">in</span> emailList)
        {
            <span class="highlight-keyword">await</span> activityStub.SendMessageAsync(email, <span class="highlight-literal">"This is a test message."</span>);
        }
    }
}

<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> Program
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">async</span> Task Main(<span class="highlight-keyword">string</span>[] args)
    {
        <span class="highlight-comment">// Connect to Cadence</span>

        <span class="highlight-keyword">var</span> settings = <span class="highlight-keyword">new</span> CadenceSettings()
        {
            DefaultDomain = <span class="highlight-literal">"my-domain"</span>,
            CreateDomain  = <span class="highlight-keyword">true</span>,
            Servers       = <span class="highlight-keyword">new</span> List&lt;<span class="highlight-keyword">string</span>&gt;() { <span class="highlight-literal">"cadence://localhost:7933"</span> }
        };

        <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">await</span> CadenceClient.ConnectAsync(settings))
        {
            <span class="highlight-comment">// Register your workflow and activity implementations to let </span>
            <span class="highlight-comment">// Cadence know we're open for business.</span>

            <span class="highlight-keyword">await</span> client.RegisterAssemblyAsync(System.Reflection.Assembly.GetExecutingAssembly());
            <span class="highlight-keyword">await</span> client.StartWorkerAsync(<span class="highlight-literal">"my-tasks"</span>);

            <span class="highlight-comment">// Invoke the workflow.</span>

            <span class="highlight-keyword">var</span> workflowStub = client.NewWorkflowStub&lt;IEmailWorkflow&gt;();

            <span class="highlight-keyword">await</span> workflowStub.SendMessagesAsync();
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EANABAAA");</script><p>
          The code above is similar to what we examined in the previous page but there are
          a few changes:
        </p><ul><li><p>
              A <span class="code">[Workflow(AutoRegister = true)]</span> attribute was added to the workflow implementation
              class and an <span class="code">[Activity(AutoRegister = true)]</span> attribute was added to the activity
              implementation.
            </p></li><li><p>
              The activity interface and implementation class now have two methods and each method tagged
              with a <span class="code">[ActivityMethod(Name = "...")]</span> attribute specifying a name.
            </p></li><li><p>
              The new workflow method calls and activity to obtain an email list and then sends 
              a test email to each email address returned.
            </p></li><li><p>
              The <span class="code">Main()</span> method now calls
              <a href="M_Neon_Cadence_CadenceClient_RegisterAssemblyAsync.htm">RegisterAssemblyAsync</a>
              to register the workflow and activity implementations.
            </p></li></ul><p>
          The <span class="code">[Workflow(AutoRegister = true)]</span> and <span class="code">[Activity(AutoRegister = true)]</span>
          attributes combined with <a href="M_Neon_Cadence_CadenceClient_RegisterAssemblyAsync.htm">RegisterAssemblyAsync</a>
          is a convienent way to register workflows and activities within an assembly.  This works by reflecting the types in the assembly
          passed, looking for activity and workflow classes with the appropriate attribute with <span class="code">AutoRegister = true</span>
          and registering these with Cadence automatically.  This is much more convenient than explicitly registering every implementation in 
          the typical situation where you're registering all of the activities and workflows present.
        </p><p>
          Workflow and activity interfaces and implementation classes may define multiple entry point methods.  This can be a nice way
          to organize your code.  For this to work though each entry point method must have a unique name assigned via an <span class="code">[ActivityMethod(Name = "...")]</span>
          attribute for activity methods and a <span class="code">[WorkflowMethod(Name = "...")]</span> attribute for workflow methods.
          In the code above, the two activity methods were tagged with unique names.
        </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            A workflow or activity method without an assigned name will implicitly use an empty string as the name.
            So technically, we could have omitted the <span class="code">[ActivityMethod(Name = "...")]</span>
            attribute from one of the activity methods.
          </p></td></tr></table></div><p>
          The interesting thing about the code above is the <span class="code">EmailWorkflow.SendMessagesAsync()</span>
          implementation.  The method creates a stub for the activity, calls <span class="code">GetEmailListAsync()</span>
          to retrieve a list of email addresses from a simulated database, and then calls the activity's <span class="code">SendMessageAsync()</span>
          method to send a message to each address.  Let's walk through this.
        </p><p>
          First once you create an activity stub, you may call as many many of its methods as you like as a convienence.  You could
          create a stub for each call but that will be more work and also be slightly less efficient.
        </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            Workflow stubs work differently.  Only a single workflow instance can be invoked from any single stub.  The reason
            is that after the workflow has been started, the stub acts as a proxy for the workflow and supports querying the
            workflow state or sending the workflow a signal.  Activities don't have equivalent operations.  We'll be convering
            workflow signals and queries in a later topic.
          </p></td></tr></table></div><p>
          Take another look at the <span class="code">EmailWorkflow.SendMessagesAsync()</span> method.  It looks like regular C#
          code; nothing fancy right?  It's fetching a list of email addresses and then sending emails to those addresses.
          This is where the genius of Cadence comes into the picture.  This method is really a reliable workflow
          state machine managed by Cadence.  Not only does Cadence manage scheduling (and perhaps rescheduling) the workflow 
          and each activity call on a workflow service instance, Cadence also tracks the the operations the workflow performs
          such that even if the host workflow service fails in the middle of executing the workflow, Cadence will schedule
          the workflow on a different workflow service instance and also <strong>ensures that the method continues
          exactly where it left off</strong>.
        </p><p>
          How can this work, you say?  The trick is that Cadence is recording the history of activity method calls to the
          Cassandra database.  So the email address list returned by <span class="code">GetEmailListAsync()</span> will be
          recorded to the workflow history.  If the machine running the workflow service happens to crash after the list
          is returned but before the first message is sent, Cadence will reschedule the workflow on another server and start
          it.  When the new workflow instance makes the <span class="code">GetEmailListAsync()</span> call, Cadence knows
          that the list is already in the history so Cadence just returns the saved list to the workflow without actually
          invoking the activity again.  The workflow code then continues to begin sending the messages.
        </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            In addition to recording activity calls to a workflow's history, Cadence also records calls to child workflows
            as well as many of the methods implemented by <a href="T_Neon_Cadence_Workflow.htm">Workflow</a>
            which is available to the workflow code via the <a href="P_Neon_Cadence_WorkflowBase_Workflow.htm">Workflow</a>
            property.  We'll cover this in detail later.
          </p></td></tr></table></div><p>
          Now, let's say that the machine hosting the workflow crashes again after sending the second message.  Cadence will
          reschedule the workflow again and now there will be three events in the history: the activity call retrieving the
          email list, and the activity calls that sent the first two messages.  The workflow method will start executing again
          on the new machine.  The <span class="code">GetEmailListAsync()</span> will be replayed from history again, returning
          the email list as will the first two <span class="code">SendMessageAsync()</span> calls.  Cadence will realize that the
          last two <span class="code">SendMessageAsync()</span> calls were not recorded to history so the activities will be invoked,
          sending the remaining messages.
        </p><p>
          This is extraordinarily powerful: <strong>a complex state machine hiding in plain old C# code</strong>.
        </p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />See Also</span></div><div id="ID2RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Neon_Cadence.htm">Neon.Cadence</a></div></div></div></div><div id="pageFooter" class="pageFooter">Offline help available for Windows: <a href="neon.chm">neon.chm</a><br />
Report any issues at: <a href="https://github.com/nforgeio/neonKUBE">https://github.com/nforgeio/neonKUBE</a><p>Copyright (c) 2005-2020 by neonFORGE, LLC.  All rights reserved.</p></div></body></html>