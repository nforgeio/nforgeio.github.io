<html><head><!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-151329628-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-151329628-1');
</script>
<meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="styles/branding.css" /><link rel="stylesheet" type="text/css" href="styles/branding-en-US.css" /><script type="text/javascript" src="scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Cross-platform</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="Neon.Temporal-CrossPlatform" /><meta name="Description" content="The Temporal platform supports writing and deploying workflows and activities in multiple languages such as GOLANG, Java, and C#/.NET and it is possible for code written in one language to call workflows and activities written in another." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="styles/highlight.css" /><script type="text/javascript" src="scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="styles/branding-Website.css" /><script type="text/javascript" src="scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="scripts/branding-Website.js"></script><script type="text/javascript" src="scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Neon and neonKUBE class libraries and tools<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="Neon and neonKUBE class libraries and tools" tocid="roottoc">Neon and neonKUBE class libraries and tools</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Temporal-Overview.htm" title="Neon.Temporal" tocid="08dcc973-f8d0-434c-93cb-d11168627a39">Neon.Temporal</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Temporal-Other-Logging.htm" title="Other topics" tocid="eb45e360-bdfc-43d6-b05d-705d4715c0ed">Other topics</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Other-Logging.htm" title="Logging" tocid="42d7a404-e508-4030-9a2b-8c44b61a3070">Logging</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Other-Serialization.htm" title="Data serialization" tocid="0d34f0bf-ad1b-4ce1-ad9b-9b70cc1b29d1">Data serialization</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Other-UnitTesting.htm" title="Unit testing" tocid="e5b8f3ca-e30d-4915-b9c3-2c630fca5b32">Unit testing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="6a2a88e2-7e4b-4ae5-a871-36ddb012ed04.htm" title="Java differences" tocid="6a2a88e2-7e4b-4ae5-a871-36ddb012ed04">Java differences</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-CrossPlatform.htm" title="Cross-platform" tocid="d5556812-b5b4-4aa4-93be-13a0a11458cf">Cross-platform</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="icons/Help.png" /></td><td class="titleColumn"><h1>Cross-platform</h1></td></tr></table><span class="introStyle"></span> <div class="collapsibleAreaRegion" id="summary"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Overview</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
          The Temporal platform supports writing and deploying workflows and activities in multiple
          languages such as GOLANG, Java, and C#/.NET and it is possible for code written in one
          language to call workflows and activities written in another.
        </p><p>
          Although we'd love it if you commited to using the .NET Temporal client for all
          your workflow needs, the time may come where your .NET code needs to interoperate
          with workflows and activities written in Java or GOLANG.  The reverse can also happen,
          where Java or GOLANG code needs to interoperate with .NET workflows and activities.
          To accmplish this, you'll need to know some details aboput how Temporal works.
        </p><p>
          There are two important considerations you'll need to address before making cross-platform
          calls: <strong>identifying the target workflow or activity being called</strong>
          and <strong>ensuring that serialized data is compatible</strong> for both platforms.
          We'll discuss each of these below.
        </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Workflow and Activity Type Names</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          Temporal has a concept called a <strong>workflow type name</strong>.  This
          is a string used to identify a workflow implementation.  For the GOLANG client, 
          workflow type names are generally a combination of the module and name of the function 
          implementing the workflow; like <strong>main.MyWorkflow</strong> where
          <strong>main</strong> is the module name and <strong>MyWorkflow</strong>
          is the workfloy function.  Custom custom names may be also be specified.  The Java and
          .NET clients  are a bit more complex and allow a workflow type to define multiple workflow
          entry point methods.  For these clients, the workflow type name will be a combination
          of the workflow class and method names (and these may also be customized).
        </p><p>
          The first step towards cross-platform integration is to determine what the workflow or
          activity type name is for the target entity.  The easiest way to determine this is
          to go into your <strong>Temporal Web UI</strong> to discover the actual name used.
        </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Data Serialization</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          To be able to make cross-platform workflow and activity calls, you'll also
          need to ensure that both sides are serializing data the same way.  There
          are two parts to this: using the same serialization format on both sides
          and ensuring that individual items are serialized the same.
        </p><p><strong>Serialization Format:</strong> You need to ensure that both
          platforms are using the same basic mechanism to serialize arguments and results
          into bytes that can be transmitted on the wire and persisted to the Temporal
          database.  By default, the GOLANG, Java, and .NET clients serialize data to
          JSON text and then render that into bytes as UTF-8.  It is possible
          to override this by implementing a custom <a href="T_Neon_Temporal_IDataConverter.htm">IDataConverter</a>
          that serializes data as XML, Protobuf, or whatever.
        </p><p><strong>Serialization Details:</strong> You also need to ensure that
          things like JSON property names and details like how date/time and other values
          are consistent on both sides.  The .NET client's default JSON serialization
          implementation is based on the very popular 
          <a href="https://www.newtonsoft.com/json" target="_blank">Newtonsoft JSON.NET</a>
          package.  You can use attributes like <span class="code">[JsonProperty]</span>, <span class="code">[JsonIgnore]</span>,
          and <span class="code">[JsonConverter]</span> for fine control over this.  Here's a link
          to more information:
          <a href="https://www.newtonsoft.com/json/help/html/SerializationAttributes.htm" target="_blank">JSON.NET Attributes</a></p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Invoking a cross-platform workflow</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          The basic approach to invoking a workflow written in another language is to use an untyped
          workflow stub.  You'll need to connect a <a href="T_Neon_Temporal_TemporalClient.htm">TemporalClient</a>
          to the Temporal cluster, create an untyped <a href="T_Neon_Temporal_WorkflowStub.htm">WorkflowStub</a>
          and then start the workflow, passing any arguments.  You can use this stub to query and signal the workflow as
          well as waiting for workflow to complete, obtaining any result.
        </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            You can also create an untyped <a href="T_Neon_Temporal_WorkflowStub.htm">WorkflowStub</a>
            to connect to and manage an existing, already running workflow by workflow ID.
          </p></td></tr></table></div><p>
          Here's a code snippit demonstrating how to invoke a GOLANG workflow that sends an email.
          The workflow accepts three string arguments like: <span class="code">bool SendEmail(string to, string subject, string body)</span>
          and returns <span class="code">true</span> on success.  The workflow type name registered
          <strong>SendEmail</strong> in the <strong>Acme-PROD</strong> namespace 
          by the GOLANG implementation as <strong>"SendEmail"</strong>:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID3EAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID3EAAABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID3EAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID3EAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> settings = <span class="highlight-keyword">new</span> TemporalSettings()
{
    <span class="highlight-comment">// This specifies the default domain for operations initiated by the</span>
    <span class="highlight-comment">// client connected below (this can be overridden for specific</span>
    <span class="highlight-comment">// operations.</span>

    DefaulNamespace = <span class="highlight-literal">"Acme-PROD"</span>,

    <span class="highlight-comment">// Host/port for at least one of the Temporal cluster servers:</span>

    HostPort = <span class="highlight-literal">"localhost:7933"</span>
};

<span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">await</span> TemporalClient.ConnectAsync(settings))
{
    <span class="highlight-comment">// Create an untyped stub for the new workflow.</span>

    <span class="highlight-keyword">var</span> stub = client.NewUntypedWorkflowStub(<span class="highlight-literal">"SendEmail"</span>);

    <span class="highlight-comment">// Start the workflow.  Note that we need to take to ensure that the number, order</span>
    <span class="highlight-comment">// and types of the parameters match what the GOLANG workflow implementation expects.</span>
    <span class="highlight-comment">// Untyped workflow stub arguments cannot be checked be the C# compiler.</span>
    <span class="highlight-comment">// </span>
    <span class="highlight-comment">// This method returns a [WorkflowExecution] which includes the workflow and</span>
    <span class="highlight-comment">// run IDs.  We're not using these here, but real applications may want to</span>
    <span class="highlight-comment">// persist this so that could check on long-running workflows later.</span>

    <span class="highlight-keyword">var</span> execution = <span class="highlight-keyword">await</span> stub.StartAsync(<span class="highlight-literal">"jeff@lilltek.com"</span>, <span class="highlight-literal">"Test subject"</span>, <span class="highlight-literal">"This is a test email."</span>);

    <span class="highlight-comment">// Wait for the workflow to complete and return it's result.  Note that we need</span>
    <span class="highlight-comment">// to explicitly specify the result [bool] type as a generic type parameter.</span>
    <span class="highlight-comment">// You need to ensure that this matches the workflow implementation as well.</span>

    <span class="highlight-keyword">var</span> success = <span class="highlight-keyword">await</span> stub.GetResultAsync&lt;<span class="highlight-keyword">bool</span>&gt;();

    <span class="highlight-keyword">if</span> (success)
    {
        Console.WriteLine(<span class="highlight-literal">"Email SENT!"</span>);
    }
    <span class="highlight-keyword">else</span>
    {
        Console.WriteLine(<span class="highlight-literal">"Email FAILED!"</span>);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID3EAAABAAA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />See Also</span></div><div id="ID5RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Neon_Temporal.htm">Neon.Temporal</a></div></div></div></div><div id="pageFooter" class="pageFooter">Offline help available for Windows: <a href="neon.chm">neon.chm</a><br />
Report any issues at: <a href="https://github.com/nforgeio/neonKUBE">https://github.com/nforgeio/neonKUBE</a><p>Copyright (c) 2005-2020 by neonFORGE, LLC.  All rights reserved.</p></div></body></html>