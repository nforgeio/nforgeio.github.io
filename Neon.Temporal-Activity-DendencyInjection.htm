<html><head><!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-151329628-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-151329628-1');
</script>
<meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="styles/branding.css" /><link rel="stylesheet" type="text/css" href="styles/branding-en-US.css" /><script type="text/javascript" src="scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Dependency Injection</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="Neon.Temporal-Activity-DendencyInjection" /><meta name="Description" content="Temporal activities support injecting depdendencies as parameters to the activity implementation constructor." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="styles/highlight.css" /><script type="text/javascript" src="scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="styles/branding-Website.css" /><script type="text/javascript" src="scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="scripts/branding-Website.js"></script><script type="text/javascript" src="scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Neon and neonKUBE class libraries and tools<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="Neon and neonKUBE class libraries and tools" tocid="roottoc">Neon and neonKUBE class libraries and tools</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Temporal-Overview.htm" title="Neon.Temporal" tocid="c5895fc2-372e-4213-a1d0-faf513b46ed7">Neon.Temporal</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Temporal-GettingStarted-BasicWorkflow.htm" title="Getting started" tocid="5afee771-b9cc-4998-8983-2b3d6656f56a">Getting started</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-GettingStarted-BasicWorkflow.htm" title="Basic workflow" tocid="71ca278a-dfb2-450f-965b-c5bc373538e1">Basic workflow</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-GettingStarted-BasicActivity.htm" title="Basic activity" tocid="a5cdc2a2-6f6d-4717-b2a4-deeefb8d55e6">Basic activity</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-GettingStarted-MultiStepWorkflows.htm" title="Multi-step workflows" tocid="4d8eef4e-c18c-4de6-9d22-dec9c1bfa586">Multi-step workflows</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-GettingStarted-Samples.htm" title="Temporal samples" tocid="509a142d-94b5-4bf5-ad04-0863b3209e7b">Temporal samples</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Activity-DendencyInjection.htm" title="Dependency Injection" tocid="f90ba0cc-4ae6-4b65-9e0e-fcd1e29eff9f">Dependency Injection</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="icons/Help.png" /></td><td class="titleColumn"><h1>Dependency Injection</h1></td></tr></table><span class="introStyle"></span> <div id="ID1RBSection" class="collapsibleSection"><p>
          Temporal activities support injecting depdendencies as parameters to the
          activity implementation constructor.  This can be used to inject things like
          database or REST API clients into an activity and can also be used to pass
          in mocked implementations for workflow and activity unit testing.
        </p><p>
          You'll need to add a reference the <strong>Microsoft.Extensions.DependencyInjection</strong>
          nuget package to your worker service, configure your dependencies using the global
          Neon service container <a href="P_Neon_Common_NeonHelper_ServiceContainer.htm">ServiceContainer</a>,
          and then add a constructor to your activity implementation with parameters that accept
          the dependencies.
        </p><p>
            You must register your dependencies before your worker registers its activity
            implementations.
          </p><p>
          Here's an example of worker injecting an object instance into an activity:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-keyword">using</span> System.Net.Mail;
<span class="highlight-keyword">using</span> System.Reflection;
<span class="highlight-keyword">using</span> System.Threading.Tasks;

<span class="highlight-keyword">using</span> Microsoft.Extensions.DependencyInjection;

<span class="highlight-keyword">using</span> Neon.Common;
<span class="highlight-keyword">using</span> Neon.Temporal;

<span class="highlight-comment">// An instance of this class will be injected into the activity.</span>

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MailSettings
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> MailServer { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
}

[ActivityInterface(TaskQueue = <span class="highlight-literal">"my-tasks"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IEmailActivity : IActivity
{
    [ActivityMethod(Name = <span class="highlight-literal">"send-message"</span>)]
    Task SendMessageAsync(<span class="highlight-keyword">string</span> email, <span class="highlight-keyword">string</span> messageText);
}

[Activity(AutoRegister = <span class="highlight-keyword">true</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> EmailActivity : ActivityBase, IEmailActivity
{
    <span class="highlight-keyword">private</span> MailSettings settings;

    <span class="highlight-keyword">public</span> EmailActivity(MailSettings settings)
    {
        <span class="highlight-comment">// The [settings] parameter was injected into this activity</span>
        <span class="highlight-comment">// instance.  We'll save it to a local field so it will</span>
        <span class="highlight-comment">// be available to all of the activity methods.</span>

        <span class="highlight-keyword">this</span>.settings = settings;
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task SendMessageAsync(<span class="highlight-keyword">string</span> email, <span class="highlight-keyword">string</span> messageText)
    {
        <span class="highlight-keyword">var</span> smtp    = <span class="highlight-keyword">new</span> SmtpClient(settings.MailServer);   <span class="highlight-comment">// Connect using the injected settings</span>
        <span class="highlight-keyword">var</span> message = <span class="highlight-keyword">new</span> MailMessage(<span class="highlight-literal">"bot@my-company.com"</span>, email);

        message.Body = messageText;

        smtp.Send(message);
        <span class="highlight-keyword">await</span> Task.CompletedTask;
    }
}

[WorkflowInterface(TaskQueue = <span class="highlight-literal">"my-tasks"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IEmailWorkflow : IWorkflow
{
    [WorkflowMethod]
    Task SendMessagesAsync();
}

<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> Program
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">async</span> Task Main(<span class="highlight-keyword">string</span>[] args)
    {
        <span class="highlight-comment">// Configure the settings name such that they will be injected</span>
        <span class="highlight-comment">// into the email activity when it's constructed.</span>
        <span class="highlight-comment">// </span>
        <span class="highlight-comment">// Note that we did this before calling RegisterAssemblyAsync() below.</span>
        <span class="highlight-comment">// Dependencies added after activities have been registered will be</span>
        <span class="highlight-comment">// ignored.</span>

        NeonHelper.ServiceContainer.AddSingleton(<span class="highlight-keyword">typeof</span>(MailSettings), <span class="highlight-keyword">new</span> MailSettings() { MailServer = <span class="highlight-literal">"mail.my-company.com"</span> });

        <span class="highlight-comment">// Connect to Temporal</span>

        <span class="highlight-keyword">var</span> settings = <span class="highlight-keyword">new</span> TemporalSettings()
        {
            Namespace       = <span class="highlight-literal">"my-namespace"</span>,
            CreateNamespace = <span class="highlight-keyword">true</span>,
            HostPort        = <span class="highlight-literal">"localhost:7933"</span>
        };

        <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">await</span> TemporalClient.ConnectAsync(settings))
        {
            <span class="highlight-comment">// Create a worker and register the workflow and activity </span>
            <span class="highlight-comment">// implementations to let Temporal know we're open for business.</span>

            <span class="highlight-keyword">var</span> worker = <span class="highlight-keyword">await</span> client.NewWorkerAsync(<span class="highlight-keyword">new</span> WorkerOptions() { TaskQueue = <span class="highlight-literal">"my-tasks"</span> });

            <span class="highlight-keyword">await</span> worker.RegisterAssemblyAsync(Assembly.GetExecutingAssembly());
            <span class="highlight-keyword">await</span> worker.StartAsync();

            <span class="highlight-comment">// Invoke the workflow.</span>

            <span class="highlight-keyword">var</span> workflowStub = client.NewWorkflowStub&lt;IEmailWorkflow&gt;();

            <span class="highlight-keyword">await</span> workflowStub.SendMessagesAsync();
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABAAA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />See Also</span></div><div id="ID2RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Neon_Temporal.htm">Neon.Temporal</a></div></div></div></div><div id="pageFooter" class="pageFooter">Offline help available for Windows: <a href="neon.chm">neon.chm</a><br />
Report any issues at: <a href="https://github.com/nforgeio/neonKUBE">https://github.com/nforgeio/neonKUBE</a><p>Copyright (c) 2005-2020 by neonFORGE LLC.  All rights reserved.</p></div></body></html>