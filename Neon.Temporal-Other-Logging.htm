<html><head><!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-151329628-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-151329628-1');
</script>
<meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="styles/branding.css" /><link rel="stylesheet" type="text/css" href="styles/branding-en-US.css" /><script type="text/javascript" src="scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Logging</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="Neon.Temporal-Other-Logging" /><meta name="Description" content="It's a generally good idea to instrument your workflow and activity implementations by logging progress and errors. The Neon.Common package includes a homegrown logging solution that is already wired up by our Temporal client as the P:Neon.Temporal." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="styles/highlight.css" /><script type="text/javascript" src="scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="styles/branding-Website.css" /><script type="text/javascript" src="scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="scripts/branding-Website.js"></script><script type="text/javascript" src="scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Neon and neonKUBE class libraries and tools<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="Neon and neonKUBE class libraries and tools" tocid="roottoc">Neon and neonKUBE class libraries and tools</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Temporal-Overview.htm" title="Neon.Temporal" tocid="bf60a52e-b8ae-45f1-b652-e7170f6573cc">Neon.Temporal</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Temporal-Other-Logging.htm" title="Other topics" tocid="472e5557-b853-46b1-acc0-86b027a2ee6b">Other topics</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Other-Logging.htm" title="Logging" tocid="42d7a404-e508-4030-9a2b-8c44b61a3070">Logging</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Other-Serialization.htm" title="Data serialization" tocid="0d34f0bf-ad1b-4ce1-ad9b-9b70cc1b29d1">Data serialization</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Other-UnitTesting.htm" title="Unit testing" tocid="e5b8f3ca-e30d-4915-b9c3-2c630fca5b32">Unit testing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="6a2a88e2-7e4b-4ae5-a871-36ddb012ed04.htm" title="Java differences" tocid="6a2a88e2-7e4b-4ae5-a871-36ddb012ed04">Java differences</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-CrossPlatform.htm" title="Cross-platform" tocid="d5556812-b5b4-4aa4-93be-13a0a11458cf">Cross-platform</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="icons/Help.png" /></td><td class="titleColumn"><h1>Logging</h1></td></tr></table><span class="introStyle"></span> <div id="ID1RBSection" class="collapsibleSection"><p>
          It's a generally good idea to instrument your workflow and activity implementations by logging
          progress and errors.  The <strong>Neon.Common</strong> package includes a homegrown
          logging solution that is already wired up by our Temporal client as the <a href="P_Neon_Temporal_Workflow_Logger.htm">Logger</a>
          and <a href="P_Neon_Temporal_Activity_Logger.htm">Logger</a>
          properties.  These return an <a href="T_Neon_Diagnostics_INeonLogger.htm">INeonLogger</a>
          which also implements the <a href="T_Neon_Diagnostics_LogExtensions.htm">LogExtensions</a>.
        </p><p>
          Here's an example:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-keyword">using</span> System.Net.Mail;
<span class="highlight-keyword">using</span> System.Threading.Tasks;

<span class="highlight-keyword">using</span> Neon.Common;
<span class="highlight-keyword">using</span> Neon.Diagnostics;
<span class="highlight-keyword">using</span> Neon.Temporal;

[ActivityInterface(TaskQueue = <span class="highlight-literal">"my-tasks"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IEmailActivity : IActivity
{
    [ActivityMethod(Name = <span class="highlight-literal">"get-email-list"</span>)]
    Task&lt;List&lt;<span class="highlight-keyword">string</span>&gt;&gt; GetEmailListAsync();

    [ActivityMethod(Name = <span class="highlight-literal">"send-message"</span>)]
    Task SendMessageAsync(<span class="highlight-keyword">string</span> email, <span class="highlight-keyword">string</span> messageText);
}

[Activity(AutoRegister = <span class="highlight-keyword">true</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> EmailActivity : ActivityBase, IEmailActivity
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task&lt;List&lt;<span class="highlight-keyword">string</span>&gt;&gt; GetEmailListAsync()
    {
        <span class="highlight-keyword">try</span>
        {
            Activity.Logger.LogDebug(<span class="highlight-literal">"GetEmailListAsync: started"</span>);

            <span class="highlight-comment">// Pretend that this activity is querying a database or REST API to</span>
            <span class="highlight-comment">// obtain the email list.</span>

            <span class="highlight-keyword">var</span> list = <span class="highlight-keyword">new</span> List&lt;<span class="highlight-keyword">string</span>&gt;();

            list.Add(<span class="highlight-literal">"jeff@my-company.com"</span>);
            list.Add(<span class="highlight-literal">"jill@my-company.com"</span>);
            list.Add(<span class="highlight-literal">"jack@my-company.com"</span>);
            list.Add(<span class="highlight-literal">"nancy@my-company.com"</span>);

            <span class="highlight-keyword">return</span> <span class="highlight-keyword">await</span> Task.FromResult(list);
        }
        <span class="highlight-keyword">catch</span> (Exception e)
        {
            Activity.Logger.LogError(e);
            <span class="highlight-keyword">throw</span>;
        }
        <span class="highlight-keyword">finally</span>
        {
            Activity.Logger.LogDebug(<span class="highlight-literal">"GetEmailListAsync: finished"</span>);
        }
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task SendMessageAsync(<span class="highlight-keyword">string</span> email, <span class="highlight-keyword">string</span> messageText)
    {
        <span class="highlight-keyword">try</span>
        {
            Activity.Logger.LogDebug(<span class="highlight-literal">"SendMessageAsync: started"</span>);

            <span class="highlight-keyword">var</span> smtp = <span class="highlight-keyword">new</span> SmtpClient(<span class="highlight-literal">"mail.my-company.com"</span>);
            <span class="highlight-keyword">var</span> message = <span class="highlight-keyword">new</span> MailMessage(<span class="highlight-literal">"bot@my-company.com"</span>, email);

            message.Body = messageText;

            smtp.Send(message);
        }
        <span class="highlight-keyword">catch</span> (Exception e)
        {
            Activity.Logger.LogError(e);
            <span class="highlight-keyword">throw</span>;
        }
        <span class="highlight-keyword">finally</span>
        {
            Activity.Logger.LogDebug(<span class="highlight-literal">"SendMessageAsync: finished"</span>);
        }

        <span class="highlight-keyword">await</span> Task.CompletedTask;
    }
}

[WorkflowInterface(TaskQueue = <span class="highlight-literal">"my-tasks"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IEmailWorkflow : IWorkflow
{
    [WorkflowMethod]
    Task SendMessagesAsync();
}

[Workflow(AutoRegister = <span class="highlight-keyword">true</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> EmailWorkflow : WorkflowBase, IEmailWorkflow
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task SendMessagesAsync()
    {
        <span class="highlight-keyword">try</span>
        {
            Workflow.Logger.LogInfo(<span class="highlight-literal">"SendMessagesAsync: started"</span>);

            <span class="highlight-keyword">var</span> activityStub = Workflow.NewActivityStub&lt;IEmailActivity&gt;();
            <span class="highlight-keyword">var</span> emailList    = <span class="highlight-keyword">await</span> activityStub.GetEmailListAsync();

            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> email <span class="highlight-keyword">in</span> emailList)
            {
                <span class="highlight-keyword">await</span> activityStub.SendMessageAsync(email, <span class="highlight-literal">"This is a test message."</span>);
            }
        }
        <span class="highlight-keyword">catch</span> (Exception e)
        {
            Workflow.Logger.LogError(e);
            <span class="highlight-keyword">throw</span>;
        }
        <span class="highlight-keyword">finally</span>
        {
            Workflow.Logger.LogInfo(<span class="highlight-literal">"SendMessagesAsync: finished"</span>);
        }
    }
}

<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> Program
{
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> INeonLogger logger;

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">async</span> Task Main(<span class="highlight-keyword">string</span>[] args)
    {
        <span class="highlight-comment">// Initialize the logger.</span>

        LogManager.Default.SetLogLevel(<span class="highlight-literal">"info"</span>);

        logger = LogManager.Default.GetLogger(<span class="highlight-keyword">typeof</span>(Program));
        logger.LogInfo(<span class="highlight-literal">"Starting workflow service"</span>);

        <span class="highlight-keyword">try</span>
        {
            <span class="highlight-comment">// Connect to Temporal</span>

            <span class="highlight-keyword">var</span> settings = <span class="highlight-keyword">new</span> TemporalSettings()
            {
                Namespace       = <span class="highlight-literal">"my-namespace"</span>,
                CreateNamespace = <span class="highlight-keyword">true</span>,
                HostPort        = <span class="highlight-literal">"localhost:7933"</span>
            };

            <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">await</span> TemporalClient.ConnectAsync(settings))
            {
                <span class="highlight-comment">// Create a worker and register the workflow and activity </span>
                <span class="highlight-comment">// implementations to let Temporal know we're open for business.</span>

                <span class="highlight-keyword">var</span> worker = <span class="highlight-keyword">await</span> client.NewWorkerAsync();

                <span class="highlight-keyword">await</span> worker.RegisterAssemblyAsync(System.Reflection.Assembly.GetExecutingAssembly());
                <span class="highlight-keyword">await</span> worker.StartAsync();

                <span class="highlight-comment">// Spin forever, processing workflows and activities assigned by Temporal.</span>

                <span class="highlight-keyword">while</span> (<span class="highlight-keyword">true</span>)
                {
                    <span class="highlight-keyword">await</span> Task.Delay(TimeSpan.FromMinutes(<span class="highlight-number">5</span>));
                }
            }
        }
        <span class="highlight-keyword">catch</span> (Exception e)
        {
            logger.LogError(e);
        }
        <span class="highlight-keyword">finally</span>
        {
            logger.LogInfo(<span class="highlight-literal">"Exiting workflow service"</span>);
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACABAAA");</script><p>
          This is a simple workflow service implementation that sets the Neon logger log level to <strong>info</strong>,
          registers the workflow and activity implementations and then runs until the process is terminated.
        </p><p>
          The Neon logger writes logs to standard output in a semi-structured human readable format which is
          sutable for many execution environments, especially modern container oriented platforms like
          Docker and Kubernetes.  It is possible to replace our logger with a custom implementation.
        </p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />See Also</span></div><div id="ID2RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Neon_Temporal.htm">Neon.Temporal</a></div></div></div></div><div id="pageFooter" class="pageFooter">Offline help available for Windows: <a href="neon.chm">neon.chm</a><br />
Report any issues at: <a href="https://github.com/nforgeio/neonKUBE">https://github.com/nforgeio/neonKUBE</a><p>Copyright (c) 2005-2020 by neonFORGE, LLC.  All rights reserved.</p></div></body></html>