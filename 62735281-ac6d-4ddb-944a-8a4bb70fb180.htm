<html><head><!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-151329628-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-151329628-1');
</script>
<meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="styles/branding.css" /><link rel="stylesheet" type="text/css" href="styles/branding-en-US.css" /><script type="text/javascript" src="scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Java differences</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="62735281-ac6d-4ddb-944a-8a4bb70fb180" /><meta name="Description" content="Our initial .NET Cadence client implementation was modeled more closely to the Uber Cadence Go client and not the Java client." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link rel="stylesheet" type="text/css" href="styles/branding-Website.css" /><script type="text/javascript" src="scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="scripts/branding-Website.js"></script><script type="text/javascript" src="scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Neon and neonKUBE class libraries and tools<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="Neon and neonKUBE class libraries and tools" tocid="roottoc">Neon and neonKUBE class libraries and tools</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Cadence-Overview.htm" title="Neon.Cadence" tocid="6d30281d-dce4-492b-9d77-5ab3b9aeee9f">Neon.Cadence</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Cadence-Other-Logging.htm" title="Other Topics" tocid="a977254c-7001-4bee-8be0-9924d2b863f2">Other Topics</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Other-Logging.htm" title="Logging" tocid="907cf0a2-3f54-4c9f-a93f-3e54f5e2f806">Logging</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Other-Serialization.htm" title="Data serialization" tocid="41335d55-fbda-49f1-9187-fffeafb41352">Data serialization</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Other-UnitTesting.htm" title="Unit testing" tocid="824a3ec2-5cc2-4fe8-94c1-1038ffbdc5e2">Unit testing</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="62735281-ac6d-4ddb-944a-8a4bb70fb180.htm" title="Java differences" tocid="62735281-ac6d-4ddb-944a-8a4bb70fb180">Java differences</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-CrossPlatform.htm" title="Cross-platform" tocid="b6a8a730-6e6c-4ff4-81b2-d70d22f00fdc">Cross-platform</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="icons/Help.png" /></td><td class="titleColumn"><h1>Java differences</h1></td></tr></table><span class="introStyle"></span> <div id="ID0RBSection" class="collapsibleSection"><p>
          Our initial .NET Cadence client implementation was modeled more closely to the Uber Cadence Go client
          and not the Java client.  We discussed this with Maxim and he convinced us that we really should use
          Java as the standard because it's better and it's hard to argue with better.  So we did an extensive
          top-to-bottom refactoring and ended up with something we're pretty happy with.
        </p><p>
          We did want to embrace some .NET capabilies like <span class="code">async/await</span> that are not
          present in the Java world.  We also made a few changes that align with our underlying implementation
          (which pxoxies a Cadence Go client).  So there are some differences, but we tried pretty hard to keep
          the spirit of the Java client alive.  This page outlines the more important differences.
        </p><div class="tableSection"><table><tr><td><p><strong>async/await</strong></p></td><td><p>
                The .NET Cadence client follows the modern C# task conventions by taking advantage of <span class="code">async/await</span>.
                This can dramatically reduce the number of threads required to execute workflows and activities improving scalability.
                As a consequence, we've appended <strong>Async</strong> to many our method names, following the .NET convention.
                We have kept the root Java names though, where they make sense.
              </p></td></tr><tr><td><p><strong>PascalCase</strong></p></td><td><p>
                We followed the .NET convention and renamed the API methods to be PascalCase.
              </p></td></tr><tr><td><p><strong>properties</strong></p></td><td><p>
                .NET langauges like C# and Visual Basic support properties as first class language elements.  The .NET client
                exposes properties rather than duplicating the Java <span class="code">getXXX()/setXXX()</span> convention.
              </p></td></tr><tr><td><p><strong>native Types</strong></p></td><td><p>
                We use native .NET types like <span class="code">TimeSpan</span> and <span class="code">DateTime</span>
                rather than porting the corresponding Java types.
              </p></td></tr><tr><td><p><a href="T_Neon_Cadence_CadenceClient.htm">CadenceClient</a></p></td><td><p>
                We've combined that capabilities of the Java <span class="code">IServiceClient</span> and <span class="code">WorkflowClient</span>
                types into our <a href="T_Neon_Cadence_CadenceClient.htm">CadenceClient</a> class.  This class
                is disposable, following .NET conventions and we added <a href="T_Neon_Cadence_CadenceSettings.htm">CadenceSettings</a>
                which is used to configure a Cadence client.  These settings can be easily deserialized from JSON or YAML which is handy when
                loading your workflow service configuration from a file (e.g. a Kubernetes pod config).
              </p></td></tr><tr><td><p><strong>registration</strong></p></td><td><p>
                The Java client does not require that workflow and activity implementations be registered before use
                (which is nice).  The .NET client follows the Go client convention and requires registration.
              </p></td></tr><tr><td><p><strong>ambient globals</strong></p></td><td><p>
                The Java client uses thread-local storage to expose the static <span class="code">Workflow</span> class
                to threads executing workflows and <span class="code">Activity</span> to threads executing activities.
                These classes return values and perform operations for the workflow or activity associated with the
                thread.  For workflows we use <a href="https://docs.microsoft.com/dotnet/api/system.threading.asynclocal-1" target="_blank">AsyncLocal<span id="LSTF640B17_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF640B17_0?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF640B17_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF640B17_1?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
                internally to implement the <span class="code">static</span><a href="P_Neon_Cadence_Workflow_Current.htm">Current</a>
                property.  This will be set when your workflow code is invoked and will be available within your workflow
                class as well as any code your workflow calls.  This works because workflows are prohibited from starting
                additional threads.
              </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" />Â Note</th></tr><tr><td><p>
                  Code within your workflow class can also reference this state via this shortcut: 
                  <a href="P_Neon_Cadence_WorkflowBase_Workflow.htm">Workflow</a></p></td></tr></table></div><p>
                We did not implement a similar ambient property for activities because activities are allowed to
                spin up threads and <a href="https://docs.microsoft.com/dotnet/api/system.threading.asynclocal-1" target="_blank">AsyncLocal<span id="LSTF640B17_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF640B17_2?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF640B17_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF640B17_3?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
                won't work as expected for activities that create threads.
              </p><p>
                So instead we require that workflow implementations derive from <a href="T_Neon_Cadence_WorkflowBase.htm">WorkflowBase</a>
                and activity implementations derive from <a href="T_Neon_Cadence_ActivityBase.htm">ActivityBase</a>.
                <span class="code">WorkflowBase</span> exposes the <a href="P_Neon_Cadence_WorkflowBase_Workflow.htm">Workflow</a>
                property and <span class="code">ActivityBase</span> exposes the <a href="P_Neon_Cadence_ActivityBase_Activity.htm">Activity</a>
                property.  These perform the same functions as the corresponding Java types and will look pretty much the same in
                your workflow code to boot.
              </p></td></tr><tr><td><p><strong>activity instances</strong></p></td><td><p>
                The Java client creates only a single instance of an activity class for each activity implementation and 
                requires that developers take care to ensure that their activity code is thread-safe.  The .NET implementation
                constructs a distinct activity class instance for every activity invoked.  This is a consequence of exposing
                the <a href="P_Neon_Cadence_ActivityBase_Activity.htm">Activity</a>
                property with per-actvity invocation properties and methods.  We also believe this is nicer.
              </p></td></tr><tr><td><p><strong>optional arguments</strong></p></td><td><p>
                C# and Visual Basic support optional arguments.  Many of our APIs take advantage of this to simplify
                the API surface area.
              </p></td></tr><tr><td><p><strong>nullable types</strong></p></td><td><p>
                Java and Go types like strings and classes aren't implicitly nullable whereas these are nullable
                in .NET languages.  Java and Go deal with this by using wrapper types in some situations.  The
                .NET client uses the .NET capabilities to simplify some of these types.
              </p></td></tr><tr><td><p><strong>default domain</strong></p></td><td><p>
                The .NET client can optionally be configured with a default Cadence domain and this domain
                will be assumed when the domain isn't specified for an operation.  We added this as a convienence
                for the common situation where all workflow service operations are constrained to a single domain.
              </p></td></tr><tr><td><p><strong>unit testing</strong></p></td><td><p>
                The .NET client doesn't currently provide an in-memory implementation that can be
                used for intensive workflow unit testing.  This is something we'll be adding in the
                future.  In the meantime, we do have the <a href="T_Neon_Xunit_Cadence_CadenceFixture.htm">CadenceFixture</a>
                which can be used to run unit tests against a real Cadence service running locally
                as a Docker container.
              </p></td></tr><tr><td><p><strong>workflow queues</strong></p></td><td><p>
                I suspect that the .NET <a href="T_Neon_Cadence_WorkflowQueue_1.htm">WorkflowQueue<span id="LSTF640B17_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF640B17_4?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF640B17_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF640B17_5?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> class
                is less capable than the Java equivalant, but the Java class isn't really documented.  The .NET class is designed
                for just two scenarios:
              </p><ul><li><p>
                    Signal processing: Signal methods can write items to a queue for the workflow method to read.
                  </p></li><li><p>
                    Workflow queues: Workflow methods and read and write items to queues.
                  </p></li></ul><p>
                .NET queues cannot be shared across different workflows or between a workflow and its activities.
              </p></td></tr><tr><td><p><strong>data converters</strong></p></td><td><p>
                The Java client supports custom data converters for specific workflows and activities as well as
                for the client.  .NET currently supports custom converters at the client level.  This is something
                we may add in the future.
              </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />See Also</span></div><div id="ID1RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Neon_Cadence.htm">Neon.Cadence</a></div></div></div></div><div id="pageFooter" class="pageFooter">Offline help available for Windows: <a href="neon.chm">neon.chm</a><br />
Report any issues at: <a href="https://github.com/nforgeio/neonKUBE">https://github.com/nforgeio/neonKUBE</a><p>Copyright (c) 2005-2020 by neonFORGE, LLC.  All rights reserved.</p></div></body></html>