<html><head><!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-151329628-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-151329628-1');
</script>
<meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="styles/branding.css" /><link rel="stylesheet" type="text/css" href="styles/branding-en-US.css" /><script type="text/javascript" src="scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Continue as new</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="Neon.Cadence-Activity-ContinueAsNew" /><meta name="Description" content="A common pattern is to deploy a workflow business instance for important business entities and have these run continuously there after. For example, you could implement a customer engagement workflow and then execute an instance for every customer." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="styles/highlight.css" /><script type="text/javascript" src="scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="styles/branding-Website.css" /><script type="text/javascript" src="scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="scripts/branding-Website.js"></script><script type="text/javascript" src="scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Neon and neonKUBE class libraries and tools<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="Neon and neonKUBE class libraries and tools" tocid="roottoc">Neon and neonKUBE class libraries and tools</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Cadence-Overview.htm" title="Neon.Cadence" tocid="5a2f1b06-c0d2-4e7b-82b8-39c0ae16321a">Neon.Cadence</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Cadence-Workflow-CodingRules.htm" title="Workflow details" tocid="4753b4d2-994e-429c-aad3-0b9d9e45c0fb">Workflow details</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-CodingRules.htm" title="Coding Rules" tocid="47a2af19-5f1f-4c5f-853e-88d9bc439d5f">Coding Rules</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-IDsExecutions.htm" title="IDs &amp; Executions" tocid="03749f45-4d19-4f65-8aeb-6e24162efdf0">IDs &amp; Executions</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-Scheduling.htm" title="Timeouts" tocid="61af6a0e-5dff-420c-826e-007977c8ecb3">Timeouts</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-ChildWorkflows.htm" title="Child Workflows" tocid="cd6968a4-2e65-48fb-ad94-bb11e19d3b71">Child Workflows</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-GettingStarted-Parallel.htm" title="Parallel Operations" tocid="0cc6a07b-e6d4-4840-9e61-aa8026a26ad4">Parallel Operations</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-Options.htm" title="Options" tocid="28e276cd-ad5b-4194-928f-14d8a42a8958">Options</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-Queries.htm" title="Queries" tocid="9dad47bc-7aa4-4979-9a5b-c68d10b230a7">Queries</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-SignalsQueues.htm" title="Signals &amp; Queues" tocid="10a488d2-0ed5-4689-b558-35dcd318889b">Signals &amp; Queues</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Activity-ContinueAsNew.htm" title="Continue as new" tocid="46fb345e-f0fa-4b5e-a67c-ae6f5800d4e9">Continue as new</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-CRON.htm" title="CRON" tocid="5b5de994-c9ca-4c5b-bc8b-85b373d66822">CRON</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="icons/Help.png" /></td><td class="titleColumn"><h1>Continue as new</h1></td></tr></table><span class="introStyle"></span> <div id="ID1RBSection" class="collapsibleSection"><p>
          A common pattern is to deploy a workflow business instance for important business
          entities and have these run continuously there after.  For example, you could implement
          a customer engagement workflow and then execute an instance for every customer.  The
          workflow could wake up every so often, query the status of customer and then send
          marketing emails or TEXT messages as appropriate.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAGABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAGABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAGABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAGABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CustomerInfo
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">long</span>         Id { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span>       Email { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    <span class="highlight-keyword">public</span> DateTime     SignupTimeUtc { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span>         WelcomeSent { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    <span class="highlight-keyword">public</span> DateTime?    LastMarketingPingUtc { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
}

[ActivityInterface(TaskList = <span class="highlight-literal">"my-tasks"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> ICustomerActivities : IActivity
{
    [ActivityMethod(Name = <span class="highlight-literal">"get-customer-info"</span>)]
    Task&lt;CustomerInfo&gt; GetCustomerInfo(<span class="highlight-keyword">long</span> id);

    [ActivityMethod(Name = <span class="highlight-literal">"save-customer"</span>)]
    Task UpdateCustomerInfo(CustomerInfo customer);

    [ActivityMethod(Name = <span class="highlight-literal">"send-email"</span>)]
    Task SendEmail(<span class="highlight-keyword">string</span> email, <span class="highlight-keyword">string</span> message);
}

[Activity]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CustomerActivities : ActivityBase, ICustomerActivities
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task&lt;CustomerInfo&gt; GetCustomerInfo(<span class="highlight-keyword">long</span> id)
    {
        <span class="highlight-comment">// Pretend that we're getting this from a database.</span>

        <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> CustomerInfo()
        {
            Id                   = id,
            Email                = <span class="highlight-literal">"jeff@my-company.com"</span>,
            SignupTimeUtc        = <span class="highlight-keyword">new</span> DateTime(<span class="highlight-number">2019</span>, <span class="highlight-number">11</span>, <span class="highlight-number">18</span>, <span class="highlight-number">11</span>, <span class="highlight-number">4</span>,<span class="highlight-number">0</span> , DateTimeKind.Utc),
            WelcomeSent          = <span class="highlight-keyword">false</span>,
            LastMarketingPingUtc = <span class="highlight-keyword">null</span>
        };
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task UpdateCustomerInfo(CustomerInfo customer)
    {
        <span class="highlight-comment">// Pretend that we're persisting the customer to a database.</span>
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task SendEmail(<span class="highlight-keyword">string</span> email, <span class="highlight-keyword">string</span> message)
    {
        <span class="highlight-comment">// Pretend that we're sending an email here.</span>
    }
}

[WorkflowInterface(TaskList = <span class="highlight-literal">"my-tasks"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IEngagementWorkflow : IWorkflow
{
    [WorkflowMethod]
    Task RunAsync(<span class="highlight-keyword">long</span> customerId);
}

[Workflow(AutoRegister = <span class="highlight-keyword">true</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> EngagementWorkflow : WorkflowBase, IEngagementWorkflow
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task RunAsync(<span class="highlight-keyword">long</span> customerId)
    {
        <span class="highlight-keyword">var</span> stub = Workflow.NewActivityStub&lt;ICustomerActivities&gt;();

        <span class="highlight-keyword">while</span> (<span class="highlight-keyword">true</span>)
        {
            <span class="highlight-keyword">var</span> customer = <span class="highlight-keyword">await</span> stub.GetCustomerInfo(customerId);
            <span class="highlight-keyword">var</span> utcNow   = <span class="highlight-keyword">await</span> Workflow.UtcNowAsync();

            <span class="highlight-keyword">if</span> (!customer.WelcomeSent)
            {
                <span class="highlight-keyword">await</span> stub.SendEmail(customer.Email, <span class="highlight-literal">"Welcome to our amazing service!"</span>);
                customer.WelcomeSent = <span class="highlight-keyword">true</span>;
                <span class="highlight-keyword">await</span> stub.UpdateCustomerInfo(customer);
            }
            <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (!customer.LastMarketingPingUtc.HasValue || 
                     customer.LastMarketingPingUtc.Value - utcNow &gt;= TimeSpan.FromDays(<span class="highlight-number">7</span>))
            {
                <span class="highlight-keyword">await</span> stub.SendEmail(customer.Email, <span class="highlight-literal">"Weekly email bugging you to buy something!"</span>);
                customer.LastMarketingPingUtc = utcNow;
                <span class="highlight-keyword">await</span> stub.UpdateCustomerInfo(customer);
            }

            <span class="highlight-keyword">await</span> Workflow.SleepAsync(TimeSpan.FromMinutes(<span class="highlight-number">30</span>));
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAGABAAA");</script><p>
          This example defines an activity that can read/write a customer record and can
          send an email and then implements a simple customer engagement workflow that sends
          a welcome email to the customer when one hasn't been sent yet and then sends
          a marketing message every seven days.  The workflow is coded as a loop that
          sleeps for 30 minutes between iterations.
        </p><p>
          Although this will work, looping like this is a bad practice.  The problem is that
          Cadence records each of the activity calls as well as the sleep operation to the
          workflow history.  This workflow is designed to run indefinitely which means the
          history is going to grow without bounds.  Cadence can support histories with 100K+
          items, but you really should avoid huge histories whenever possible because:
        </p><ul><li><p>Eventually you'll reach the history limit and your workflow will stop working.</p></li><li><p>Rescheduled workflows will need to replay the history which could take a while to complete.</p></li><li><p>Large histories are going stress all parts of the system including Cadence server, Cassandra, and your workflow services.</p></li></ul><p>
          Cadence provides a way around this called <strong>continue as new</strong>.  The idea
          is to have the workflow indicate that should continue as a new run.  Cadence responds by starting
          a new workflow run with the same workflow ID but with a new run ID.  Here's an example:      
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EABABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[Workflow(AutoRegister = <span class="highlight-keyword">true</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> EngagementWorkflow : WorkflowBase, IEngagementWorkflow
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task RunAsync(<span class="highlight-keyword">long</span> customerId)
    {
        <span class="highlight-keyword">var</span> stub     = Workflow.NewActivityStub&lt;ICustomerActivities&gt;();
        <span class="highlight-keyword">var</span> customer = <span class="highlight-keyword">await</span> stub.GetCustomerInfo(customerId);
        <span class="highlight-keyword">var</span> utcNow   = <span class="highlight-keyword">await</span> Workflow.UtcNowAsync();

        <span class="highlight-keyword">if</span> (!customer.WelcomeSent)
        {
            <span class="highlight-keyword">await</span> stub.SendEmail(customer.Email, <span class="highlight-literal">"Welcome to our amazing service!"</span>);
            customer.WelcomeSent = <span class="highlight-keyword">true</span>;
            <span class="highlight-keyword">await</span> stub.UpdateCustomerInfo(customer);
        }
        <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (!customer.LastMarketingPingUtc.HasValue ||
                 customer.LastMarketingPingUtc.Value - utcNow &gt;= TimeSpan.FromDays(<span class="highlight-number">7</span>))
        {
            <span class="highlight-keyword">await</span> stub.SendEmail(customer.Email, <span class="highlight-literal">"Weekly email bugging you to buy something!"</span>);
            customer.LastMarketingPingUtc = utcNow;
            <span class="highlight-keyword">await</span> stub.UpdateCustomerInfo(customer);
        }

        <span class="highlight-keyword">await</span> Workflow.SleepAsync(TimeSpan.FromMinutes(<span class="highlight-number">30</span>));
        <span class="highlight-keyword">await</span> Workflow.ContinueAsNewAsync(customerId);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABABAAA");</script><p>
          We've refactored the workflow by removing the loop and replacing it with a call to 
          <a href="Overload_Neon_Cadence_Workflow_ContinueAsNewAsync.htm">ContinueAsNewAsync</a>,
          passing the original arguments to the new run.  Cadence will start a new workflow run,
          replacing the loop and also restarting the workflow history.
        </p></div></div></div><div id="pageFooter" class="pageFooter">Offline help available for Windows: <a href="neon.chm">neon.chm</a><br />
Report any issues at: <a href="https://github.com/nforgeio/neonKUBE">https://github.com/nforgeio/neonKUBE</a><p>Copyright (c) 2016-2019 by neonFORGE, LLC.  All rights reserved.</p></div></body></html>