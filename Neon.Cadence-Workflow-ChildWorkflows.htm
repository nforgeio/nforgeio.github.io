<html><head><!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-151329628-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-151329628-1');
</script>
<meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="styles/branding.css" /><link rel="stylesheet" type="text/css" href="styles/branding-en-US.css" /><script type="text/javascript" src="scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Child workflows</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="Neon.Cadence-Workflow-ChildWorkflows" /><meta name="Description" content="Cadence lets workflows call other workflows. These are known as child workflows. The example below shows how to do this:" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="styles/highlight.css" /><script type="text/javascript" src="scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="styles/branding-Website.css" /><script type="text/javascript" src="scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="scripts/branding-Website.js"></script><script type="text/javascript" src="scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Neon and neonKUBE class libraries and tools<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="Neon and neonKUBE class libraries and tools" tocid="roottoc">Neon and neonKUBE class libraries and tools</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Cadence-Overview.htm" title="Neon.Cadence" tocid="12b8a5ee-8e07-459c-9bd9-1accb378eee9">Neon.Cadence</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Cadence-Workflow-CodingRules.htm" title="Workflow details" tocid="102d291f-fc8c-44b3-b293-19b02ad31905">Workflow details</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-CodingRules.htm" title="Coding Rules" tocid="47a2af19-5f1f-4c5f-853e-88d9bc439d5f">Coding Rules</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-IDsExecutions.htm" title="IDs &amp; executions" tocid="03749f45-4d19-4f65-8aeb-6e24162efdf0">IDs &amp; executions</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-Scheduling.htm" title="Timeouts" tocid="61af6a0e-5dff-420c-826e-007977c8ecb3">Timeouts</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-ChildWorkflows.htm" title="Child workflows" tocid="cd6968a4-2e65-48fb-ad94-bb11e19d3b71">Child workflows</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-GettingStarted-Parallel.htm" title="Parallel operations" tocid="0cc6a07b-e6d4-4840-9e61-aa8026a26ad4">Parallel operations</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-Options.htm" title="Options" tocid="28e276cd-ad5b-4194-928f-14d8a42a8958">Options</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-Queries.htm" title="Queries" tocid="9dad47bc-7aa4-4979-9a5b-c68d10b230a7">Queries</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-SignalQueues.htm" title="Signals &amp; queues" tocid="10a488d2-0ed5-4689-b558-35dcd318889b">Signals &amp; queues</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-SyncSignals.htm" title="Synchronous signals" tocid="4b5b88c8-3d86-442b-8015-9aef7f624df0">Synchronous signals</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Activity-ContinueAsNew.htm" title="Continue as new" tocid="46fb345e-f0fa-4b5e-a67c-ae6f5800d4e9">Continue as new</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-CRON.htm" title="Distributed CRON" tocid="5b5de994-c9ca-4c5b-bc8b-85b373d66822">Distributed CRON</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="icons/Help.png" /></td><td class="titleColumn"><h1>Child workflows</h1></td></tr></table><span class="introStyle"></span> <div id="ID1RBSection" class="collapsibleSection"><p>
          Cadence lets workflows call other workflows.  These are known as <strong>child workflows</strong>.
          The example below shows how to do this:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[ActivityInterface(TaskList = <span class="highlight-literal">"my-tasks"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IEmailActivity : IActivity
{
    [ActivityMethod(Name = <span class="highlight-literal">"get-email-list"</span>)]
    Task&lt;List&lt;<span class="highlight-keyword">string</span>&gt;&gt; GetEmailListAsync();

    [ActivityMethod(Name = <span class="highlight-literal">"send-message"</span>)]
    Task SendMessageAsync(<span class="highlight-keyword">string</span> email, <span class="highlight-keyword">string</span> messageText);
}

[Activity(AutoRegister = <span class="highlight-keyword">true</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> EmailActivity : ActivityBase, IEmailActivity
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task&lt;List&lt;<span class="highlight-keyword">string</span>&gt;&gt; GetEmailListAsync()
    {
        <span class="highlight-comment">// Pretend that this activity is querying a database or REST API to</span>
        <span class="highlight-comment">// obtain the email list.</span>

        <span class="highlight-keyword">var</span> list = <span class="highlight-keyword">new</span> List&lt;<span class="highlight-keyword">string</span>&gt;();

        list.Add(<span class="highlight-literal">"jeff@my-company.com"</span>);
        list.Add(<span class="highlight-literal">"jill@my-company.com"</span>);
        list.Add(<span class="highlight-literal">"jack@my-company.com"</span>);
        list.Add(<span class="highlight-literal">"nancy@my-company.com"</span>);

        <span class="highlight-keyword">return</span> <span class="highlight-keyword">await</span> Task.FromResult(list);
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task SendMessageAsync(<span class="highlight-keyword">string</span> email, <span class="highlight-keyword">string</span> messageText)
    {
        <span class="highlight-keyword">var</span> smtp = <span class="highlight-keyword">new</span> SmtpClient(<span class="highlight-literal">"mail.my-company.com"</span>);
        <span class="highlight-keyword">var</span> message = <span class="highlight-keyword">new</span> MailMessage(<span class="highlight-literal">"bot@my-company.com"</span>, email);

        message.Body = messageText;

        smtp.Send(message);
    }
}

[WorkflowInterface(TaskList = <span class="highlight-literal">"my-tasks"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IEmailWorkflow : IWorkflow
{
    [WorkflowMethod]
    Task SendMessagesAsync();
}

[Workflow(AutoRegister = <span class="highlight-keyword">true</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> EmailWorkflow : WorkflowBase, IEmailWorkflow
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task SendMessagesAsync()
    {
        <span class="highlight-keyword">var</span> activityStub = Workflow.NewActivityStub&lt;IEmailActivity&gt;();
        <span class="highlight-keyword">var</span> emailList    = <span class="highlight-keyword">await</span> activityStub.GetEmailListAsync();

        <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> email <span class="highlight-keyword">in</span> emailList)
        {
            <span class="highlight-keyword">await</span> activityStub.SendMessageAsync(email, <span class="highlight-literal">"This is a test message."</span>);
        }
    }
}

[WorkflowInterface(TaskList = <span class="highlight-literal">"my-tasks"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IParentWorkfow : IWorkflow
{
    [WorkflowMethod]
    Task DoEmailingAsync(<span class="highlight-keyword">string</span> adminEmail);
}

[Workflow(AutoRegister = <span class="highlight-keyword">true</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> ParentWorkflow : WorkflowBase, IParentWorkfow
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task DoEmailingAsync(<span class="highlight-keyword">string</span> adminEmail)
    {
        <span class="highlight-keyword">var</span> childStub    = Workflow.NewChildWorkflowStub&lt;IEmailWorkflow&gt;();
        <span class="highlight-keyword">var</span> activityStub = Workflow.NewActivityStub&lt;IEmailActivity&gt;();

        <span class="highlight-keyword">await</span> childStub.SendMessagesAsync();
        <span class="highlight-keyword">await</span> activityStub.SendMessageAsync(adminEmail, <span class="highlight-literal">"All emails were sent."</span>);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACABAAA");</script><p>
          This sample defines an activity and two workflows: <span class="code">IEmailActivity</span>,
          <span class="code">IEmailWorkflow</span>, and <span class="code">IParentWorkfow</span>.  The parent
          workflow calls <span class="code">IEmailActivity</span> as a child workflow which uses the activity
          to send emails.  Then after the child workflow is finished, the parent workflow calls the activity
          to send an email to the administrator indicating that the operation is complete.
        </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            The <a href="P_Neon_Cadence_WorkflowBase_Workflow.htm">Workflow</a> property
            inherited by all workflow classes provides access to lots of workflow related functionality including logging,
            child workflow and activity stub creation, workflow version management as well as workflow-safe utilities
            for time/sleep, UUIDs, random numbers, etc.
          </p><p>
            These same capabilities are available in code outside of the workflow class via the
            <a href="P_Neon_Cadence_Workflow_Current.htm">Current</a> property.
            Note that this property is implemented internally via <a href="https://docs.microsoft.com/dotnet/api/system.threading.asynclocal-1" target="_blank">AsyncLocal<span id="LST3C4A6BE1_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3C4A6BE1_0?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST3C4A6BE1_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3C4A6BE1_1?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.
            This makes it possible to implement workflow libraries. 
          </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />See Also</span></div><div id="ID2RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Neon_Cadence.htm">Neon.Cadence</a></div></div></div></div><div id="pageFooter" class="pageFooter">Offline help available for Windows: <a href="neon.chm">neon.chm</a><br />
Report any issues at: <a href="https://github.com/nforgeio/neonKUBE">https://github.com/nforgeio/neonKUBE</a><p>Copyright (c) 2005-2020 by neonFORGE LLC.  All rights reserved.</p></div></body></html>