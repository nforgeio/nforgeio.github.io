<html><head><!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-151329628-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-151329628-1');
</script>
<meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="styles/branding.css" /><link rel="stylesheet" type="text/css" href="styles/branding-en-US.css" /><script type="text/javascript" src="scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Basic workflow</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="Neon.Temporal-GettingStarted-BasicWorkflow" /><meta name="Description" content=".NET Temporal workflows are defined by an interface and then implemented as a class. We'll start out with a simple HelloWorld console application targeting .NET Core or .NET Framework and adding references to the Neon.Temporal and Neon." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="styles/highlight.css" /><script type="text/javascript" src="scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="styles/branding-Website.css" /><script type="text/javascript" src="scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="scripts/branding-Website.js"></script><script type="text/javascript" src="scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Neon and neonKUBE class libraries and tools<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="Neon and neonKUBE class libraries and tools" tocid="roottoc">Neon and neonKUBE class libraries and tools</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Temporal-Overview.htm" title="Neon.Temporal" tocid="8285396a-d147-4095-beff-81eb5db870db">Neon.Temporal</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Temporal-GettingStarted-BasicWorkflow.htm" title="Getting started" tocid="baeae999-e230-4c0b-b302-c9f42d12b0b2">Getting started</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-GettingStarted-BasicWorkflow.htm" title="Basic workflow" tocid="71ca278a-dfb2-450f-965b-c5bc373538e1">Basic workflow</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-GettingStarted-BasicActivity.htm" title="Basic activity" tocid="a5cdc2a2-6f6d-4717-b2a4-deeefb8d55e6">Basic activity</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-GettingStarted-MultiStepWorkflows.htm" title="Multi-step workflows" tocid="4d8eef4e-c18c-4de6-9d22-dec9c1bfa586">Multi-step workflows</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-GettingStarted-Samples.htm" title="Temporal samples" tocid="509a142d-94b5-4bf5-ad04-0863b3209e7b">Temporal samples</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Activity-DendencyInjection.htm" title="Dependency Injection" tocid="f90ba0cc-4ae6-4b65-9e0e-fcd1e29eff9f">Dependency Injection</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="icons/Help.png" /></td><td class="titleColumn"><h1>Basic workflow</h1></td></tr></table><span class="introStyle"></span> <div id="ID1RBSection" class="collapsibleSection"><p>
          .NET Temporal workflows are defined by an <span class="code">interface</span> and then implemented
          as a <span class="code">class</span>.  We'll start out with a simple <strong>HelloWorld</strong>
          console application targeting .NET Core or .NET Framework and adding references to the 
          <strong>Neon.Temporal</strong> and <strong>Neon.Common</strong> nuget packages.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAMABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAMABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAMABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAMABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-keyword">using</span> System.Threading.Tasks;

<span class="highlight-keyword">using</span> Neon.Common;
<span class="highlight-keyword">using</span> Neon.Temporal;

<span class="highlight-keyword">namespace</span> HelloWorld
{
    [WorkflowInterface(TaskQueue = <span class="highlight-literal">"my-tasks"</span>)]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IHelloWorkflow : IWorkflow
    {
        [WorkflowMethod]
        Task&lt;<span class="highlight-keyword">string</span>&gt; HelloAsync(<span class="highlight-keyword">string</span> name);
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> HelloWorkflow : WorkflowBase, IHelloWorkflow
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task&lt;<span class="highlight-keyword">string</span>&gt; HelloAsync(<span class="highlight-keyword">string</span> name)
        {
            <span class="highlight-keyword">return</span> <span class="highlight-keyword">await</span> Task.FromResult($<span class="highlight-literal">"Hello {name}!"</span>);
        }
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> Program
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">async</span> Task Main(<span class="highlight-keyword">string</span>[] args)
        {
            <span class="highlight-comment">// Connect to Temporal</span>

            <span class="highlight-keyword">var</span> settings = <span class="highlight-keyword">new</span> TemporalSettings()
            {
                Namespace       = <span class="highlight-literal">"my-namespace"</span>,
                CreateNamespace = <span class="highlight-keyword">true</span>,
                HostPort        = <span class="highlight-literal">"localhost:7933"</span>
            };

            <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">await</span> TemporalClient.ConnectAsync(settings))
            {
                <span class="highlight-comment">// Create a worker and register the workflow and activity </span>
                <span class="highlight-comment">// implementations to let Temporal know we're open for business.</span>

                <span class="highlight-keyword">var</span> worker = <span class="highlight-keyword">await</span> client.NewWorkerAsync();

                <span class="highlight-keyword">await</span> worker.RegisterWorkflowAsync&lt;HelloWorkflow&gt;();
                <span class="highlight-keyword">await</span> worker.StartAsync();

                <span class="highlight-comment">// Invoke your workflow.</span>

                <span class="highlight-keyword">var</span> stub = client.NewWorkflowStub&lt;IHelloWorkflow&gt;();

                Console.WriteLine(<span class="highlight-keyword">await</span> stub.HelloAsync(<span class="highlight-literal">"Jeff"</span>));
            }
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAMABAAA");</script><p>
          Here we define <span class="code">IHelloWorkflow</span> which defines the <span class="code">HelloAsync</span> 
          workflow method which implements your workflow.  Workflow interfaces have a couple requirements:
        </p><ul><li><p>Workflow interfaces need to inherit <a href="T_Neon_Temporal_IWorkflow.htm">IWorkflow</a></p></li><li><p>All workflow interface methods must be <span class="code">async</span></p></li></ul><p>
          The <a href="T_Neon_Temporal_WorkflowInterfaceAttribute.htm">WorkflowInterfaceAttribute</a> is optional
          but can be used to specify workflow related options.  In this example, we're indicating that the workflow will be registered
          with Temporal in the <strong>my-tasks</strong> task queue (we'll be discussing task queues in depth later).  All workflow 
          implementations must inherit <a href="T_Neon_Temporal_WorkflowBase.htm">WorkflowBase</a>
          and also implement the workflow interface you defined.
        </p><p>
          Next, we define the <strong>HelloWorkflow</strong><span class="code">class</span> that actually implements
          the workflow.  In this case, the <span class="code">HelloAsync()</span> workflow method simply returns a string value.
          We tag the method with a <a href="T_Neon_Temporal_WorkflowMethodAttribute.htm">WorkflowMethodAttribute</a>
          to indicate that it's a workflow entry point.
        </p><p>
          The example above is coded as a basic console application with the <span class="code">Main()</span> method:
        </p><ol><li><p>
              Initializes the connection settings to connect Temporal running on the local machine, configuring <strong>my-namespace</strong>
              as the default namespace where your workflows and activities will be registered and run, and indicating that the default namespace
              should be created when it doesn't already exist (handy for testing).
            </p></li><li><p>Establishes a connection to Temporal.</p></li><li><p>Registers the workflow implementation.</p></li><li><p>
              Starts the workflow worker.  This informs Temporal that you've finished registering workflow and activity implementations
              and your workflow service is ready to be assigned tasks by Temporal within the <strong>my-tasks</strong> task queue.
            </p></li><li><p>
              Creates a type-safe stub that implements the specified workflow interface such that calling the method actually
              executes the workflow.  The program then calls the stub's <span class="code">HelloAsync()</span> method and 
              prints the result to the console.
            </p></li></ol><p>
          Running a workflow really couldn't be much simpler.  Here's what's happening under the covers:
        </p><ol><li><p>
              The stub <span class="code">HelloAsync()</span> method tells the Temporal server to start the workflow,
              with any arguments passed.  Note that the stub method doesn't return until the the workflow completes.
            </p></li><li><p>
              Temporal receives this requests and persists the details to Cassandra for reliability and then 
              looks for a workflow service that is registered for <strong>my-tasks</strong>.
            </p></li><li><p>
              Temporal will see that our sample application has registered itself and will schedule the workflow
              to be executed by our application.
            </p></li><li><p>
              The application's <a href="T_Neon_Temporal_TemporalClient.htm">TemporalClient</a>
              receives the workflow execution request from Temporal, instantiates an instance of the <span class="code">HelloWorkflow</span>
              workflow class and then calls the <span class="code">HelloAsync()</span> method.
            </p></li><li><p><span class="code">HelloAsync()</span> does its thing and returns the result string.
            </p></li><li><p>
               Temporal persists the result to Cassandra, marks the workflow as complete, and then signals
               the pending stub <span class="code">HelloAsync()</span> call that it can return with the
               value returned by your workflow implementation.
            </p></li></ol><p>
          This may not look like much, but Temporal makes this operation inheritly reliable by:
        </p><ul><li><p>Assigning the workflow to an available workflow instance, waiting for one to be ready.</p></li><li><p>Reassigning the workflow if the workflow service executing it is restarted or fails.</p></li><li><p>Ensuring that the workflow is idempotent such that steps that have already been completed won't be reexecuted due to workflow service failures.</p></li><li><p>Load balancing work across multiple registered worker instances.</p></li><li><p>Recording the history of the workflow execution along with the final result.</p></li></ul><p>
          This example is super simple but even here, Temporal delivers substantial benefits.
          This would be non-trivial to do reliably with custom code without Temporal.
        </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            This example is a bit contrived because we are implementing and invoking a workflow in
            the same program.  Normally, folks will deploy a workflow service that runs until terminated
            and have workflows invoked from other applications such as console or ASP.NET applications.
            Note that any 64-bit Windows, Linux or OS/X .NET Core or Windows .NET Framework application can use
            <a href="T_Neon_Temporal_TemporalClient.htm">TemporalClient</a>
            to establish a connection to a Temporal cluster and invoke or manage workflows.
          </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />See Also</span></div><div id="ID2RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Neon_Temporal.htm">Neon.Temporal</a></div></div></div></div><div id="pageFooter" class="pageFooter">Offline help available for Windows: <a href="neon.chm">neon.chm</a><br />
Report any issues at: <a href="https://github.com/nforgeio/neonKUBE">https://github.com/nforgeio/neonKUBE</a><p>Copyright (c) 2005-2020 by neonFORGE LLC.  All rights reserved.</p></div></body></html>