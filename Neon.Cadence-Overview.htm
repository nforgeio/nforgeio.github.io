<html><head><!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-151329628-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-151329628-1');
</script>
<meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="styles/branding.css" /><link rel="stylesheet" type="text/css" href="styles/branding-en-US.css" /><script type="text/javascript" src="scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Neon.Cadence</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="Neon.Cadence-Overview" /><meta name="Description" content="The Neon.Cadence class library is built for NETStandard 2.0 and is capable of connecting to an Uber Cadencehttps://cadenceworkflow.io/docs/ workflow cluster to manage and implement workflows." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link rel="stylesheet" type="text/css" href="styles/branding-Website.css" /><script type="text/javascript" src="scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="scripts/branding-Website.js"></script><script type="text/javascript" src="scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">neonKUBE class libraries and tools<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="neonKUBE class libraries and tools" tocid="roottoc">neonKUBE class libraries and tools</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="neonKUBE" tocid="6e0122fd-beb8-4334-9fa2-43a79c330dd9">neonKUBE</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Cadence-Overview.htm" title="Neon.Cadence" tocid="b4a13879-cf87-43e2-8b6e-a122d8809d7a">Neon.Cadence</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Step-1.htm" title="Step 1" tocid="142a68cf-85c4-4394-95d4-82a184a696c4">Step 1</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="icons/Help.png" /></td><td class="titleColumn"><h1>Neon.Cadence</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>
        The <strong>Neon.Cadence</strong> class library is built for NETStandard 2.0
        and is capable of connecting to an
        <a href="https://cadenceworkflow.io/docs/" target="_blank">Uber Cadence</a>
        workflow cluster to manage and implement workflows.
      </p><div class="alert"><table><tr><th><img src="icons/AlertCaution.png" alt="Caution note" /> Caution</th></tr><tr><td><p><strong>Neon.Cadence</strong> currently supports 64-bit Windows, OS/X, and Linux runtime environments only.
        </p></td></tr></table></div></div><div id="ID0RBSection" class="collapsibleSection"><p>
          Uber Cadence is a wonderful open source solution for developers who need to deploy reliable workflows
          for small to highly scaled applications and services.  This isn't the first workflow product, but
          it may be the first one tailored specifically for developers who want to code workflows in a popular
          language as opposed to drawing flow-charts, editing crazy XML workflow definitions, and/or jumping
          through multi-step build hoops.
        </p><p><strong>Neon.Cadence</strong> combined with Uber Cadence lets you implement workflows in
          any supported .NET language with little friction.  You can even set breakpoints and debug your
          workflows directly in Visual Studio.
        </p><p>
          This page describes the key concepts.  Subsequent pages will show you how to get started. 
        </p></div><div class="collapsibleAreaRegion" id="overview"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Overview</span></div><div id="ID1RBSection" class="collapsibleSection"><p><strong>Write something pithy here! :)</strong></p></div><div class="collapsibleAreaRegion" id="terminology"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Terminology</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          This section describes the primary Cadence workflow concepts and terminology.
        </p><div class="tableSection"><table><tr><td><p><strong>Activity</strong></p></td><td><p>
                Workflow implementations are typically organized into <strong>workflows</strong> that
                make decisions determining what's do be done and <strong>activities</strong> that actually
                perform the work.  For example, workflows may decide to read/write something to a database or
                call an external service and then then workflow will call an activity to actually perform
                the operation.
              </p><p>
                You can think of a workflow as the decider and activities as the primary way for
                workflows to interact with the outside world, which a workflow should never do
                directly.
              </p></td></tr><tr><td><p><strong>Client Stub</strong></p></td><td><p>
                Stubs provide a way define workflows and activities using an
                <span class="code">interface</span> such that you'll be able to
                start and interact with workflows and activities using strongly 
                typed methods that will be verified by the .NET compiler when 
                building your code.
              </p><p>
                This capability was pioneered by Uber with their Java API and we
                were strongly encouraged to go this route for .NET (which was an 
                easy decision since it's obviously better).  The Go Cadence client
                does not implement stubs.
              </p></td></tr><tr><td><p><strong>Domain</strong></p></td><td><p>
                A Cadence cluster is designed to support multi-tenant deployments.  Cadence
                handles workflow and activity state as well as the assignment of work to
                tenant supplied workers.  Cadence organizes workflows and activities into
                domains.  Every domain has a name as well as a handful configuration 
                settings.  Typical deployments will assign workflows and activities by
                the organization managing these or also by the operation category. 
              </p><p>
                For a Cadence cluster supporting multiple teams you could create a
                domain named for each team.  If these teams need to run test workflows,
                you could create new domains with the team name plus <strong>-test</strong>.
                Cadence domain capacity is close to being unconstrained, so you could even
                create separate domains for each of your developers if needed.
              </p></td></tr><tr><td><p><strong>TaskList</strong></p></td><td><p>
                The workflow and activities you develop will need to be hosted in a
                workflow service that you'll write.  This can be a simple as a Console
                application that registers the workflows and activities it implements
                with the Cadence cluster.  You'll need to specify the domain where the
                workflows and activities will be hosted by Cadence and also a 
                <strong>task list</strong> string.
              </p><p>
                Cadence uses the task list you specify to identify all instances of
                a workflow service running such that work can be distributed to across
                these services.
              </p><div class="alert"><table><tr><th><img src="icons/AlertCaution.png" alt="Important note" /> Important</th></tr><tr><td><p>
                  All instances of your workflow should implement <strong>exact same workflows and activities</strong>
                  because Cadence doesn't track exactly which workflows and activities are exposed
                  by each workflow service instance.  Cadence assumes that all service instances
                  registered with same task list can execute any of the registered workflows
                  and activities.
                </p><p>
                  For example, say you have workflow-A and workflow-B running on server-0 and then workflow-B 
                  and workflow-C running on server-1, and both of these registred with task lisk MYTASKS.
                  Then you execute workflow A.  Cadence may attempt execute it on server-1 but this will
                  fail, because workflow-A isn't implemented there.  Cadence is smart and will retry by
                  selecting another worker registred for MYTASKS until it finds a worker that can handle
                  it (or the workflow times out).
                </p><p>
                  So Cadence will typically recover and execte the workflow or activity but recognize that
                  there may be some delay.  You should also keep this in the back of your mind when you're
                  thinking about how workflow services should be upgraded (e.g. all at once, rolling update,...)
                </p></td></tr></table></div></td></tr><tr><td><p><strong>Event History</strong></p></td><td><p>
                Cadence tracks workflow and activity executions such that the 
                past decisions and workflow state is durably persisted to the
                cluster database.  This is the secret that allows developers
                to author workflows as basic code when under the covers, the
                workflow is essentially a state machine.
              </p></td></tr><tr><td><p><strong>Query</strong></p></td><td><p>
                Started workflows can be queried synchronously by client applications
                to retrieve information about the current state of the workflow.  This
                is a read-only operation and a query must never modify workflow state.
              </p></td></tr><tr><td><p><strong>Run ID</strong></p></td><td><p>
                Cadence assigns a UUID to each execution of a workflow so they can
                be uniquely identified.  This differs from the workflow ID which
                is essentially the name of the workflow.  For example, you could
                start a workflow managing a user's junk email folder with a 
                workflow ID like <strong>jeff@lilltek.com-JUNK</strong>.
                Then you could manage, query, or signal the workflow using this
                stable name.  Cadence will assign a UUID as the run ID and if
                the workflow restarts itself, the new run will retain the same
                workflow ID, but will be assigned a new run ID.
              </p></td></tr><tr><td><p><strong>Signal</strong></p></td><td><p>
                Signals provides a convienent way to inform a workflow that something
                external happened.  Signals may include arbitrary parameters but 
                signals don't return a result.  Signals are delivered asynchronously,
                meaning the caller may see the signal method return before the
                workflow actually received the signal.
              </p><p>
                Workflow signal methods will typically use a <span class="nolink">WorkflowQueue</span>
                to interact with the workflow decision logic.
              </p></td></tr><tr><td><p><strong>Task Token</strong></p></td><td><p>
                Cadence supports external activity completion.  This is a less convienent 
                an alternative to signalling.  You can take advantage of this by starting
                an activity that instead of completing the operation itself, obtains a
                task token from Cadence and then signals Cadence that the activity will
                be completed externally.
              </p><p>
                Before the activity returns, it will need to put the token somewhere 
                (like a database) and then you'll have an external service waiting for
                something to happen that indicates that activity can be completed and
                then use the task token to complete the activity, specifying the return
                value if necessary.
              </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Tip" /> Tip</th></tr><tr><td><p>
                  External activity completion implementions are generally more difficulit to
                  code because you need to worry about saving the token somewhere and you also
                  need to code an external service that may need to do activity heartbeating.
                </p><p>
                  We recommend that you use signals for most situations.
                </p></td></tr></table></div></td></tr><tr><td><p><strong>Worker/Service</strong></p></td><td><p>
                This is an application or service that implements one or more workflows
                and/or activities.  When a worker or worker service starts, it will
                register its workflows and activities with Cadcence.  Then Cadence
                will assign workflows and activities to each worker service as it
                sees fit.
              </p><p>
                Your workflow and activity code will be executed as required with
                Cadence recording state as the workflow progresses as well as the
                results returned by the activities and workflow.
              </p></td></tr><tr><td><p><strong>Workflow</strong></p></td><td><p>
                Essentially, a workflow is a method that runs some logic and optionally returns
                a result.  The method is written in C# or some other compatible .NET language.
                Workflows always interact with the external world via activities.  Workflows
                use activities to query external state so that can impact decisions made
                by the workflow and workflows also use activities to impact the outside world
                by writting to a database, sending an email, etc.
              </p><p>
                Workflows can be configured to run for very long times.  Years and perhaps even 
                centuries.  Cadence ensures that the state of an executing workflow will be
                durably persisted such that the workflow can be reassigned to a different worker
                in response to server failures, load-balancing, etc.
              </p></td></tr><tr><td><p><strong>Workflow Execution</strong></p></td><td><p>
                A <a href="T_Neon_Cadence_WorkflowExecution.htm">WorkflowExecution</a> 
                is used to identify an instance of a workflow.  This included the workflow and
                run IDs and may reference a workflow that's still in progress or a completed workflow.
              </p></td></tr><tr><td><p><strong>Workflow ID</strong></p></td><td><p>
                A workflow ID is essentially the name of the workflow.  This is an arbitrary
                string.  It's often handy to set this to some kind of business identifier like
                the name of the entity the workflow is handling.
              </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
                  A Workflow IDs uniquely identify workflows within a Cadence domain.
                </p></td></tr></table></div></td></tr></table></div></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="https://cadenceworkflow.io/docs/" target="_blank">Uber Cadence</a></div></div></div></div><div id="pageFooter" class="pageFooter">Offline help available for Windows: <a href="neonKUBE.chm">neonKUBE.chm</a>
Report any issues at: <a href="https://github.com/nforgeio/neonKUBE">https://github.com/nforgeio/neonKUBE</a><p>Copyright (c) 2016-2019 by neonFORGE, LLC.  All rights reserved.</p></div></body></html>