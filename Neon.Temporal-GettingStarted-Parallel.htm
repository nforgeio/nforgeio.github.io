<html><head><!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-151329628-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-151329628-1');
</script>
<meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="styles/branding.css" /><link rel="stylesheet" type="text/css" href="styles/branding-en-US.css" /><script type="text/javascript" src="scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Parallel operations</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="Neon.Temporal-GettingStarted-Parallel" /><meta name="Description" content="Temporal supports running multiple child workflows and/or activities in parallel using future stubs. These work somewhat differently from the typed stubs we've shown so far." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="styles/highlight.css" /><script type="text/javascript" src="scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="styles/branding-Website.css" /><script type="text/javascript" src="scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="scripts/branding-Website.js"></script><script type="text/javascript" src="scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Neon and neonKUBE class libraries and tools<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="Neon and neonKUBE class libraries and tools" tocid="roottoc">Neon and neonKUBE class libraries and tools</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Temporal-Overview.htm" title="Neon.Temporal" tocid="c5895fc2-372e-4213-a1d0-faf513b46ed7">Neon.Temporal</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Temporal-Workflow-CodingRules.htm" title="Workflow details" tocid="c42e207e-f6b4-43c2-b660-b1d2ef32704d">Workflow details</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Workflow-CodingRules.htm" title="Coding rules" tocid="7377a962-2a8a-498b-b9ad-2de58541bccb">Coding rules</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Workflow-IDsExecutions.htm" title="IDs &amp; executions" tocid="1e741adc-714f-4a77-82aa-ff1756ee1c9a">IDs &amp; executions</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Workflow-Scheduling.htm" title="Timeouts" tocid="b86e3e81-ffe5-4a59-b840-aebe31bd5014">Timeouts</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Workflow-ChildWorkflows.htm" title="Child workflows" tocid="fef3cdc8-41e8-4c31-a81d-a6857d202faa">Child workflows</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-GettingStarted-Parallel.htm" title="Parallel operations" tocid="82d58fc1-98ce-4872-bf3d-7530f9be1a9e">Parallel operations</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Workflow-Options.htm" title="Options" tocid="e74d1092-9a9d-429f-bbe2-7ad595d7a6fe">Options</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Workflow-Queries.htm" title="Queries" tocid="2de5ef53-412c-4f8d-b40b-69f06db7762b">Queries</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Workflow-SignalQueues.htm" title="Signals &amp; queues" tocid="fef4f5f1-ee69-479c-9321-6586ec5d45f9">Signals &amp; queues</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Workflow-SyncSignals.htm" title="Synchronous signals" tocid="1284aec5-7464-4243-aa38-75366c26a031">Synchronous signals</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Activity-ContinueAsNew.htm" title="Continue as new" tocid="397dcfd2-0d7a-4148-b2a5-372f77807184">Continue as new</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Temporal-Workflow-CRON.htm" title="Distributed CRON" tocid="fd66b149-f9e7-4ac4-90d6-64c1310b38f3">Distributed CRON</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="icons/Help.png" /></td><td class="titleColumn"><h1>Parallel operations</h1></td></tr></table><span class="introStyle"></span> <div id="ID1RBSection" class="collapsibleSection"><p>
          Temporal supports running multiple child workflows and/or activities in parallel using
          future stubs.  These work somewhat differently from the typed stubs we've shown so far.
        </p><ul><li><p>
              Regular stubs are type-safe because they implement the workflow or activity interface.
              The C# or Visual Basic compiler will ensure that the parameters and result match the 
              interface.  These checks happen at compile time, which is nice.
            </p></li><li><p>
              Future stubs are created for a specific workflow or activity method.  You'll specify
              the workflow or activity interface as well as the method name as specified by the 
              <a href="T_Neon_Temporal_WorkflowMethodAttribute.htm">WorkflowMethodAttribute</a> or
              <a href="T_Neon_Temporal_ActivityMethodAttribute.htm">ActivityMethodAttribute</a>.
              For methods without an explicitly specified name, use <span class="code">null</span> or
              <a href="https://docs.microsoft.com/dotnet/api/system.string.empty" target="_blank">Empty</a></p></li><li><p>
              Future stubs include generic and non-generic versions of <span class="code">StartAsync(params object[] args)</span>.
              These start the workflow or activity and return a future that can be used send signals or
              queries (for workflows) and also retrieve the workflow result.  You'll use the generic 
              version to specify the result type for workflows/activity methods that return a result.
              Use the non-generic version for workflow/activities that don't return a result.
            </p></li><li><p>
              Future stub calls are not type checked at compile time.  But, the .NET client does
              check these parameters at runtime and also makes a reasonable effort at casting
              any arguments to what the workflow or activity method expects.
            </p></li></ul><p>
          The example below shows a workflow that executes a child workflow and activity in parallel:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAEABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAEABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAEABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAEABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[ActivityInterface(TaskQueue = <span class="highlight-literal">"my-tasks"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IMyActivity : IActivity
{
    [ActivityMethod(Name = <span class="highlight-literal">"run-activity"</span>)]
    Task RunActivityAsync();
}

[WorkflowInterface(TaskQueue = <span class="highlight-literal">"my-tasks"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IChildWorkflow : IWorkflow
{
    [ActivityMethod(Name = <span class="highlight-literal">"run"</span>)]
    Task&lt;List&lt;<span class="highlight-keyword">string</span>&gt;&gt; RunAsync(<span class="highlight-keyword">string</span> name);
}

[WorkflowInterface(TaskQueue = <span class="highlight-literal">"my-tasks"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IParallelWorkflow : IWorkflow
{
    [WorkflowMethod]
    Task&lt;<span class="highlight-keyword">string</span>&gt; RunAsync();
}

[Workflow(AutoRegister = <span class="highlight-keyword">true</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> ParallelWorkflow : WorkflowBase, IParallelWorkflow
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task&lt;<span class="highlight-keyword">string</span>&gt; RunAsync()
    {
        <span class="highlight-keyword">var</span> childStub    = Workflow.NewChildWorkflowFutureStub&lt;IChildWorkflow&gt;(<span class="highlight-literal">"run"</span>);
        <span class="highlight-keyword">var</span> activityStub = Workflow.NewActivityFutureStub&lt;IMyActivity&gt;(<span class="highlight-literal">"run-activity"</span>);

        <span class="highlight-keyword">var</span> childFuture    = <span class="highlight-keyword">await</span> childStub.StartAsync&lt;<span class="highlight-keyword">string</span>&gt;(<span class="highlight-literal">"Jeff"</span>);
        <span class="highlight-keyword">var</span> activityFuture = <span class="highlight-keyword">await</span> activityStub.StartAsync();

        <span class="highlight-keyword">await</span> activityFuture.GetAsync();

        <span class="highlight-keyword">return</span> <span class="highlight-keyword">await</span> childFuture.GetAsync();
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAEABAAA");</script><p>
          The sample defines the <span class="code">IMyActivity</span> and <span class="code">IChildWorkflow</span> 
          interfaces and assumes that these are implemented in another workflow service.  <span class="code">ParallelWorkflow</span>
          implements <span class="code">RunAsync()</span> which creates future stubs for the child workflow and
          activity methods, starts them so they'll run in parallel, and then returns the result returned by the
          child workflow method.
        </p><p>
          Notice that we specified the <strong>run</strong> as the name for the child workflow
          method and <strong>run-activity</strong> for the activity method.  These map to the 
          names specified in the interface method attributes.
        </p><p>
          Then we start the workflow anbd activity methods, passing any necessary parameters.  Notice that
          that we specified the <span class="code">string</span> as the generic parameter to the child
          workflow call.  This indicates that we're expecting the child to return a string.
        </p><p>
          Finally, we await the futures by calling <span class="code">GetAsync()</span>.  This waits for the
          operation to complete and returns the operation result if any.
        </p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />See Also</span></div><div id="ID2RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Neon_Temporal.htm">Neon.Temporal</a></div></div></div></div><div id="pageFooter" class="pageFooter">Offline help available for Windows: <a href="neon.chm">neon.chm</a><br />
Report any issues at: <a href="https://github.com/nforgeio/neonKUBE">https://github.com/nforgeio/neonKUBE</a><p>Copyright (c) 2005-2020 by neonFORGE LLC.  All rights reserved.</p></div></body></html>