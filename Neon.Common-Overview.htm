<html><head><!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-151329628-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-151329628-1');
</script>
<meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="styles/branding.css" /><link rel="stylesheet" type="text/css" href="styles/branding-en-US.css" /><script type="text/javascript" src="scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Overview</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="Neon.Common-Overview" /><meta name="Description" content="The Neon.Common class library is built for NETStandard 2.0. It's relatively small and includes miscellaneous types that are useful on their own and are also required by other Neon projects. This is suitable for including in all .NET Core and ." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link rel="stylesheet" type="text/css" href="styles/branding-Website.css" /><script type="text/javascript" src="scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="scripts/branding-Website.js"></script><script type="text/javascript" src="scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Neon and neonKUBE class libraries and tools<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="Neon and neonKUBE class libraries and tools" tocid="roottoc">Neon and neonKUBE class libraries and tools</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Common-Overview.htm" title="Neon.Common" tocid="f38eddf9-1e73-4f88-82c9-c3643be61c60">Neon.Common</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Common-Overview.htm" title="Overview" tocid="8d4cab22-393a-468a-96fe-41870fa99b32">Overview</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="icons/Help.png" /></td><td class="titleColumn"><h1>Overview</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>
        The <strong>Neon.Common</strong> class library is built for NETStandard 2.0.
        It's relatively small and includes miscellaneous types that are useful on their own
        and are also required by other Neon projects.  This is suitable for including in all
        .NET Core and .NET Framework projects including Xamarin.  Here's a link to the 
        namespace documentation:
      </p><p><a href="N_Neon_Common.htm">Neon.Common</a></p><div class="alert"><table><tr><th><img src="icons/AlertCaution.png" alt="Caution note" />Â Caution</th></tr><tr><td><p>
          This class library has not been tested for Windows UWP applications so you
          may run into problems in this environment.
        </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="Namespaces"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Namespaces</span></div><div id="ID0RBSection" class="collapsibleSection"><div class="tableSection"><table><tr><td><p><a href="N_Neon_Collections.htm">Neon.Collections</a></p></td><td><p>
                This namespace includes a handful of collection classes.  Some of these were written before
                Microsoft added equivalent collections to the standard .NET libraries.  We're keeping these
                for backwards compatability.
              </p></td></tr><tr><td><p><a href="N_Neon_Common.htm">Neon.Common</a></p></td><td><p>
                This namespace hosts the bulk of the common types.  <a href="T_Neon_Common_NeonHelper.htm">NeonHelper</a>
                exposes a ton of handy utility methods ranging from JSON/YAML serialization helpers, compression
                methods, and platform detection to process execution helpers.  This class might have been better
                organized as several classes but it just evolved this way.  Other handy types include 
                <a href="T_Neon_Common_SemanticVersion.htm">SemanticVersion</a>,
                <a href="T_Neon_Common_CommandLine.htm">CommandLine</a>, and
                <a href="T_Neon_Common_ServiceContainer.htm">ServiceContainer</a>.
              </p></td></tr><tr><td><p><a href="N_Neon_Csv.htm">Neon.Csv</a></p></td><td><p>
                This namespace includes classes for reading and writing Comma Separated Value (CSV) files:
                <a href="T_Neon_Csv_CsvReader.htm">CsvReader</a>,
                <a href="T_Neon_Csv_CsvWriter.htm">CsvWriter</a>,
                <a href="T_Neon_Csv_CsvTableReader.htm">CsvTableReader</a>,
                <a href="T_Neon_Csv_CsvTableWriter.htm">CsvTableWriter</a>.
              </p></td></tr><tr><td><p><a href="N_Neon_Data.htm">Neon.Data</a></p></td><td><p>
                This namespace includes some type converters as well as some interfaces and classes
                used by classes created by <strong>ModelGen</strong>.
              </p></td></tr><tr><td><p><a href="N_Neon_Diagnostics.htm">Neon.Diagnostics</a></p></td><td><p>
                This namespace includes a simple logger suitable -out-of-the-box for typical containerized applications.
                The key classes are <a href="T_Neon_Diagnostics_LogManager.htm">LogManager</a> and
                <a href="T_Neon_Diagnostics_NeonLogger.htm">NeonLogger</a>.  These
                classes are referenced throughout Neon libraries and services for simplicity.  It is possible to
                replace the underlying logging mechanism with custom code or another logger if required.
              </p></td></tr><tr><td><p><a href="N_Neon_IO.htm">Neon.IO</a></p></td><td><p>
                This namespace includes a few I/O related classes, including <a href="T_Neon_IO_TempFile.htm">TempFile</a>
                and <a href="T_Neon_IO_TempFolder.htm">TempFolder</a> that provide
                a convienent way to manage temporary files and folder (especially for unit testing).  
                <a href="T_Neon_IO_LinuxPath.htm">LinuxPath</a> provide
                a way to maniplate Linux style paths from Windows (e.g. when a Windows machine is performing
                operations to a remote Linux computer via SSH).  <a href="T_Neon_IO_LinuxPermissions.htm">LinuxPermissions</a>
                abstracts Linux file permissions.  
              </p><p><a href="T_Neon_IO_PreprocessReader.htm">PreprocessReader</a> is a lightweight
                text file prepreprocessor that supports inline statements like <span class="code">#define</span>,
                <span class="code">#if</span>, <span class="code">#switch</span> as well as supporting simple
                macro subsititution.
              </p></td></tr><tr><td><p><a href="N_Neon_ModelGen.htm">Neon.ModelGen</a></p></td><td><p>
                Neon <strong>ModelGen</strong> combines the <strong>Neon.ModelGen</strong>
                class library with a command line tool to convert interface definitions into usable classes,
                adding required boilerplate to handle Couchbase persistance and queries as well as 
                <a href="https://docs.microsoft.com/dotnet/api/system.componentmodel.inotifypropertychanged" target="_blank">INotifyPropertyChanged</a>
                supporting data binding in user interfaces.  <strong>ModelGen</strong> can
                also generate REST clients for web services.
            </p><p>
                The <strong>Neon.Common</strong> library includes attribute classes are used
                to decorate your model interface definitions to specify verious options.
              </p></td></tr><tr><td><p><a href="N_Neon_Net.htm">Neon.Net</a></p></td><td><p>
                This namespace includes <a href="T_Neon_Net_NetHelper.htm">NetHelper</a>
                which provides utility methods for things like validating DNS host names, comparing IP addresses, 
                simple IP address arithmetic, munging the local hosts file, pinging hosts for reachability,
                identifying an connected network interface, along with a few more capabilities.
              </p><p>
                Other handy types are: <a href="T_Neon_Net_JsonClient.htm">JsonClient</a>
                which wraps <a href="https://docs.microsoft.com/dotnet/api/system.net.http.httpclient" target="_blank">HttpClient</a>
                with features suitable for calling a JSON based REST API.  <a href="T_Neon_Net_NetworkCidr.htm">NetworkCidr</a>
                allows you to reason about network subnets, <a href="T_Neon_Net_Pinger.htm">Pinger</a>
                an thread-safe alternative to the standard .NET <a href="https://docs.microsoft.com/dotnet/api/system.net.networkinformation.ping" target="_blank">Ping</a>
                class, <a href="T_Neon_Net_HttpException.htm">HttpException</a> and
                <a href="T_Neon_Net_NetworkPorts.htm">NetworkPorts</a>.
              </p></td></tr><tr><td><p><a href="N_Neon_Retry.htm">Neon.Retry</a></p></td><td><p>
                This namespace includes types used for specifying retry policies, including:
                <a href="T_Neon_Retry_ExponentialRetryPolicy.htm">ExponentialRetryPolicy</a>,
                <a href="T_Neon_Retry_LinearRetryPolicy.htm">LinearRetryPolicy</a> and
                <a href="T_Neon_Retry_TransientDetector.htm">TransientDetector</a>.
              </p></td></tr><tr><td><p><a href="N_Neon_Service.htm">Neon.Service</a></p></td><td><p>
                This namespace provides a way to specify a collection of services available to production
                and test applications via a <a href="T_Neon_Service_ServiceMap.htm">ServiceMap</a>.
                Service maps are used to abstract the remote network endpoints consumed by a service or application
                to make it easy to do real end-to-end testing in the debugger or as unit tests as well as to
                run the same code in production with just a configuration change.
              </p></td></tr><tr><td><p><a href="N_Neon_Tasks.htm">Neon.Tasks</a></p></td><td><p>
                This namespace has several classes that extend traditional thread synchronization primitives
                to <span class="code">async/await</span> code:
                <a href="T_Neon_Tasks_AsyncAutoResetEvent.htm">AsyncAutoResetEvent</a>,
                <a href="T_Neon_Tasks_AsyncManualResetEvent.htm">AsyncManualResetEvent</a>,
                <a href="T_Neon_Tasks_AsyncMutex.htm">AsyncMutex</a>, and
                <a href="T_Neon_Tasks_AsyncReaderWriterLock.htm">AsyncReaderWriterLock</a>.
              </p><p><a href="T_Neon_Tasks_SyncContext.htm">SyncContext</a>
                provides a very easy way to have async calls to your methods not be marshaled back to the calling
                thread on completion.  This is an alternative to calling <span class="code">Task.ConfigureAwait(false)</span>
                everywhere.  We also provide <a href="T_Neon_Tasks_AsyncPeriodicTask.htm">AsyncPeriodicTask</a>
                which is essentially a timer with built-in exception handling.
              </p></td></tr><tr><td><p><a href="N_Neon_Time.htm">Neon.Time</a></p></td><td><p>
                The namespace provides various time related utilities like:
                <a href="T_Neon_Time_GatedTimer.htm">GatedTimer</a>,
                <a href="T_Neon_Time_GoTimeSpan.htm">GoTimeSpan</a>,
                <a href="T_Neon_Time_PolledTimer.htm">PolledTimer</a>,
                <a href="T_Neon_Time_RecurringTimer.htm">RecurringTimer</a>,
                <a href="T_Neon_Time_SysTime.htm">SysTime</a>, and
                <a href="T_Neon_Time_TimeOfDay.htm">TimeOfDay</a>.
              </p></td></tr><tr><td><p><a href="N_Neon_Windows.htm">Neon.Windows</a></p></td><td><p>
                Low-level Windows integrations.
              </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="Extensions"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Extensions</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          The <strong>Neon.Common</strong> library also extends a few types from
          standard .NET libraries as well as external JSON/YAML libraries:
        </p><p><a href="T_Newtonsoft_Json_Linq_JsonExtensions.htm">JsonExtensions</a>,
          <a href="T_System_AppDomainExtensions.htm">AppDomainExtensions</a>,
          <a href="T_System_EnumExtensions.htm">EnumExtensions</a>,
          <a href="T_System_ExceptionExtensions.htm">ExceptionExtensions</a>,
          <a href="T_System_Collections_Generic_IEnumerableExtensions.htm">IEnumerableExtensions</a>,
          <a href="T_System_RandomExtensions.htm">RandomExtensions</a>,
          <a href="T_System_ReflectionExtensions.htm">ReflectionExtensions</a>,
          <a href="T_System_StringExtensions.htm">StringExtensions</a>,
          <a href="T_System_TimeSpanExtensions.htm">TimeSpanExtensions</a>,
          <a href="T_System_Text_StringBuilderExtensions.htm">StringBuilderExtensions</a>,
          <a href="T_System_Net_Http_HttpClientExtensions.htm">HttpClientExtensions</a>, and
          <a href="T_YamlDotNet_RepresentationModel_YamlDotNetExtensions.htm">YamlDotNetExtensions</a>.
        </p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />See Also</span></div><div id="ID2RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Neon_Common.htm">Neon.Common</a></div></div></div></div><div id="pageFooter" class="pageFooter">Offline help available for Windows: <a href="neon.chm">neon.chm</a><br />
Report any issues at: <a href="https://github.com/nforgeio/neonKUBE">https://github.com/nforgeio/neonKUBE</a><p>Copyright (c) 2005-2020 by neonFORGE, LLC.  All rights reserved.</p></div></body></html>