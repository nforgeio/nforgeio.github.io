{
  "index.html": {
    "href": "index.html",
    "title": "NeonFORGE Documentation | NeonFORGE documentation",
    "keywords": "NeonFORGE Documentation Neon/neonKUBE is an open source project released under the Apache 2.0 license. This project includes several class general purpose libraries published as nuget packages (known as the Neon libraries) as well as a nacent Kubernetes distribution called neonKUBE which is still very much a work in progress. The central theme behind these projects is to fill in some gaps developers encounter when developing scalable services intended to be hosted on public cloud providers such as AWS, Azure, and Google Cloud, or hosted within in private datacenters. Note All Neon and neonKUBE packages and utilities are available under the Apache 2.0 Open Source License."
  },
  "neonkube/api/Neon.Kube.BuildInfo.html": {
    "href": "neonkube/api/Neon.Kube.BuildInfo.html",
    "title": "Namespace Neon.Kube.BuildInfo | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.BuildInfo Classes ThisAssembly This is a drop-in replacement for the GitInfo Internal.ThisAssembly class. ThisAssembly.Git Returns information about the current git repo for the solution. ThisAssembly.Git.BaseVersion Provides access to the base version information used to determine the ThisAssembly.Git.SemVer . ThisAssembly.Git.SemVer Provides access to SemVer information for the current assembly."
  },
  "neonkube/api/Neon.Kube.BuildInfo.ThisAssembly.Git.BaseVersion.html": {
    "href": "neonkube/api/Neon.Kube.BuildInfo.ThisAssembly.Git.BaseVersion.html",
    "title": "Class ThisAssembly.Git.BaseVersion | NeonKUBE documentation",
    "keywords": "Class ThisAssembly.Git.BaseVersion Provides access to the base version information used to determine the ThisAssembly.Git.SemVer . Inheritance Object ThisAssembly.Git.BaseVersion Namespace : Neon.Kube.BuildInfo Assembly : Neon.Kube.BuildInfo.dll Syntax public static class BaseVersion Fields Major The major version. Declaration public const string Major = \"0\" Field Value Type Description String Minor The minor version. Declaration public const string Minor = \"8\" Field Value Type Description String Patch The patch version. Declaration public const string Patch = \"5\" Field Value Type Description String"
  },
  "neonkube/api/Neon.Kube.BuildInfo.ThisAssembly.Git.html": {
    "href": "neonkube/api/Neon.Kube.BuildInfo.ThisAssembly.Git.html",
    "title": "Class ThisAssembly.Git | NeonKUBE documentation",
    "keywords": "Class ThisAssembly.Git Returns information about the current git repo for the solution. Inheritance Object ThisAssembly.Git Namespace : Neon.Kube.BuildInfo Assembly : Neon.Kube.BuildInfo.dll Syntax public static class Git Fields BaseTag Returns the base tag. Declaration public const string BaseTag = \"0.8.5-alpha\" Field Value Type Description String Branch Returns the name of the current branch. Declaration public const string Branch = \"master\" Field Value Type Description String Commit Returns the current commit hash (short). Declaration public const string Commit = \"7a982f55d\" Field Value Type Description String CommitDate Returns the commit timestamp. Declaration public const string CommitDate = \"2023-01-20T20:31:29-08:00\" Field Value Type Description String Commits Returns the commits on top of the base version. Declaration public const string Commits = \"128\" Field Value Type Description String IsDirty Returns true when the git repo has uncommited changes. Declaration public const bool IsDirty = true Field Value Type Description Boolean IsDirtyString Returns \"true when the git repo has uncommited changes, \"false\" otherwise. Declaration public const string IsDirtyString = \"true\" Field Value Type Description String RepositoryUrl Returns the upstream git repository URL. Declaration public const string RepositoryUrl = \"https://github.com/nforgeio/neonKUBE.git\" Field Value Type Description String Sha Returns the current commit SHA. Declaration public const string Sha = \"7a982f55df72082a2b4249a046c2568c7a44456e\" Field Value Type Description String Tag Returns the full tag. Declaration public const string Tag = \"0.8.5-alpha-128-g7a982f55d\" Field Value Type Description String"
  },
  "neonkube/api/Neon.Kube.BuildInfo.ThisAssembly.Git.SemVer.html": {
    "href": "neonkube/api/Neon.Kube.BuildInfo.ThisAssembly.Git.SemVer.html",
    "title": "Class ThisAssembly.Git.SemVer | NeonKUBE documentation",
    "keywords": "Class ThisAssembly.Git.SemVer Provides access to SemVer information for the current assembly. Inheritance Object ThisAssembly.Git.SemVer Namespace : Neon.Kube.BuildInfo Assembly : Neon.Kube.BuildInfo.dll Syntax public class SemVer Fields DashLabel The label (if any) prefixed with a dash. Declaration public const string DashLabel = \"-alpha\" Field Value Type Description String Label The label. Declaration public const string Label = \"alpha\" Field Value Type Description String Major The major version. Declaration public const string Major = \"0\" Field Value Type Description String Minor The minor version. Declaration public const string Minor = \"8\" Field Value Type Description String Patch The patch version. Declaration public const string Patch = \"133\" Field Value Type Description String Source The source. Declaration public const string Source = \"Tag\" Field Value Type Description String"
  },
  "neonkube/api/Neon.Kube.BuildInfo.ThisAssembly.html": {
    "href": "neonkube/api/Neon.Kube.BuildInfo.ThisAssembly.html",
    "title": "Class ThisAssembly | NeonKUBE documentation",
    "keywords": "Class ThisAssembly This is a drop-in replacement for the GitInfo Internal.ThisAssembly class. Inheritance Object ThisAssembly Namespace : Neon.Kube.BuildInfo Assembly : Neon.Kube.BuildInfo.dll Syntax public static class ThisAssembly Remarks This is a workaround for duplicate symbol compiler errors we often see for more complex solutions that target multiple build configurations and target frameworks. The root problem is that the GitInfo nuget package generates a C# file under [/obj/$Configuration)] or [/obj/$Configuration)/$(TargetFramework)] and when there are multiple configurations and/or target frameworks, we can end up with multiple versions of the generated file and since MSBUILD recursively compiles all C# files within the project folder, we end up with compiler errors. This library works by using the GitInfo nuget but this project only has one build configuration (Release) and only one target framework (netstandard2.0), so we we'll never see duplicate source files."
  },
  "neonkube/api/Neon.Kube.Clients.AzureComputePlan.html": {
    "href": "neonkube/api/Neon.Kube.Clients.AzureComputePlan.html",
    "title": "Class AzureComputePlan | NeonKUBE documentation",
    "keywords": "Class AzureComputePlan Inheritance Object AzureComputePlan Implements IRoundtripData Namespace : Neon.Kube.Clients Assembly : Neon.Kube.dll Syntax public class AzureComputePlan : IRoundtripData Constructors AzureComputePlan() Constructs an uninitialized instance. Declaration public AzureComputePlan() AzureComputePlan(JObject) Protected constructor used internally to initialize derived classes. Declaration protected AzureComputePlan(JObject jObject) Parameters Type Name Description Newtonsoft.Json.Linq.JObject jObject The backing Newtonsoft.Json.Linq.JObject . Properties __O INTERNAL USE ONLY: This is the Newtonsoft.Json.Linq.JObject is used to back all serialized round-trip. This was made public for advanced unit testing but its use should generally be avoided for other purposes. Use ToJObject() . instead. \"__O\" is short for \"object\". Declaration [JsonIgnore] public JObject __O { get; set; } Property Value Type Description Newtonsoft.Json.Linq.JObject Name Declaration [JsonProperty(PropertyName = \"Name\", DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate, Required = Required.Always, Order = 0)] public string Name { get; set; } Property Value Type Description String Product Declaration [JsonProperty(PropertyName = \"Product\", DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate, Required = Required.Always, Order = 0)] public string Product { get; set; } Property Value Type Description String Publisher Declaration [JsonProperty(PropertyName = \"Publisher\", DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate, Required = Required.Always, Order = 0)] public string Publisher { get; set; } Property Value Type Description String Methods __Load(JObject, Boolean) Loads the entity properties from the backing Newtonsoft.Json.Linq.JObject or from the optional Newtonsoft.Json.Linq.JObject passed. Declaration public virtual void __Load(JObject source = null, bool isDerived = false) Parameters Type Name Description Newtonsoft.Json.Linq.JObject source The optional source Newtonsoft.Json.Linq.JObject . Boolean isDerived Optionally indicates that were deserializing a derived class. __Save() Persists the properties from this instance to the backing Newtonsoft.Json.Linq.JObject . Declaration public virtual JObject __Save() Returns Type Description Newtonsoft.Json.Linq.JObject The backing Newtonsoft.Json.Linq.JObject . CreateFrom(JsonResponse) Deserializes an instance from a JsonResponse . Declaration public static AzureComputePlan CreateFrom(JsonResponse response) Parameters Type Name Description JsonResponse response The input JsonResponse . Returns Type Description AzureComputePlan The deserialized AzureComputePlan . CreateFrom(JObject) Deserializes an instance from a Newtonsoft.Json.Linq.JObject . Declaration public static AzureComputePlan CreateFrom(JObject jObject) Parameters Type Name Description Newtonsoft.Json.Linq.JObject jObject The input Newtonsoft.Json.Linq.JObject . Returns Type Description AzureComputePlan The deserialized AzureComputePlan . CreateFrom(Byte[]) Deserializes an instance from a UTF-8 encoded byte array. Declaration public static AzureComputePlan CreateFrom(byte[] bytes) Parameters Type Name Description Byte [] bytes The input byte array. Returns Type Description AzureComputePlan The deserialized AzureComputePlan . CreateFrom(Stream, Encoding) Deserializes an instance from a Stream . Declaration public static AzureComputePlan CreateFrom(Stream stream, Encoding encoding = null) Parameters Type Name Description Stream stream The input Stream . Encoding encoding Optionally specifies the inout encoding. This defaults to UTF8 . Returns Type Description AzureComputePlan The deserialized AzureComputePlan . CreateFrom(String) Deserializes an instance from JSON text. Declaration public static AzureComputePlan CreateFrom(string jsonText) Parameters Type Name Description String jsonText The JSON text input. Returns Type Description AzureComputePlan The deserialized AzureComputePlan . CreateFromAsync(Stream, Encoding) Asynchronously deserializes an instance from a Stream . Declaration public static async Task<object> CreateFromAsync(Stream stream, Encoding encoding = null) Parameters Type Name Description Stream stream The input Stream . Encoding encoding Optionally specifies the inout encoding. This defaults to UTF8 . Returns Type Description Task < Object > The deserialized AzureComputePlan . DeepClone() Returns a deep clone of the instance. Declaration public AzureComputePlan DeepClone() Returns Type Description AzureComputePlan The cloned instance. Equals(Object) Determines whether the current instance equals another object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The other object instance or null . Returns Type Description Boolean true if the object reference equals the current instance. Overrides Object.Equals(Object) GetHashCode() Calculates the hash code for the instance. note At least one of the class properties must be tagged with a [HashSource] for this to work. Declaration public override int GetHashCode() Returns Type Description Int32 The calculated hash code. Overrides Object.GetHashCode() Exceptions Type Condition InvalidOperationException Thrown when no class properties are tagged with a [HashSourceAttribute] . ToBytes() Renders the instance as UTF-8 encoded JSON. Declaration public virtual byte[] ToBytes() Returns Type Description Byte [] The serialized JSON bytes. ToDerived<T>(Boolean) Used to convert a base data model class into a derived class. Declaration public T ToDerived<T>(bool noClone = false) where T : AzureComputePlan, IRoundtripData Parameters Type Name Description Boolean noClone By default, this method will create a deep clone of the underlying Newtonsoft.Json.Linq.JObject and use this new instance when constructing the new object. This is the safest approach but will cause a performance hit. You can pass noClone =true to reuse the existing Newtonsoft.Json.Linq.JObject for the new instance if you're sure that the original instance will no longer be accessed. Returns Type Description T The converted instance of type T . Type Parameters Name Description T The desired derived type. ToJObject() Renders the instance as a new Newtonsoft.Json.Linq.JObject . Declaration public JObject ToJObject() Returns Type Description Newtonsoft.Json.Linq.JObject The rendered Newtonsoft.Json.Linq.JObject . ToString() Renders the instance as JSON text. Declaration public override string ToString() Returns Type Description String The serialized JSON string. Overrides Object.ToString() ToString(Boolean) Renders the instance as JSON text, optionally formatting the output. Declaration public string ToString(bool indented) Parameters Type Name Description Boolean indented Optionally pass true to format the output. Returns Type Description String The serialized JSON string. WriteJsonTo(Stream) Writes the instance as JSON to a Stream . Declaration public virtual void WriteJsonTo(Stream stream) Parameters Type Name Description Stream stream WriteJsonToAsync(Stream) Asynchronously writes the instance as JSON to a Stream . Declaration public virtual async Task WriteJsonToAsync(Stream stream) Parameters Type Name Description Stream stream Returns Type Description Task The tracking Task . Operators Equality(AzureComputePlan, AzureComputePlan) Compares two instances for equality by performing a deep comparision of all object properties including any hidden properties. Note that you may pass null . Declaration public static bool operator ==(AzureComputePlan value1, AzureComputePlan value2) Parameters Type Name Description AzureComputePlan value1 The first value or null . AzureComputePlan value2 The second value or null . Returns Type Description Boolean true if the values are equal. Inequality(AzureComputePlan, AzureComputePlan) Compares two instances for inequality by performing a deep comparision of all object properties including any hidden properties. Note that you may pass null . Declaration public static bool operator !=(AzureComputePlan value1, AzureComputePlan value2) Parameters Type Name Description AzureComputePlan value1 The first value or null . AzureComputePlan value2 The second value or null . Returns Type Description Boolean true if the values are not equal. Implements IRoundtripData"
  },
  "neonkube/api/Neon.Kube.Clients.AzureImageDetails.html": {
    "href": "neonkube/api/Neon.Kube.Clients.AzureImageDetails.html",
    "title": "Class AzureImageDetails | NeonKUBE documentation",
    "keywords": "Class AzureImageDetails Inheritance Object AzureImageDetails Implements IRoundtripData Namespace : Neon.Kube.Clients Assembly : Neon.Kube.dll Syntax public class AzureImageDetails : IRoundtripData Constructors AzureImageDetails() Constructs an uninitialized instance. Declaration public AzureImageDetails() AzureImageDetails(JObject) Protected constructor used internally to initialize derived classes. Declaration protected AzureImageDetails(JObject jObject) Parameters Type Name Description Newtonsoft.Json.Linq.JObject jObject The backing Newtonsoft.Json.Linq.JObject . Properties __O INTERNAL USE ONLY: This is the Newtonsoft.Json.Linq.JObject is used to back all serialized round-trip. This was made public for advanced unit testing but its use should generally be avoided for other purposes. Use ToJObject() . instead. \"__O\" is short for \"object\". Declaration [JsonIgnore] public JObject __O { get; set; } Property Value Type Description Newtonsoft.Json.Linq.JObject ComputePlan Declaration [JsonProperty(PropertyName = \"ComputePlan\", DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate, Required = Required.Always, Order = 0)] public AzureComputePlan ComputePlan { get; set; } Property Value Type Description AzureComputePlan ImageReference Declaration [JsonProperty(PropertyName = \"ImageReference\", DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate, Required = Required.Always, Order = 0)] public AzureImageReference ImageReference { get; set; } Property Value Type Description AzureImageReference Methods __Load(JObject, Boolean) Loads the entity properties from the backing Newtonsoft.Json.Linq.JObject or from the optional Newtonsoft.Json.Linq.JObject passed. Declaration public virtual void __Load(JObject source = null, bool isDerived = false) Parameters Type Name Description Newtonsoft.Json.Linq.JObject source The optional source Newtonsoft.Json.Linq.JObject . Boolean isDerived Optionally indicates that were deserializing a derived class. __Save() Persists the properties from this instance to the backing Newtonsoft.Json.Linq.JObject . Declaration public virtual JObject __Save() Returns Type Description Newtonsoft.Json.Linq.JObject The backing Newtonsoft.Json.Linq.JObject . CreateFrom(JsonResponse) Deserializes an instance from a JsonResponse . Declaration public static AzureImageDetails CreateFrom(JsonResponse response) Parameters Type Name Description JsonResponse response The input JsonResponse . Returns Type Description AzureImageDetails The deserialized AzureImageDetails . CreateFrom(JObject) Deserializes an instance from a Newtonsoft.Json.Linq.JObject . Declaration public static AzureImageDetails CreateFrom(JObject jObject) Parameters Type Name Description Newtonsoft.Json.Linq.JObject jObject The input Newtonsoft.Json.Linq.JObject . Returns Type Description AzureImageDetails The deserialized AzureImageDetails . CreateFrom(Byte[]) Deserializes an instance from a UTF-8 encoded byte array. Declaration public static AzureImageDetails CreateFrom(byte[] bytes) Parameters Type Name Description Byte [] bytes The input byte array. Returns Type Description AzureImageDetails The deserialized AzureImageDetails . CreateFrom(Stream, Encoding) Deserializes an instance from a Stream . Declaration public static AzureImageDetails CreateFrom(Stream stream, Encoding encoding = null) Parameters Type Name Description Stream stream The input Stream . Encoding encoding Optionally specifies the inout encoding. This defaults to UTF8 . Returns Type Description AzureImageDetails The deserialized AzureImageDetails . CreateFrom(String) Deserializes an instance from JSON text. Declaration public static AzureImageDetails CreateFrom(string jsonText) Parameters Type Name Description String jsonText The JSON text input. Returns Type Description AzureImageDetails The deserialized AzureImageDetails . CreateFromAsync(Stream, Encoding) Asynchronously deserializes an instance from a Stream . Declaration public static async Task<object> CreateFromAsync(Stream stream, Encoding encoding = null) Parameters Type Name Description Stream stream The input Stream . Encoding encoding Optionally specifies the inout encoding. This defaults to UTF8 . Returns Type Description Task < Object > The deserialized AzureImageDetails . DeepClone() Returns a deep clone of the instance. Declaration public AzureImageDetails DeepClone() Returns Type Description AzureImageDetails The cloned instance. Equals(Object) Determines whether the current instance equals another object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The other object instance or null . Returns Type Description Boolean true if the object reference equals the current instance. Overrides Object.Equals(Object) GetHashCode() Calculates the hash code for the instance. note At least one of the class properties must be tagged with a [HashSource] for this to work. Declaration public override int GetHashCode() Returns Type Description Int32 The calculated hash code. Overrides Object.GetHashCode() Exceptions Type Condition InvalidOperationException Thrown when no class properties are tagged with a [HashSourceAttribute] . ToBytes() Renders the instance as UTF-8 encoded JSON. Declaration public virtual byte[] ToBytes() Returns Type Description Byte [] The serialized JSON bytes. ToDerived<T>(Boolean) Used to convert a base data model class into a derived class. Declaration public T ToDerived<T>(bool noClone = false) where T : AzureImageDetails, IRoundtripData Parameters Type Name Description Boolean noClone By default, this method will create a deep clone of the underlying Newtonsoft.Json.Linq.JObject and use this new instance when constructing the new object. This is the safest approach but will cause a performance hit. You can pass noClone =true to reuse the existing Newtonsoft.Json.Linq.JObject for the new instance if you're sure that the original instance will no longer be accessed. Returns Type Description T The converted instance of type T . Type Parameters Name Description T The desired derived type. ToJObject() Renders the instance as a new Newtonsoft.Json.Linq.JObject . Declaration public JObject ToJObject() Returns Type Description Newtonsoft.Json.Linq.JObject The rendered Newtonsoft.Json.Linq.JObject . ToString() Renders the instance as JSON text. Declaration public override string ToString() Returns Type Description String The serialized JSON string. Overrides Object.ToString() ToString(Boolean) Renders the instance as JSON text, optionally formatting the output. Declaration public string ToString(bool indented) Parameters Type Name Description Boolean indented Optionally pass true to format the output. Returns Type Description String The serialized JSON string. WriteJsonTo(Stream) Writes the instance as JSON to a Stream . Declaration public virtual void WriteJsonTo(Stream stream) Parameters Type Name Description Stream stream WriteJsonToAsync(Stream) Asynchronously writes the instance as JSON to a Stream . Declaration public virtual async Task WriteJsonToAsync(Stream stream) Parameters Type Name Description Stream stream Returns Type Description Task The tracking Task . Operators Equality(AzureImageDetails, AzureImageDetails) Compares two instances for equality by performing a deep comparision of all object properties including any hidden properties. Note that you may pass null . Declaration public static bool operator ==(AzureImageDetails value1, AzureImageDetails value2) Parameters Type Name Description AzureImageDetails value1 The first value or null . AzureImageDetails value2 The second value or null . Returns Type Description Boolean true if the values are equal. Inequality(AzureImageDetails, AzureImageDetails) Compares two instances for inequality by performing a deep comparision of all object properties including any hidden properties. Note that you may pass null . Declaration public static bool operator !=(AzureImageDetails value1, AzureImageDetails value2) Parameters Type Name Description AzureImageDetails value1 The first value or null . AzureImageDetails value2 The second value or null . Returns Type Description Boolean true if the values are not equal. Implements IRoundtripData"
  },
  "neonkube/api/Neon.Kube.Clients.AzureImageReference.html": {
    "href": "neonkube/api/Neon.Kube.Clients.AzureImageReference.html",
    "title": "Class AzureImageReference | NeonKUBE documentation",
    "keywords": "Class AzureImageReference Inheritance Object AzureImageReference Implements IRoundtripData Namespace : Neon.Kube.Clients Assembly : Neon.Kube.dll Syntax public class AzureImageReference : IRoundtripData Constructors AzureImageReference() Constructs an uninitialized instance. Declaration public AzureImageReference() AzureImageReference(JObject) Protected constructor used internally to initialize derived classes. Declaration protected AzureImageReference(JObject jObject) Parameters Type Name Description Newtonsoft.Json.Linq.JObject jObject The backing Newtonsoft.Json.Linq.JObject . Properties __O INTERNAL USE ONLY: This is the Newtonsoft.Json.Linq.JObject is used to back all serialized round-trip. This was made public for advanced unit testing but its use should generally be avoided for other purposes. Use ToJObject() . instead. \"__O\" is short for \"object\". Declaration [JsonIgnore] public JObject __O { get; set; } Property Value Type Description Newtonsoft.Json.Linq.JObject Offer Declaration [JsonProperty(PropertyName = \"Offer\", DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate, Required = Required.Always, Order = 0)] public string Offer { get; set; } Property Value Type Description String Publisher Declaration [JsonProperty(PropertyName = \"Publisher\", DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate, Required = Required.Always, Order = 0)] public string Publisher { get; set; } Property Value Type Description String Sku Declaration [JsonProperty(PropertyName = \"Sku\", DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate, Required = Required.Always, Order = 0)] public string Sku { get; set; } Property Value Type Description String Version Declaration [JsonProperty(PropertyName = \"Version\", DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate, Required = Required.Always, Order = 0)] public string Version { get; set; } Property Value Type Description String Methods __Load(JObject, Boolean) Loads the entity properties from the backing Newtonsoft.Json.Linq.JObject or from the optional Newtonsoft.Json.Linq.JObject passed. Declaration public virtual void __Load(JObject source = null, bool isDerived = false) Parameters Type Name Description Newtonsoft.Json.Linq.JObject source The optional source Newtonsoft.Json.Linq.JObject . Boolean isDerived Optionally indicates that were deserializing a derived class. __Save() Persists the properties from this instance to the backing Newtonsoft.Json.Linq.JObject . Declaration public virtual JObject __Save() Returns Type Description Newtonsoft.Json.Linq.JObject The backing Newtonsoft.Json.Linq.JObject . CreateFrom(JsonResponse) Deserializes an instance from a JsonResponse . Declaration public static AzureImageReference CreateFrom(JsonResponse response) Parameters Type Name Description JsonResponse response The input JsonResponse . Returns Type Description AzureImageReference The deserialized AzureImageReference . CreateFrom(JObject) Deserializes an instance from a Newtonsoft.Json.Linq.JObject . Declaration public static AzureImageReference CreateFrom(JObject jObject) Parameters Type Name Description Newtonsoft.Json.Linq.JObject jObject The input Newtonsoft.Json.Linq.JObject . Returns Type Description AzureImageReference The deserialized AzureImageReference . CreateFrom(Byte[]) Deserializes an instance from a UTF-8 encoded byte array. Declaration public static AzureImageReference CreateFrom(byte[] bytes) Parameters Type Name Description Byte [] bytes The input byte array. Returns Type Description AzureImageReference The deserialized AzureImageReference . CreateFrom(Stream, Encoding) Deserializes an instance from a Stream . Declaration public static AzureImageReference CreateFrom(Stream stream, Encoding encoding = null) Parameters Type Name Description Stream stream The input Stream . Encoding encoding Optionally specifies the inout encoding. This defaults to UTF8 . Returns Type Description AzureImageReference The deserialized AzureImageReference . CreateFrom(String) Deserializes an instance from JSON text. Declaration public static AzureImageReference CreateFrom(string jsonText) Parameters Type Name Description String jsonText The JSON text input. Returns Type Description AzureImageReference The deserialized AzureImageReference . CreateFromAsync(Stream, Encoding) Asynchronously deserializes an instance from a Stream . Declaration public static async Task<object> CreateFromAsync(Stream stream, Encoding encoding = null) Parameters Type Name Description Stream stream The input Stream . Encoding encoding Optionally specifies the inout encoding. This defaults to UTF8 . Returns Type Description Task < Object > The deserialized AzureImageReference . DeepClone() Returns a deep clone of the instance. Declaration public AzureImageReference DeepClone() Returns Type Description AzureImageReference The cloned instance. Equals(Object) Determines whether the current instance equals another object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The other object instance or null . Returns Type Description Boolean true if the object reference equals the current instance. Overrides Object.Equals(Object) GetHashCode() Calculates the hash code for the instance. note At least one of the class properties must be tagged with a [HashSource] for this to work. Declaration public override int GetHashCode() Returns Type Description Int32 The calculated hash code. Overrides Object.GetHashCode() Exceptions Type Condition InvalidOperationException Thrown when no class properties are tagged with a [HashSourceAttribute] . ToBytes() Renders the instance as UTF-8 encoded JSON. Declaration public virtual byte[] ToBytes() Returns Type Description Byte [] The serialized JSON bytes. ToDerived<T>(Boolean) Used to convert a base data model class into a derived class. Declaration public T ToDerived<T>(bool noClone = false) where T : AzureImageReference, IRoundtripData Parameters Type Name Description Boolean noClone By default, this method will create a deep clone of the underlying Newtonsoft.Json.Linq.JObject and use this new instance when constructing the new object. This is the safest approach but will cause a performance hit. You can pass noClone =true to reuse the existing Newtonsoft.Json.Linq.JObject for the new instance if you're sure that the original instance will no longer be accessed. Returns Type Description T The converted instance of type T . Type Parameters Name Description T The desired derived type. ToJObject() Renders the instance as a new Newtonsoft.Json.Linq.JObject . Declaration public JObject ToJObject() Returns Type Description Newtonsoft.Json.Linq.JObject The rendered Newtonsoft.Json.Linq.JObject . ToString() Renders the instance as JSON text. Declaration public override string ToString() Returns Type Description String The serialized JSON string. Overrides Object.ToString() ToString(Boolean) Renders the instance as JSON text, optionally formatting the output. Declaration public string ToString(bool indented) Parameters Type Name Description Boolean indented Optionally pass true to format the output. Returns Type Description String The serialized JSON string. WriteJsonTo(Stream) Writes the instance as JSON to a Stream . Declaration public virtual void WriteJsonTo(Stream stream) Parameters Type Name Description Stream stream WriteJsonToAsync(Stream) Asynchronously writes the instance as JSON to a Stream . Declaration public virtual async Task WriteJsonToAsync(Stream stream) Parameters Type Name Description Stream stream Returns Type Description Task The tracking Task . Operators Equality(AzureImageReference, AzureImageReference) Compares two instances for equality by performing a deep comparision of all object properties including any hidden properties. Note that you may pass null . Declaration public static bool operator ==(AzureImageReference value1, AzureImageReference value2) Parameters Type Name Description AzureImageReference value1 The first value or null . AzureImageReference value2 The second value or null . Returns Type Description Boolean true if the values are equal. Inequality(AzureImageReference, AzureImageReference) Compares two instances for inequality by performing a deep comparision of all object properties including any hidden properties. Note that you may pass null . Declaration public static bool operator !=(AzureImageReference value1, AzureImageReference value2) Parameters Type Name Description AzureImageReference value1 The first value or null . AzureImageReference value2 The second value or null . Returns Type Description Boolean true if the values are not equal. Implements IRoundtripData"
  },
  "neonkube/api/Neon.Kube.Clients.HeadendClient.__Cluster.html": {
    "href": "neonkube/api/Neon.Kube.Clients.HeadendClient.__Cluster.html",
    "title": "Class HeadendClient.__Cluster | NeonKUBE documentation",
    "keywords": "Class HeadendClient.__Cluster Inheritance Object HeadendClient.__Cluster Implements IGeneratedServiceClient Namespace : Neon.Kube.Clients Assembly : Neon.Kube.dll Syntax [GeneratedClient(\"cluster\")] public class __Cluster : IGeneratedServiceClient Properties GeneratorVersion Declaration public string GeneratorVersion { get; } Property Value Type Description String Methods CreateSsoClientAsync(String, String, CancellationToken, IRetryPolicy) Declaration [GeneratedMethod(DefinedAs = \"CreateSsoClientAsync\", Returns = typeof(Dictionary<string, string>), RouteTemplate = \"{clusterId}/sso-client\", HttpMethod = \"POST\", ApiVersion = \"0.2\")] public async Task<Dictionary<string, string>> CreateSsoClientAsync([GeneratedParam(PassAs.Route, Name = \"clusterId\")] string clusterId, [GeneratedParam(PassAs.Query, Name = \"clusterName\")] string clusterName, CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description String clusterId String clusterName CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < Dictionary < String , String >> GetTokenAsync(String, CancellationToken, IRetryPolicy) Declaration [GeneratedMethod(DefinedAs = \"GetTokenAsync\", Returns = typeof(string), RouteTemplate = \"{clusterId}/token/renew\", HttpMethod = \"GET\", ApiVersion = \"0.2\")] public async Task<string> GetTokenAsync([GeneratedParam(PassAs.Route, Name = \"clusterId\")] string clusterId, CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description String clusterId CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < String > UnsafeCreateSsoClientAsync(String, String, CancellationToken, IRetryPolicy) Declaration public async Task<JsonResponse> UnsafeCreateSsoClientAsync([GeneratedParam(PassAs.Route, Name = \"clusterId\")] string clusterId, [GeneratedParam(PassAs.Query, Name = \"clusterName\")] string clusterName, CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description String clusterId String clusterName CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < JsonResponse > UnsafeGetTokenAsync(String, CancellationToken, IRetryPolicy) Declaration public async Task<JsonResponse> UnsafeGetTokenAsync([GeneratedParam(PassAs.Route, Name = \"clusterId\")] string clusterId, CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description String clusterId CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < JsonResponse > UnsafeUpdateClusterDomainAsync(String, String, CancellationToken, IRetryPolicy) Declaration public async Task<JsonResponse> UnsafeUpdateClusterDomainAsync([GeneratedParam(PassAs.Route, Name = \"clusterId\")] string clusterId, [GeneratedParam(PassAs.Query, Name = \"addresses\")] string addresses, CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description String clusterId String addresses CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < JsonResponse > UpdateClusterDomainAsync(String, String, CancellationToken, IRetryPolicy) Declaration [GeneratedMethod(DefinedAs = \"UpdateClusterDomainAsync\", Returns = typeof(string), RouteTemplate = \"{clusterId}/domain\", HttpMethod = \"PUT\", ApiVersion = \"0.2\")] public async Task<string> UpdateClusterDomainAsync([GeneratedParam(PassAs.Route, Name = \"clusterId\")] string clusterId, [GeneratedParam(PassAs.Query, Name = \"addresses\")] string addresses, CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description String clusterId String addresses CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < String > Implements IGeneratedServiceClient"
  },
  "neonkube/api/Neon.Kube.Clients.HeadendClient.__ClusterSetup.html": {
    "href": "neonkube/api/Neon.Kube.Clients.HeadendClient.__ClusterSetup.html",
    "title": "Class HeadendClient.__ClusterSetup | NeonKUBE documentation",
    "keywords": "Class HeadendClient.__ClusterSetup Inheritance Object HeadendClient.__ClusterSetup Implements IGeneratedServiceClient Namespace : Neon.Kube.Clients Assembly : Neon.Kube.dll Syntax [GeneratedClient(\"cluster-setup\")] public class __ClusterSetup : IGeneratedServiceClient Properties GeneratorVersion Declaration public string GeneratorVersion { get; } Property Value Type Description String Methods CreateClusterAsync(CancellationToken, IRetryPolicy) Declaration [GeneratedMethod(DefinedAs = \"CreateClusterAsync\", Returns = typeof(Dictionary<string, string>), RouteTemplate = \"create\", HttpMethod = \"POST\", ApiVersion = \"0.2\")] public async Task<Dictionary<string, string>> CreateClusterAsync(CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < Dictionary < String , String >> GetAzureImageDetailsAsync(String, CpuArchitecture, CancellationToken, IRetryPolicy) Declaration [GeneratedMethod(DefinedAs = \"GetAzureImageDetailsAsync\", Returns = typeof(AzureImageDetails), RouteTemplate = \"image/node/azure\", HttpMethod = \"GET\", ApiVersion = \"0.2\")] public async Task<AzureImageDetails> GetAzureImageDetailsAsync([GeneratedParam(PassAs.Query, Name = \"version\")] string version, [GeneratedParam(PassAs.Query, Name = \"architecture\")] CpuArchitecture architecture, CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description String version CpuArchitecture architecture CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < AzureImageDetails > GetDesktopImageManifestUriAsync(String, String, CpuArchitecture, String, CancellationToken, IRetryPolicy) Declaration [GeneratedMethod(DefinedAs = \"GetDesktopImageManifestUriAsync\", Returns = typeof(string), RouteTemplate = \"image/desktop\", HttpMethod = \"GET\", ApiVersion = \"0.2\")] public async Task<string> GetDesktopImageManifestUriAsync([GeneratedParam(PassAs.Query, Name = \"hostingEnvironment\")] string hostingEnvironment, [GeneratedParam(PassAs.Query, Name = \"version\")] string version, [GeneratedParam(PassAs.Query, Name = \"architecture\")] CpuArchitecture architecture, [GeneratedParam(PassAs.Query, Name = \"stageBranch\")] string stageBranch, CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description String hostingEnvironment String version CpuArchitecture architecture String stageBranch CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < String > GetNodeImageManifestUriAsync(String, String, CpuArchitecture, String, CancellationToken, IRetryPolicy) Declaration [GeneratedMethod(DefinedAs = \"GetNodeImageManifestUriAsync\", Returns = typeof(string), RouteTemplate = \"image/node\", HttpMethod = \"GET\", ApiVersion = \"0.2\")] public async Task<string> GetNodeImageManifestUriAsync([GeneratedParam(PassAs.Query, Name = \"hostingEnvironment\")] string hostingEnvironment, [GeneratedParam(PassAs.Query, Name = \"version\")] string version, [GeneratedParam(PassAs.Query, Name = \"architecture\")] CpuArchitecture architecture, [GeneratedParam(PassAs.Query, Name = \"stageBranch\")] string stageBranch, CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description String hostingEnvironment String version CpuArchitecture architecture String stageBranch CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < String > PostDeploymentLogAsync(Stream, String, DateTime, String, String, String, Boolean, CancellationToken, IRetryPolicy) Declaration [GeneratedMethod(DefinedAs = \"PostDeploymentLogAsync\", Returns = typeof(void), RouteTemplate = \"deployment-log\", HttpMethod = \"POST\", ApiVersion = \"0.2\")] public async Task PostDeploymentLogAsync([GeneratedParam(PassAs.Body, Name = \"bodyStream\")] Stream bodyStream, [GeneratedParam(PassAs.Query, Name = \"uploadId\")] string uploadId, [GeneratedParam(PassAs.Query, Name = \"timestampUtc\")] DateTime timestampUtc, [GeneratedParam(PassAs.Query, Name = \"version\")] string version, [GeneratedParam(PassAs.Query, Name = \"clientId\")] string clientId, [GeneratedParam(PassAs.Query, Name = \"userId\")] string userId, [GeneratedParam(PassAs.Query, Name = \"preparing\")] bool preparing, CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description Stream bodyStream String uploadId DateTime timestampUtc String version String clientId String userId Boolean preparing CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task UnsafeCreateClusterAsync(CancellationToken, IRetryPolicy) Declaration public async Task<JsonResponse> UnsafeCreateClusterAsync(CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < JsonResponse > UnsafeGetAzureImageDetailsAsync(String, CpuArchitecture, CancellationToken, IRetryPolicy) Declaration public async Task<JsonResponse> UnsafeGetAzureImageDetailsAsync([GeneratedParam(PassAs.Query, Name = \"version\")] string version, [GeneratedParam(PassAs.Query, Name = \"architecture\")] CpuArchitecture architecture, CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description String version CpuArchitecture architecture CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < JsonResponse > UnsafeGetDesktopImageManifestUriAsync(String, String, CpuArchitecture, String, CancellationToken, IRetryPolicy) Declaration public async Task<JsonResponse> UnsafeGetDesktopImageManifestUriAsync([GeneratedParam(PassAs.Query, Name = \"hostingEnvironment\")] string hostingEnvironment, [GeneratedParam(PassAs.Query, Name = \"version\")] string version, [GeneratedParam(PassAs.Query, Name = \"architecture\")] CpuArchitecture architecture, [GeneratedParam(PassAs.Query, Name = \"stageBranch\")] string stageBranch, CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description String hostingEnvironment String version CpuArchitecture architecture String stageBranch CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < JsonResponse > UnsafeGetNodeImageManifestUriAsync(String, String, CpuArchitecture, String, CancellationToken, IRetryPolicy) Declaration public async Task<JsonResponse> UnsafeGetNodeImageManifestUriAsync([GeneratedParam(PassAs.Query, Name = \"hostingEnvironment\")] string hostingEnvironment, [GeneratedParam(PassAs.Query, Name = \"version\")] string version, [GeneratedParam(PassAs.Query, Name = \"architecture\")] CpuArchitecture architecture, [GeneratedParam(PassAs.Query, Name = \"stageBranch\")] string stageBranch, CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description String hostingEnvironment String version CpuArchitecture architecture String stageBranch CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < JsonResponse > UnsafePostDeploymentLogAsync(Stream, String, DateTime, String, String, String, Boolean, CancellationToken, IRetryPolicy) Declaration public async Task<JsonResponse> UnsafePostDeploymentLogAsync([GeneratedParam(PassAs.Body, Name = \"bodyStream\")] Stream bodyStream, [GeneratedParam(PassAs.Query, Name = \"uploadId\")] string uploadId, [GeneratedParam(PassAs.Query, Name = \"timestampUtc\")] DateTime timestampUtc, [GeneratedParam(PassAs.Query, Name = \"version\")] string version, [GeneratedParam(PassAs.Query, Name = \"clientId\")] string clientId, [GeneratedParam(PassAs.Query, Name = \"userId\")] string userId, [GeneratedParam(PassAs.Query, Name = \"preparing\")] bool preparing, CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description Stream bodyStream String uploadId DateTime timestampUtc String version String clientId String userId Boolean preparing CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < JsonResponse > Implements IGeneratedServiceClient"
  },
  "neonkube/api/Neon.Kube.Clients.HeadendClient.__NeonDesktop.html": {
    "href": "neonkube/api/Neon.Kube.Clients.HeadendClient.__NeonDesktop.html",
    "title": "Class HeadendClient.__NeonDesktop | NeonKUBE documentation",
    "keywords": "Class HeadendClient.__NeonDesktop Inheritance Object HeadendClient.__NeonDesktop Implements IGeneratedServiceClient Namespace : Neon.Kube.Clients Assembly : Neon.Kube.dll Syntax [GeneratedClient(\"\")] public class __NeonDesktop : IGeneratedServiceClient Properties GeneratorVersion Declaration public string GeneratorVersion { get; } Property Value Type Description String Methods GetNeonDesktopCertificateAsync(CancellationToken, IRetryPolicy) Declaration [GeneratedMethod(DefinedAs = \"GetNeonDesktopCertificateAsync\", Returns = typeof(IDictionary<string, byte[]>), RouteTemplate = \"neondesktop/certificate\", HttpMethod = \"GET\", ApiVersion = \"0.2\")] public async Task<IDictionary<string, byte[]>> GetNeonDesktopCertificateAsync(CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < IDictionary < String , Byte []>> UnsafeGetNeonDesktopCertificateAsync(CancellationToken, IRetryPolicy) Declaration public async Task<JsonResponse> UnsafeGetNeonDesktopCertificateAsync(CancellationToken _cancellationToken = default(CancellationToken), IRetryPolicy _retryPolicy = null) Parameters Type Name Description CancellationToken _cancellationToken IRetryPolicy _retryPolicy Returns Type Description Task < JsonResponse > Implements IGeneratedServiceClient"
  },
  "neonkube/api/Neon.Kube.Clients.HeadendClient.html": {
    "href": "neonkube/api/Neon.Kube.Clients.HeadendClient.html",
    "title": "Class HeadendClient | NeonKUBE documentation",
    "keywords": "Class HeadendClient Extends the HeadendClient class generated by modelgen with static creation methods. Inheritance Object HeadendClient Implements IGeneratedServiceClient Namespace : Neon.Kube.Clients Assembly : Neon.Kube.dll Syntax public class HeadendClient : IDisposable, IGeneratedServiceClient Constructors HeadendClient(HttpClient, IRetryPolicy) Used in special situations (like ASP.NET Blazor) where a special HttpClient needs to be created and provided. Declaration public HeadendClient(HttpClient httpClient, IRetryPolicy retryPolicy = null) Parameters Type Name Description HttpClient httpClient The special HttpClient instance to be wrapped. IRetryPolicy retryPolicy Optionally specifies a default retry policy (defaults to NoRetryPolicy ). HeadendClient(HttpMessageHandler, Boolean, IRetryPolicy) Used to construct a client for most situations, optionally specifying a custom HttpMessageHandler and/or IRetryPolicy . Declaration public HeadendClient(HttpMessageHandler handler = null, bool disposeHandler = false, IRetryPolicy retryPolicy = null) Parameters Type Name Description HttpMessageHandler handler An optional message handler. This defaults to a reasonable handler with compression enabled. Boolean disposeHandler Indicates whether the handler passed will be disposed automatically (defaults to false ). IRetryPolicy retryPolicy Optionally specifies a default retry policy (defaults to NoRetryPolicy ). Properties BaseAddress Accesses the underlying BaseAddress . Declaration public Uri BaseAddress { get; set; } Property Value Type Description Uri Cluster Cluster related service methods. Declaration public HeadendClient.__Cluster Cluster { get; } Property Value Type Description HeadendClient.__Cluster ClusterSetup ClusterSetup related service methods. Declaration public HeadendClient.__ClusterSetup ClusterSetup { get; } Property Value Type Description HeadendClient.__ClusterSetup DefaultRequestHeaders Returns the underlying DefaultRequestHeaders . Declaration public HttpRequestHeaders DefaultRequestHeaders { get; } Property Value Type Description HttpRequestHeaders GeneratorVersion Declaration public string GeneratorVersion { get; } Property Value Type Description String HttpClient Returns the underlying HttpClient . Declaration public HttpClient HttpClient { get; } Property Value Type Description HttpClient JsonClient Returns the underlying JsonClient . Declaration public JsonClient JsonClient { get; } Property Value Type Description JsonClient NeonDesktop NeonDesktop related service methods. Declaration public HeadendClient.__NeonDesktop NeonDesktop { get; } Property Value Type Description HeadendClient.__NeonDesktop RetryPolicy Returns the underlying DefaultRequestHeaders . Declaration public IRetryPolicy RetryPolicy { get; set; } Property Value Type Description IRetryPolicy Timeout Accesses the underlying Timeout . Declaration public TimeSpan Timeout { get; set; } Property Value Type Description TimeSpan Methods Create(Uri, IRetryPolicy) Creates a HeadendClient . Declaration public static HeadendClient Create(Uri baseAddress = null, IRetryPolicy retryPolicy = null) Parameters Type Name Description Uri baseAddress Optionally specifies the base URI for the client. This defaults to the headend service URI returned by HeadendUri . IRetryPolicy retryPolicy Optionally specifies a default retry policy (defaults to NoRetryPolicy ). Returns Type Description HeadendClient The new HeadendClient . Dispose() Declaration public void Dispose() Dispose(Boolean) Releases any important resources associated with the instance. Declaration protected void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if the instance is being disposed as opposed to being finalized. Finalize() Finalizer. Declaration protected void Finalize() Implements IGeneratedServiceClient"
  },
  "neonkube/api/Neon.Kube.Clients.html": {
    "href": "neonkube/api/Neon.Kube.Clients.html",
    "title": "Namespace Neon.Kube.Clients | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Clients Classes AzureComputePlan AzureImageDetails AzureImageReference HeadendClient Extends the HeadendClient class generated by modelgen with static creation methods. HeadendClient.__Cluster HeadendClient.__ClusterSetup HeadendClient.__NeonDesktop"
  },
  "neonkube/api/Neon.Kube.ClusterContainerImage.html": {
    "href": "neonkube/api/Neon.Kube.ClusterContainerImage.html",
    "title": "Class ClusterContainerImage | NeonKUBE documentation",
    "keywords": "Class ClusterContainerImage Holds information about a container image deployed as part of cluster setup. Inheritance Object ClusterContainerImage Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class ClusterContainerImage Constructors ClusterContainerImage() Default constructor. Declaration public ClusterContainerImage() Properties InternalDigestRef Specifies the reference to the container image including the image digest within as deployed within the cluster. This is the reference used for persisting the container to the local registry as well as executing the container on cluster nodes via CRI-O. Declaration [JsonProperty(PropertyName = \"InternalDigestRef\", Required = Required.Always)] [YamlMember(Alias = \"internalDigestRef\", ApplyNamingConventions = false)] public string InternalDigestRef { get; set; } Property Value Type Description String InternalRef Specifies the internal cluster reference to the container image as deployed within the cluster. This is the reference used for persisting the container to the local registry as well as executing the container on cluster nodes via CRI-O. note Internal references need to use the original tags because some related operators require that. neon-cluster-operator uses this these references to download container images from SourceRef and then persist them to the local cluster registry as InternalRef . Declaration [JsonProperty(PropertyName = \"InternalRef\", Required = Required.Always)] [YamlMember(Alias = \"internalRef\", ApplyNamingConventions = false)] public string InternalRef { get; set; } Property Value Type Description String SourceDigestRef Specifies the reference to the container image including the image digest within one of the NEONFORGE container registeries. Declaration [JsonProperty(PropertyName = \"SourceDigestRef\", Required = Required.Always)] [YamlMember(Alias = \"sourceDigestRef\", ApplyNamingConventions = false)] public string SourceDigestRef { get; set; } Property Value Type Description String SourceRef Specifies the reference to the container image within one of the NEONFORGE container registeries. note Source references have their tags set to the neonKUBE cluster version. Declaration [JsonProperty(PropertyName = \"SourceRef\", Required = Required.Always)] [YamlMember(Alias = \"sourceRef\", ApplyNamingConventions = false)] public string SourceRef { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.ClusterDef.AcmeOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.AcmeOptions.html",
    "title": "Class AcmeOptions | NeonKUBE documentation",
    "keywords": "Class AcmeOptions Describes CertManager related options. Inheritance Object AcmeOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class AcmeOptions Constructors AcmeOptions() Default constructor. Declaration public AcmeOptions() Properties CertificateDuration Specifies the maximum lifespan for internal cluster TLS certificates as a GOLANG formatted string. This defaults to 504h (21 days). See Parse(String) for details about the timespan format. Declaration [JsonProperty(PropertyName = \"CertificateDuration\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"certificateDuration\", ApplyNamingConventions = false)] public string CertificateDuration { get; set; } Property Value Type Description String CertificateRenewBefore Specifies the time to wait before attempting to renew for internal cluster TLS certificates. This must be less than CertificateDuration and defaults to 336h (14 days). See Parse(String) for details about the timespan format. Declaration [JsonProperty(PropertyName = \"CertificateRenewBefore\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"certificateRenewBefore\", ApplyNamingConventions = false)] public string CertificateRenewBefore { get; set; } Property Value Type Description String Issuer The specification of an Issuer. This includes any configuration required for the issuer. Declaration [JsonProperty(PropertyName = \"Issuer\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"issuer\", ApplyNamingConventions = false)] public AcmeIssuer Issuer { get; set; } Property Value Type Description AcmeIssuer Methods Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.AddressRule.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.AddressRule.html",
    "title": "Class AddressRule | NeonKUBE documentation",
    "keywords": "Class AddressRule Used to whitelist or blacklist an IP address or subnet within a cluster's IngressRules or EgressAddressRules . note This is currently supported only for clusters hosted on Azure. AWS doesn't support this scenario and we currently don't support automatic router configuration for on-premise environments. Inheritance Object AddressRule Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class AddressRule Constructors AddressRule() Default constructor. Declaration public AddressRule() AddressRule(String, AddressRuleAction) Constructor. Declaration public AddressRule(string addressOrSubnet, AddressRuleAction action) Parameters Type Name Description String addressOrSubnet Specifies the IP address or subnet or you may also specify \"any\" to specify all possible IP addresses. AddressRuleAction action Specifies whether network traffic is to be allowed or denied. Properties Action Returns the action to performed for network traffic to/from the address or subnet. Declaration [JsonProperty(PropertyName = \"Action\", Required = Required.Always)] [YamlMember(Alias = \"action\", ApplyNamingConventions = false)] public AddressRuleAction Action { get; } Property Value Type Description AddressRuleAction AddressOrSubnet Returns the specified IP address or subnet or \"any\" or null for all possible IP addresses. Declaration [JsonProperty(PropertyName = \"AddressOrSubnet\", Required = Required.AllowNull)] [YamlMember(Alias = \"addressOrSubnet\", ApplyNamingConventions = false)] public string AddressOrSubnet { get; } Property Value Type Description String AllowAll Returns an AddressRule that allows network traffic to/from all IP addresses. Declaration public static AddressRule AllowAll { get; } Property Value Type Description AddressRule DenyAll Returns an AddressRule that denies network traffic to/from all IP addresses. Declaration public static AddressRule DenyAll { get; } Property Value Type Description AddressRule IsAny Returns true when the all possible IP addresses were specified. Declaration [JsonIgnore] [YamlIgnore] public bool IsAny { get; } Property Value Type Description Boolean Methods Validate(ClusterDefinition, String) Validates the address rule. Declaration public void Validate(ClusterDefinition clusterDefinition, string context) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. String context Indicates where the address rule is specified, like: ingress-rule-address or egress-address Exceptions Type Condition ClusterDefinitionException Thrown for an invalid rule."
  },
  "neonkube/api/Neon.Kube.ClusterDef.AddressRuleAction.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.AddressRuleAction.html",
    "title": "Enum AddressRuleAction | NeonKUBE documentation",
    "keywords": "Enum AddressRuleAction Enumerates the possible actions for an AddressRule . Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public enum AddressRuleAction Fields Name Description Allow Allow network traffic to or from the IP address or subnet. Deny Block network traffic to or from the IP address or subnet."
  },
  "neonkube/api/Neon.Kube.ClusterDef.AwsHelper.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.AwsHelper.html",
    "title": "Class AwsHelper | NeonKUBE documentation",
    "keywords": "Class AwsHelper AWS helpers. Inheritance Object AwsHelper Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public static class AwsHelper Fields MaxClusterNodes The maximum number of nodes currently allowed in a cluster deployed to AWS. Declaration public const int MaxClusterNodes = 100 Field Value Type Description Int32 MaxHostedEndpoints The maximum number of hosted load balanced TCP/UDP endpoints allowed in a cluster deployed to AWS. Declaration public const int MaxHostedEndpoints = 150 Field Value Type Description Int32 Methods GetVolumeSizeGiB(AwsVolumeType, Decimal) Converts the requested disk size in bytes to the actual required size of the AWS managed disk in GiB. Declaration public static decimal GetVolumeSizeGiB(AwsVolumeType volumeType, decimal driveSizeBytes) Parameters Type Name Description AwsVolumeType volumeType Specifies the disk storage type. Decimal driveSizeBytes The requested size in bytes. Returns Type Description Decimal The actual AWS volume size in GiB. Remarks We're not going to allow volumes smaller than 32 GiB or larger than 16 TiB, the current AWS limit for volumes with 4 KiB blocks. We're also going to round up to the nearest GiB."
  },
  "neonkube/api/Neon.Kube.ClusterDef.AwsHostingOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.AwsHostingOptions.html",
    "title": "Class AwsHostingOptions | NeonKUBE documentation",
    "keywords": "Class AwsHostingOptions Specifies the Amazon Web Services hosting settings. Inheritance Object AwsHostingOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class AwsHostingOptions Constructors AwsHostingOptions() Constructor. Declaration public AwsHostingOptions() Properties AccessKeyId The AWS access key ID that identifies the IAM key created for the IAM user assigned to neonKUBE for management activities, including creating the cluster. This combined with SecretAccessKey will be used to confirm the identity. Declaration [JsonProperty(PropertyName = \"AccessKeyId\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"accessKeyId\", ApplyNamingConventions = false)] public string AccessKeyId { get; set; } Property Value Type Description String AvailabilityZone Specifies the AWS zone where the cluster will be provisioned. This is required. Declaration [JsonProperty(PropertyName = \"AvailabilityZone\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"availabilityZone\", ApplyNamingConventions = false)] public string AvailabilityZone { get; set; } Property Value Type Description String ControlPlanePlacementPartitions Specifies the number of control-plane placement group partitions the cluster control-plane node instances will be deployed to. This defaults to -1 which means that the number of partitions will equal the number of control-plane nodes. AWS supports a maximum of 7 placement partitions. Declaration [JsonProperty(PropertyName = \"ControlPlanePlacementPartitions\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"controlPlanePlacementPartitions\", ApplyNamingConventions = false)] public int ControlPlanePlacementPartitions { get; set; } Property Value Type Description Int32 Remarks AWS provides three different types of placement groups to user help manage where virtual machine instances are provisioned within an AWS availability zone to customize fault tolerance due to AWS hardware failures. AWS Placement groups neonKUBE provisions instances using two partition placement groups , one for the cluster control-plane nodes and the other for the workers. The idea is that control-plane nodes should be deployed on separate hardware for fault tolerance because if the majority of control-plane nodes go offline, the entire cluster will be dramatically impacted. In general, the number of ControlPlanePlacementPartitions partitions should equal the number of control-plane nodes. Worker nodes are distributed across WorkerPlacementPartitions partitions in a separate placement group. The number of worker partitions defaults to 1, potentially limiting the resilience to AWS hardware failures while making it more likely that AWS will be able to actually satisfy the conditions to provision the cluster node instances. Unfortunately, AWS may not have enough distinct hardware available to satisfy your requirements. In this case, we recommend that you try another availability zone first and if that doesn't work try reducing the number of partitions which can be as low as 1 partition. DefaultEbsOptimized Specifies whether the cluster instances should be EBS-optimized by default. This defaults to false and can be overidden for specific cluster nodes via EbsOptimized . Amazon EBS–optimized instances Declaration [JsonProperty(PropertyName = \"DefaultEbsOptimized\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"defaultEbsOptimized\", ApplyNamingConventions = false)] public bool DefaultEbsOptimized { get; set; } Property Value Type Description Boolean Remarks Non EBS optimized instances perform disk operation I/O to EBS volumes using the same network used for other network operations. This means that you may see some disk performance declines when your instance is busy serving web traffic or running database queries, etc. EBS optimization can be enabled for some instance types. This provisions extra dedicated network bandwidth exclusively for EBS I/O. Exactly how this works, depends on the specific VM type. More modern AWS VM types enable EBS optimization by default and you won't incur any additional charges for these instances and disabling EBS optimization here or via EbsOptimized won't have any effect. Some AWS instance types can be optimized but this is disabled by default. When you enable this by setting DefaultEbsOptimized =true or EbsOptimized =true , you'll probably an additional AWS hourly fee for these instances. Some AWS instance types don't support EBS optimization. You'll need to be sure that this is disabled for those nodes. DefaultInstanceType Identifies the default AWS instance type to be provisioned for cluster nodes that don't specify an instance type. This defaults to c5.2xlarge which includes 8 virtual cores and 16 GiB RAM but can be overridden for specific cluster nodes via InstanceType . note neonKUBE clusters cannot be deployed to ARM-based AWS instance types. You must specify an instance type using a Intel or AMD 64-bit processor. note neonKUBE requires control-plane and worker instances to have at least 4 CPUs and 8GiB RAM. Choose an AWS instance type that satisfies these requirements. Declaration [JsonProperty(PropertyName = \"DefaultInstanceType\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"defaultInstanceType\", ApplyNamingConventions = false)] public string DefaultInstanceType { get; set; } Property Value Type Description String DefaultOpenEbsVolumeSize Specifies the default AWS volume size to be used when creating OpenEBS cStor disks. This defaults to 128 GiB but can be overridden for specific cluster nodes via OpenEbsVolumeSize . Declaration [JsonProperty(PropertyName = \"DefaultOpenEbsVolumeSize\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"defaultOpenEbsVolumeSize\", ApplyNamingConventions = false)] public string DefaultOpenEbsVolumeSize { get; set; } Property Value Type Description String Remarks note Node disks smaller than 32 GiB are not supported by neonKUBE. We'll automatically round up the disk size when necessary. DefaultOpenEbsVolumeType Specifies the default AWS volume type to use for OpenEBS cStor disks. This defaults to Gp2 which is SSD based and offers a reasonable compromise between performance and cost. This can be overridden for specific cluster nodes via OpenEbsVolumeType . Declaration [JsonProperty(PropertyName = \"DefaultOpenEbsVolumeType\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"defaultOpenEbsVolumeType\", ApplyNamingConventions = false)] public AwsVolumeType DefaultOpenEbsVolumeType { get; set; } Property Value Type Description AwsVolumeType DefaultVolumeSize Specifies the default AWS volume size for the cluster node primary disks. This defaults to 128 GiB but can be overridden for specific cluster nodes via VolumeSize . Declaration [JsonProperty(PropertyName = \"DefaultVolumeSize\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"defaultVolumeSize\", ApplyNamingConventions = false)] public string DefaultVolumeSize { get; set; } Property Value Type Description String Remarks note Node disks smaller than 32 GiB are not supported by neonKUBE. We'll automatically round up the disk size when necessary. DefaultVolumeType Specifies the default AWS volume type for cluster node primary disks. This defaults to Gp2 which is SSD based and offers a reasonable compromise between performance and cost. This can be overriden for specific cluster nodes via VolumeType . Declaration [JsonProperty(PropertyName = \"DefaultVolumeType\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"defaultVolumeType\", ApplyNamingConventions = false)] public AwsVolumeType DefaultVolumeType { get; set; } Property Value Type Description AwsVolumeType Network Specifies the AWS related cluster network options. Declaration [JsonProperty(PropertyName = \"Network\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"network\", ApplyNamingConventions = false)] public AwsNetworkOptions Network { get; set; } Property Value Type Description AwsNetworkOptions Region Returns the AWS region where the cluster will be provisioned. This is derived from AvailabilityZone by removing the last character, which is the zone suffix. Declaration [JsonIgnore] [YamlIgnore] public string Region { get; } Property Value Type Description String ResourceGroup AWS resource group where all cluster components are to be provisioned. This defaults to \"neon-\" plus the cluster name but can be customized as required. Declaration [JsonProperty(PropertyName = \"ResourceGroup\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"resourceGroup\", ApplyNamingConventions = false)] public string ResourceGroup { get; set; } Property Value Type Description String SecretAccessKey The AWS secret used to confirm the AccessKeyId identity. Declaration [JsonProperty(PropertyName = \"SecretAccessKey\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"secretAccessKey\", ApplyNamingConventions = false)] public string SecretAccessKey { get; set; } Property Value Type Description String WorkerPlacementPartitions Specifies the number of worker placement group partitions the cluster worker node instances will be deployed to. This defaults to 1 trading off resilience to hardware failures against increasing the chance that AWS will actually be able to provision the cluster nodes. AWS supports a maximum of 7 placement partitions. Declaration [JsonProperty(PropertyName = \"WorkerPlacementPartitions\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"workerPlacementPartitions\", ApplyNamingConventions = false)] public int WorkerPlacementPartitions { get; set; } Property Value Type Description Int32 Remarks AWS provides three different types of placement groups to user help manage where virtual machine instances are provisioned within an AWS availability zone to customize fault tolerance due to AWS hardware failures. AWS Placement groups neonKUBE provisions instances using two partition placement groups , one for the cluster control-plane nodes and the other for the workers. The idea is that control-plane nodes should be deployed on separate hardware for fault tolerance because if the majority of control-plane nodes go offline, the entire cluster will be dramatically impacted. In general, the number of ControlPlanePlacementPartitions partitions should equal the number of control-plane nodes. Worker nodes are distributed across WorkerPlacementPartitions partitions in a separate placement group. The number of worker partitions defaults to 1, potentially limiting the resilience to AWS hardware failures while making it more likely that AWS will be able to actually satisfy the conditions to provision the cluster node instances. Unfortunately, AWS may not have enough distinct hardware available to satisfy your requirements. In this case, we recommend that you try another availability zone first and if that doesn't work try reducing the number of partitions which can be as low as 1 partition. Methods ClearSecrets() Clears all hosting related secrets. Declaration public void ClearSecrets() Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.AwsNetworkOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.AwsNetworkOptions.html",
    "title": "Class AwsNetworkOptions | NeonKUBE documentation",
    "keywords": "Class AwsNetworkOptions Specifies AWS related network options, optionally specifying existing Elastic IP addresses to use for cluster ingress and egress. By default, clusters will be deployed with newly created addresses. This means that the cluster ingress change will change everytime the cluster is redeployed, which means that you may need to update your DNS zone and also that the IP address for outbound traffic will also change which may require that you update whitelist rules for other services. You can mitigate this by creating ingress/egress elastic IPs, setting ElasticIpIngressId and ElasticIpEgressId to their IDs before deploying your cluster. note ElasticIpIngressId and ElasticIpEgressId must be specified together or not at all. Inheritance Object AwsNetworkOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class AwsNetworkOptions Constructors AwsNetworkOptions() Constructor. Declaration public AwsNetworkOptions() Properties ElasticIpEgressId Optionally specifies an existing Elastic IP address to be used by the cluster load balancer for sending network traffic. Set this to your Elastic IP allocation ID (something like eipalloc-080a1efa9c04ad88 ). This is useful for ensuring that your cluster is always provisioned with a known static IP. note When this isn't specified, the cluster will be configured with new Elastic IPs that will be released when the cluster is deleted. note ElasticIpIngressId and ElasticIpEgressId must be specified together or not at all. Declaration [JsonProperty(PropertyName = \"ElasticIpEgressId\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"elasticIpEgressId\", ApplyNamingConventions = false)] public string ElasticIpEgressId { get; set; } Property Value Type Description String ElasticIpIngressId Optionally specifies an existing Elastic IP address to be used by the cluster load balancer for receiving network traffic. Set this to your Elastic IP allocation ID (something like eipalloc-080a1efa9c04ad72 ). This is useful for ensuring that your cluster is always provisioned with a known static IP. note When this isn't specified, the cluster will be configured with new Elastic IPs that will be released when the cluster is deleted. note ElasticIpIngressId and ElasticIpEgressId must be specified together or not at all. Declaration [JsonProperty(PropertyName = \"ElasticIpIngressId\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"elasticIpIngressId\", ApplyNamingConventions = false)] public string ElasticIpIngressId { get; set; } Property Value Type Description String HasCustomElasticIPs Returns true when the cluster references existing Elastic IP addresses for ingress and egress. Declaration [JsonIgnore] [YamlIgnore] public bool HasCustomElasticIPs { get; } Property Value Type Description Boolean NodeSubnet Specifies the private subnet CIDR within VpcSubnet for the private subnet where the cluster node instances will be provisioned. This defaults to 10.100.0.0/24 . Declaration [JsonProperty(PropertyName = \"PrivateSubnet\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"privateSubnet\", ApplyNamingConventions = false)] public string NodeSubnet { get; set; } Property Value Type Description String PublicSubnet Specifies the public subnet CIDR within VpcSubnet for the public subnet where the AWS network load balancer will be provisioned to manage inbound cluster traffic. This defaults to 10.100.255.0/16 . Declaration [JsonProperty(PropertyName = \"PublicSubnet\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"publicSubnet\", ApplyNamingConventions = false)] public string PublicSubnet { get; set; } Property Value Type Description String VpcSubnet Specifies the subnet CIDR to used for AWS VPC (virtual private cloud) provisioned for the cluster. This must surround the NodeSubnet and PublicSubnet subnets. This defaults to 10.100.0.0/16 . Declaration [JsonProperty(PropertyName = \"VpcSubnet\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"vpcSubnet\", ApplyNamingConventions = false)] public string VpcSubnet { get; set; } Property Value Type Description String Methods Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.AwsNodeOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.AwsNodeOptions.html",
    "title": "Class AwsNodeOptions | NeonKUBE documentation",
    "keywords": "Class AwsNodeOptions AWS specific options for a cluster node. These options can be used to override defaults specified by AwsHostingOptions . The constructor initializes reasonable values. Inheritance Object AwsNodeOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class AwsNodeOptions Properties EbsOptimized Specifies whether the cluster instance should be EBS-optimized. This is a TriState value that defaults to Default which means that the default cluster wide DefaultEbsOptimized value will be used. You can override the cluster default for this node by setting True or False . Amazon EBS–optimized instances Declaration [JsonProperty(PropertyName = \"EbsOptimized\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"ebsOptimized\", ApplyNamingConventions = false)] public TriState EbsOptimized { get; set; } Property Value Type Description TriState Remarks Non EBS optimized instances perform disk operation I/O to EBS volumes using the same network used for other network operations. This means that you may see some disk performance declines when your instance is busy serving web traffic or running database queries, etc. EBS optimization can be enabled for some instance types. This provisions extra dedicated network bandwidth exclusively for EBS I/O. Exactly how this works, depends on the specific VM type. More modern AWS VM types enable EBS optimization by default and you won't incur any additional charges for these instances and disabling EBS optimization here or via DefaultEbsOptimized won't have any effect. Some AWS instance types can be optimized but this is disabled by default. When you enable this by setting DefaultEbsOptimized =true or EbsOptimized =true , you'll probably an additional AWS hourly fee for these instances. Some AWS instance types don't support EBS optimization. You'll need to be sure that this is disabled for those nodes. InstanceType Optionally specifies the type of ECB instance to provision for this node. The available instance types are listed here . This defaults to DefaultInstanceType . note neonKUBE clusters cannot be deployed to ARM-based AWS instance types. You must specify an instance type using a Intel or AMD 64-bit processor. note neonKUBE requires control-plane and worker instances to have at least 4 CPUs and 8GiB RAM. Choose an AWS instance type that satisfies these requirements. Declaration [JsonProperty(PropertyName = \"InstanceType\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"instanceType\", ApplyNamingConventions = false)] public string InstanceType { get; set; } Property Value Type Description String OpenEbsVolumeSize Optionally specifies the size of the AWS volume to be used for the node's OpenEBS cStor disk (if any). This defaults to null which indicates that DefaultDiskSize will be used for the node. Declaration [JsonProperty(PropertyName = \"OpenEbsVolumeSize\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"openEbsVolumeSize\", ApplyNamingConventions = false)] public string OpenEbsVolumeSize { get; set; } Property Value Type Description String Remarks note Node disks smaller than 64 GiB are not supported by neonKUBE. We'll automatically upgrade the disk size when necessary. OpenEbsVolumeType Optionally specifies the AWS volume type to be used for the the node's OpenEBS cStor disk (if any). This defaults to Default which indicates that DefaultOpenEbsVolumeType will specify the volume type for the node. Declaration [JsonProperty(PropertyName = \"OpenEbsVolumeType\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"openEbsVolumeType\", ApplyNamingConventions = false)] public AwsVolumeType OpenEbsVolumeType { get; set; } Property Value Type Description AwsVolumeType PlacementPartition Optionally specifies the AWS placement group partition the node will be provisioned within. This is a 1-based partition index which defaults to 0 , indicating that node placement will be handled automatically. Declaration [JsonProperty(PropertyName = \"PlacementPartition\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"placementPartition\", ApplyNamingConventions = false)] public int PlacementPartition { get; set; } Property Value Type Description Int32 Remarks You generally don't need to customize this for control-plane nodes since there will generally be a separate partition available for each control-plane and AWS will spread the instances across these automatically. When you specify this for control-plane nodes, the partition index must be in the range of [1... ControlPlanePlacementPartitions ]. For some cluster scenarios like a noSQL database cluster, you may wish to explicitly control the partition where specific worker nodes are provisioned. For example, if your database replcates data across multiple worker nodes, you'd like to have the workers hosting the same data be provisioned to different partitions such that if the workers in one partition are lost then the workers in the remaining partitions will still be able to serve the data. When you specify this for worker nodes, the partition index must be in the range of [1... WorkerPlacementPartitions ]. VolumeSize Optionally specifies the size of the AWS volume to be used as the node's primary disk. This defaults to null which indicates that DefaultVolumeSize will be used. Declaration [JsonProperty(PropertyName = \"VolumeSize\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"volumeSize\", ApplyNamingConventions = false)] public string VolumeSize { get; set; } Property Value Type Description String Remarks note Node disks smaller than 64 GiB are not supported by neonKUBE. We'll automatically round up the disk size when necessary. VolumeType Optionally specifies the type of AWS volume to be used as the node's primary disk. This defaults to Default which indicates that DefaultInstanceType will specify the volume type for the node. Declaration [JsonProperty(PropertyName = \"VolumeType\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"volumeType\", ApplyNamingConventions = false)] public AwsVolumeType VolumeType { get; set; } Property Value Type Description AwsVolumeType Methods Validate(ClusterDefinition, String) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition, string nodeName) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. String nodeName The associated node name. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.AwsVolumeType.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.AwsVolumeType.html",
    "title": "Enum AwsVolumeType | NeonKUBE documentation",
    "keywords": "Enum AwsVolumeType Enumerates the AWS EBS volume types. Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public enum AwsVolumeType Fields Name Description Default Indicates that the default Azure storage type will be provisioned. When StorageType = Default then DefaultStorageType will be provisioned. If DefaultStorageType = Default then Gp2 will be provisioned. Gp2 SSD: This is the default EBS volume type and is suitable for a wide range of workloads. Io1 SSD: Useful for critical database and application workloads. Io2 SSD: The latest generation of SSD volume offering the best performance. Sc1 HDD: The lowest cost storage option. St1 HDD: Useful for workloads need to process large amounts of data cost effectively."
  },
  "neonkube/api/Neon.Kube.ClusterDef.AzureCloudEnvironment.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.AzureCloudEnvironment.html",
    "title": "Class AzureCloudEnvironment | NeonKUBE documentation",
    "keywords": "Class AzureCloudEnvironment Specifies the target Azure environment. Inheritance Object AzureCloudEnvironment Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class AzureCloudEnvironment Remarks Microsoft Azure deploys more than one environment for hosting services. global-cloud identifies their public cloud which is where most users and companies will deploy services. Azure also has a few private environments that are typically used by specialized customers (like governments). The easiest way to use this is by setting the Name property to one of the possible environments: global-cloud Public Azure cloud (the default). china-cloud Private Chinese cloud. german-cloud Private German cloud. us-government Private United States government cloud. Alternatively, you can set Name to custom and specify a custom endpoint URI and audience. This is useful for deploying a cluster to a new Azure environment unknown to the current neonKUBE release or other private/internal Azure clouds. Constructors AzureCloudEnvironment() Default constructor. Declaration public AzureCloudEnvironment() Properties Audience Specifies the audience. Declaration [JsonProperty(PropertyName = \"Audience\", Required = Required.AllowNull)] [YamlMember(Alias = \"audience\", ApplyNamingConventions = false)] public string Audience { get; set; } Property Value Type Description String Endpoint Environment authentication endpoint URI. Declaration [JsonProperty(PropertyName = \"Endpoint\", Required = Required.AllowNull)] [YamlMember(Alias = \"endpoint\", ApplyNamingConventions = false)] public string Endpoint { get; set; } Property Value Type Description String Name Identifies the Azure environment. This defaults to GlobalCloud . Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public AzureCloudEnvironments Name { get; set; } Property Value Type Description AzureCloudEnvironments Methods Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.AzureCloudEnvironments.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.AzureCloudEnvironments.html",
    "title": "Enum AzureCloudEnvironments | NeonKUBE documentation",
    "keywords": "Enum AzureCloudEnvironments Enumerates the possible Azure hosting environments. Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public enum AzureCloudEnvironments Fields Name Description ChinaCloud China cloud. Custom Custom cloud where the management URIs will be specified explicitly. GermanCloud German cloud. GlobalCloud Public Azure cloud (default). USGovernment United States Government cloud."
  },
  "neonkube/api/Neon.Kube.ClusterDef.AzureHelper.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.AzureHelper.html",
    "title": "Class AzureHelper | NeonKUBE documentation",
    "keywords": "Class AzureHelper Microsoft Azure helpers. Inheritance Object AzureHelper Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public static class AzureHelper Fields MaxClusterNodes The maximum number of nodes currently allowed in a cluster deployed to Azure. Declaration public const int MaxClusterNodes = 100 Field Value Type Description Int32 MaxHostedEndpoints The maximum number of hosted load balanced TCP/UDP endpoints allowed in a cluster deployed to Azure. Declaration public const int MaxHostedEndpoints = 150 Field Value Type Description Int32 Methods GetDiskSizeGiB(AzureStorageType, Decimal) Converts the requested disk size in bytes to the actual required size of the Azure managed disk in GiB. Declaration public static decimal GetDiskSizeGiB(AzureStorageType storageType, decimal driveSizeBytes) Parameters Type Name Description AzureStorageType storageType Specifies the disk storage type. Decimal driveSizeBytes The requested size in bytes. Returns Type Description Decimal The actual Azure disk size in GiB."
  },
  "neonkube/api/Neon.Kube.ClusterDef.AzureHostingOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.AzureHostingOptions.html",
    "title": "Class AzureHostingOptions | NeonKUBE documentation",
    "keywords": "Class AzureHostingOptions Specifies the Microsoft Azure cluster hosting settings. Inheritance Object AzureHostingOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class AzureHostingOptions Constructors AzureHostingOptions() Constructor. Declaration public AzureHostingOptions() Properties ClientId Client/Application ID for the application created to manage Azure access to neonKUBE provisioning and management tools.. Declaration [JsonProperty(PropertyName = \"ClientId\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"clientId\", ApplyNamingConventions = false)] public string ClientId { get; set; } Property Value Type Description String ClientSecret ClientSecret/AppPassword generated when creating the neon tool's Azure service principal. Declaration [JsonProperty(PropertyName = \"ClientSecret\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"clientSecret\", ApplyNamingConventions = false)] public string ClientSecret { get; set; } Property Value Type Description String DefaultDiskSize Specifies the default Azure disk size to be used when cluster node primary disks. This defaults to 128 GiB but this can be overridden for specific cluster nodes via OpenEbsDiskSize . Declaration [JsonProperty(PropertyName = \"DefaultDiskSize\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"defaultDiskSize\", ApplyNamingConventions = false)] public string DefaultDiskSize { get; set; } Property Value Type Description String Remarks StandardHDD , StandardSSD , and PremiumSSD disks may be provisioned in these sizes: 4GiB , 8GiB , 16GiB , 32GiB , 64GiB , 128GiB , 256GiB , 512GiB , 1TiB , 2TiB , 4TiB , 8TiB , 16TiB , or 32TiB . UltraSSD based disks can be provisioned in these sizes: 4 GiB , 8 GiB , GiB , 16 GiB , 32 GiB , 64 GiB , 128 GiB , 256 GiB , 512 GiB , or from 1 TiB to 64TiB in increments of 1 TiB . note Node disks smaller than 32 GiB are not supported by neonKUBE. We'll automatically upgrade the disk size when necessary. note This size will be rounded up to the next valid disk size for the given storage type and set to the maximum allowed size, when necessary. note The Azure disk sizes listed above may become out-of-date as Azure enhances their services. Review the Azure documentation for more information about what is currently supported. DefaultOpenEbsDiskSize Specifies the default size for cluster node primary disks. This defaults to 128 GiB but can be overridden for specific cluster nodes via OpenEbsDiskSize . Declaration [JsonProperty(PropertyName = \"DefaultOpenEbsDiskSize\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"defaultOpenEbsDiskSize\", ApplyNamingConventions = false)] public string DefaultOpenEbsDiskSize { get; set; } Property Value Type Description String Remarks note Node disks smaller than 32 GiB are not supported by neonKUBE. We'll automatically round up the disk size when necessary. DefaultOpenEbsStorageType Specifies the default Azure storage type of be used for the cluster node primary disks. This defaults to StandardHDD but this can be overridden for specific cluster nodes via OpenEbsStorageType . Declaration [JsonProperty(PropertyName = \"OpenEbsStorageType\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"openEbstorageType\", ApplyNamingConventions = false)] public AzureStorageType DefaultOpenEbsStorageType { get; set; } Property Value Type Description AzureStorageType DefaultStorageType Specifies the default Azure storage type for cluster node primary disks. This defaults to StandardSSD and be overridden for specific cluster nodes via StorageType . Declaration [JsonProperty(PropertyName = \"DefaultStorageType\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"defaultStorageType\", ApplyNamingConventions = false)] public AzureStorageType DefaultStorageType { get; set; } Property Value Type Description AzureStorageType Remarks note UltraSSD storage is still relatively new and your region may not be able to attach ultra drives to all VM instance types. See this note for more information. Note also that Azure does not support OS disks with UltraSSD . neonKUBE automatically provisions OS disks with PremiumSSD when UltraSSD is specified while provisioning data disks with UltraSSD . DefaultVmSize Specifies the default Azure virtual machine size. You the available VM sizes are listed here . note This defaults to Standard_D4as_v4 which includes includes 4 virtual CPUs and 16 GiB RAM. You can override this for specific cluster nodfes via VmSize . note neonKUBE clusters cannot be deployed to ARM-based Azure VM sizes at this time. You must specify an VM size using a Intel or AMD 64-bit processor. note neonKUBE requires control-plane and worker instances to have at least 4 CPUs and 8GiB RAM. Choose an Azure VM size instance type that satisfies these requirements. Declaration [JsonProperty(PropertyName = \"DefaultVmSize\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"defaultVmSize\", ApplyNamingConventions = false)] public string DefaultVmSize { get; set; } Property Value Type Description String DisableProximityPlacement neonKUBE cluster VMs are all deployed within the same Azure placement group by default. This ensures the smallest possible network latency between the cluster VMs. note Proximity placement groups have one downside: they make it more likely that Azure may not be able to find enough unused VMs to satisfy the proximity constraints. This can happen when you first provision a cluster or later on when you try to scale one. For neonKUBE clusters the additional risk of an Azure provisioning failure is going to be very low due to how we use availability sets, which is as similar deployment constraint: control-plane nodes are deployed to one availability set and workers to another. Without a proximity placement group, Azure could deploy the control-plane nodes to one datacenter and the workers to another. This wasn't that likely in the past but as Azure has added more datacenters, the chance of this happening has increased. Adding the proximity placement constrain, requires that Azure deploy both the control-plane nodes and workers in the same datacenter. So say your cluster has 3 control-plane nodes and 50 workers. With proximity placement enabled, the Azure region will need to have a datacenter with 53 VMs available with the specified sizes. With proximity placement disabled, Azure could deploy the 3 control-plane nodes in one datacenter and the 50 workers in another. This property defaults to false . You can disable the proximity placement constraint by setting this to true . Declaration [JsonProperty(PropertyName = \"DisableProximityPlacement\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"disableProximityPlacement\", ApplyNamingConventions = false)] public bool DisableProximityPlacement { get; set; } Property Value Type Description Boolean DomainLabel The DNS domain prefix for the public IP address to be assigned to the cluster. This defaults to \"neon-UUID\" where UUID is generated. Declaration [JsonProperty(PropertyName = \"DomainLabel\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"domainLabel\", ApplyNamingConventions = false)] public string DomainLabel { get; set; } Property Value Type Description String Remarks note Recomendation: To ensure that there's no conflicts with other services deployed to Azure by you or other companies, we recommend that you generate a GUID and assign it to this property. This must be unique across all services deployed to an Azure region (your services as well as any other Azure cluster). The IP address will be exposed by the Azure DNS like: DOMAINLABEL.AZURE-REGION.cloudapp.azure.com For example, a public IP address with the mycluster deployed to the Azure westus region would have this DNS name: mycluster.westus.cloudapp.azure.com Labels can be up to 80 characters in length and may include letters, digits, dashes, underscores, and periods. Environment Specifies the target Azure environment. This defaults to the normal public Azure cloud. See AzureCloudEnvironment for other possibilities. Declaration [JsonProperty(PropertyName = \"Environment\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"environment\", ApplyNamingConventions = false)] public AzureCloudEnvironment Environment { get; set; } Property Value Type Description AzureCloudEnvironment FaultDomains Specifies the number of Azure fault domains the worker nodes should be distributed across. This defaults to 3 which should not be increased without making sure that your subscription supports the increase (most won't). note Manager nodes will always be provisioned in three fault domains to ensure that there will always be a quorum after any single fault domain failure. Declaration [JsonProperty(PropertyName = \"FaultDomains\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"faultDomains\", ApplyNamingConventions = false)] public int FaultDomains { get; set; } Property Value Type Description Int32 Network Specifies the Azure related cluster network options. Declaration [JsonProperty(PropertyName = \"Network\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"network\", ApplyNamingConventions = false)] public AzureNetworkOptions Network { get; set; } Property Value Type Description AzureNetworkOptions Region Identifies the target Azure region (e.g. westus ). Declaration [JsonProperty(PropertyName = \"Region\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"region\", ApplyNamingConventions = false)] public string Region { get; set; } Property Value Type Description String ResourceGroup Azure resource group where all cluster components are to be provisioned. This defaults to \"neon-\" plus the cluster name but can be customized as required. note IMPORTANT: Everything in this resource group will be deleted when the cluster is removed. This means that you must be very careful when adding other resources to this group because these will be deleted as well. Declaration [JsonProperty(PropertyName = \"ResourceGroup\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"resourceGroup\", ApplyNamingConventions = false)] public string ResourceGroup { get; set; } Property Value Type Description String SubscriptionId Azure account subscription ID obtained from the Azure portal. Declaration [JsonProperty(PropertyName = \"SubscriptionId\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"subscriptionId\", ApplyNamingConventions = false)] public string SubscriptionId { get; set; } Property Value Type Description String TenantId Tenant ID generated when creating the neon tool's Azure service principal. Declaration [JsonProperty(PropertyName = \"TenantId\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"tenantId\", ApplyNamingConventions = false)] public string TenantId { get; set; } Property Value Type Description String UpdateDomains Specifies the number of Azure update domains the cluster workers will distributed across. This defaults to 20 You may customize this with a value in the range of 2 ... 20 . Azure automatically distributes VMs across the specified number of update domains and when it's necessary to perform planned maintenance on the underlying hardware or to relocate a VM to another host, Azure guarantees that it will reboot hosts in only one update domain at a time and then wait 30 minutes between update domains to give the application a chance to stablize. A value of 2 indicates that one half of the cluster servers may be rebooted at the same time during an update domain upgrade. A value of 20 indicates that one twentieth of your VMs may be rebooted at a time. note There's no way to specifically assign cluster nodes to specific update domains in Azure. This would have been nice for a cluster hosting replicated database nodes where we'd like to assign replica nodes to different update domains such that all data would still be available while an update domain was being rebooted. I imagine Azure doesn't allow this due to the difficuilty of ensuring these constraints across a very large number of customer deployments. Azure also mentions that the disruption of a VM for planned maintenance can be slight because VMs can be relocated from one host to another while still running. note Manager nodes are always deployed with 20 update domains and since no cluster should ever need anywhere close this number of managers, we'll be ensured that only a single manager will be rebooted together during planned Azure maintenance and the 30 minutes Azure waits after rebooting an update domain gives the rebooted manager a chance to rejoin the other managers and catch up on any changes that happened while it was offline. note neonKUBE deploys manager and worker nodes in separate Azure availability zones. This means that there will always be a quorum of managers available as any one update zone is rebooted. Declaration [JsonProperty(PropertyName = \"UpdateDomains\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"updateDomains\", ApplyNamingConventions = false)] public int UpdateDomains { get; set; } Property Value Type Description Int32 Methods ClearSecrets() Clears all hosting related secrets. Declaration public void ClearSecrets() Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.AzureNetworkOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.AzureNetworkOptions.html",
    "title": "Class AzureNetworkOptions | NeonKUBE documentation",
    "keywords": "Class AzureNetworkOptions Specifies Azure related cluster networking options. Inheritance Object AzureNetworkOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class AzureNetworkOptions Remarks These options are used to customize the cluster's ingress IP address as well as the NAT gateway used to route traffic from the cluster to the Internet. By default, clusters will create two public IP addresses, one attached to the load balancer for inbound traffic and the other to the NAT gateway for outbound traffic, with each address belonging to the cluster's resource group. This works well for many clusters, but one downside is that these addresses will be deleted when the cluster is removed (which removes everything in the resource group). This means that if or when the cluster is redeployed, new public addresses will be created, potentially requiring that DNS records and address whitelists may need to be updated as well. To avoid this, you may create public IP addresses before deploying your cluster and then setting IngressPublicIpAddressId and/or EgressPublicIpPrefixId to the IDs of the addresses you created and the cluster will be deployed using these addresses instead. Since these addresses are not in the resource group, they won't be deleted when the cluster is removed, so you'll be able to reuse them later. SNAT Exhaustion Outbound traffic from the cluster routes through the cluster SNAT Gateway which is assigned a single public IP address by default. This configuration allows the cluster to establish about 64K outbound connections at any given moment. This will be sufficient for many clusters but larger or particularly chatty clusters may exceed this limit. Unfortunately, diagnosing this when it happens can be difficult because applications just see this as random socket connection timeouts. This is known as SNAT Exhaustion . The way to mitigate this is to add additional public IP addresses to the NAT Gateway because each address added can support about 64K connections. neonKUBE clusters can do this by adding a public IP prefix to the NAT Gateway. These represent between multiple IP addresses that are adjacent to each other in the address space. Public IP address prefixes are specified by the number of mask bits in an IPv4 CIDR. This can be customized by setting EgressPublicIpPrefixLength to one of these values: 31 Creates a public IPv4 prefix with 2 public IP addresses. 30 Creates a public IPv4 prefix with 4 public IP addresses. 29 Creates a public IPv4 prefix with 8 public IP addresses. 28 Creates a public IPv4 prefix with 16 public IP addresses (the maximum supported by Azure). 0 Disables prefix creation for the cluster. Larger clusters may need to select a prefix with additional IP addresses to avoid SNAT Exhaustion . You may also create a public IP prefix before deploying your cluster and setting EgressPublicIpPrefixId to its ID. Constructors AzureNetworkOptions() Constructor. Declaration public AzureNetworkOptions() Properties EgressPublicIpAddressId Optionally specifies the ID of an existing public IPv4 address to be assigned to the NAT Gateway to send outboung network traffic. note IMPORTANT: This resource must be located in the same region as the cluster. note Setting this is handy when clusters are reprovisioned because the cluster will end up using the same egress address as before, meaning you won't have to update whitelist rules for other services, etc. Declaration [JsonProperty(PropertyName = \"EgressPublicIpAddressId\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"egressPublicIpAddressId\", ApplyNamingConventions = false)] public string EgressPublicIpAddressId { get; set; } Property Value Type Description String EgressPublicIpPrefixId Optionally specifies the ID of an existing public IPv4 prefix to be assigned to the NAT Gateway to send outboung network traffic. note IMPORTANT: This resource must be located in the same region as the cluster. note Setting this is handy when clusters are reprovisioned because the cluster will end up using the same egress addresses as before, meaning you won't have to update whitelist rules for other services, etc. note Azure clusters support a maximum of 16 IP addresses per prefix. Declaration [JsonProperty(PropertyName = \"EgressPublicIpPrefixId\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"egressPublicIpPrefixId\", ApplyNamingConventions = false)] public string EgressPublicIpPrefixId { get; set; } Property Value Type Description String EgressPublicIpPrefixLength Optionally indicates that a public IPv4 prefix with the specified prefix length should be created and assigned to the NAT Gateway for outbound traffic. Set this to a one of the following non-zero values to enable this: 31 Creates a public IPv4 prefix with 2 public IP addresses. 30 Creates a public IPv4 prefix with 4 public IP addresses. 29 Creates a public IPv4 prefix with 8 public IP addresses. 28 Creates a public IPv4 prefix with 16 public IP addresses (the maximum supported by Azure). 0 Disables prefix creation for the cluster. Larger clusters may need to select a prefix with additional IP addresses to avoid SNAT Exhaustion . Declaration [JsonProperty(PropertyName = \"EgressPublicIpPrefixLength\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"egressPublicIpPrefixLength\", ApplyNamingConventions = false)] public int EgressPublicIpPrefixLength { get; set; } Property Value Type Description Int32 IngressPublicIpAddressId Optionally specifies the ID of an existing public IPv4 address to be assigned to the load balancer to receive inbound network traffic. A new address will be created when this isn't specified. note IMPORTANT: This resource must be located in the same region as the cluster. note Setting this is handy when clusters are reprovisioned because the cluster will end up with the same public address as before, meaning you won't have to update your DNS configuration, etc. Declaration [JsonProperty(PropertyName = \"IngressPublicIpAddressId\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"ingressPublicIpAddressId\", ApplyNamingConventions = false)] public string IngressPublicIpAddressId { get; set; } Property Value Type Description String MaxNatGatewayTcpIdle Optionally specifies the maximum time in minutes that the cluster's NAT gateway will retain an idle outbound TCP connection. This may be set to between [4..120] minutes inclusive. This defaults to 120 minutes . Declaration [JsonProperty(PropertyName = \"MaxNatGatewayTcpIdle\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"maxNatGatewayTcpIdle\", ApplyNamingConventions = false)] public int MaxNatGatewayTcpIdle { get; set; } Property Value Type Description Int32 NodeSubnet specifies the subnet within VnetSubnet where the cluster nodes will be provisioned. This defaults to 10.100.0.0/24 . Declaration [JsonProperty(PropertyName = \"NodeSubnet\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"nodeSubnet\", ApplyNamingConventions = false)] public string NodeSubnet { get; set; } Property Value Type Description String VnetSubnet Specifies the subnet for the Azure VNET. This defaults to 10.100.0.0/24 Declaration [JsonProperty(PropertyName = \"VnetSubnet\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"vnetSubnet\", ApplyNamingConventions = false)] public string VnetSubnet { get; set; } Property Value Type Description String Methods Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.AzureNodeOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.AzureNodeOptions.html",
    "title": "Class AzureNodeOptions | NeonKUBE documentation",
    "keywords": "Class AzureNodeOptions Azure specific options for a cluster node. These options can be used to override defaults specified by AzureHostingOptions . The constructor initializes reasonable values. Inheritance Object AzureNodeOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class AzureNodeOptions Properties DiskSize Optionally specifies the size of the Azure disk to be used as the node's primary disk. This defaults to null which indicates that DefaultDiskSize will be used. Declaration [JsonProperty(PropertyName = \"DiskSize\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"diskSize\", ApplyNamingConventions = false)] public string DiskSize { get; set; } Property Value Type Description String Remarks note Node disks smaller than 64 GiB are not supported by neonKUBE. We'll automatically round up the disk size when necessary. OpenEbsDiskSize Optionally specifies the size of the Azure disk to be used for the node's OpenEBS cStor disk (if any). This defaults to null which indicates that DefaultOpenEbsDiskSize will be used for the node. Declaration [JsonProperty(PropertyName = \"OpenEbsDiskSize\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"openEbsDiskSize\", ApplyNamingConventions = false)] public string OpenEbsDiskSize { get; set; } Property Value Type Description String Remarks note Node disks smaller than 64 GiB are not supported by neonKUBE. We'll automatically round up the disk size when necessary. OpenEbsStorageType Optionally specifies the Azure storage type to be used for the the node's OpenEBS cStor disk (if any). This defaults to Default which indicates that DefaultOpenEbsStorageType will specify the volume type for the node. Declaration [JsonProperty(PropertyName = \"OpenEbsStorageType\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"openEbsStorageType\", ApplyNamingConventions = false)] public AzureStorageType OpenEbsStorageType { get; set; } Property Value Type Description AzureStorageType StorageType Optionally specifies the storage type to use the node's primary disk. This defaults to Default which indicates that DefaultStorageType will specify the storage type for this node. Declaration [JsonProperty(PropertyName = \"StorageType\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"storageType\", ApplyNamingConventions = false)] public AzureStorageType StorageType { get; set; } Property Value Type Description AzureStorageType Remarks StandardHDD specifies relatively slow rotating hard drives, StandardSSD specifies standard SSD based drives, PremiumSSD specifies fast SSD based drives, and finally UltraSSD specifies super fast SSD based drives. note Azure recommends that most production VMs deploy with SSDs. note UltraSSD storage is still relatively new and your region may not be able to attach ultra drives to all VM instance types. See this note for more information. Note also that Azure does not support OS disks with UltraSSD . neonKUBE automatically provisions OS disks with PremiumSSD when UltraSSD is specified while provisioning data disks with UltraSSD . VmSize Optionally specifies the Azure virtual machine size. The available VM sizes are listed here . This defaults to DefaultVmSize . note neonKUBE clusters cannot be deployed to ARM-based Azure V, sizes at this time. You must specify an VM size using a Intel or AMD 64-bit processor. note neonKUBE requires control-plane and worker instances to have at least 4 CPUs and 8GiB RAM. Choose an Azure VM size instance type that satisfies these requirements. Declaration [JsonProperty(PropertyName = \"VmSize\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"vmSize\", ApplyNamingConventions = false)] public string VmSize { get; set; } Property Value Type Description String Methods Validate(ClusterDefinition, String) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition, string nodeName) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. String nodeName The associated node name. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.AzureStorageType.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.AzureStorageType.html",
    "title": "Enum AzureStorageType | NeonKUBE documentation",
    "keywords": "Enum AzureStorageType Enumerates the possible Azure storage account types. Microsoft explains their disk types here: https://docs.microsoft.com/en-us/azure/virtual-machines/windows/disks-types Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public enum AzureStorageType Fields Name Description Default Indicates that the default Azure storage type will be provisioned. When StorageType = Default then DefaultStorageType will be provisioned. If DefaultStorageType = Default then StandardSSD will be provisioned. PremiumSSD Premium managed SSD drives deliver high througput and low latency and are suitable for I/O intensive workloads. These are available in sizes up to 32TiB. StandardHDD Standard managed spinning drives are quite slow but are also very inexpensive. These may be suited for test or latency insensitive clusters. These are available in sizes up to 32TiB. StandardSSD Managed SSD based drives are a cost effect option that offers better latancy and reliability than StandardHDD . These are available in sizes up to 32TiB. UltraSSD Ultra managed SSD drives are intended for the most demanding I/O workloads. These range in size up to 64TiB. note These are still relatively new and your region may not be able to attach ultra drives to all VM instance types. See this note for more information."
  },
  "neonkube/api/Neon.Kube.ClusterDef.BareMetalHostingOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.BareMetalHostingOptions.html",
    "title": "Class BareMetalHostingOptions | NeonKUBE documentation",
    "keywords": "Class BareMetalHostingOptions Specifies hosting settings for bare metal or virtual machines. Inheritance Object BareMetalHostingOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class BareMetalHostingOptions Constructors BareMetalHostingOptions() Default constructor. Declaration public BareMetalHostingOptions() Methods ClearSecrets() Clears all hosting related secrets. Declaration public void ClearSecrets() Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.CloudOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.CloudOptions.html",
    "title": "Class CloudOptions | NeonKUBE documentation",
    "keywords": "Class CloudOptions Describes cloud related cluster settings. Inheritance Object CloudOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class CloudOptions Properties PrefixResourceNames Specifies that cloud resources created for the cluster have their names prefixed by the cluster name. This is a tri-state value that may be Default , True or False . Default indicates that cloud hosting manager will decide whether it makes sense to prefix resource names by default (see the remarks for details), otherwise you can explicitly control this by specifying True or False . This defaults to null . Declaration [JsonProperty(PropertyName = \"PrefixResourceNames\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"prefixResourceNames\", ApplyNamingConventions = false)] public TriState PrefixResourceNames { get; set; } Property Value Type Description TriState Remarks When this property is null (the default), the hosting manager for the target cloud decides whether or not to prefix resource names with the cluster name. AWS Resource names are always prefixed for AWS deployments. This makes sense because AWS resource names are globally scoped and also because load balancer names are required to be unique within an AWS account and region. Azure Resource names are not prefixed by default. neonKUBE clusters deployed to Azure are always created in a resource group and Azure scopes resource names to the group. This means that the prefix really isn't necessary. Google Cloud $todo(jefflill): Update this once we've implemented the Google hosting manager. note It is possible though to deploy a cluster into an existing resource group, along with other already existing resources (perhaps another neonKUBE cluster). You'll need to take care in this situation to avoid resource name conflicts. To handle this, set this property to true such that every cluster resource created will include the cluster name in the resource name prefix. Methods Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.ClusterDefinition.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.ClusterDefinition.html",
    "title": "Class ClusterDefinition | NeonKUBE documentation",
    "keywords": "Class ClusterDefinition Describes a Kubernetes cluster. Inheritance Object ClusterDefinition Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class ClusterDefinition Constructors ClusterDefinition() Default constructor. Declaration public ClusterDefinition() Fields FeatureGates Enables or disables specific Kubernetes features. This can be used to enable alpha quality or other features that are disabled by default for the Kubernetes version being deployed or to disable features. Declaration [JsonProperty(PropertyName = \"FeatureGates\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"featureGates\", ApplyNamingConventions = false)] public Dictionary<string, bool> FeatureGates Field Value Type Description Dictionary < String , Boolean > Remarks This is a dictionary that maps feature names a boolean where true enables the feature and false disables it. You can find a description of the available Kubernetes feature gates here: https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/#feature-gates note Your neonKUBE cluster may be somewhat older than the current Kubernetes version, so some of the features listed may not apply to your cluster. neonKUBE clusters enables specific features by default when you you haven't explicitly disabled them via this property. Note that some features are required and cannot be disabled. EphemeralContainers Enables the ability to add ephemeral containers to running pods. This is very handy for debugging pods. MaxClusterNameLength Maximum number of characters allowed in a cluster name. Declaration public const int MaxClusterNameLength = 24 Field Value Type Description Int32 ReservedPrefix The prefix reserved for neonKUBE specific annotations and labels. Declaration public const string ReservedPrefix = \"neonkube.io/\" Field Value Type Description String Properties ClusterVersion Optionally specifies the semantic version of the neonKUBE cluster being created. This defaults to null which indicates that the latest supported cluster version will be created. Declaration [JsonProperty(PropertyName = \"ClusterVersion\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"clusterVersion\", ApplyNamingConventions = false)] public string ClusterVersion { get; set; } Property Value Type Description String Container Customizes the cluster's container configuration. Declaration [JsonProperty(PropertyName = \"Container\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"container\", ApplyNamingConventions = false)] public ContainerOptions Container { get; set; } Property Value Type Description ContainerOptions ControlNodes Enumerates the cluster control-plane node definitions. Declaration [JsonIgnore] [YamlIgnore] public IEnumerable<NodeDefinition> ControlNodes { get; } Property Value Type Description IEnumerable < NodeDefinition > Datacenter Identifies the datacenter. This defaults to empty string for on-premise clusters or the region for clusters deployed to the cloud. Declaration [JsonProperty(PropertyName = \"Datacenter\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"datacenter\", ApplyNamingConventions = false)] public string Datacenter { get; set; } Property Value Type Description String Remarks note The name may include only letters, numbers, periods, dashes, and underscores. Deployment Optionally specifies options used by ClusterFixture and possibly custom tools for customizing cluster and node names to avoid conflicts. Declaration [JsonProperty(PropertyName = \"Deployment\", Required = Required.Always)] [YamlMember(Alias = \"deployment\", ApplyNamingConventions = false)] public DeploymentOptions Deployment { get; set; } Property Value Type Description DeploymentOptions Description Optionally describes the cluster for humans. This may be a string up to 256 characters long. Declaration [JsonProperty(PropertyName = \"Description\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"description\", ApplyNamingConventions = false)] public string Description { get; set; } Property Value Type Description String DnsNameRegex Regex for verifying cluster names for hosts, routes, groups, etc. This also can be used to (lightly) validate DNS host names. Declaration public static Regex DnsNameRegex { get; } Property Value Type Description Regex Domain The cluster DNS domain. neonKUBE generates a domain like GUID.neoncluster.io for your cluster by default when this is not set. note Setting this to a specific domain that you've already registered is not supported at this time and will be ignored. Declaration [JsonProperty(PropertyName = \"Domain\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"domain\", ApplyNamingConventions = false)] public string Domain { get; set; } Property Value Type Description String Remarks The idea here is that neonKUBE will be use the generated domain to deploy a fully functional cluster out-of-the-box, with real DNS records and a SSL certificate. This works even for clusters deployed behind a firewall or neonDESKTOP built-in clusters running on a workstation or laptop. In the future, we plan to support custom DNS domains where these are pre-registered by the customer or we manage the DNS hosts on behalf of the customer via a domain registar API. Features Specifies optional features to be installed in the cluster. Declaration [JsonProperty(PropertyName = \"Features\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"features\", ApplyNamingConventions = false)] public FeatureOptions Features { get; set; } Property Value Type Description FeatureOptions Hosting Specifies hosting related settings (e.g. the cloud provider). This defaults to null which indicates that the cluster will be hosted on private servers. Declaration [JsonProperty(PropertyName = \"Hosting\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"hosting\", ApplyNamingConventions = false)] public HostingOptions Hosting { get; set; } Property Value Type Description HostingOptions Id The unique cluster ID. This is generated during cluster setup and must not be specified by the user. Declaration [JsonProperty(PropertyName = \"Id\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"id\", ApplyNamingConventions = false)] public string Id { get; set; } Property Value Type Description String IsDesktop Indicates whether the definition describes a neonDESKTOP built-in clusters. Declaration [JsonProperty(PropertyName = \"IsDesktop\", Required = Required.Always)] [YamlMember(Alias = \"isDesktop\", ApplyNamingConventions = false)] public bool IsDesktop { get; set; } Property Value Type Description Boolean IsLocked Indicates whether the cluster should be locked after being deployed successfully. neon-desktop , neon-cli , and ClusterFixture will block distructive operations such as cluster pause , reset , remove , and stop on locked clusters as to help avoid impacting production clusters by accident. Declaration [JsonProperty(PropertyName = \"IsLocked\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"isLocked\", ApplyNamingConventions = false)] public bool IsLocked { get; set; } Property Value Type Description Boolean Kubernetes Returns the Kubernetes cluster options., Declaration [JsonProperty(PropertyName = \"Kubernetes\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"kubernetes\", ApplyNamingConventions = false)] public KubernetesOptions Kubernetes { get; set; } Property Value Type Description KubernetesOptions Latitude Optionally specifies the latitude of the cluster location. This is a value between -90 and +90 degrees. note Latitude and Longitude must both be specified together or not at all. Declaration public double? Latitude { get; set; } Property Value Type Description Nullable < Double > Longitude Optionally specifies the longitude of the cluster location. This is a value between -180 and +180 degrees. note Latitude and Longitude must both be specified together or not at all. Declaration public double? Longitude { get; set; } Property Value Type Description Nullable < Double > Monitor Returns the options to be used for configuring the cluster integrated Elasticsearch/Fluentd/Kibana (Mon) logging stack. Declaration [JsonProperty(PropertyName = \"Monitor\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"monitor\", ApplyNamingConventions = false)] public MonitorOptions Monitor { get; set; } Property Value Type Description MonitorOptions Name The cluster name. note The name may include only letters, numbers, periods, dashes, and underscores and may be up to 24 characters long. Some hosting environments enforce length limits on resource names that we derive from the cluster name, so please limit your cluster name to 24 characters. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Always)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String NameRegex Regex for verifying non-DNS like names that start and end with a letter or digit and may also include dashes. Declaration public static Regex NameRegex { get; } Property Value Type Description Regex NeonCloudToken The JWT used by the cluster to interact with the headend. Declaration [JsonProperty(PropertyName = \"NeonCloudToken\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"neonCloudToken\", ApplyNamingConventions = false)] public string NeonCloudToken { get; set; } Property Value Type Description String NeonClusterDomain Returns the neoncluster.io domain for this cluster. Declaration [JsonIgnore] [YamlIgnore] public string NeonClusterDomain { get; } Property Value Type Description String Network Describes the cluster's network configuration. Declaration [JsonProperty(PropertyName = \"Network\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"network\", ApplyNamingConventions = false)] public NetworkOptions Network { get; set; } Property Value Type Description NetworkOptions NodeDefinitions Describes the cluster nodes. Declaration [JsonProperty(PropertyName = \"Nodes\", Required = Required.Always)] [YamlMember(Alias = \"nodes\", ApplyNamingConventions = false)] public Dictionary<string, NodeDefinition> NodeDefinitions { get; set; } Property Value Type Description Dictionary < String , NodeDefinition > NodeOptions Specifies host node options. Declaration [JsonProperty(PropertyName = \"NodeOptions\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"nodeOptions\", ApplyNamingConventions = false)] public NodeOptions NodeOptions { get; set; } Property Value Type Description NodeOptions Nodes Enumerates all cluster node definitions. Declaration [JsonIgnore] [YamlIgnore] public IEnumerable<NodeDefinition> Nodes { get; } Property Value Type Description IEnumerable < NodeDefinition > PackageProxy Optionally specifies one or more APT proxy/cache servers the cluster will use to install and update Linux packages. These are endpoints like HOSTNAME:PORT or ADDRESS.PORT of a apt-cacher-ng or other package proxy server. The port is generall set to 3142 Multiple proxies may be specified by separating them with spaces. This defaults to referencing the apt-cacher-ng instances running on the control-plane nodes. Declaration [JsonProperty(PropertyName = \"PackageProxy\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"packageProxy\", ApplyNamingConventions = false)] public string PackageProxy { get; set; } Property Value Type Description String Remarks A package cache will greatly reduce the Internet network traffic required to deploy a cluster, especially for large clusters. note The cluster nodes are configured to failover to different proxies or to hit the default Linux distribution package mirror directly if any or all of the caches specified are unavailable. note The package caches will be tried in the order they are listed. This essentially makes the first cache primary, with the others as backups. PublicAddresses Optionally specifies the public IP addresses for the cluster. note For cloud clusters, this will default to the public IP address assigned to the cluster load balancer and for on-premise clusters, this defaults to the IP addresses assigned to the control-plane nodes. This can also be specified explicitly here in the cluster definition. This is useful for things like documenting the public IP address for a router that directs traffic into the cluster. Declaration [JsonProperty(PropertyName = \"PublicAddresses\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"publicAddresses\", ApplyNamingConventions = false)] public List<string> PublicAddresses { get; set; } Property Value Type Description List < String > Purpose Indicates how the cluster is being used. Declaration [JsonProperty(PropertyName = \"Purpose\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"purpose\", ApplyNamingConventions = false)] [JsonConverter(typeof(StringEnumConverter))] public ClusterPurpose Purpose { get; set; } Property Value Type Description ClusterPurpose ResourceTags Optionally specifies custom tags that will be attached to cluster resources in cloud hosting environments. These tags are intended to help you manage your cloud resources as well as help organize your cost reporting. note Currently, this is only supported for clusters deployed to AWS, Azure or Google Cloud. Declaration public List<ResourceTag> ResourceTags { get; set; } Property Value Type Description List < ResourceTag > RootPassword Optionally specifies the cluster root single sign-on (SSO) password. A random password with of PasswordLength will be created by default when no password is specified here. Declaration [JsonProperty(PropertyName = \"RootPassword\", Required = Required.Default)] [YamlMember(Alias = \"rootPassword\", ApplyNamingConventions = false)] public string RootPassword { get; set; } Property Value Type Description String Security Specifies cluster security options. Declaration [JsonProperty(PropertyName = \"Security\", Required = Required.Always)] [YamlMember(Alias = \"security\", ApplyNamingConventions = false)] public SecurityOptions Security { get; set; } Property Value Type Description SecurityOptions SetupState Holds temporary state required by various components during cluster setup. This is a case-insensitive string dictionary that will be maintained during cluster setup and is persisted to disk to support restarting and continuing cluster setup when necessary. This property will be set to null after cluster setup is complete, so this is a suitable place for storing generated secure credentials. As a convention, dictionary keys should use a dot notation like neon-cluster-operator.connstring to avoid naming conflicts and to make it clear what's what during debugging. note IMPORTANT: Do not reference this dictionary directly. Use SetSetupState(String, String) , GetSetupState(String) , and RemoveSetupState(String) . This will protect the dictionary when multiple threads try to access it which is entirely possible since SetupController<NodeMetadata> implicitly performs operations using multiple threads. note IMPORTANT: Any changes to this state persisted automatically . You'll need to call Save() on the cluster login holding the cluster definition. Declaration [JsonProperty(PropertyName = \"SetupState\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"setupState\", ApplyNamingConventions = false)] public Dictionary<string, string> SetupState { get; set; } Property Value Type Description Dictionary < String , String > SortedControlNodes Enumerates the cluster control-plane node definitions sorted in ascending order by name. Declaration [JsonIgnore] [YamlIgnore] public IEnumerable<NodeDefinition> SortedControlNodes { get; } Property Value Type Description IEnumerable < NodeDefinition > SortedControlThenWorkerNodes Enumerates the cluster control-plane nodes sorted by name followed by the worker nodes, also sorted by name. This is convienent for situations like assigning IP addresses or ports such that the control-plane nodes are grouped together first. Declaration [JsonIgnore] [YamlIgnore] public IEnumerable<NodeDefinition> SortedControlThenWorkerNodes { get; } Property Value Type Description IEnumerable < NodeDefinition > SortedNodes Enumerates all cluster node definitions sorted in ascending order by name. Declaration [JsonIgnore] [YamlIgnore] public IEnumerable<NodeDefinition> SortedNodes { get; } Property Value Type Description IEnumerable < NodeDefinition > SortedWorkerNodes Enumerates the cluster worker node definitions sorted in ascending order by name. Declaration [JsonIgnore] [YamlIgnore] public IEnumerable<NodeDefinition> SortedWorkerNodes { get; } Property Value Type Description IEnumerable < NodeDefinition > Storage Specifies the cluster storage related options. Declaration [JsonProperty(PropertyName = \"Storage\", Required = Required.Always)] [YamlMember(Alias = \"storage\", ApplyNamingConventions = false)] public StorageOptions Storage { get; set; } Property Value Type Description StorageOptions TimeSources Specifies the NTP time sources to be configured for the cluster. These are the FQDNs or IP addresses of the sources. This defaults to pool.ntp.org . Declaration [JsonProperty(PropertyName = \"TimeSources\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"timeSources\", ApplyNamingConventions = false)] public string[] TimeSources { get; set; } Property Value Type Description String [] Remarks The cluster control-plane nodes will be configured to synchronize their time with these time sources and the worker nodes will be configured to synchronize their time with the control-plane nodes. Workers Enumerates the cluster worker node definitions. Declaration [JsonIgnore] [YamlIgnore] public IEnumerable<NodeDefinition> Workers { get; } Property Value Type Description IEnumerable < NodeDefinition > Methods AddNode(NodeDefinition) Adds a node to the cluster. Declaration public void AddNode(NodeDefinition node) Parameters Type Name Description NodeDefinition node The new node. AreSimilar(ClusterDefinition, ClusterDefinition) INTERNAL USE ONLY: Compares two ClusterDefinition instances to determine whether they can be considered the same by ClusterFixture when it's deciding whether to reuse an existing cluster or deploy a new one. note This method works by comparing the definitions serialized to JSON after removing a handful of unimportant properties that may conflict. Declaration public static bool AreSimilar(ClusterDefinition definition1, ClusterDefinition definition2) Parameters Type Name Description ClusterDefinition definition1 The first cluster definition. ClusterDefinition definition2 The second cluster definition. Returns Type Description Boolean true when the definitions are close enough for ClusterFixture . ClearSetupState() Removes any temporary setup related state including SetupState , hosting related secrets, as well as temporary state used by the hosting managers. Declaration public ClusterDefinition ClearSetupState() Returns Type Description ClusterDefinition The redacted cluster definition. FromFile(String, Boolean) Parses a YAML cluster definition from a file. Declaration public static ClusterDefinition FromFile(string path, bool strict = false) Parameters Type Name Description String path The file path. Boolean strict Optionally require that all input properties map to ClusterDefinition properties. Returns Type Description ClusterDefinition The parsed ClusterDefinition . Remarks note The source is first preprocessed using PreprocessReader and then is parsed as JSON. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid. IOException Thrown if the file could not be read. FromYaml(String, Boolean, Boolean) Parses a cluster definition from YAML text. Declaration public static ClusterDefinition FromYaml(string yaml, bool strict = false, bool validate = false) Parameters Type Name Description String yaml The JSON text. Boolean strict Optionally require that all input properties map to ClusterDefinition properties. Boolean validate Optionally validate the cluster definition. note You must have already called HostingLoader.Initialize() for validation to work. Returns Type Description ClusterDefinition The parsed ClusterDefinition . Remarks note The source is first preprocessed using PreprocessReader and then is parsed as YAML. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid. GetSetupState(String) Retrieves the value of an item from SetupState when it exists, or null when it does not exist. Use this instead of accessing the dictionary directly for thread safety. Declaration public string GetSetupState(string key) Parameters Type Name Description String key The item key. Returns Type Description String The item value or null if the item doesn't exist. IsValidName(String) Verifies that a string is a valid cluster name. Declaration public static bool IsValidName(string name) Parameters Type Name Description String name The name being tested. Returns Type Description Boolean true if the name is valid. Redact() Clones the current cluster definition and then removes any temporary setup related state including SetupState , hosting related secrets, as well as temporary state used by the hosting managers. Declaration public ClusterDefinition Redact() Returns Type Description ClusterDefinition The redacted cluster definition. RemoveSetupState(String) Removes an item from SetupState if it exists and does notthing when the item doesn't exist. Use this instead of accessing the dictionary directly for thread safety. Declaration public void RemoveSetupState(string key) Parameters Type Name Description String key The item key. SetSetupState(String, String) Adds or updates an item in SetupState . Use this instead of accessing the dictionary directly for thread safety. Declaration public void SetSetupState(string key, string value) Parameters Type Name Description String key The item key. String value The item value. Validate() Validates the cluster definition and also ensures that all null properties are initialized to their default values. Declaration public void Validate() Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid. ValidateFile(String, Boolean) Parses and validates a YAML cluster definition file. Declaration public static void ValidateFile(string path, bool strict = false) Parameters Type Name Description String path The file path. Boolean strict Optionally require that all input properties map to ClusterDefinition properties. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid. IOException Thrown if the file could not be read. ValidatePrivateNodeAddresses() Validates that node private IP addresses are set, are within the nodes subnet, and are unique. This method is intended to be called from hosting options classes like BareMetalHostingOptions which require specified node IP addresses. Declaration public void ValidatePrivateNodeAddresses() Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid. ValidateSize(String, Type, String, String) Ensures that a VM memory or disk size specification is valid and also converts the value to the corresponding long count. Declaration public static long ValidateSize(string sizeValue, Type optionsType, string propertyName, string minimum = null) Parameters Type Name Description String sizeValue The size value string. Type optionsType Type of the property holding the size property (used for error reporting). String propertyName The size property name (used for error reporting). String minimum Optionally specifies the m inimum size as ByteUnits . Returns Type Description Int64 The size converted into a long . Exceptions Type Condition ClusterDefinitionException Thrown if the size is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.ClusterPurpose.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.ClusterPurpose.html",
    "title": "Enum ClusterPurpose | NeonKUBE documentation",
    "keywords": "Enum ClusterPurpose Enumerates the cluster purposes. Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public enum ClusterPurpose Fields Name Description Development Development environment. Production Production environment. Stage Staging environment. Test Test environment. Unspecified Unspecified."
  },
  "neonkube/api/Neon.Kube.ClusterDef.ContainerOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.ContainerOptions.html",
    "title": "Class ContainerOptions | NeonKUBE documentation",
    "keywords": "Class ContainerOptions Specifies CRI-O and local container registry options. note These options can be used to customize the /etc/containers/registries.conf on the cluster nodes as the cluster is provisioned. See more information: here Inheritance Object ContainerOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class ContainerOptions Constructors ContainerOptions() Default constructor. Declaration public ContainerOptions() Properties Registries Optionally customizes how pulls from one or more upstream container registries are performed. This can be used to block registry access, allow insecure HTTP access, or remap target registeries to another location. note These items will generate corresponding [[registry]] items in the /etc/containers/registries.conf file on the cluster nodes. Declaration [JsonProperty(PropertyName = \"Registries\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"registries\", ApplyNamingConventions = false)] public List<Registry> Registries { get; set; } Property Value Type Description List < Registry > SearchRegistries Optionally specifies the prefixes for the default container registeries to be searched when pulling container images that don't identify a source registry. This defaults to Docker Hub ( docker.io ) but zero or more custom DNS hostnames or IP addresses may be specified. note Container registries will be searched for containers in the order that registries appear in this list. Declaration [JsonProperty(PropertyName = \"SearchRegistries\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"searchRegistries\", ApplyNamingConventions = false)] public List<string> SearchRegistries { get; set; } Property Value Type Description List < String >"
  },
  "neonkube/api/Neon.Kube.ClusterDef.DeploymentOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.DeploymentOptions.html",
    "title": "Class DeploymentOptions | NeonKUBE documentation",
    "keywords": "Class DeploymentOptions Specifies cluster deployment options used by ClusterFixture as well as potentially by custom tools. Inheritance Object DeploymentOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class DeploymentOptions Properties Prefix Optional prefix combined with the cluster name to generate the resource group name when deploying the cluster to a cloud environment or combined with the node name for other environments. This is typically used by unit tests deployed by ClusterFixture but can also be used by custom tools to avoid conflicts when multiple tests may be running in parallel (probably on different machines) as well as providing a way to identify and remove clusters or VMs orphaned by previous interrupted tests or tool runs. This will typically be set to something identifying the machine, user, and/or tool running the test like runner0 , jeff , or runner0-jeff . note A dash will be appended automatically to non- null prefixes before prepending this to the cluster name. Declaration [JsonProperty(PropertyName = \"Prefix\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"prefix\", ApplyNamingConventions = false)] public string Prefix { get; set; } Property Value Type Description String Methods GetPrefixedName(String) Prefixes the name passed with Prefix and a dash when Prefix is not null or empty. Declaration public string GetPrefixedName(string name) Parameters Type Name Description String name The name being prefixed. Returns Type Description String The prefixed name."
  },
  "neonkube/api/Neon.Kube.ClusterDef.FeatureOptions.HarborOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.FeatureOptions.HarborOptions.html",
    "title": "Class FeatureOptions.HarborOptions | NeonKUBE documentation",
    "keywords": "Class FeatureOptions.HarborOptions Specifies which optional Harbor related components to be deployed. Inheritance Object FeatureOptions.HarborOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class HarborOptions Properties ChartMuseum Optionally installs the Harbor Chart Museum. This defaults to false . Declaration [JsonProperty(PropertyName = \"ChartMuseum\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"chartMuseum\", ApplyNamingConventions = false)] public bool ChartMuseum { get; set; } Property Value Type Description Boolean Enabled Optionally installs Harbor. This defaults to false . Declaration [JsonProperty(PropertyName = \"Enabled\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"enabled\", ApplyNamingConventions = false)] public bool Enabled { get; set; } Property Value Type Description Boolean Notary Optionally installs the Harbor Notary. This defaults to false . Declaration [JsonProperty(PropertyName = \"Notary\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"notary\", ApplyNamingConventions = false)] public bool Notary { get; set; } Property Value Type Description Boolean Trivy Optionally installs the Harbor Trivy. This defaults to false . Declaration [JsonProperty(PropertyName = \"Trivy\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"trivy\", ApplyNamingConventions = false)] public bool Trivy { get; set; } Property Value Type Description Boolean"
  },
  "neonkube/api/Neon.Kube.ClusterDef.FeatureOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.FeatureOptions.html",
    "title": "Class FeatureOptions | NeonKUBE documentation",
    "keywords": "Class FeatureOptions Specifies which optional cluster features should be deployed. Inheritance Object FeatureOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class FeatureOptions Properties Grafana Indicates whether Grafana is installed. Declaration [JsonProperty(PropertyName = \"Grafana\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"grafana\", ApplyNamingConventions = false)] public bool Grafana { get; set; } Property Value Type Description Boolean Harbor Specifies optional Harbor related components to be installed in the cluster. Declaration [JsonProperty(PropertyName = \"Harbor\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"harbor\", ApplyNamingConventions = false)] public FeatureOptions.HarborOptions Harbor { get; set; } Property Value Type Description FeatureOptions.HarborOptions Kiali Optionally enables the Kiali. This defaults to false . Declaration [JsonProperty(PropertyName = \"Kiali\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"kiali\", ApplyNamingConventions = false)] public bool Kiali { get; set; } Property Value Type Description Boolean Loki Indicates whether Loki is installed. Declaration [JsonProperty(PropertyName = \"Loki\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"loki\", ApplyNamingConventions = false)] public bool Loki { get; set; } Property Value Type Description Boolean Mimir Indicates whether Mimir is installed. Declaration [JsonProperty(PropertyName = \"Mimir\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"mimir\", ApplyNamingConventions = false)] public bool Mimir { get; set; } Property Value Type Description Boolean Minio Indicates whether Minio is installed. Declaration [JsonProperty(PropertyName = \"Minio\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"minio\", ApplyNamingConventions = false)] public bool Minio { get; set; } Property Value Type Description Boolean NodeProblemDetector Optionally installs the Node Problem Detector. This defaults to false . Declaration [JsonProperty(PropertyName = \"NodeProblemDetector\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"nodeProblemDetector\", ApplyNamingConventions = false)] public bool NodeProblemDetector { get; set; } Property Value Type Description Boolean ServiceMesh Optionally enables the Istio service mesh. This defaults to false . Declaration [JsonProperty(PropertyName = \"ServiceMesh\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"serviceMesh\", ApplyNamingConventions = false)] public bool ServiceMesh { get; set; } Property Value Type Description Boolean Tracing Optionally installs Tempo. This defaults to false . Declaration [JsonProperty(PropertyName = \"Tempo\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"tempo\", ApplyNamingConventions = false)] public bool Tracing { get; set; } Property Value Type Description Boolean"
  },
  "neonkube/api/Neon.Kube.ClusterDef.GoogleHostingOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.GoogleHostingOptions.html",
    "title": "Class GoogleHostingOptions | NeonKUBE documentation",
    "keywords": "Class GoogleHostingOptions Specifies the Google Cloud Platform hosting settings. Inheritance Object GoogleHostingOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class GoogleHostingOptions Constructors GoogleHostingOptions() Constructor. Declaration public GoogleHostingOptions() Properties NodeSubnet specifies the subnet within VnetSubnet where the cluster nodes will be provisioned. This defaults to 10.100.0.0/24 . Declaration [JsonProperty(PropertyName = \"NodeSubnet\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"nodeSubnet\", ApplyNamingConventions = false)] public string NodeSubnet { get; set; } Property Value Type Description String VnetSubnet Specifies the subnet for the Azure VNET. This defaults to 10.100.0.0/24 Declaration [JsonProperty(PropertyName = \"VnetSubnet\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"vnetSubnet\", ApplyNamingConventions = false)] public string VnetSubnet { get; set; } Property Value Type Description String Methods ClearSecrets() Clears all hosting related secrets. Declaration public void ClearSecrets() Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.HealthCheckOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.HealthCheckOptions.html",
    "title": "Class HealthCheckOptions | NeonKUBE documentation",
    "keywords": "Class HealthCheckOptions Specifies health check settings for cluster IngressRule rules. note Health check settings are currently honored only for clusters hosted in cloud environments. You'll need to manually configure your router for on-premise clusters. Inheritance Object HealthCheckOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class HealthCheckOptions Remarks neonKUBE clusters deployed to cloud hosting environments include a cloud provided load balancer that routes external network traffic to cluster nodes. Currently, only TCP routing is supported. HTTP and HTTPS traffic is routed as TCP because we don't want to add the complexity of managing TLS certificates at the load balancer and for ingress rules, we really want Isto to handle Cluster routing internally. UDP is not currently supported by Isto, so we don't support it either. You can use this to specify default health check options in NetworkOptions or you can override default options for specific IngressRule rules. Load balancers perform health checks at the interval specified by IntervalSeconds , which defaults to 10 seconds . The health check method is simple: the load balancer simply tries to establish a TCP connection at the target port on the node. The application is considered healthy when a connection can be established. The load balancer considers a node endpoint to be unhealthy when at least ThresholdCount consecutive health checks have failed. This defaults to 2 . The load balancer will stop sending traffic to unhealthy node endpoints until they become healthy again. Properties IntervalSeconds Specifies the interval in seconds between load balancer health checks. This defaults to 10 seconds and must be in the range of 10...300 seconds. Declaration [JsonProperty(PropertyName = \"IntervalSeconds\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"intervalSeconds\", ApplyNamingConventions = false)] public int IntervalSeconds { get; set; } Property Value Type Description Int32 ThresholdCount Specifies the number of consecutive failed health checks before the load balancer will consider the node endpoint to be unhealthy. This defaults to 2 and must be in the range of 2...10 . Declaration [JsonProperty(PropertyName = \"ThresholdCount\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"thresholdCount\", ApplyNamingConventions = false)] public int ThresholdCount { get; set; } Property Value Type Description Int32 Methods Validate(ClusterDefinition, String) Verifies the health settings. Declaration public void Validate(ClusterDefinition clusterDefinition, string name) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. String name Used to identify where the health check property being checked originated when reporting errors. Exceptions Type Condition ClusterDefinitionException Thrown for invalid settings."
  },
  "neonkube/api/Neon.Kube.ClusterDef.HostingEnvironment.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.HostingEnvironment.html",
    "title": "Enum HostingEnvironment | NeonKUBE documentation",
    "keywords": "Enum HostingEnvironment Enumerates the possible cluster hosting environments. Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public enum HostingEnvironment Fields Name Description Aws Amazon Web Services. Azure Microsoft Azure. BareMetal Hosted on directly on pre-provisioned bare metal or virtual machines. Google Google Cloud Platform. HyperV Microsoft Hyper-V hypervisor. Unknown Unknown or unspecified hosting environment. XenServer Citrix XenServer hypervisor running on remote servers (typically for production purposes)."
  },
  "neonkube/api/Neon.Kube.ClusterDef.HostingOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.HostingOptions.html",
    "title": "Class HostingOptions | NeonKUBE documentation",
    "keywords": "Class HostingOptions Specifies the cloud or co-location/on-premise hosting settings. Inheritance Object HostingOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class HostingOptions Constructors HostingOptions() Default constructor. Declaration public HostingOptions() Properties Aws Specifies the Amazon Web Services hosting settings. Declaration [JsonProperty(PropertyName = \"Aws\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"aws\", ApplyNamingConventions = false)] public AwsHostingOptions Aws { get; set; } Property Value Type Description AwsHostingOptions Azure Specifies the Microsoft Azure hosting settings. Declaration [JsonProperty(PropertyName = \"Azure\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"azure\", ApplyNamingConventions = false)] public AzureHostingOptions Azure { get; set; } Property Value Type Description AzureHostingOptions BareMetal Specifies the hosting settings when hosting directly on bare metal or virtual machines. Declaration [JsonProperty(PropertyName = \"BareMetal\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"bareMetal\", ApplyNamingConventions = false)] public BareMetalHostingOptions BareMetal { get; set; } Property Value Type Description BareMetalHostingOptions Cloud Specifies cloud related options for clusters to be deployed to one of the public cloud providers. Declaration [JsonProperty(PropertyName = \"Cloud\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"cloud\", ApplyNamingConventions = false)] public CloudOptions Cloud { get; set; } Property Value Type Description CloudOptions Environment Identifies the cloud or other hosting platform. This defaults to Unknown . Declaration [JsonProperty(PropertyName = \"Environment\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"environment\", ApplyNamingConventions = false)] public HostingEnvironment Environment { get; set; } Property Value Type Description HostingEnvironment Google Specifies the Google Cloud Platform hosting settings. Declaration [JsonProperty(PropertyName = \"Google\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"google\", ApplyNamingConventions = false)] public GoogleHostingOptions Google { get; set; } Property Value Type Description GoogleHostingOptions HyperV Specifies the Hyper-V settings. Declaration [JsonProperty(PropertyName = \"Hyperv\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"hyperv\", ApplyNamingConventions = false)] public HyperVHostingOptions HyperV { get; set; } Property Value Type Description HyperVHostingOptions IsCloudProvider Returns true if the cluster will be hosted by a cloud provider like AWS, Azure or Google. Declaration [JsonIgnore] [YamlIgnore] public bool IsCloudProvider { get; } Property Value Type Description Boolean IsHostedHypervisor Returns true if the cluster will be hosted on non-cloud hypervisors like XenServer or Hyper-V. Declaration [JsonIgnore] [YamlIgnore] public bool IsHostedHypervisor { get; } Property Value Type Description Boolean IsOnPremiseProvider Returns true if the cluster will be hosted by an on-premise (non-cloud) provider. Declaration [JsonIgnore] [YamlIgnore] public bool IsOnPremiseProvider { get; } Property Value Type Description Boolean Vm Specifies common hosting settings for hosted hypervisor environments such as Hyper-V and XenServer. Declaration [JsonProperty(PropertyName = \"VM\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"vm\", ApplyNamingConventions = false)] public VmHostingOptions Vm { get; set; } Property Value Type Description VmHostingOptions XenServer Specifies the hosting settings when hosting on Citrix XenServer or the XCP-ng hypervisors. Declaration [JsonProperty(PropertyName = \"XenServer\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"xenServer\", ApplyNamingConventions = false)] public XenServerHostingOptions XenServer { get; set; } Property Value Type Description XenServerHostingOptions Methods ClearSecrets(ClusterDefinition) Clears all hosting related secrets. Declaration public void ClearSecrets(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.html",
    "title": "Namespace Neon.Kube.ClusterDef | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.ClusterDef Classes AcmeOptions Describes CertManager related options. AddressRule Used to whitelist or blacklist an IP address or subnet within a cluster's IngressRules or EgressAddressRules . note This is currently supported only for clusters hosted on Azure. AWS doesn't support this scenario and we currently don't support automatic router configuration for on-premise environments. AwsHelper AWS helpers. AwsHostingOptions Specifies the Amazon Web Services hosting settings. AwsNetworkOptions Specifies AWS related network options, optionally specifying existing Elastic IP addresses to use for cluster ingress and egress. By default, clusters will be deployed with newly created addresses. This means that the cluster ingress change will change everytime the cluster is redeployed, which means that you may need to update your DNS zone and also that the IP address for outbound traffic will also change which may require that you update whitelist rules for other services. You can mitigate this by creating ingress/egress elastic IPs, setting ElasticIpIngressId and ElasticIpEgressId to their IDs before deploying your cluster. note ElasticIpIngressId and ElasticIpEgressId must be specified together or not at all. AwsNodeOptions AWS specific options for a cluster node. These options can be used to override defaults specified by AwsHostingOptions . The constructor initializes reasonable values. AzureCloudEnvironment Specifies the target Azure environment. AzureHelper Microsoft Azure helpers. AzureHostingOptions Specifies the Microsoft Azure cluster hosting settings. AzureNetworkOptions Specifies Azure related cluster networking options. AzureNodeOptions Azure specific options for a cluster node. These options can be used to override defaults specified by AzureHostingOptions . The constructor initializes reasonable values. BareMetalHostingOptions Specifies hosting settings for bare metal or virtual machines. CloudOptions Describes cloud related cluster settings. ClusterDefinition Describes a Kubernetes cluster. ContainerOptions Specifies CRI-O and local container registry options. note These options can be used to customize the /etc/containers/registries.conf on the cluster nodes as the cluster is provisioned. See more information: here DeploymentOptions Specifies cluster deployment options used by ClusterFixture as well as potentially by custom tools. FeatureOptions Specifies which optional cluster features should be deployed. FeatureOptions.HarborOptions Specifies which optional Harbor related components to be deployed. GoogleHostingOptions Specifies the Google Cloud Platform hosting settings. HealthCheckOptions Specifies health check settings for cluster IngressRule rules. note Health check settings are currently honored only for clusters hosted in cloud environments. You'll need to manually configure your router for on-premise clusters. HostingOptions Specifies the cloud or co-location/on-premise hosting settings. HyperVHostingOptions Specifies hosting settings for the local Microsoft Hyper-V hypervisor. HypervisorHost Describes the location and credentials required to connect to a specific Hyper-V or XenServer hypervisor machine for cluster provisioning. IngressRule Specifies a network ingress rule for the cluster. KubernetesOptions Describes the Kubernetes options for a neonKUBE. LogOptions Specifies the options for configuring the cluster integrated logging and metrics. MetricsOptions Specifies the options for configuring the cluster integrated Prometheus metrics stack: https://prometheus.io/ MinioOptions Specifies cluster Minio options. MonitorOptions Specifies the options for configuring the cluster integrated logging stack. NetworkOptions Describes the network options for a cluster. NodeDefinition Describes a cluster node. NodeLabels Describes the standard cluster and custom labels to be assigned to a cluster node. NodeOptions Describes cluster node options. NodeRole Enumerates the roles a cluster node can assume. OpenEbsOptions Specifies cluster OpenEBS options. Registry Specifies details about an upstream container registry. This can be used to block, remap or indicate that insecure HTTP requests can be used for specific registries. This will be used to generate the [[registry]] entries in the /etc/containers/registries.conf.d/00-neon-cluster.conf file on the cluster nodes. See more details here: here ResourceTag Describes a tag that can be attached to resources for clusters deployed to a cloud. SecurityOptions Specifies cluster security options. StorageOptions Specifies cluster Storage options. TraceOptions Specifies the options for configuring the cluster integrated traceging and metrics. VmHostingOptions Specifies common options for on-premise hypervisor based hosting environments such as Hyper-V and XenServer. VmNodeOptions Specifies common node options for on-premise hypervisor based hosting environments such as Hyper-V and XenServer. XenServerHostingOptions Specifies hosting settings for the Citrix XenServer hypervisor. Enums AddressRuleAction Enumerates the possible actions for an AddressRule . AwsVolumeType Enumerates the AWS EBS volume types. AzureCloudEnvironments Enumerates the possible Azure hosting environments. AzureStorageType Enumerates the possible Azure storage account types. Microsoft explains their disk types here: https://docs.microsoft.com/en-us/azure/virtual-machines/windows/disks-types ClusterPurpose Enumerates the cluster purposes. HostingEnvironment Enumerates the possible cluster hosting environments. IngressProtocol Enumerates the network protocols supported by neonKUBE for ingress traffic. note Kubernetes/Istio does not currently support protocols like UCP or ICMP. MetricsStorageOptions Enumerates the possible Prometheus storage options. NetworkCni Enumerates the supported of cluster network providers. OpenEbsEngine Identifies the OpenEBS storage engines supported by neonKUBE clusters."
  },
  "neonkube/api/Neon.Kube.ClusterDef.HyperVHostingOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.HyperVHostingOptions.html",
    "title": "Class HyperVHostingOptions | NeonKUBE documentation",
    "keywords": "Class HyperVHostingOptions Specifies hosting settings for the local Microsoft Hyper-V hypervisor. Inheritance Object HyperVHostingOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class HyperVHostingOptions Constructors HyperVHostingOptions() Default constructor. Declaration public HyperVHostingOptions() Fields NeonDesktopNodeAddress INTERNAL USE ONLY: Returns the internal IP address reserved for the neonDESKTOP built-in cluster. Declaration [JsonIgnore] [YamlIgnore] public readonly IPAddress NeonDesktopNodeAddress Field Value Type Description IPAddress NeonKubeInternalGateway Returns the gateway address for the NeonKubeInternalSubnet . Declaration [JsonIgnore] [YamlIgnore] public readonly IPAddress NeonKubeInternalGateway Field Value Type Description IPAddress NeonKubeInternalSubnet Returns the subnet to be used for the internal neonkube Hyper-V switch. Declaration [JsonIgnore] [YamlIgnore] public readonly NetworkCidr NeonKubeInternalSubnet Field Value Type Description NetworkCidr Properties NeonDesktopBuiltIn INTERNAL USE ONLY: Indicates whether this is the special neonDESKTOP built-in single-node cluster and the node's private address will be overridden by NeonDesktopNodeAddress when this is true . note Setting this to true implies setting UseInternalSwitch =true . This defaults to false . Declaration [JsonProperty(PropertyName = \"NeonDesktopBuiltIn\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"neonDesktopBuiltIn\", ApplyNamingConventions = false)] public bool NeonDesktopBuiltIn { get; set; } Property Value Type Description Boolean UseInternalSwitch Controls whether the cluster will be deployed on the internal neonkube Hyper-V switch within the NeonKubeInternalSubnet . Note that any PremiseSubnet must be already set to NeonKubeInternalSubnet and Gateway must be set to NeonKubeInternalGateway when this is true . This defaults to false . Declaration [JsonProperty(PropertyName = \"UseInternalSwitch\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"useInternalSwitch\", ApplyNamingConventions = false)] public bool UseInternalSwitch { get; set; } Property Value Type Description Boolean Remarks Note that neonKUBE creates only a single internal Hyper-V switch for the HyperV hosting environment for the NeonKubeInternalSubnet ( 100.64.0.0/24 ). The first and last two addresses of the subnet are reserved: 100.64.0.0 Reserved. 100.64.0.1 The subnet's default gateway providing external access. 100.64.0.2 ... 253 Available for user cluster nodes. 100.64.0.254 Reserved for the neonDESKTOP built-in single node cluster. 100.64.0.255 Reserved as the subnet UDP broadcast address. Methods ClearSecrets() Clears all hosting related secrets. Declaration public void ClearSecrets() Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.HypervisorHost.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.HypervisorHost.html",
    "title": "Class HypervisorHost | NeonKUBE documentation",
    "keywords": "Class HypervisorHost Describes the location and credentials required to connect to a specific Hyper-V or XenServer hypervisor machine for cluster provisioning. Inheritance Object HypervisorHost Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class HypervisorHost Properties Address The IP address or FQDN of the hypervisor machine. Declaration [JsonProperty(PropertyName = \"Address\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"address\", ApplyNamingConventions = false)] public string Address { get; set; } Property Value Type Description String Name The XenServer name. This is used to by NodeDefinition instances to specify where a cluster node is to be provisioned. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String Password The custom password to use when connecting to the hypervisor machine. This overrides HostPassword . Declaration [JsonProperty(PropertyName = \"Password\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"password\", ApplyNamingConventions = false)] public string Password { get; set; } Property Value Type Description String Username The custom username to use when connecting to the hypervisor machine. This overrides HostUsername . Declaration [JsonProperty(PropertyName = \"Username\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"username\", ApplyNamingConventions = false)] public string Username { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.ClusterDef.IngressProtocol.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.IngressProtocol.html",
    "title": "Enum IngressProtocol | NeonKUBE documentation",
    "keywords": "Enum IngressProtocol Enumerates the network protocols supported by neonKUBE for ingress traffic. note Kubernetes/Istio does not currently support protocols like UCP or ICMP. Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public enum IngressProtocol Fields Name Description Http HTTP Https HTTPS Tcp TCP Udp UDP"
  },
  "neonkube/api/Neon.Kube.ClusterDef.IngressRule.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.IngressRule.html",
    "title": "Class IngressRule | NeonKUBE documentation",
    "keywords": "Class IngressRule Specifies a network ingress rule for the cluster. Inheritance Object IngressRule Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class IngressRule Fields DefaultTcpIdleTimeoutMinutes The default TCP idle timeout in minutes. TCP connections managed by a rule will be reset when the idle timeout is exceeded and IdleTcpReset is set to true . Declaration public const int DefaultTcpIdleTimeoutMinutes = 4 Field Value Type Description Int32 Properties AddressRules Optionally specifies whitelisted and/or blacklisted external addresses for inbound traffic. This defaults to allowing inbound traffic from anywhere when the property is null or empty. note Address rules are processed in order, from first to last so you may consider putting your blacklist rules before your whitelist rules. note This is currently supported only for clusters hosted on Azure. AWS doesn't support this scenario and we currently don't support automatic router configuration for on-premise environments. Declaration [JsonProperty(PropertyName = \"AddressRules\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"addressRules\", ApplyNamingConventions = false)] public List<AddressRule> AddressRules { get; set; } Property Value Type Description List < AddressRule > ExternalPort The external ingress port used to handle external (generally Internet) traffic received by the cluster load balancer. Declaration [JsonProperty(PropertyName = \"ExternalPort\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"externalPort\", ApplyNamingConventions = false)] public int ExternalPort { get; set; } Property Value Type Description Int32 IdleTcpReset Optionally controls whether the cluster router or load balancer sends a TCP RESET packet to both ends of a TCP connection that has been idle for longer than TcpIdleTimeoutMinutes . This defaults to true . note At this point, this property is supported only in cloud environments where we can easily control the cluster's external loag balancer. This also has no impact for non-TCP rules. Declaration [JsonProperty(PropertyName = \"IdleTcpReset\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"idleTcpReset\", ApplyNamingConventions = false)] public bool IdleTcpReset { get; set; } Property Value Type Description Boolean IngressHealthCheck Optionally specifies the default cluster load balancer health check settings for the rule. This overrides the default IngressHealthCheck settings. Declaration [JsonProperty(PropertyName = \"IngressHealthCheck\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"ingressHealthCheck\", ApplyNamingConventions = false)] public HealthCheckOptions IngressHealthCheck { get; set; } Property Value Type Description HealthCheckOptions Name The name of the ingress rule. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String NodePort The port on cluster nodes where external traffic received by the load balancer on ExternalPort will be forwarded. The cluster's ingress gateway (Istio) will be configured to listen for traffic on this port and route it into the cluster. Declaration [JsonProperty(PropertyName = \"NodePort\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"nodePort\", ApplyNamingConventions = false)] public int NodePort { get; set; } Property Value Type Description Int32 Protocol Identifies the network protocol. This defaults to Tcp . Declaration [JsonProperty(PropertyName = \"Protocol\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"protocol\", ApplyNamingConventions = false)] public IngressProtocol Protocol { get; set; } Property Value Type Description IngressProtocol TargetPort The target ingress port internal to the cluster. The cluster's ingress gateway (Istio) applies routing rules (virtual service) to the network traffic as it was received on TargetPort . This decouples routing rules from NodePort which may change for different hosting environments. This property is optional and defaults to zero, indicating that the traffic should be routed to just the node port but should not be routed through ingress gateway . This is useful for handling UDP traffic which Istio doesn't currently support and perhaps some other scenarios. Declaration [JsonProperty(PropertyName = \"TargetPort\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"targetPort\", ApplyNamingConventions = false)] public int TargetPort { get; set; } Property Value Type Description Int32 TcpIdleTimeoutMinutes Optionally specifies the TCP idle time out for TCP related ingress protocols like Http , Https , and Tcp . Inbound TCP connections that have no network traffic going either way will be closed by supported load balancers or routers. This defaults to DefaultTcpIdleTimeoutMinutes ( 4 minutes ). note At this point, this property is supported only in cloud environments where we can easily control the cluster's external loag balancer. This also has no impact for non-TCP rules. Also note that this value may be modified to ensure that it honors the range of values supported by the current cloud. Declaration [JsonProperty(PropertyName = \"TcpIdleTimeoutMinutes\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"tcpIdleTimeoutMinutes\", ApplyNamingConventions = false)] public int TcpIdleTimeoutMinutes { get; set; } Property Value Type Description Int32"
  },
  "neonkube/api/Neon.Kube.ClusterDef.KubernetesOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.KubernetesOptions.html",
    "title": "Class KubernetesOptions | NeonKUBE documentation",
    "keywords": "Class KubernetesOptions Describes the Kubernetes options for a neonKUBE. Inheritance Object KubernetesOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class KubernetesOptions Constructors KubernetesOptions() Default constructor. Declaration public KubernetesOptions() Properties AllowPodsOnControlPlane Enable pods to be scheduled on cluster control-plane nodes. This defaults to null which will allow pods to be scheduled on control-plane nodes if the cluster consists only of control-plane nodes (e.g. for a single node cluster. This defaults to false for clusters with worker nodes. Declaration [JsonProperty(PropertyName = \"AllowPodsOnControlPlane\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"allowPodsOnControlPlane\", ApplyNamingConventions = false)] public bool? AllowPodsOnControlPlane { get; set; } Property Value Type Description Nullable < Boolean > DashboardVersion The version of Kubernetes dashboard to be installed. This defaults to default which will install the latest tested version of Kubernetes. Declaration [JsonProperty(PropertyName = \"DashboardVersion\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"dashboardVersion\", ApplyNamingConventions = false)] public string DashboardVersion { get; set; } Property Value Type Description String EvictionHard A is a map of signal names to quantities that defines hard eviction thresholds. For example: {\"memory.available\": \"300Mi\"}. To explicitly disable, pass a 0% or 100% threshold on an arbitrary resource. Default: memory.available: \"100Mi\" nodefs.available: \"10%\" nodefs.inodesFree: \"5%\" imagefs.available: \"15%\" Declaration [JsonProperty(PropertyName = \"EvictionHard\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"evictionHard\", ApplyNamingConventions = false)] public Dictionary<string, string> EvictionHard { get; set; } Property Value Type Description Dictionary < String , String > HelmVersion The version of Helm to be installed. This defaults to default which will install a reasonable version for the Kubernetes release being inbstalled. Declaration [JsonProperty(PropertyName = \"HelmVersion\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"helmVersion\", ApplyNamingConventions = false)] public string HelmVersion { get; set; } Property Value Type Description String KubeReserved A set of ResourceName=ResourceQuantity (e.g. cpu=200m,memory=150G) pairs that describe resources reserved for kubernetes system components. Currently cpu, memory and local storage for root file system are supported. See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ for more details. Default: nil Declaration [JsonProperty(PropertyName = \"KubeReserved\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"kubeReserved\", ApplyNamingConventions = false)] public Dictionary<string, string> KubeReserved { get; set; } Property Value Type Description Dictionary < String , String > MaxPodsPerNode The maximum number of Pods that can run on this Kubelet. The value must be a non-negative integer. If DynamicKubeletConfig (deprecated; default off) is on, when dynamically updating this field, consider that changes may cause Pods to fail admission on Kubelet restart, and may change the value reported in Node.Status.Capacity[v1.ResourcePods], thus affecting future scheduling decisions. Increasing this value may also decrease performance, as more Pods can be packed into a single node. Default: 250 Declaration [JsonProperty(PropertyName = \"MaxPodsPerNode\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"maxPodsPerNode\", ApplyNamingConventions = false)] public int MaxPodsPerNode { get; set; } Property Value Type Description Int32 ShutdownGracePeriodCriticalPodsSeconds Specifies the amount of time that Kubelet running on the cluster nodes will delay node shutdown for critical nodes. This defaults to 120 seconds (2 minutes) and must be less than ShutdownGracePeriodSeconds and not less than 30 seconds . Declaration [JsonProperty(PropertyName = \"ShutdownGracePeriodCriticalPodsSeconds\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"shutdownGracePeriodCriticalPodsSeconds\", ApplyNamingConventions = false)] public int ShutdownGracePeriodCriticalPodsSeconds { get; set; } Property Value Type Description Int32 Remarks Here's the Kubernetes documentation for this: https://kubernetes.io/docs/concepts/architecture/nodes/#graceful-node-shutdown https://kubernetes.io/docs/concepts/architecture/nodes/#graceful-node-shutdown https://kubernetes.io/blog/2021/04/21/graceful-node-shutdown-beta/ https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/#kubelet-config-k8s-io-v1beta1-KubeletConfiguration https://www.freedesktop.org/wiki/Software/systemd/inhibit/ It appears that when Kubelet detects that the node is being shutdown it tries to gracefully shutdown pods like this: Pods are signaled to shutdown in PriorityClass order from lowest priority first, up to but not including critical pods. These pods will be given up to ShutdownGracePeriodSeconds to stop gracefully before they may be forcibly terminated. After ShutdownGracePeriodSeconds minus- ShutdownGracePeriodCriticalPodsSeconds has elapsed since Kubelet detected node shutdown or all non-cr PriorityClass ordeitical pods have been stopped, Kubelet will start shutting down critical pods in PriorityClass order. Kubelet will inhibit the kernel from shutting down the node until all pods have been shutdown or ShutdownGracePeriodSeconds has elapsed. Once either of these conditions are true, Kubelet will release this lock so that the node can continue shutting down. ShutdownGracePeriodSeconds Specfies the amount of time Kubelet running on the cluster nodes will delay node shutdown while gracefully terminating pods on the node. This is expressed in seconds and must be greater than zero. This defaults to 360 seconds (65 minutes) and cannot be less than 30 seconds . Declaration [JsonProperty(PropertyName = \"ShutdownGracePeriodSeconds\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"shutdownGracePeriodSeconds\", ApplyNamingConventions = false)] public int ShutdownGracePeriodSeconds { get; set; } Property Value Type Description Int32 Remarks Here's the Kubernetes documentation for this: https://kubernetes.io/docs/concepts/architecture/nodes/#graceful-node-shutdown https://kubernetes.io/docs/concepts/architecture/nodes/#graceful-node-shutdown https://kubernetes.io/blog/2021/04/21/graceful-node-shutdown-beta/ https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/#kubelet-config-k8s-io-v1beta1-KubeletConfiguration https://www.freedesktop.org/wiki/Software/systemd/inhibit/ It appears that when Kubelet detects that the node is being shutdown it tries to gracefully shutdown pods like this: Pods are signaled to shutdown in PriorityClass order from lowest priority first, up to but not including critical pods. These pods will be given up to ShutdownGracePeriodSeconds to stop gracefully before they may be forcibly terminated. After ShutdownGracePeriodSeconds minus- ShutdownGracePeriodCriticalPodsSeconds has elapsed since Kubelet detected node shutdown or all non-cr PriorityClass ordeitical pods have been stopped, Kubelet will start shutting down critical pods in PriorityClass order. Kubelet will inhibit the kernel from shutting down the node until all pods have been shutdown or ShutdownGracePeriodSeconds has elapsed. Once either of these conditions are true, Kubelet will release this lock so that the node can continue shutting down. SystemReserved A set of ResourceName=ResourceQuantity (e.g. cpu=200m,memory=150G) pairs that describe resources reserved for non-kubernetes components. Currently only cpu and memory are supported. See http://kubernetes.io/docs/user-guide/compute-resources for more detail. Default: nil Declaration [JsonProperty(PropertyName = \"SystemReserved\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"systemReserved\", ApplyNamingConventions = false)] public Dictionary<string, string> SystemReserved { get; set; } Property Value Type Description Dictionary < String , String > Version The version of Kubernetes to be installed. This defaults to default which will install the latest tested version of Kubernetes. The minimum supported version is 1.13.0 . Declaration [JsonProperty(PropertyName = \"Version\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"version\", ApplyNamingConventions = false)] public string Version { get; set; } Property Value Type Description String Methods ClearSecrets() Clears any sensitive properties like the Docker registry credentials. Declaration public void ClearSecrets() Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.LogOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.LogOptions.html",
    "title": "Class LogOptions | NeonKUBE documentation",
    "keywords": "Class LogOptions Specifies the options for configuring the cluster integrated logging and metrics. Inheritance Object LogOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class LogOptions Properties LogRetentionDays Log retention period. Logs beyond this number of days will be purged by the ClusterManager Declaration [JsonProperty(PropertyName = \"LogRetentionDays\", Required = Required.Default)] [YamlMember(Alias = \"logRetentionDays\", ApplyNamingConventions = false)] public int LogRetentionDays { get; set; } Property Value Type Description Int32 Methods Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.MetricsOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.MetricsOptions.html",
    "title": "Class MetricsOptions | NeonKUBE documentation",
    "keywords": "Class MetricsOptions Specifies the options for configuring the cluster integrated Prometheus metrics stack: https://prometheus.io/ Inheritance Object MetricsOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class MetricsOptions Properties Storage Indicates where Prometheus metrics should be stored. This defaults to Ephemeral . Declaration [JsonProperty(PropertyName = \"Storage\", Required = Required.Default)] [YamlMember(Alias = \"storage\", ApplyNamingConventions = false)] public MetricsStorageOptions Storage { get; set; } Property Value Type Description MetricsStorageOptions Methods Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.MetricsStorageOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.MetricsStorageOptions.html",
    "title": "Enum MetricsStorageOptions | NeonKUBE documentation",
    "keywords": "Enum MetricsStorageOptions Enumerates the possible Prometheus storage options. Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public enum MetricsStorageOptions Fields Name Description Ephemeral Ephemeral (default). Filesystem Filesystem storage."
  },
  "neonkube/api/Neon.Kube.ClusterDef.MinioOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.MinioOptions.html",
    "title": "Class MinioOptions | NeonKUBE documentation",
    "keywords": "Class MinioOptions Specifies cluster Minio options. Inheritance Object MinioOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class MinioOptions Properties VolumeSize The size of each volume to be mounted to each server. Declaration [JsonProperty(PropertyName = \"VolumeSize\", Required = Required.Default)] [YamlMember(Alias = \"volumeSize\", ApplyNamingConventions = false)] public string VolumeSize { get; set; } Property Value Type Description String VolumesPerNode Specifies the number of volumes per server. This defaults to 4. Declaration [JsonProperty(PropertyName = \"VolumesPerNode\", Required = Required.Default)] [YamlMember(Alias = \"volumesPerNode\", ApplyNamingConventions = false)] public int VolumesPerNode { get; set; } Property Value Type Description Int32"
  },
  "neonkube/api/Neon.Kube.ClusterDef.MonitorOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.MonitorOptions.html",
    "title": "Class MonitorOptions | NeonKUBE documentation",
    "keywords": "Class MonitorOptions Specifies the options for configuring the cluster integrated logging stack. Inheritance Object MonitorOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class MonitorOptions Properties Logs Logging options. Declaration [JsonProperty(PropertyName = \"Logs\", Required = Required.Default)] [YamlMember(Alias = \"logs\", ApplyNamingConventions = false)] public LogOptions Logs { get; set; } Property Value Type Description LogOptions Metrics Metrics options Declaration [JsonProperty(PropertyName = \"Metrics\", Required = Required.Default)] [YamlMember(Alias = \"metrics\", ApplyNamingConventions = false)] public MetricsOptions Metrics { get; set; } Property Value Type Description MetricsOptions Traces Tracing options Declaration [JsonProperty(PropertyName = \"Traces\", Required = Required.Default)] [YamlMember(Alias = \"traces\", ApplyNamingConventions = false)] public TraceOptions Traces { get; set; } Property Value Type Description TraceOptions Methods Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.NetworkCni.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.NetworkCni.html",
    "title": "Enum NetworkCni | NeonKUBE documentation",
    "keywords": "Enum NetworkCni Enumerates the supported of cluster network providers. Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public enum NetworkCni Fields Name Description Calico The Calico network provider. As of 01/2019, this is probably the most popular network provider. This is currently the default provider deployed for a neonKUBE but we expect to change this to the Istio integrated provider when that is ready. Istio The Istio integrated provider. This isn't quite ready for prime time yet but will eventually become the default provider."
  },
  "neonkube/api/Neon.Kube.ClusterDef.NetworkOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.NetworkOptions.html",
    "title": "Class NetworkOptions | NeonKUBE documentation",
    "keywords": "Class NetworkOptions Describes the network options for a cluster. Inheritance Object NetworkOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class NetworkOptions Constructors NetworkOptions() Default constructor. Declaration public NetworkOptions() Properties AcmeOptions Specifies the ACME (Let's Encrypt,...) options. Declaration [JsonProperty(PropertyName = \"Acme\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"acme\", ApplyNamingConventions = false)] public AcmeOptions AcmeOptions { get; set; } Property Value Type Description AcmeOptions EgressAddressRules Optionally specifies whitelisted and/or blacklisted external addresses for outbound traffic. This defaults to allowing outbound traffic to anywhere when the property is null or empty. note Address rules are processed in order from first to last, so you may consider putting your blacklist rules before your whitelist rules. note These rules currently apply to all network ports. note This is not currently supported on AWS. Declaration [JsonProperty(PropertyName = \"EgressAddressRules\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"egressAddressRules\", ApplyNamingConventions = false)] public List<AddressRule> EgressAddressRules { get; set; } Property Value Type Description List < AddressRule > Gateway Specifies the default network gateway address to be configured for hosts. This defaults to the first usable address in the PremiseSubnet . For example, for the 10.0.0.0/24 subnet, this will be set to 10.0.0.1 . This is ignored for cloud hosting environments. Declaration [JsonProperty(PropertyName = \"Gateway\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"gateway\", ApplyNamingConventions = false)] public string Gateway { get; set; } Property Value Type Description String IngressHealthCheck Optionally specifies the default cluster load balancer health check settings for the IngressRules . This defaults to reasonable values and can be overriden for specific rules. Declaration [JsonProperty(PropertyName = \"IngressHealthCheck\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"ingressHealthCheck\", ApplyNamingConventions = false)] public HealthCheckOptions IngressHealthCheck { get; set; } Property Value Type Description HealthCheckOptions IngressRules Optionally sets the ingress routing rules external traffic received by nodes with Ingress enabled into one or more Istio ingress gateway services which are then responsible for routing to the target Kubernetes services. This defaults to allowing inbound HTTP/HTTPS traffic and cluster setup also adds a TCP rule for the Kubernetes API server on port 6442 . Declaration [JsonProperty(PropertyName = \"IngressRules\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"ingressRules\", ApplyNamingConventions = false)] public List<IngressRule> IngressRules { get; set; } Property Value Type Description List < IngressRule > ManagementAddressRules Optionally specifies whitelisted and/or blacklisted external addresses for node management via SSH NAT rules as well as cluster management via the Kubernetes API via port 6443. This defaults to allowing inbound traffic from anywhere when the property is null or empty. note Address rules are processed in order from first to last, so you may consider putting your blacklist rules before your whitelist rules. note This is currently supported only for clusters hosted on Azure. AWS doesn't support this scenario and we currently don't support automatic router configuration for on-premise environments. Declaration [JsonProperty(PropertyName = \"ManagementAddressRules\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"managementAddressRules\", ApplyNamingConventions = false)] public List<AddressRule> ManagementAddressRules { get; set; } Property Value Type Description List < AddressRule > MutualPodTLS Optionally enable Istio mutual TLS support for cross pod communication. This defaults to false . Declaration [JsonProperty(PropertyName = \"MutualPodTLS\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"mutualPodTLS\", ApplyNamingConventions = false)] public bool MutualPodTLS { get; set; } Property Value Type Description Boolean Nameservers The IP addresses of the DNS nameservers to be used by the cluster. For cloud environments, this defaults the name servers provided by the cloud. For on-premise environments, this defaults to the Google Public DNS servers: [\"8.8.8.8\", \"8.8.4.4\" ] . Declaration [JsonProperty(PropertyName = \"Nameservers\", Required = Required.Default)] [YamlMember(Alias = \"nameservers\", ApplyNamingConventions = false)] public List<string> Nameservers { get; set; } Property Value Type Description List < String > NodeMtu Optionally overrides the default MTU (maximum transmission unit) configured for cluster node network interfaces. The default MTU for the hosting environment will be used when NodeMtu =0 , otherwise this can be configured as a value between 512-9000 . note WARNING: This is an advanced feature . Only people who really know networking and their network environment should modify this. Declaration [JsonProperty(PropertyName = \"NodeMtu\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"nodeMtu\", ApplyNamingConventions = false)] public int NodeMtu { get; set; } Property Value Type Description Int32 PodSubnet Specifies the pod subnet to be used for the cluster. This subnet will be split so that each node will be allocated its own subnet. This defaults to 10.254.0.0/16 . note WARNING: This subnet must not conflict with any other subnets provisioned within the premise network. Declaration [JsonProperty(PropertyName = \"PodSubnet\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"podSubnet\", ApplyNamingConventions = false)] public string PodSubnet { get; set; } Property Value Type Description String PremiseSubnet Specifies the subnet for entire host network for on-premise environments like BareMetal , HyperV and XenServer . This is required for those environments and ignored for other environments which specify network subnets in their related hosting options. Declaration [JsonProperty(PropertyName = \"PremiseSubnet\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"premiseSubnet\", ApplyNamingConventions = false)] public string PremiseSubnet { get; set; } Property Value Type Description String ReservedIngressEndPort Specifies the end of a range of ingress load balancer ports reserved by neonKUBE. These are reserved for temporarily exposing SSH from individual cluster nodes to the Internet during cluster setup as well as afterwards so that a cluster node can be accessed remotely by a cluster operator as well as for other purposes and for potential future features such as an integrated note The number ports between ReservedIngressStartPort and ReservedIngressEndPort must include at least as many ports as there will be nodes deployed to the cluster for the temporary SSH NAT rules plus another 100 ports reserved for other purposes. This range defaults to 64000-64999 which will support a cluster with up to 900 nodes. This default range is unlikely to conflict with ports a cluster is likely to need expose to the Internet like HTTP/HTTPS (80/443). You can change this range for your cluster to resolve any conflicts when necessary. Declaration [JsonProperty(PropertyName = \"ReservedIngressEndPort\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"reservedIngressEndPort\", ApplyNamingConventions = false)] public int ReservedIngressEndPort { get; set; } Property Value Type Description Int32 ReservedIngressStartPort Specifies the start of a range of ingress load balancer ports reserved by neonKUBE. These are reserved for temporarily exposing SSH from individual cluster nodes to the Internet during cluster setup as well as afterwards so that a cluster node can be accessed remotely by a cluster operator as well as for other purposes and for potential future features such as an integrated VPN. note The number ports between ReservedIngressStartPort and ReservedIngressEndPort must include at least as many ports as there will be nodes deployed to the cluster for the temporary SSH NAT rules plus another 100 ports reserved for other purposes. This range defaults to 64000-64999 which will support a cluster with up to 900 nodes. This default range is unlikely to conflict with ports a cluster is likely to need expose to the Internet like HTTP/HTTPS (80/443). You can change this range for your cluster to resolve any conflicts when necessary. Declaration [JsonProperty(PropertyName = \"ReservedIngressStartPort\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"reservedIngressStartPort\", ApplyNamingConventions = false)] public int ReservedIngressStartPort { get; set; } Property Value Type Description Int32 ServiceSubnet Specifies the subnet subnet to be used for the allocating service addresses within the cluster. This defaults to 10.253.0.0/16 . Declaration [JsonProperty(PropertyName = \"ServiceSubnet\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"serviceSubnet\", ApplyNamingConventions = false)] public string ServiceSubnet { get; set; } Property Value Type Description String Methods Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.NodeDefinition.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.NodeDefinition.html",
    "title": "Class NodeDefinition | NeonKUBE documentation",
    "keywords": "Class NodeDefinition Describes a cluster node. Inheritance Object NodeDefinition Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class NodeDefinition Constructors NodeDefinition() Constructor. Declaration public NodeDefinition() Properties Address The node's IP address or null if one has not been assigned yet. Note that an node's IP address cannot be changed once the node has been added to the cluster. Declaration [JsonProperty(PropertyName = \"Address\", Required = Required.Default)] [YamlMember(Alias = \"address\", ApplyNamingConventions = false)] public string Address { get; set; } Property Value Type Description String Aws AWS provisioning options for this node, or null to use reasonable defaults. Declaration [JsonProperty(PropertyName = \"Aws\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"aws\", ApplyNamingConventions = false)] public AwsNodeOptions Aws { get; set; } Property Value Type Description AwsNodeOptions Azure Azure provisioning options for this node, or null to use reasonable defaults. Declaration [JsonProperty(PropertyName = \"Azure\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"azure\", ApplyNamingConventions = false)] public AzureNodeOptions Azure { get; set; } Property Value Type Description AzureNodeOptions Ingress Indicates whether this node should be configured to accept external network traffic on node ports and route that into the cluster. This defaults to false . note If all nodes have Ingress set to false and the cluster defines one or more IngressRules then neonKUBE will choose a reasonable set of nodes to accept inbound traffic. Declaration [JsonProperty(PropertyName = \"Ingress\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"ingress\", ApplyNamingConventions = false)] public bool Ingress { get; set; } Property Value Type Description Boolean IsControlPane Indicates that the node will act as a control-plane node (defaults to false ). Declaration [JsonIgnore] [YamlIgnore] public bool IsControlPane { get; } Property Value Type Description Boolean Remarks Control-plane nodes are reponsible for managing service discovery and coordinating pod deployment across the cluster. An odd number of control-plane nodes must be deployed in a cluster (to help prevent split-brain). One control-plane node may be deployed for non-production environments, but to enable high-availability, three or five control-plane nodes may be deployed. IsWorker Returns true for worker nodes. Declaration [JsonIgnore] [YamlIgnore] public bool IsWorker { get; } Property Value Type Description Boolean Labels Specifies the labels to be assigned to the cluster node. These can describe details such as the host CPU, RAM, storage, etc. NodeLabels for more information. Declaration [JsonProperty(PropertyName = \"Labels\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"labels\", ApplyNamingConventions = false)] public NodeLabels Labels { get; set; } Property Value Type Description NodeLabels Name Uniquely identifies the node within the cluster. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String Remarks note The name may include only letters, numbers, periods, dashes, and underscores and also that all names will be converted to lowercase. OpenEbsStorage Indicates that this node will provide a cStor block device for the cStorPool maintained by the cluster OpenEBS service that provides cloud optimized storage. This defaults to false note If all nodes have OpenEbsStorage set to false then most neonKUBE hosting managers will automatically choose the nodes that will host the cStor block devices by configuring up to three nodes to do this, favoring worker nodes over control-plane nodes when possible. note The BareMetal hosting manager works a bit differently from the others. It requires that at least one node have OpenEbsStorage =true and that node must have an empty unpartitioned block device available to be provisoned as an cStor. Declaration [JsonProperty(PropertyName = \"OpenEbsStorage\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"openEbsStorage\", ApplyNamingConventions = false)] public bool OpenEbsStorage { get; set; } Property Value Type Description Boolean Role Returns the node's NodeRole . This defaults to Worker . Declaration [JsonProperty(PropertyName = \"Role\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"role\", ApplyNamingConventions = false)] public string Role { get; set; } Property Value Type Description String Taints Specifies the taints to be assigned to the cluster node. Declaration [JsonProperty(PropertyName = \"Taints\")] [YamlMember(Alias = \"taints\", ApplyNamingConventions = false)] public List<V1Taint> Taints { get; set; } Property Value Type Description List < k8s.Models.V1Taint > Vm Hypervisor hosting related options for environments like Hyper-V and XenServer. Declaration [JsonProperty(PropertyName = \"Vm\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"vm\", ApplyNamingConventions = false)] public VmNodeOptions Vm { get; set; } Property Value Type Description VmNodeOptions Methods GetDataDiskSize(ClusterDefinition) Returns the size of the data disk as a string with optional ByteUnits unit suffix. Declaration public string GetDataDiskSize(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Returns Type Description String The disk size or null when the node has no data disk. GetOsDiskSize(ClusterDefinition) Returns the size of the operating system boot disk as a string with optional ByteUnits unit suffix. Declaration public string GetOsDiskSize(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Returns Type Description String The disk size. ParseFromLabels(Dictionary<String, String>) Parses a NodeDefinition from Kubernetes node labels. Declaration public static NodeDefinition ParseFromLabels(Dictionary<string, string> labels) Parameters Type Name Description Dictionary < String , String > labels The node labels. Returns Type Description NodeDefinition The parsed NodeDefinition . Validate(ClusterDefinition) Validates the node definition. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ArgumentException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.NodeLabels.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.NodeLabels.html",
    "title": "Class NodeLabels | NeonKUBE documentation",
    "keywords": "Class NodeLabels Describes the standard cluster and custom labels to be assigned to a cluster node. Inheritance Object NodeLabels Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class NodeLabels Remarks Labels are name/value properties that can be assigned to the cluster nodes for pod scheduling and other purposes. By convention, label names should use a reverse domain name prefix using a DNS domain you control. For example, neonCLUSTER cluster related labels are prefixed with \"io.neonkube/...\" . You should follow this convention for any custom labels you define. note You may specify labels without a domain prefix if you're not concerned about potential conflicts. Label names must begin and end with a letter or digit and may include letters, digits, dashes and dots within. Dots or dashes must not appear consecutively. note Whitespace is not allowed in label values. This class exposes several built-in cluster properties. You can use the Custom dictionary to add your own labels. Constructors NodeLabels() Default constructor. Declaration public NodeLabels() NodeLabels(NodeDefinition) Constructor. Declaration public NodeLabels(NodeDefinition node) Parameters Type Name Description NodeDefinition node The node definition. Fields LabelAddress Reserved label name that identifies the node's private IP address. Declaration public const string LabelAddress = \"neonkube.io/node.private_address\" Field Value Type Description String LabelAzureDriveSize Reserved label name that identifies the node's Azure attached drive size. Declaration public const string LabelAzureDriveSize = \"neonkube.io/azure.drive-size\" Field Value Type Description String LabelAzureStorageType Reserved label name that identifies the node's Azure attached storage type. Declaration public const string LabelAzureStorageType = \"neonkube.io/azure.storage-type\" Field Value Type Description String LabelAzureVmSize Reserved label name that identifies the node's Azure VM size. Declaration public const string LabelAzureVmSize = \"neonkube.io/azure.vm_size\" Field Value Type Description String LabelComputeCores Reserved label name for ComputeCores . Declaration public const string LabelComputeCores = \"neonkube.io/compute.cores\" Field Value Type Description String LabelComputeRamMiB Reserved label name for ComputeRam . Declaration public const string LabelComputeRamMiB = \"neonkube.io/compute.ram-mib\" Field Value Type Description String LabelDatacenter Reserved label name that identifies the datacenter. Declaration public const string LabelDatacenter = \"neonkube.io/cluster.datacenter\" Field Value Type Description String LabelEnvironment Reserved label name that identifies the cluster environment. Declaration public const string LabelEnvironment = \"neonkube.io/cluster.environment\" Field Value Type Description String LabelIngress Reserved label name used to indicate that a node should route external traffic into the cluster. Declaration public const string LabelIngress = \"neonkube.io/node.ingress\" Field Value Type Description String LabelIstio Reserved label name for Istio . Declaration public const string LabelIstio = \"neonkube.io/istio\" Field Value Type Description String LabelLogs Reserved label name for Logs . Declaration public const string LabelLogs = \"neonkube.io/monitor.logs\" Field Value Type Description String LabelLogsInternal Reserved label name for LogsInternal . Declaration public const string LabelLogsInternal = \"neonkube.io/monitor.logs-internal\" Field Value Type Description String LabelMetrics Reserved label name for Metrics . Declaration public const string LabelMetrics = \"neonkube.io/monitor.metrics\" Field Value Type Description String LabelMetricsInternal Reserved label name for MetricsInternal . Declaration public const string LabelMetricsInternal = \"neonkube.io/monitor.metrics-internal\" Field Value Type Description String LabelMinio Reserved label name for Minio . Declaration public const string LabelMinio = \"neonkube.io/system.minio\" Field Value Type Description String LabelMinioInternal Reserved label name for MinioInternal . Declaration public const string LabelMinioInternal = \"neonkube.io/system.minio-internal\" Field Value Type Description String LabelNeonSystem Reserved label name for core neonKUBE system components. Declaration public const string LabelNeonSystem = \"neonkube.io/neon-system\" Field Value Type Description String LabelNeonSystemDb Reserved label name for LabelNeonSystemDb . Declaration public const string LabelNeonSystemDb = \"neonkube.io/neon-system.db\" Field Value Type Description String LabelNeonSystemRegistry Reserved label name for LabelNeonSystemDb . Declaration public const string LabelNeonSystemRegistry = \"neonkube.io/neon-system.registry\" Field Value Type Description String LabelOpenEbs Reserved label name used to indicate that a node hosts an OpenEBS cStor block device. Declaration public const string LabelOpenEbs = \"neonkube.io/node.openebs\" Field Value Type Description String LabelPhysicalAvailabilitytSet Reserved label name for PhysicalAvailabilitySet . Declaration public const string LabelPhysicalAvailabilitytSet = \"neonkube.io/physical.availability-set\" Field Value Type Description String LabelPhysicalLocation Reserved label name for LabelPhysicalPower . Declaration public const string LabelPhysicalLocation = \"neonkube.io/physical.location\" Field Value Type Description String LabelPhysicalMachine Reserved label name for LabelPhysicalMachine . Declaration public const string LabelPhysicalMachine = \"neonkube.io/physical.machine\" Field Value Type Description String LabelPhysicalPower Reserved label name for LabelPhysicalPower . Declaration public const string LabelPhysicalPower = \"neonkube.io/physical.power\" Field Value Type Description String LabelRole Reserved label name that identifies the node role. Declaration public const string LabelRole = \"neonkube.io/node.role\" Field Value Type Description String LabelStorageEphemeral Reserved label name for StorageEphemeral . Declaration public const string LabelStorageEphemeral = \"neonkube.io/storage.ephemral\" Field Value Type Description String LabelStorageHDD Reserved label name for StorageHDD . Declaration public const string LabelStorageHDD = \"neonkube.io/storage.hdd\" Field Value Type Description String LabelStorageLocal Reserved label name for StorageLocal . Declaration public const string LabelStorageLocal = \"neonkube.io/storage.local\" Field Value Type Description String LabelStorageRedundant Reserved label name for StorageRedundant . Declaration public const string LabelStorageRedundant = \"neonkube.io/storage.redundant\" Field Value Type Description String LabelStorageSize Reserved label name for StorageSize . Declaration public const string LabelStorageSize = \"neonkube.io/storage.size\" Field Value Type Description String LabelTraces Reserved label name for Traces . Declaration public const string LabelTraces = \"neonkube.io/monitor.traces\" Field Value Type Description String LabelTracesInternal Reserved label name for TracesInternal . Declaration public const string LabelTracesInternal = \"neonkube.io/monitor.traces-internal\" Field Value Type Description String Properties All Enumerates all node labels. Declaration [JsonIgnore] [YamlIgnore] public IEnumerable<KeyValuePair<string, object>> All { get; } Property Value Type Description IEnumerable < KeyValuePair < String , Object >> ComputeCores io.neonkube/compute.cores [ int ]: Specifies the number of CPU cores. This defaults to 0 for BareMetal and is initialized for cloud and Hypervisor based hosting environments. Declaration [JsonProperty(PropertyName = \"ComputeCores\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Include)] [YamlMember(Alias = \"ComputeCores\", ApplyNamingConventions = false)] public int ComputeCores { get; set; } Property Value Type Description Int32 ComputeRam io.neonkube/compute.ram_mb [ int ]: Specifies the available RAM in megabytes. This defaults to 0 for BareMetal and is initialized for cloud and Hypervisor based hosting environments. Declaration [JsonProperty(PropertyName = \"ComputeRamMiB\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Include)] [YamlMember(Alias = \"ComputeRamMiB\", ApplyNamingConventions = false)] public int ComputeRam { get; set; } Property Value Type Description Int32 Custom Custom node labels. Declaration [JsonProperty(PropertyName = \"Custom\")] [YamlMember(Alias = \"custom\", ApplyNamingConventions = false)] public Dictionary<string, string> Custom { get; set; } Property Value Type Description Dictionary < String , String > Remarks Use this property to define custom cluster node labels. note The io.neonkube/ label prefix is reserved. Istio neonkube.io/istio.enabled [ bool ]: Indicates that Istio will be deployed to this node. This defaults to false . Declaration [JsonProperty(PropertyName = \"Istio\", Required = Required.Default)] [YamlMember(Alias = \"istio\", ApplyNamingConventions = false)] public bool Istio { get; set; } Property Value Type Description Boolean Logs neonkube.io/monitor.logs [ bool ]: Indicates the user has specified that Loki logging should be deployed to the labeled node. This defaults to false . Declaration [JsonProperty(PropertyName = \"Logs\", Required = Required.Default)] [YamlMember(Alias = \"logs\", ApplyNamingConventions = false)] public bool Logs { get; set; } Property Value Type Description Boolean LogsInternal neonkube.io/monitor.logs-internal [ bool ]: Indicates that Liko logging will be deployed to the labeled node. This defaults to false . Declaration [JsonProperty(PropertyName = \"LogsInternal\", Required = Required.Default)] [YamlMember(Alias = \"logsInternal\", ApplyNamingConventions = false)] public bool LogsInternal { get; set; } Property Value Type Description Boolean Metrics neonkube.io/monitor.metrics [ bool ]: Indicates the user has specified that Mimir metrics should be deployed to the labeled node. This defaults to false . Declaration [JsonProperty(PropertyName = \"Metrics\", Required = Required.Default)] [YamlMember(Alias = \"metrics\", ApplyNamingConventions = false)] public bool Metrics { get; set; } Property Value Type Description Boolean MetricsInternal neonkube.io/monitor.metrics-internal [ bool ]: Indicates that Mirmir metrics will be deployed to the labeled node. This defaults to false . Declaration [JsonProperty(PropertyName = \"MetricsInternal\", Required = Required.Default)] [YamlMember(Alias = \"metricsInternal\", ApplyNamingConventions = false)] public bool MetricsInternal { get; set; } Property Value Type Description Boolean Minio neonkube.io/system.minio-internal [ bool ]: Indicates the user has specified that Minio should be deployed to the labeled node. This defaults to false . Declaration [JsonProperty(PropertyName = \"Minio\", Required = Required.Default)] [YamlMember(Alias = \"minio\", ApplyNamingConventions = false)] public bool Minio { get; set; } Property Value Type Description Boolean MinioInternal neonkube.io/system.minio-internal [ bool ]: Indicates that Minio will be deployed to the labeled node. This defaults to false . Declaration [JsonProperty(PropertyName = \"MinioInternal\", Required = Required.Default)] [YamlMember(Alias = \"minioInternal\", ApplyNamingConventions = false)] public bool MinioInternal { get; set; } Property Value Type Description Boolean NeonSystem neonkube.io/neon-system [ bool ]: Indicates that general neon-system services may be deployed to this node. This defaults to false . Declaration [JsonProperty(PropertyName = \"NeonSystem\", Required = Required.Default)] [YamlMember(Alias = \"neonSystem\", ApplyNamingConventions = false)] public bool NeonSystem { get; set; } Property Value Type Description Boolean NeonSystemDb neonkube.io/neon-system.db [ bool ]: Indicates that the neon-system Citus/Postgresql database may be deployed to this node. This defaults to false . Declaration [JsonProperty(PropertyName = \"NeonSystemDb\", Required = Required.Default)] [YamlMember(Alias = \"neonSystemDb\", ApplyNamingConventions = false)] public bool NeonSystemDb { get; set; } Property Value Type Description Boolean NeonSystemRegistry neonkube.io/neon-system.registry [ bool ]: Indicates that the neon-system Harbor registry may be deployed to this node. This defaults to false . Declaration [JsonProperty(PropertyName = \"NeonSystemRegistry\", Required = Required.Default)] [YamlMember(Alias = \"neonSystemRegistry\", ApplyNamingConventions = false)] public bool NeonSystemRegistry { get; set; } Property Value Type Description Boolean OpenEbs neonkube.io/openEbs.enabled [ bool ]: Indicates that OpenEBS will be deployed to this node. This defaults to false . Declaration [JsonProperty(PropertyName = \"OpenEbs\", Required = Required.Default)] [YamlMember(Alias = \"openEbs\", ApplyNamingConventions = false)] public bool OpenEbs { get; set; } Property Value Type Description Boolean PhysicalAvailabilitySet io.neonkube/physical.availability-set [ string ]: Indicates that the hosting environment will try to ensure that cluster VMs with the same availability set are deployed in a manner that reduces the possibility that more than one VM at a time will be taken offline for maintenance. This defaults to control-plane for cluster control-plane nodes and worker for worker nodes. note IMPORTANT: Control-plane nodes should generally be located within their own availability set. Declaration [JsonProperty(PropertyName = \"PhysicalAvailabilitySet\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Include)] [YamlMember(Alias = \"physicalAvailabilitySet\", ApplyNamingConventions = false)] public string PhysicalAvailabilitySet { get; set; } Property Value Type Description String Remarks This is typcally used for distributing pods across cluster nodes to protect against more than one of them going down at once due to scheduled maintenance. On premise deployments don't currently support automatic provisioning by availability sets but that may happen in the future (e.g. by managing clusters of XenServer host machines). You'll need to manually specify these labels to match your deployment and maintenance policies. Cloud deployments generally implement the concept of availability sets. These are used to group VMs together such that only one will be down for scheduled maintenance at any given moment and also that after a reboot, there will be a reasonable delay (like 30 minutes) to allow the VMs to collectively recover before rebooting the next VM. neonKUBE will provision node VMs that have the same PhysicalAvailabilitySet into the same cloud availability set (for clouds that support this). PhysicalLocation io.neonkube/physical.location [ string ]: A free format string describing the physical location of the server. This defaults to the empty string . Declaration [JsonProperty(PropertyName = \"PhysicalLocation\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Include)] [YamlMember(Alias = \"physicalLocation\", ApplyNamingConventions = false)] public string PhysicalLocation { get; set; } Property Value Type Description String Remarks You should use a consistent convention to describe a physical machine location. Here are some examples: rack-slot rack-number / rack-slot row / rack-number / rack-slot floor / row / rack-number / rack-slot building / floor / row / rack-number / rack-slot PhysicalMachine io.neonkube/physical.model [ string ]: A free format string describing the physical server computer model (e.g. Dell-PowerEdge-R220 ). This defaults to the empty string . Declaration [JsonProperty(PropertyName = \"PhysicalMachine\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Include)] [YamlMember(Alias = \"physicalMachine\", ApplyNamingConventions = false)] public string PhysicalMachine { get; set; } Property Value Type Description String PhysicalPower io.neonkube/physical.power [ string ]: Describes the physical power to the server may be controlled. This defaults to the empty string . Declaration [JsonProperty(PropertyName = \"PhysicalPower\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Include)] [YamlMember(Alias = \"physicalPower\", ApplyNamingConventions = false)] public string PhysicalPower { get; set; } Property Value Type Description String Remarks note The format for this property is not currently defined. This field includes the information required to remotely control the power to the physical host machine via a Power Distribution Unit (PDU). Standard Enumerates the standard neonKUBE node labels. Declaration [JsonIgnore] [YamlIgnore] public IEnumerable<KeyValuePair<string, object>> Standard { get; } Property Value Type Description IEnumerable < KeyValuePair < String , Object >> StorageEphemeral io.neonkube/storage.redundant [ bool ]: Indicates that the storage is ephemeral. All data will be lost when the host is restarted. This defaults to false for on-premise clusters and is computed for cloud deployments. Declaration [JsonProperty(PropertyName = \"StorageEphemeral\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Include)] [YamlMember(Alias = \"storageEphemeral\", ApplyNamingConventions = false)] public bool StorageEphemeral { get; set; } Property Value Type Description Boolean StorageHDD io.neonkube/storage.hdd [ bool ]: Indicates that the storage is backed by a spinning drive as opposed to a SSD. This defaults to false for on-premise clusters and is computed for cloud deployments. Declaration [JsonProperty(PropertyName = \"StorageHDD\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Include)] [YamlMember(Alias = \"storageHDD\", ApplyNamingConventions = false)] public bool StorageHDD { get; set; } Property Value Type Description Boolean StorageLocal io.neonkube/storage.local [ bool ]: Specifies whether the node storage is hosted on the node itself or is mounted as a remote file system or block device. This defaults to true for on-premise clusters and is computed for cloud deployments. Declaration [JsonProperty(PropertyName = \"StorageLocal\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Include)] [YamlMember(Alias = \"storageLocal\", ApplyNamingConventions = false)] public bool StorageLocal { get; set; } Property Value Type Description Boolean StorageRedundant io.neonkube/storage.redundant [ bool ]: Indicates that the storage is redundant. This may be implemented locally using RAID1+ or remotely using network or cloud-based file systems. This defaults to false for on-premise clusters and is computed for cloud deployments. Declaration [JsonProperty(PropertyName = \"StorageRedundant\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Include)] [YamlMember(Alias = \"storageRedundant\", ApplyNamingConventions = false)] public bool StorageRedundant { get; set; } Property Value Type Description Boolean StorageSize io.neonkube/storage.size [ string ]: Specifies the node OS drive storage capacity in bytes. Declaration [JsonProperty(PropertyName = \"StorageSize\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Include)] [YamlMember(Alias = \"StorageSize\", ApplyNamingConventions = false)] public string StorageSize { get; set; } Property Value Type Description String Traces neonkube.io/monitor.traces [ bool ]: Indicates the user has specified that Tempo traces should be deployed to the labeled node. This defaults to false . Declaration [JsonProperty(PropertyName = \"Traces\", Required = Required.Default)] [YamlMember(Alias = \"traces\", ApplyNamingConventions = false)] public bool Traces { get; set; } Property Value Type Description Boolean TracesInternal neonkube.io/monitor.traces-internal [ bool ]: Indicates that Tempo traces will be deployed to the labeled node. This defaults to false . Declaration [JsonProperty(PropertyName = \"TracesInternal\", Required = Required.Default)] [YamlMember(Alias = \"tracesInternal\", ApplyNamingConventions = false)] public bool TracesInternal { get; set; } Property Value Type Description Boolean Methods Validate(ClusterDefinition) Validates the node labels. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ArgumentException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.NodeOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.NodeOptions.html",
    "title": "Class NodeOptions | NeonKUBE documentation",
    "keywords": "Class NodeOptions Describes cluster node options. Inheritance Object NodeOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class NodeOptions Properties AllowPackageManagerIPv6 Allow the Linux package manager to use IPv6 when communicating with package mirrors. This defaults to false to restrict access to IPv4. Declaration [JsonProperty(PropertyName = \"AllowPackageManagerIPv6\", Required = Required.Default)] [YamlMember(Alias = \"allowPackageManagerIPv6\", ApplyNamingConventions = false)] public bool AllowPackageManagerIPv6 { get; set; } Property Value Type Description Boolean PackageManagerRetries Specifies the number of times the host package manager should retry failed index or package downloads. This defaults to 5 . Declaration [JsonProperty(PropertyName = \"PackageManagerRetries\", Required = Required.Default)] [YamlMember(Alias = \"packageManagerRetries\", ApplyNamingConventions = false)] public int PackageManagerRetries { get; set; } Property Value Type Description Int32 Methods Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.NodeRole.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.NodeRole.html",
    "title": "Class NodeRole | NeonKUBE documentation",
    "keywords": "Class NodeRole Enumerates the roles a cluster node can assume. Inheritance Object NodeRole Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public static class NodeRole Fields ControlPlane The node is a cluster control-plane node. Declaration public const string ControlPlane = \"control-plane\" Field Value Type Description String HyperV HACK: The node is actually a Hyper-V host machine and not an actual Kubernetes node. This seemed like the least bad place to define this for Role values when preparing a cluster on Hyper-V servers. Declaration public const string HyperV = \"hyperv\" Field Value Type Description String Worker The node is a cluster worker. Declaration public const string Worker = \"worker\" Field Value Type Description String XenServer HACK: The node is actually a XenServer host machine and not an actual Kubernetes node. This seemed like the least bad place to define this for Role values when preparing a cluster on XenServer. Declaration public const string XenServer = \"xenserver\" Field Value Type Description String"
  },
  "neonkube/api/Neon.Kube.ClusterDef.OpenEbsEngine.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.OpenEbsEngine.html",
    "title": "Enum OpenEbsEngine | NeonKUBE documentation",
    "keywords": "Enum OpenEbsEngine Identifies the OpenEBS storage engines supported by neonKUBE clusters. Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public enum OpenEbsEngine Fields Name Description cStor The currently recommended OpenEBS storage engine. This is very feature rich but requires one or more raw block devices and quite a bit of RAM. See: cStor Overview Default Selects a reasonable default storage engine for the cluster. Currently, this will select HostPath for single-node clusters or Jiva for multi-node clusters. note These defaults were selected to reduce the storage and RAM required for smaller clusters, or clusters that don't really require OpenEBS for user workloads. Larger clusters that depend on OpenEBS for user workloads should consider configuring cStor instead. HostPath A temporary storage engine that will be replaced by Jiva once we've implemented support for that. This option works only for single node clusters and will be removed in the near future. We don't recommend that you reference this explicitly in your cluster definitions; use Default instead. Jiva This was the original OpenEBS storage engine and hosts the data in a Linux sparse file rather than requiring raw block devices. This may be suitable for smaller clusters running workloads with lower I/O requirements. See: Jiva Overview note Jiva is not currently supported for neonKUBE clusters. Mayastor This will be Mayadata's premier storage engine using the NVMe-oF protocol for accessing data rather than the old iSCSI protocol which is quite slow. Mayastor is still in Beta. note Mayastor is not currently supported for neonKUBE clusters."
  },
  "neonkube/api/Neon.Kube.ClusterDef.OpenEbsOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.OpenEbsOptions.html",
    "title": "Class OpenEbsOptions | NeonKUBE documentation",
    "keywords": "Class OpenEbsOptions Specifies cluster OpenEBS options. Inheritance Object OpenEbsOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class OpenEbsOptions Properties Engine Specifies which OpenEBS engine will be deployed within the cluster. This defaults to Default . Declaration [JsonProperty(PropertyName = \"Engine\", Required = Required.Default)] [YamlMember(Alias = \"engine\", ApplyNamingConventions = false)] public OpenEbsEngine Engine { get; set; } Property Value Type Description OpenEbsEngine NfsSize The size of the NFS file system to be created for the cluster. This defaults to 10 GiB and cannot be any smaller. Declaration [JsonProperty(PropertyName = \"NfsSize\", Required = Required.Default)] [YamlMember(Alias = \"nfsSize\", ApplyNamingConventions = false)] public string NfsSize { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.ClusterDef.Registry.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.Registry.html",
    "title": "Class Registry | NeonKUBE documentation",
    "keywords": "Class Registry Specifies details about an upstream container registry. This can be used to block, remap or indicate that insecure HTTP requests can be used for specific registries. This will be used to generate the [[registry]] entries in the /etc/containers/registries.conf.d/00-neon-cluster.conf file on the cluster nodes. See more details here: here Inheritance Object Registry Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class Registry Properties Blocked Optionally blocks pulls of images from registries that match Prefix . This defaults to false. Declaration [JsonProperty(PropertyName = \"Blocked\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"blocked\", ApplyNamingConventions = false)] public bool Blocked { get; set; } Property Value Type Description Boolean Insecure Optionally indicates that insecure HTTP requests may be used to access the registry. This defaults to false . Declaration [JsonProperty(PropertyName = \"Insecure\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"insecure\", ApplyNamingConventions = false)] public bool Insecure { get; set; } Property Value Type Description Boolean Location Optionally enables registry redirection. When specified, this indicates that images specified to be pulled from Prefix will actually be pulled from Location instead. This is a nice way to be able to reuse manifests and Helm charts such that they pull images from an alternate registry without modification. This defaults to null . Declaration [JsonProperty(PropertyName = \"Location\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"location\", ApplyNamingConventions = false)] public string Location { get; set; } Property Value Type Description String Name Specifies the name to be used when persisting this as a V1ContainerRegistry to the cluster. This must be a valid Kubernetes name: contain no more than 253 characters contain only lowercase alphanumeric characters, '-' or '.' start with an alphanumeric character end with an alphanumeric character Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Always)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String Password Optionally specifies the password to be used for authenticating with the upstream container registry. This defaults to null . Declaration [JsonProperty(PropertyName = \"Password\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"password\", ApplyNamingConventions = false)] public string Password { get; set; } Property Value Type Description String Prefix Specifies registry prefix, optionally with a subdomain \"*\" wildcard character for subdomain matching. Declaration [JsonProperty(PropertyName = \"Prefix\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"prefix\", ApplyNamingConventions = false)] public string Prefix { get; set; } Property Value Type Description String Username Optionally specifies the username to be used for authenticating with the upstream container registry. This defaults to null . Declaration [JsonProperty(PropertyName = \"Username\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"username\", ApplyNamingConventions = false)] public string Username { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.ClusterDef.ResourceTag.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.ResourceTag.html",
    "title": "Class ResourceTag | NeonKUBE documentation",
    "keywords": "Class ResourceTag Describes a tag that can be attached to resources for clusters deployed to a cloud. Inheritance Object ResourceTag Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class ResourceTag Constructors ResourceTag(String, String) Constructs a tag with a name and optional value. Declaration public ResourceTag(string key, string value = null) Parameters Type Name Description String key The tag key. String value The optional tag value. Note that empty value strings will be converted to null . Properties Key Returns the tag key. Declaration public string Key { get; } Property Value Type Description String Value Returns the tag value or null . Declaration public string Value { get; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.ClusterDef.SecurityOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.SecurityOptions.html",
    "title": "Class SecurityOptions | NeonKUBE documentation",
    "keywords": "Class SecurityOptions Specifies cluster security options. Inheritance Object SecurityOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class SecurityOptions Properties PasswordLength cluster hosts are configured with a random root account password. This defaults to 20 characters. The minumum length is 8 . Declaration [JsonProperty(PropertyName = \"PasswordLength\", Required = Required.Default)] [YamlMember(Alias = \"passwordLength\", ApplyNamingConventions = false)] public int PasswordLength { get; set; } Property Value Type Description Int32"
  },
  "neonkube/api/Neon.Kube.ClusterDef.StorageOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.StorageOptions.html",
    "title": "Class StorageOptions | NeonKUBE documentation",
    "keywords": "Class StorageOptions Specifies cluster Storage options. Inheritance Object StorageOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class StorageOptions Properties Minio Specifies the cluster Minio related options. Declaration [JsonProperty(PropertyName = \"Minio\", Required = Required.Always)] [YamlMember(Alias = \"minio\", ApplyNamingConventions = false)] public MinioOptions Minio { get; set; } Property Value Type Description MinioOptions OpenEbs Specifies the cluster OpenEbs related options. Declaration [JsonProperty(PropertyName = \"OpenEbs\", Required = Required.Always)] [YamlMember(Alias = \"openEbs\", ApplyNamingConventions = false)] public OpenEbsOptions OpenEbs { get; set; } Property Value Type Description OpenEbsOptions"
  },
  "neonkube/api/Neon.Kube.ClusterDef.TraceOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.TraceOptions.html",
    "title": "Class TraceOptions | NeonKUBE documentation",
    "keywords": "Class TraceOptions Specifies the options for configuring the cluster integrated traceging and metrics. Inheritance Object TraceOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class TraceOptions Properties TraceRetentionDays Trace retention period. Traces beyond this number of days will be purged by the ClusterManager Declaration [JsonProperty(PropertyName = \"TraceRetentionDays\", Required = Required.Default)] [YamlMember(Alias = \"traceRetentionDays\", ApplyNamingConventions = false)] public int TraceRetentionDays { get; set; } Property Value Type Description Int32 Methods Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.VmHostingOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.VmHostingOptions.html",
    "title": "Class VmHostingOptions | NeonKUBE documentation",
    "keywords": "Class VmHostingOptions Specifies common options for on-premise hypervisor based hosting environments such as Hyper-V and XenServer. Inheritance Object VmHostingOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class VmHostingOptions Constructors VmHostingOptions() Default constructor. Declaration public VmHostingOptions() Properties Cores The default number of virtual processors to assign to each cluster virtual machine. note neonKUBE requires that each control-plane and worker node have at least 4 CPUs. Declaration [JsonProperty(PropertyName = \"Cores\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"cores\", ApplyNamingConventions = false)] public int Cores { get; set; } Property Value Type Description Int32 DiskLocation Path to the location where virtual machine hard disk will be created. This defaults to the local Hyper-V folder for Windows. note This is currently recognized only when deploying on a local Hyper-V hypervisor. Eventually, you'll be able to specify a XenServer storage repository. Issue #996 Declaration [JsonProperty(PropertyName = \"DiskLocation\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"diskLocation\", ApplyNamingConventions = false)] public string DiskLocation { get; set; } Property Value Type Description String HostPassword The default password to use for connecting the hypervisor host machines specified by Hosts . This may be overridden for specific hypervisor machines within Hosts items. This defaults to null . Declaration [JsonProperty(PropertyName = \"HostPassword\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"hostPassword\", ApplyNamingConventions = false)] public string HostPassword { get; set; } Property Value Type Description String Hosts Optionally identifies the target Hyper-V or XenServer hypervisor machines. Declaration [JsonProperty(PropertyName = \"Hosts\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"hosts\", ApplyNamingConventions = false)] public List<HypervisorHost> Hosts { get; set; } Property Value Type Description List < HypervisorHost > HostUsername The default username to use for connecting the hypervisor host machines specified by Hosts . This may be overridden for specific hypervisor machines. This defaults to null . note This defaults to root for XenServer based environments. Declaration [JsonProperty(PropertyName = \"HostUsername\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"hostUsername\", ApplyNamingConventions = false)] public string HostUsername { get; set; } Property Value Type Description String Memory Specifies the default amount of memory to allocate to each cluster virtual machine. This is specified as a string that can be a byte count or a number with units like 512MiB , 0.5GiB , 2iGB , or 1TiB . This defaults to 4GiB . note neonKUBE requires that each control-plane and worker node have at least 4GiB of RAM. Declaration [JsonProperty(PropertyName = \"Memory\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"memory\", ApplyNamingConventions = false)] public string Memory { get; set; } Property Value Type Description String NamePrefix The prefix to be prepended to virtual machine provisioned to hypervisors for the HyperV , HyperV , and XenServer environments. This is used to avoid VM naming conflicts between different clusters. note This property is ignored for cloud hosting environments because cluster VMs will be isolated in their own resource groups and private networks. When this is null (the default), the cluster name followed by a dash will prefix the provisioned virtual machine names. When this is a non-empty string, the value followed by a dash will be used. If this is null or whitespace then the machine names will not be prefixed. note Virtual machine name prefixes will always be converted to lowercase. Declaration [JsonProperty(PropertyName = \"NamePrefix\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"namePrefix\", ApplyNamingConventions = false)] public string NamePrefix { get; set; } Property Value Type Description String OpenEbsDisk Specifies the default size of the second block device to be created for nodes enabled for OpenEBS. This is specified as a string that can be a byte count or a number with units like 512MiB , 0.5GiB , 2iGB , or 1TiB . This defaults to 128GiB . Declaration [JsonProperty(PropertyName = \"OpenEbsDisk\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"openEbsDisk\", ApplyNamingConventions = false)] public string OpenEbsDisk { get; set; } Property Value Type Description String OsDisk Specifies the default size of the operating system disk for cluster virtual machines. This is specified as a string that can be a long byte count or a byte count or a number with units like 512MiB , 0.5GiB , 2GiB , or 1TiB . This defaults to 128GiB . Declaration [JsonProperty(PropertyName = \"OsDisk\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"osDisk\", ApplyNamingConventions = false)] public string OsDisk { get; set; } Property Value Type Description String Methods ClearSecrets() Clears all hosting related secrets. Declaration public void ClearSecrets() GetVmNamePrefix(ClusterDefinition) Returns the prefix to be used when provisioning virtual machines in hypervisor environments. Declaration public string GetVmNamePrefix(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Returns Type Description String The prefix. Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.VmNodeOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.VmNodeOptions.html",
    "title": "Class VmNodeOptions | NeonKUBE documentation",
    "keywords": "Class VmNodeOptions Specifies common node options for on-premise hypervisor based hosting environments such as Hyper-V and XenServer. Inheritance Object VmNodeOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class VmNodeOptions Constructors VmNodeOptions() Default constructor. Declaration public VmNodeOptions() Properties Cores Specifies the number of processors to assigned to this node when provisioned on a hypervisor. This defaults to the value specified by Cores . note neonKUBE requires that each control-plane and worker node have at least 4 CPUs. Declaration [JsonProperty(PropertyName = \"Cores\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"cores\", ApplyNamingConventions = false)] public int Cores { get; set; } Property Value Type Description Int32 Host Identifies the hypervisor instance where this node is to be provisioned for Hyper-V or XenServer based clusters. This name must map to the name of one of the Hosts when set. Declaration [JsonProperty(PropertyName = \"Host\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"host\", ApplyNamingConventions = false)] public string Host { get; set; } Property Value Type Description String Memory Specifies the amount of memory to allocate to this node when provisioned on a hypervisor. This is specified as a string that can be a byte count or a number with units like 512MB , 0.5GB , 2GB , or 1TB . This defaults to the value specified by Memory . note neonKUBE requires that each control-plane and worker node have at least 4GiB of RAM. Declaration [JsonProperty(PropertyName = \"Memory\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"memory\", ApplyNamingConventions = false)] public string Memory { get; set; } Property Value Type Description String OpenEbsDisk Specifies the size of the second block device to be created for this node when it is enabled for OpenEBS. This is specified as a string that can be a byte count or a number with units like 512MiB , 0.5GiB , 2iGB , or 1TiB . This defaults to the value specified by OpenEbsDisk . Declaration [JsonProperty(PropertyName = \"OpenEbsDisk\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"openEbsDisk\", ApplyNamingConventions = false)] public string OpenEbsDisk { get; set; } Property Value Type Description String OsDisk The size of operating system disk for this node when when provisioned on a hypervisor. This is specified as a string that can be a byte count or a number with units like 512MB , 0.5GB , 2GB , or 1TB . This defaults to the value specified by OsDisk . Declaration [JsonProperty(PropertyName = \"OsDisk\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"osDisk\", ApplyNamingConventions = false)] public string OsDisk { get; set; } Property Value Type Description String Methods GetCores(ClusterDefinition) Returns the maximum number CPU cores to allocate for this node when hosted on a hypervisor. Declaration public int GetCores(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Returns Type Description Int32 The number of cores. GetMemory(ClusterDefinition) Returns the maximum number of bytes of memory allocate to for this node when hosted on a hypervisor. Declaration public long GetMemory(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Returns Type Description Int64 The size in bytes. GetOpenEbsDiskSizeBytes(ClusterDefinition) Returns the size of the OpenEBS cStor disk to be created for this node when hosted on a hypervisor. Declaration public long GetOpenEbsDiskSizeBytes(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Returns Type Description Int64 The size in bytes. GetOsDisk(ClusterDefinition) Returns the size of the operating system disk to be created for this node when hosted on a hypervisor. Declaration public long GetOsDisk(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Returns Type Description Int64 The size in bytes. Validate(ClusterDefinition, String) Validates the node definition. Declaration public void Validate(ClusterDefinition clusterDefinition, string nodeName) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. String nodeName The node name. Exceptions Type Condition ArgumentException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDef.XenServerHostingOptions.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDef.XenServerHostingOptions.html",
    "title": "Class XenServerHostingOptions | NeonKUBE documentation",
    "keywords": "Class XenServerHostingOptions Specifies hosting settings for the Citrix XenServer hypervisor. Inheritance Object XenServerHostingOptions Namespace : Neon.Kube.ClusterDef Assembly : Neon.Kube.dll Syntax public class XenServerHostingOptions Constructors XenServerHostingOptions() Default constructor. Declaration public XenServerHostingOptions() Properties Snapshot Optionally directs XenCenter to create the virtual machines using a snapshot of the virtual machine template rather than creating a full copy. This defaults to false . Declaration [JsonProperty(PropertyName = \"Snapshot\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"snapshot\", ApplyNamingConventions = false)] public bool Snapshot { get; set; } Property Value Type Description Boolean Remarks Virtual machines created via a snapshot will be ready within seconds where as creation can take something like 4 minutes on a SSD or 9 minutes on a spinning drive. We don't enable snapshots though by default, because some web posts from around 2014 indicate that operators may encounter problems when something like 30 virtual machines have been created as snapshots from the same template. We figure that it's best to default to safe setting for production clusters and then allow operators to override this when provisioning temporary test clusters or when provisioning on a storage repository that doesn't have these limitations. note For snapshots to work, the storage repository must support them and the virtual machine template must reside in the same repository where the virtual machines are being created. The current neon-cli implementation persists the cluster VM templates to the local storage repository, so support for non-local storage repositories is not support out-of-the-box at this time. StorageRepository Identifies the XenServer storage repository to be used to store the XenServer node template as well as the cluster virtual machine images. This defaults to Local storage . Declaration [JsonProperty(PropertyName = \"StorageRepository\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"storageRepository\", ApplyNamingConventions = false)] public string StorageRepository { get; set; } Property Value Type Description String Methods ClearSecrets() Clears all hosting related secrets. Declaration public void ClearSecrets() Validate(ClusterDefinition) Validates the options and also ensures that all null properties are initialized to their default values. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if the definition is not valid."
  },
  "neonkube/api/Neon.Kube.ClusterDefinitionException.html": {
    "href": "neonkube/api/Neon.Kube.ClusterDefinitionException.html",
    "title": "Class ClusterDefinitionException | NeonKUBE documentation",
    "keywords": "Class ClusterDefinitionException Signals cluster definition errors. Inheritance Object Exception ClusterDefinitionException Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class ClusterDefinitionException : Exception, ISerializable Constructors ClusterDefinitionException() Default constructor. Declaration public ClusterDefinitionException() ClusterDefinitionException(String, Exception) Consstructs an instance with a message. Declaration public ClusterDefinitionException(string message, Exception innerException = null) Parameters Type Name Description String message The message. Exception innerException Optionally specifies an inner exception."
  },
  "neonkube/api/Neon.Kube.ClusterHealth.html": {
    "href": "neonkube/api/Neon.Kube.ClusterHealth.html",
    "title": "Class ClusterHealth | NeonKUBE documentation",
    "keywords": "Class ClusterHealth Describes the current health of a cluster. Inheritance Object ClusterHealth Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class ClusterHealth Constructors ClusterHealth() Default constructor. Declaration public ClusterHealth() Properties Nodes Maps node names to their provisioning states. Declaration [JsonProperty(PropertyName = \"Nodes\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Dictionary<string, ClusterNodeState> Nodes { get; set; } Property Value Type Description Dictionary < String , ClusterNodeState > State The cluster health state. Declaration [JsonProperty(PropertyName = \"State\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public ClusterState State { get; set; } Property Value Type Description ClusterState Summary Human readable text summarizing the cluster health state. Declaration [JsonProperty(PropertyName = \"Summary\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Summary { get; set; } Property Value Type Description String Version The neonKUBE version of the cluster or \"0\" when the version is not known. This is formatted as a SemanticVersion . Declaration [JsonProperty(PropertyName = \"Version\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Version { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.ClusterHost.html": {
    "href": "neonkube/api/Neon.Kube.ClusterHost.html",
    "title": "Class ClusterHost | NeonKUBE documentation",
    "keywords": "Class ClusterHost Important cluster host names. Inheritance Object ClusterHost Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class ClusterHost Fields AlertManager Alertmanager service. Declaration public const string AlertManager = \"neon-alertmanager\" Field Value Type Description String Grafana Grafana dashboard. Declaration public const string Grafana = \"neon-grafana\" Field Value Type Description String HarborNotary Harbor Notary service. Declaration public const string HarborNotary = \"neon-notary\" Field Value Type Description String HarborRegistry Harbor registry service. Declaration public const string HarborRegistry = \"neon-registry\" Field Value Type Description String Kiali Kiali dashboard. Declaration public const string Kiali = \"neon-kiali\" Field Value Type Description String KubernetesDashboard Kubernetes dashboard service. Declaration public const string KubernetesDashboard = \"neon-k8s\" Field Value Type Description String Minio Minio Operator dashboard. Declaration public const string Minio = \"neon-minio\" Field Value Type Description String NeonDashboard Neon Dashboard. Declaration public const string NeonDashboard = \"neon-dashboard\" Field Value Type Description String Sso Single sign on service. Declaration public const string Sso = \"neon-sso\" Field Value Type Description String"
  },
  "neonkube/api/Neon.Kube.ClusterInfo.html": {
    "href": "neonkube/api/Neon.Kube.ClusterInfo.html",
    "title": "Class ClusterInfo | NeonKUBE documentation",
    "keywords": "Class ClusterInfo Holds details about a cluster. Inheritance Object ClusterInfo Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class ClusterInfo Constructors ClusterInfo() Default constructor used for deserializion. Declaration public ClusterInfo() ClusterInfo(ClusterDefinition) Used to construct an instance, picking up common properties from a cluster definition. Declaration public ClusterInfo(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition Specifies the cluster definition. Properties ClientId Identifies the client that deployed the cluster. Declaration [JsonProperty(PropertyName = \"ClientId\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string ClientId { get; set; } Property Value Type Description String ClusterId Globally unique cluster identifier. This is set during cluster setup and is used to distinguish between customer clusters. Declaration [JsonProperty(PropertyName = \"ClusterId\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string ClusterId { get; set; } Property Value Type Description String ClusterVersion The neonKUBE version of the cluster. This is formatted as a SemanticVersion . Declaration [JsonProperty(PropertyName = \"ClusterVersion\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string ClusterVersion { get; set; } Property Value Type Description String CreationTimestamp Timestamp representing the date that the cluster was created. Declaration [JsonProperty(PropertyName = \"CreationTimestamp\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public DateTime? CreationTimestamp { get; set; } Property Value Type Description Nullable < DateTime > Datacenter Identifies where the cluster is hosted as specified by Datacenter in the cluster definition. That property defaults to the empty string for on-premise clusters and the the region for cloud based clusters. Declaration [JsonProperty(PropertyName = \"Datacenter\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Datacenter { get; set; } Property Value Type Description String Description Optionally describes the cluster for humans. Declaration [JsonProperty(PropertyName = \"Description\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Description { get; set; } Property Value Type Description String Domain Identifies the DNS domain assigned to the cluster when it was provisioned. Declaration [JsonProperty(PropertyName = \"Domain\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Domain { get; set; } Property Value Type Description String Environment Identifies the cloud or other hosting platform. definition. Declaration [JsonProperty(PropertyName = \"Environment\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public HostingEnvironment Environment { get; set; } Property Value Type Description HostingEnvironment FeatureOptions Describes which optional components have been deployed to the cluster. Declaration [JsonProperty(PropertyName = \"FeatureOptions\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public FeatureOptions FeatureOptions { get; set; } Property Value Type Description FeatureOptions IsDesktop Indicates whether the cluster is a neon-desktop cluster. This defaults to false . Declaration [JsonProperty(PropertyName = \"IsDesktop\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool IsDesktop { get; set; } Property Value Type Description Boolean Latitude Optionally specifies the latitude of the cluster location. This is a value between -90 and +90 degrees. note Latitude and Longitude must both be specified together or not at all. Declaration [JsonProperty(PropertyName = \"Latitude\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public double? Latitude { get; set; } Property Value Type Description Nullable < Double > Longitude Optionally specifies the longitude of the cluster location. This is a value between -180 and +180 degrees. note Latitude and Longitude must both be specified together or not at all. Declaration [JsonProperty(PropertyName = \"Longitude\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public double? Longitude { get; set; } Property Value Type Description Nullable < Double > Name Identifies the cluster by name as specified by Name in the cluster definition. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Name { get; set; } Property Value Type Description String OrganizationId Identifies the organization that owns the cluster. Declaration [JsonProperty(PropertyName = \"OrganizationId\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string OrganizationId { get; set; } Property Value Type Description String PublicAddresses Lists the IP addresses that can be used to communicate with the cluster. For cloud deployed clusters, this will be configured by default with the public IP address assigned to the cluster load balancer. For on-premis clusters, this will be set to the IP addresses of the control-plane nodes by default. Users may also customize this by setting IP addresses in the cluster definition. This is often done for clusters behind a router mapping the public IP address to the LAN address for cluster nodes. Declaration [JsonProperty(PropertyName = \"PublicAddresses\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> PublicAddresses { get; set; } Property Value Type Description List < String > Purpose Indicates how the cluster is being used as specified by Purpose . definition. Declaration [JsonProperty(PropertyName = \"Purpose\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public ClusterPurpose Purpose { get; set; } Property Value Type Description ClusterPurpose Summary Human readable string that summarizes the cluster state. Declaration [JsonProperty(PropertyName = \"Summary\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Summary { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.ClusterLock.html": {
    "href": "neonkube/api/Neon.Kube.ClusterLock.html",
    "title": "Class ClusterLock | NeonKUBE documentation",
    "keywords": "Class ClusterLock Describes the current lock status of a cluster. Inheritance Object ClusterLock Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class ClusterLock Constructors ClusterLock() Default constructor. Declaration public ClusterLock() Properties IsLocked Indicates whether the cluster is currently locked. Declaration [JsonProperty(PropertyName = \"IsLocked\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool IsLocked { get; set; } Property Value Type Description Boolean"
  },
  "neonkube/api/Neon.Kube.ClusterLogin.html": {
    "href": "neonkube/api/Neon.Kube.ClusterLogin.html",
    "title": "Class ClusterLogin | NeonKUBE documentation",
    "keywords": "Class ClusterLogin Holds extended cluster information such as the cluster definition and node SSH credentials. These records are persisted as files to the $HOME/.neonkube/logins folder in YAML files named like USER @ NAME .login.yaml . Inheritance Object ClusterLogin Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class ClusterLogin Constructors ClusterLogin() Default constructor. Declaration public ClusterLogin() ClusterLogin(String) Parameterized constructor. Declaration public ClusterLogin(string path) Parameters Type Name Description String path Optionally specifies the path to the extension file. Properties ClusterDefinition The cluster definition. Declaration [JsonProperty(PropertyName = \"ClusterDefinition\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"clusterDefinition\", ApplyNamingConventions = false)] public ClusterDefinition ClusterDefinition { get; set; } Property Value Type Description ClusterDefinition ClusterId Set to a globally unique ID to identify the cluster. This defaults to a generated unique value. Declaration [JsonProperty(PropertyName = \"ClusterId\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"clusterId\", ApplyNamingConventions = false)] public Guid ClusterId { get; set; } Property Value Type Description Guid ClusterVersion The neonKUBE version of the cluster. This is formatted as a SemanticVersion . Declaration [JsonProperty(PropertyName = \"ClusterVersion\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"clusterVersion\", ApplyNamingConventions = false)] public string ClusterVersion { get; set; } Property Value Type Description String DashboardCertificate The custom certificate generated for the Kubernetes dashboard PEM. Declaration [JsonProperty(PropertyName = \"DashboardCertificate\")] [YamlMember(Alias = \"dashboardCertificate\", ScalarStyle = ScalarStyle.Literal, ApplyNamingConventions = false)] public string DashboardCertificate { get; set; } Property Value Type Description String SetupDetails Holds additional information required during setup as well as for provisoning additional cluster nodes. Declaration [JsonProperty(PropertyName = \"SetupDetails\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"setupDetails\", ApplyNamingConventions = false)] public KubeSetupDetails SetupDetails { get; set; } Property Value Type Description KubeSetupDetails SshCredentials Returns a SshCredentials instance suitable for connecting to a cluster node. Declaration [JsonIgnore] [YamlIgnore] public SshCredentials SshCredentials { get; } Property Value Type Description SshCredentials SshKey The public and private parts of the SSH client key used to authenticate a SSH session with a cluster node. Declaration [JsonProperty(PropertyName = \"SshClientKey\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"sshClientKey\", ApplyNamingConventions = false)] public KubeSshKey SshKey { get; set; } Property Value Type Description KubeSshKey SshPassword The SSH root password. Declaration [JsonProperty(PropertyName = \"SshPassword\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"sshPassword\", ApplyNamingConventions = false)] public string SshPassword { get; set; } Property Value Type Description String SshUsername The SSH root username. Declaration [JsonProperty(PropertyName = \"SshUsername\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"sshUsername\", ApplyNamingConventions = false)] public string SshUsername { get; set; } Property Value Type Description String SsoPassword The root single sign-on (SSO) cluster password. Declaration [JsonProperty(PropertyName = \"SsoPassword\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"ssoPassword\", ApplyNamingConventions = false)] public string SsoPassword { get; set; } Property Value Type Description String SsoUsername The root single sign-on (SSO) cluster username. Declaration [JsonProperty(PropertyName = \"SsoUsername\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"ssoUsername\", ApplyNamingConventions = false)] public string SsoUsername { get; set; } Property Value Type Description String Methods Delete() Deletes the login. Declaration public void Delete() Load(String) Reads a ClusterLogin from a file if it exists. Declaration public static ClusterLogin Load(string path) Parameters Type Name Description String path Path the the cluster login file. Returns Type Description ClusterLogin The ClusterLogin if the file exists or null . Save() Persists the extension data. note A valid path must have been passed to the constructor for this to work. Declaration public void Save()"
  },
  "neonkube/api/Neon.Kube.ClusterLoginExport.html": {
    "href": "neonkube/api/Neon.Kube.ClusterLoginExport.html",
    "title": "Class ClusterLoginExport | NeonKUBE documentation",
    "keywords": "Class ClusterLoginExport Holds all of the information required to import/export a cluster login. This includes the Kubernetes cluster, login, and neonKUBE extensions. Inheritance Object ClusterLoginExport Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class ClusterLoginExport Constructors ClusterLoginExport() Default constructor. Declaration public ClusterLoginExport() Properties Cluster The Kubernetes cluster. Declaration [JsonProperty(PropertyName = \"Cluster\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"cluster\", ApplyNamingConventions = false)] public KubeConfigCluster Cluster { get; set; } Property Value Type Description KubeConfigCluster Context The Kubernetes context. Declaration [JsonProperty(PropertyName = \"Context\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"context\", ApplyNamingConventions = false)] public KubeConfigContext Context { get; set; } Property Value Type Description KubeConfigContext Extensions The cluster login information. This may be null . Declaration [JsonProperty(PropertyName = \"Extensions\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"extensions\", ApplyNamingConventions = false)] public ClusterLogin Extensions { get; set; } Property Value Type Description ClusterLogin User The Kubernetes user. Declaration [JsonProperty(PropertyName = \"User\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"user\", ApplyNamingConventions = false)] public KubeConfigUser User { get; set; } Property Value Type Description KubeConfigUser Methods Validate() Ensures that the login information is valid. Declaration public void Validate() Exceptions Type Condition NeonKubeException Thrown if the instance is invalid."
  },
  "neonkube/api/Neon.Kube.ClusterManifest.html": {
    "href": "neonkube/api/Neon.Kube.ClusterManifest.html",
    "title": "Class ClusterManifest | NeonKUBE documentation",
    "keywords": "Class ClusterManifest Holds information about a deployed cluster including things like the container images that need to be present in the local Harbor deployment. This information is associated with a specific version of neonKUBE and is generated automatically during neonCLOUD node image builds and is uploaded to S3 as a JSON document. This ends up being embedded into the neon-cluster-operator as a resource via a build task that uses the neon-build get-cluster-manifest command to download the file from S3 so it can be included in the project. Inheritance Object ClusterManifest Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class ClusterManifest Constructors ClusterManifest() Default constructor. Declaration public ClusterManifest() Properties ContainerImages Returns information about the container images deployed to a new neonKUBE cluster. Declaration [JsonProperty(PropertyName = \"ContainerImages\", Required = Required.Always)] [YamlMember(Alias = \"containerImages\", ApplyNamingConventions = false)] public List<ClusterContainerImage> ContainerImages { get; set; } Property Value Type Description List < ClusterContainerImage >"
  },
  "neonkube/api/Neon.Kube.ClusterNodeState.html": {
    "href": "neonkube/api/Neon.Kube.ClusterNodeState.html",
    "title": "Enum ClusterNodeState | NeonKUBE documentation",
    "keywords": "Enum ClusterNodeState Enumerates the possible states of a cluster node from the hosting manager's perspective. Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public enum ClusterNodeState Fields Name Description Conflict The node conflicts with an existing virtual machine that was not deployed with the cluster. NotProvisioned The node is not provisioned. Off The node is provisioned but turned off. Paused The node is sleeping. Running The node is running. Starting The node is starting. Unknown The node state is not known."
  },
  "neonkube/api/Neon.Kube.ClusterSetupFailureMetadata.html": {
    "href": "neonkube/api/Neon.Kube.ClusterSetupFailureMetadata.html",
    "title": "Class ClusterSetupFailureMetadata | NeonKUBE documentation",
    "keywords": "Class ClusterSetupFailureMetadata Holds metadata about a cluster whose prepare or setup operations failed. This is included in the ZIP file uploaded to the headend as a file named metadata.yaml . Inheritance Object ClusterSetupFailureMetadata Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class ClusterSetupFailureMetadata Properties CliendId Set to the UUID for the client installation. Declaration [JsonProperty(PropertyName = \"CliendId\", Required = Required.Always)] [YamlMember(Alias = \"cliendId\", ApplyNamingConventions = false)] public Guid CliendId { get; set; } Property Value Type Description Guid Exception Information about the exception that caused the failure. Declaration [JsonProperty(PropertyName = \"Exception\", Required = Required.Always)] [YamlMember(Alias = \"exception\", ApplyNamingConventions = false)] public string Exception { get; set; } Property Value Type Description String NeonKubeVersion The current neonKUBE version. Declaration [JsonProperty(PropertyName = \"NeonKubeVersion\", Required = Required.Always)] [YamlMember(Alias = \"neonKubeVersion\", ApplyNamingConventions = false)] public string NeonKubeVersion { get; set; } Property Value Type Description String TimestampUtc The timestamp (UTC) when the failure occured. Declaration [JsonProperty(PropertyName = \"TimestampUtc\", Required = Required.Always)] [YamlMember(Alias = \"timestampUtc\", ApplyNamingConventions = false)] public DateTime TimestampUtc { get; set; } Property Value Type Description DateTime UserId Set to the UUID for the user. Note that this will be set to Empty until we have the chance to implement neonCLOUD users. Declaration [JsonProperty(PropertyName = \"UserId\", Required = Required.Always)] [YamlMember(Alias = \"userId\", ApplyNamingConventions = false)] public Guid UserId { get; set; } Property Value Type Description Guid"
  },
  "neonkube/api/Neon.Kube.ClusterState.html": {
    "href": "neonkube/api/Neon.Kube.ClusterState.html",
    "title": "Enum ClusterState | NeonKUBE documentation",
    "keywords": "Enum ClusterState Enumerates the possible overall states for a cluster. Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public enum ClusterState Fields Name Description Configuring Cluster configuration is incomplete. Conflict One or more virtual machines exist with names conflicting with the nodes defined for the cluster being checked. Healthy Cluster is configured and healthy. NotFound Cluster not found. Off Cluster is configured but is turned off. Paused Cluster is configured but is paused. Provisioned Cluster has been provisioned but not configured. Provisoning Cluster provisioning is incomplete. Transitioning Cluster is configured but transitoning between sleeping, starting, or being turned off. Unhealthy Cluster is configured but not healthy. Unknown Status could not be determined."
  },
  "neonkube/api/Neon.Kube.ClusterTelemetry.html": {
    "href": "neonkube/api/Neon.Kube.ClusterTelemetry.html",
    "title": "Class ClusterTelemetry | NeonKUBE documentation",
    "keywords": "Class ClusterTelemetry Models cluster telemetry. Inheritance Object ClusterTelemetry Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class ClusterTelemetry Constructors ClusterTelemetry() Constructor Declaration public ClusterTelemetry() Properties ClusterInfo Cluster information Declaration [JsonProperty(PropertyName = \"ClusterInfo\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.Include)] public ClusterInfo ClusterInfo { get; set; } Property Value Type Description ClusterInfo Nodes Node status information. Declaration [JsonProperty(PropertyName = \"Nodes\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<V1Node> Nodes { get; set; } Property Value Type Description List < k8s.Models.V1Node >"
  },
  "neonkube/api/Neon.Kube.DesktopService.DesktopService.html": {
    "href": "neonkube/api/Neon.Kube.DesktopService.DesktopService.html",
    "title": "Class DesktopService | NeonKUBE documentation",
    "keywords": "Class DesktopService Implements a gPRC service that implements Hyper-V and other operations that may require elevated permissions. The idea is to deploy this within a Windows Service that runs as administrator so that this service can perform these operations on behalf of the neon-desktop or neon-cli applications that do not have these rights. Inheritance Object DesktopService Namespace : Neon.Kube.DesktopService Assembly : Neon.Kube.DesktopService.dll Syntax public sealed class DesktopService : IDisposable Constructors DesktopService(String) This constructor starts the server using a Unix domain socket at the specified file system path. The server will run until disposed. note This service is currently exposed as HTTP, not HTTPS. Declaration public DesktopService(string socketPath = null) Parameters Type Name Description String socketPath Optionally overrides the path to the Unix domain socket path. This defaults to WinDesktopServiceSocketPath where neon-desktop and neon-cli expect it to be. Exceptions Type Condition GrpcServiceException Thrown when the service could not be started. Properties LogExporter Returns the log exporter used to relay logs from neon-cli and neon-desktop to the headend. Declaration public static OtlpLogExporterWrapper LogExporter { get; } Property Value Type Description OpenTelemetry.Exporter.OtlpLogExporterWrapper TraceExporter Returns the trace exporter used to relay traces from neon-cli and neon-desktop to the headend. Declaration public static OtlpTraceExporter TraceExporter { get; } Property Value Type Description OpenTelemetry.Exporter.OtlpTraceExporter Methods Dispose() Declaration public void Dispose()"
  },
  "neonkube/api/Neon.Kube.DesktopService.GrpcDesktopService.html": {
    "href": "neonkube/api/Neon.Kube.DesktopService.GrpcDesktopService.html",
    "title": "Class GrpcDesktopService | NeonKUBE documentation",
    "keywords": "Class GrpcDesktopService Implements the IGrpcDesktopService . Inheritance Object GrpcDesktopService Implements IGrpcDesktopService Namespace : Neon.Kube.DesktopService Assembly : Neon.Kube.DesktopService.dll Syntax public class GrpcDesktopService : IGrpcDesktopService Constructors GrpcDesktopService() Static constructor. Declaration public GrpcDesktopService() Methods AddVmAsync(GrpcAddVmRequest, CallContext) Creates a virtual machine. Declaration public async Task<GrpcBaseReply> AddVmAsync(GrpcAddVmRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcAddVmRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > AddVmDriveAsync(GrpcAddVmDriveRequest, CallContext) Adds a drive to a virtual machine. Declaration public async Task<GrpcBaseReply> AddVmDriveAsync(GrpcAddVmDriveRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcAddVmDriveRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . CompactDriveRequestAsync(GrpcCompactDriveRequest, CallContext) Compacts a virtual disk. Declaration public async Task<GrpcBaseReply> CompactDriveRequestAsync(GrpcCompactDriveRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcCompactDriveRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . EjectVmDvdAsync(GrpcEjectVmDvdRequest, CallContext) Ejects any DVD/CD that's currently inserted into a virtual machine. Declaration public async Task<GrpcBaseReply> EjectVmDvdAsync(GrpcEjectVmDvdRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcEjectVmDvdRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . GetIPAddressAsync(GrpcGetIPAddressRequest, CallContext) Returns information about a virtual IP address. Declaration public async Task<GrpcGetIPAddressReply> GetIPAddressAsync(GrpcGetIPAddressRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcGetIPAddressRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcGetIPAddressReply > A GrpcGetIPAddressReply . GetNatByNameAsync(GrpcGetNatByNameRequest, CallContext) Looks up a virtual Hyper-V NAT by name. Declaration public async Task<GrpcGetNatReply> GetNatByNameAsync(GrpcGetNatByNameRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcGetNatByNameRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcGetNatReply > A GrpcGetNatReply . GetNatByNameSubnetAsync(GrpcGetNatBySubnetRequest, CallContext) Looks up a virtual Hyper-V NAT by subnet. Declaration public async Task<GrpcGetNatReply> GetNatByNameSubnetAsync(GrpcGetNatBySubnetRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcGetNatBySubnetRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcGetNatReply > A GrpcGetNatReply . GetSwitchAsync(GrpcGetSwitchRequest, CallContext) Returns information about a specific Hyper-V virtual switch. Declaration public async Task<GrpcGetSwitchReply> GetSwitchAsync(GrpcGetSwitchRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcGetSwitchRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcGetSwitchReply > A GrpcGetSwitchReply . GetVmAsync(GrpcGetVmRequest, CallContext) Returns information about a specific virtual machine if it exists. Declaration public async Task<GrpcGetVmReply> GetVmAsync(GrpcGetVmRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcGetVmRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcGetVmReply > A GrpcGetVmReply with the results. GetVmDrivesAsync(GrpcGetVmDrivesRequest, CallContext) Returns information about a virtual machine's attached drives. Declaration public async Task<GrpGetVmDrivesReply> GetVmDrivesAsync(GrpcGetVmDrivesRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcGetVmDrivesRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpGetVmDrivesReply > A GrpGetVmDrivesReply . GetVmNetworkAdaptersAsync(GrpcGetVmNetworkAdaptersRequest, CallContext) Returns information about the network adaptors attached to a virtual machine. Declaration public async Task<GrpcGetVmNetworkAdaptersReply> GetVmNetworkAdaptersAsync(GrpcGetVmNetworkAdaptersRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcGetVmNetworkAdaptersRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcGetVmNetworkAdaptersReply > A GrpcGetVmNetworkAdaptersReply . GetWindowsOptionalFeaturesAsync(GrpcGetWindowsOptionalFeaturesRequest, CallContext) Returns a dictionary mapping Windows features to their current status. Declaration public async Task<GrpcGetWindowsOptionalFeaturesReply> GetWindowsOptionalFeaturesAsync(GrpcGetWindowsOptionalFeaturesRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcGetWindowsOptionalFeaturesRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcGetWindowsOptionalFeaturesReply > A GrpcGetWindowsOptionalFeaturesReply holding the feature information. Exceptions Type Condition GrpcServiceException Thrown on errors. InsertVmDvdAsync(GrpcInsertVmDvdRequest, CallContext) Inserts an ISO file as the DVD/CD for a virtual machine, ejecting any existing disc. Declaration public async Task<GrpcBaseReply> InsertVmDvdAsync(GrpcInsertVmDvdRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcInsertVmDvdRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . IsNestedVirtualizationAsync(GrpcIsNestedVirtualizationRequest, CallContext) Returns an indication as to whether Windows is running with nested virtualization. Declaration public async Task<GrpcIsNestedVirtualizationReply> IsNestedVirtualizationAsync(GrpcIsNestedVirtualizationRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcIsNestedVirtualizationRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcIsNestedVirtualizationReply > A GrpcIsNestedVirtualizationReply holding the feature information. Exceptions Type Condition GrpcServiceException Thrown on errors. ListLocalHostSections(GrpcListLocalHostsSectionsRequest, CallContext) Lists the sections from the local $/etc/hosts file. Declaration public async Task<GrpcListLocalHostsSectionsReply> ListLocalHostSections(GrpcListLocalHostsSectionsRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcListLocalHostsSectionsRequest request The request specifying how to modify the local hosts. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcListLocalHostsSectionsReply > The GrpcListLocalHostsSectionsReply . ListNatsAsync(GrpcListNatsRequest, CallContext) Lists the virtual Hyper-V NATs. Declaration public async Task<GrpcListNatsReply> ListNatsAsync(GrpcListNatsRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcListNatsRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcListNatsReply > A GrpcListNatsReply . ListSwitchesAsync(GrpcListSwitchesRequest, CallContext) Lists the Hyper-V virtual switches. Declaration public async Task<GrpcListSwitchesReply> ListSwitchesAsync(GrpcListSwitchesRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcListSwitchesRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcListSwitchesReply > A GrpcListSwitchesReply . ListVmsAsync(GrpcListVmsRequest, CallContext) Lists the Hyper-V virtual machines. Declaration public async Task<GrpcListVmsReply> ListVmsAsync(GrpcListVmsRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcListVmsRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcListVmsReply > A GrpcListVmsReply with the results. ModifyLocalHosts(GrpcModifyLocalHostsRequest, CallContext) Modifies the local $/etc/hosts file which usually required elevated rights to access. Declaration public async Task<GrpcBaseReply> ModifyLocalHosts(GrpcModifyLocalHostsRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcModifyLocalHostsRequest request The request specifying how to modify the local hosts. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > The GrpcBaseReply . NewExternalSwitchAsync(GrpcNewExternalSwitchRequest, CallContext) Creates a new external Hyper-V virtual switch. Declaration public async Task<GrpcBaseReply> NewExternalSwitchAsync(GrpcNewExternalSwitchRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcNewExternalSwitchRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . NewInternalSwitchAsync(GrpcNewInternalSwitchRequest, CallContext) Creates a new internal Hyper-V virtual switch. Declaration public async Task<GrpcBaseReply> NewInternalSwitchAsync(GrpcNewInternalSwitchRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcNewInternalSwitchRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . RelayLogBatchAsync(GrpcRelayLogBatchRequest, CallContext) Sends a batch of telemetry logs to the neon-desktop-service which will then forward them on to the headend. Declaration public async Task<GrpcRelayLogBatchReply> RelayLogBatchAsync(GrpcRelayLogBatchRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcRelayLogBatchRequest request The request holding the batch of log records. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcRelayLogBatchReply > The GrpcRelayLogBatchReply . RelayTraceBatchAsync(GrpcRelayTraceBatchRequest, CallContext) Sends a batch of telemetry traces to the neon-desktop-service which will then forward them on to the headend. Declaration public async Task<GrpcRelayTraceBatchReply> RelayTraceBatchAsync(GrpcRelayTraceBatchRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcRelayTraceBatchRequest request The request holding the batch of traces. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcRelayTraceBatchReply > The GrpcRelayTraceBatchReply . RemoveSwitchAsync(GrpcRemoveSwitchRequest, CallContext) Removes a Hyper-V virtual switch. Declaration public async Task<GrpcBaseReply> RemoveSwitchAsync(GrpcRemoveSwitchRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcRemoveSwitchRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . RemoveVmAsync(GrpcRemoveVmRequest, CallContext) Removes a named virtual machine and all of its drives (by default). Declaration public async Task<GrpcBaseReply> RemoveVmAsync(GrpcRemoveVmRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcRemoveVmRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply indicating success or failure. SaveVmAsync(GrpcSaveVmRequest, CallContext) Saves a virtual machine (AKA puts it to sleep). Declaration public async Task<GrpcBaseReply> SaveVmAsync(GrpcSaveVmRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcSaveVmRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . StartVmAsync(GrpcStartVmRequest, CallContext) Starts a virtual machine. Declaration public async Task<GrpcBaseReply> StartVmAsync(GrpcStartVmRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcStartVmRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . StopVmAsync(GrpcStopVmRequest, CallContext) Stops a virtual machine. Declaration public async Task<GrpcBaseReply> StopVmAsync(GrpcStopVmRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcStopVmRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . VmExistsAsync(GrpcVmExistsRequest, CallContext) Determines whether a virtual machine exists. Declaration public async Task<GrpcVmExistsReply> VmExistsAsync(GrpcVmExistsRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcVmExistsRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcVmExistsReply > A GrpcVmExistsReply with the result. Implements IGrpcDesktopService"
  },
  "neonkube/api/Neon.Kube.DesktopService.html": {
    "href": "neonkube/api/Neon.Kube.DesktopService.html",
    "title": "Namespace Neon.Kube.DesktopService | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.DesktopService Classes DesktopService Implements a gPRC service that implements Hyper-V and other operations that may require elevated permissions. The idea is to deploy this within a Windows Service that runs as administrator so that this service can perform these operations on behalf of the neon-desktop or neon-cli applications that do not have these rights. GrpcDesktopService Implements the IGrpcDesktopService ."
  },
  "neonkube/api/Neon.Kube.Glauth.GlauthGroup.html": {
    "href": "neonkube/api/Neon.Kube.Glauth.GlauthGroup.html",
    "title": "Class GlauthGroup | NeonKUBE documentation",
    "keywords": "Class GlauthGroup Defines a Glauth user group. Inheritance Object GlauthGroup Namespace : Neon.Kube.Glauth Assembly : Neon.Kube.dll Syntax public class GlauthGroup Constructors GlauthGroup() Constructor. Declaration public GlauthGroup() Properties GidNumber Group ID Number Declaration [JsonProperty(PropertyName = \"GidNumber\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"gidNumber\", ApplyNamingConventions = false)] public string GidNumber { get; set; } Property Value Type Description String Name Group Name Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Glauth.GlauthUser.html": {
    "href": "neonkube/api/Neon.Kube.Glauth.GlauthUser.html",
    "title": "Class GlauthUser | NeonKUBE documentation",
    "keywords": "Class GlauthUser Defines a Glauth User. Inheritance Object GlauthUser Namespace : Neon.Kube.Glauth Assembly : Neon.Kube.dll Syntax public class GlauthUser Constructors GlauthUser() Constructor. Declaration public GlauthUser() Properties Capabilities String password Declaration [JsonProperty(PropertyName = \"Capabilities\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"capabilities\", ApplyNamingConventions = false)] public List<GlauthUserCapability> Capabilities { get; set; } Property Value Type Description List < GlauthUserCapability > Disabled Whether the user is disabled. Declaration [JsonProperty(PropertyName = \"Disabled\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"disabled\", ApplyNamingConventions = false)] public bool? Disabled { get; set; } Property Value Type Description Nullable < Boolean > GivenName User Given Name Declaration [JsonProperty(PropertyName = \"GivenName\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"givenName\", ApplyNamingConventions = false)] public string GivenName { get; set; } Property Value Type Description String Mail User Email address. Declaration [JsonProperty(PropertyName = \"Mail\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"mail\", ApplyNamingConventions = false)] public string Mail { get; set; } Property Value Type Description String Name User Name Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String OtherGroups Other Groups the user belongs to. Declaration [JsonProperty(PropertyName = \"OtherGroups\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"otherGroups\", ApplyNamingConventions = false)] public List<int> OtherGroups { get; set; } Property Value Type Description List < Int32 > PassSha256 Password represented as SHA256 Declaration [JsonProperty(PropertyName = \"PassSha256\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"passSha256\", ApplyNamingConventions = false)] public string PassSha256 { get; set; } Property Value Type Description String Password String password Declaration [JsonProperty(PropertyName = \"Password\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"password\", ApplyNamingConventions = false)] public string Password { get; set; } Property Value Type Description String PrimaryGroup User Primary Group Declaration [JsonProperty(PropertyName = \"PrimaryGroup\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"primaryGroup\", ApplyNamingConventions = false)] public int? PrimaryGroup { get; set; } Property Value Type Description Nullable < Int32 > Sn SN Declaration [JsonProperty(PropertyName = \"Sn\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"sn\", ApplyNamingConventions = false)] public string Sn { get; set; } Property Value Type Description String UidNumber User UID Number Declaration [JsonProperty(PropertyName = \"UidNumber\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"uidNumber\", ApplyNamingConventions = false)] public int? UidNumber { get; set; } Property Value Type Description Nullable < Int32 >"
  },
  "neonkube/api/Neon.Kube.Glauth.GlauthUserCapability.html": {
    "href": "neonkube/api/Neon.Kube.Glauth.GlauthUserCapability.html",
    "title": "Class GlauthUserCapability | NeonKUBE documentation",
    "keywords": "Class GlauthUserCapability Defines a Glauth user group. Inheritance Object GlauthUserCapability Namespace : Neon.Kube.Glauth Assembly : Neon.Kube.dll Syntax public class GlauthUserCapability Constructors GlauthUserCapability() Constructor. Declaration public GlauthUserCapability() Properties Action Group Name Declaration [JsonProperty(PropertyName = \"Action\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"action\", ApplyNamingConventions = false)] public string Action { get; set; } Property Value Type Description String Object Group ID Number Declaration [JsonProperty(PropertyName = \"Object\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"object\", ApplyNamingConventions = false)] public string Object { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Glauth.html": {
    "href": "neonkube/api/Neon.Kube.Glauth.html",
    "title": "Namespace Neon.Kube.Glauth | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Glauth Classes GlauthGroup Defines a Glauth user group. GlauthUser Defines a Glauth User. GlauthUserCapability Defines a Glauth user group."
  },
  "neonkube/api/Neon.Kube.GrpcLogExporter.html": {
    "href": "neonkube/api/Neon.Kube.GrpcLogExporter.html",
    "title": "Class GrpcLogExporter | NeonKUBE documentation",
    "keywords": "Class GrpcLogExporter Implements a trace exporter that forwards log batches to the neon-desktop-service which then handles the transmission to the headend. Inheritance Object OpenTelemetry.BaseExporter < OpenTelemetry.Logs.LogRecord > GrpcLogExporter Namespace : Neon.Kube Assembly : Neon.Kube.GrpcProto.dll Syntax public class GrpcLogExporter : BaseExporter<LogRecord>, IDisposable Constructors GrpcLogExporter(IGrpcDesktopService) Default constructor. Declaration public GrpcLogExporter(IGrpcDesktopService desktopService) Parameters Type Name Description IGrpcDesktopService desktopService Specifies the gRPC client for the neon-desktop-service . Methods Export(in Batch<LogRecord>) Declaration public override ExportResult Export(in Batch<LogRecord> batch) Parameters Type Name Description OpenTelemetry.Batch < OpenTelemetry.Logs.LogRecord > batch Returns Type Description OpenTelemetry.ExportResult Overrides OpenTelemetry.BaseExporter<OpenTelemetry.Logs.LogRecord>.Export(OpenTelemetry.Batch<OpenTelemetry.Logs.LogRecord>)"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.DesktopConverters.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.DesktopConverters.html",
    "title": "Class DesktopConverters | NeonKUBE documentation",
    "keywords": "Class DesktopConverters Conversions between gRPC proto and local types. Inheritance Object DesktopConverters Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax public static class DesktopConverters Methods ToLocal(GrpcVirtualDrive) Converts a GrpcVirtualDrive to a VirtualDrive . Declaration public static VirtualDrive ToLocal(this GrpcVirtualDrive grpcVirtualDrive) Parameters Type Name Description GrpcVirtualDrive grpcVirtualDrive The input. Returns Type Description VirtualDrive The output. ToLocal(GrpcVirtualIPAddress) Converts a GrpcVirtualIPAddress into a VirtualIPAddress . Declaration public static VirtualIPAddress ToLocal(this GrpcVirtualIPAddress grpcVirtualIPAddress) Parameters Type Name Description GrpcVirtualIPAddress grpcVirtualIPAddress The input. Returns Type Description VirtualIPAddress The output. ToLocal(GrpcVirtualMachine) Converts a GrpcVirtualMachine tp a VirtualMachine . Declaration public static VirtualMachine ToLocal(this GrpcVirtualMachine grpcVirtualMachine) Parameters Type Name Description GrpcVirtualMachine grpcVirtualMachine The input. Returns Type Description VirtualMachine The output. ToLocal(GrpcVirtualNat) Converts a GrpcVirtualNat tp a VirtualNat . Declaration public static VirtualNat ToLocal(this GrpcVirtualNat grpcVirtualNat) Parameters Type Name Description GrpcVirtualNat grpcVirtualNat The input. Returns Type Description VirtualNat The output. ToLocal(GrpcVirtualNetworkAdapter) Converts a GrpcVirtualNetworkAdapter into a VirtualNetworkAdapter . Declaration public static VirtualNetworkAdapter ToLocal(this GrpcVirtualNetworkAdapter grpcVirtualNetworkAdapter) Parameters Type Name Description GrpcVirtualNetworkAdapter grpcVirtualNetworkAdapter The input. Returns Type Description VirtualNetworkAdapter The output. ToLocal(GrpcVirtualSwitch) Converts a GrpcVirtualSwitch tp a VirtualSwitch . Declaration public static VirtualSwitch ToLocal(this GrpcVirtualSwitch grpcVirtualSwitch) Parameters Type Name Description GrpcVirtualSwitch grpcVirtualSwitch The input. Returns Type Description VirtualSwitch The output. ToProto(VirtualDrive) Converts a VirtualDrive to a GrpcVirtualDrive . Declaration public static GrpcVirtualDrive ToProto(this VirtualDrive virtualDrive) Parameters Type Name Description VirtualDrive virtualDrive The input. Returns Type Description GrpcVirtualDrive The output. ToProto(VirtualIPAddress) Converts a VirtualIPAddress into a GrpcVirtualIPAddress . Declaration public static GrpcVirtualIPAddress ToProto(this VirtualIPAddress virtualIPAddress) Parameters Type Name Description VirtualIPAddress virtualIPAddress The input Returns Type Description GrpcVirtualIPAddress The output. ToProto(VirtualMachine) Comverts a VirtualMachine into a GrpcVirtualMachine . Declaration public static GrpcVirtualMachine ToProto(this VirtualMachine virtualMachine) Parameters Type Name Description VirtualMachine virtualMachine The input. Returns Type Description GrpcVirtualMachine The output. ToProto(VirtualNat) Comverts a VirtualNat into a GrpcVirtualNat . Declaration public static GrpcVirtualNat ToProto(this VirtualNat virtualNat) Parameters Type Name Description VirtualNat virtualNat The input. Returns Type Description GrpcVirtualNat The output. ToProto(VirtualNetworkAdapter) Convertsa VirtualNetworkAdapter int a GrpcVirtualNetworkAdapter . Declaration public static GrpcVirtualNetworkAdapter ToProto(this VirtualNetworkAdapter virtualNat) Parameters Type Name Description VirtualNetworkAdapter virtualNat The input. Returns Type Description GrpcVirtualNetworkAdapter The output. ToProto(VirtualSwitch) Comverts a VirtualSwitch into a GrpcVirtualSwitch . Declaration public static GrpcVirtualSwitch ToProto(this VirtualSwitch virtualSwitch) Parameters Type Name Description VirtualSwitch virtualSwitch The input. Returns Type Description GrpcVirtualSwitch The output."
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcAddVmDriveRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcAddVmDriveRequest.html",
    "title": "Class GrpcAddVmDriveRequest | NeonKUBE documentation",
    "keywords": "Class GrpcAddVmDriveRequest Requests information about a virtual machine's drives. This request returns a GrpcBaseReply . Inheritance Object GrpcAddVmDriveRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcAddVmDriveRequest Constructors GrpcAddVmDriveRequest() Default constructor. Declaration public GrpcAddVmDriveRequest() GrpcAddVmDriveRequest(String, GrpcVirtualDrive) Constructor. Declaration public GrpcAddVmDriveRequest(string machineName, GrpcVirtualDrive drive) Parameters Type Name Description String machineName Specifies the machine name. GrpcVirtualDrive drive The new drive information. Properties Drive Specifies the new drive information. Declaration [DataMember(Order = 2)] public GrpcVirtualDrive Drive { get; set; } Property Value Type Description GrpcVirtualDrive MachineName Identifies the desired virtual machine. Declaration [DataMember(Order = 1)] public string MachineName { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcAddVmRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcAddVmRequest.html",
    "title": "Class GrpcAddVmRequest | NeonKUBE documentation",
    "keywords": "Class GrpcAddVmRequest Creates a virtual machine. This request returns a GrpcBaseReply . Inheritance Object GrpcAddVmRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcAddVmRequest Constructors GrpcAddVmRequest() Default constructor. Declaration public GrpcAddVmRequest() GrpcAddVmRequest(String, String, Int32, String, String, Boolean, String, String, IEnumerable<GrpcVirtualDrive>) Constructor. Declaration public GrpcAddVmRequest(string machineName, string memorySize = \"2GiB\", int processorCount = 4, string driveSize = null, string drivePath = null, bool checkpointDrives = false, string templateDrivePath = null, string switchName = null, IEnumerable<GrpcVirtualDrive> extraDrives = null) Parameters Type Name Description String machineName Sperifies the machine name. String memorySize Optionally specifies the memory size. This can be a long byte count or a a number with units like 512MiB , 0.5GiB , 2GiB , or 1TiB . This defaults to 2GiB . Int32 processorCount Optionally specifies the number of virutal processors to assign to the machine. This defaults to 4 . String driveSize Optionally specifies the primary disk size. This can be a long byte count or a number with units like 512MB , 0.5GiB , 2GiB , or 1TiB . Pass null to leave the disk alone. This defaults to null . String drivePath Optionally specifies the path where the virtual hard drive will be located. Pass null or empty to default to MACHINE-NAME.vhdx located in the default Hyper-V virtual machine drive folder. Boolean checkpointDrives Optionally enables drive checkpoints. This defaults to false . String templateDrivePath If this is specified and drivePath is not null then the hard drive template at templateDrivePath will be copied to drivePath before creating the machine. String switchName Optionally specifies the name of the associated virtual switch. IEnumerable < GrpcVirtualDrive > extraDrives Optionally specifies any additional virtual drives to be created and then attached to the new virtual machine. Remarks note The Path property of extraDrives may be passed as null or empty. In this case, the drive name will default to being located in the standard Hyper-V virtual drivers folder and will be named MACHINE-NAME-#.vhdx , where # is the one-based index of the drive in the enumeration. Properties CheckpointDrives Optionally enables disk checkpoints. This defaults to false . Declaration [DataMember(Order = 6)] public bool CheckpointDrives { get; set; } Property Value Type Description Boolean DrivePath Optionally specifies the path where the virtual hard drive will be located. Pass null or empty to default to MACHINE-NAME.vhdx located in the default Hyper-V virtual machine drive folder. Declaration [DataMember(Order = 5)] public string DrivePath { get; set; } Property Value Type Description String DriveSize Optionally specifies the primary disk size. This can be a long byte count or a number with units like 512MB , 0.5GiB , 2GiB , or 1TiB . Pass null to leave the disk alone. This defaults to null . Declaration [DataMember(Order = 4)] public string DriveSize { get; set; } Property Value Type Description String ExtraDrives Optionally specifies any additional virtual drives to be created and then attached to the new virtual machine. Declaration [DataMember(Order = 9)] public List<GrpcVirtualDrive> ExtraDrives { get; set; } Property Value Type Description List < GrpcVirtualDrive > MachineName Specifies the machine name. Declaration [DataMember(Order = 1)] public string MachineName { get; set; } Property Value Type Description String MemorySize Optionally specifies the memory size. This can be a long byte count or a a number with units like 512MiB , 0.5GiB , 2GiB , or 1TiB . This defaults to 2GiB . Declaration [DataMember(Order = 2)] public string MemorySize { get; set; } Property Value Type Description String ProcessorCount Optionally specifies the number of virutal processors to assign to the machine. This defaults to 4. Declaration [DataMember(Order = 3)] public int? ProcessorCount { get; set; } Property Value Type Description Nullable < Int32 > SwitchName Optionally specifies the name of the associated virtual switch. Declaration [DataMember(Order = 8)] public string SwitchName { get; set; } Property Value Type Description String TemplateDrivePath If this is specified and DrivePath is not null then the hard drive template at TemplateDrivePath will be copied to DrivePath before creating the machine. Declaration [DataMember(Order = 7)] public string TemplateDrivePath { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcBaseReply.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcBaseReply.html",
    "title": "Class GrpcBaseReply | NeonKUBE documentation",
    "keywords": "Class GrpcBaseReply Used for operations that just need to return an indication of success or failure. Inheritance Object GrpcBaseReply Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcBaseReply Constructors GrpcBaseReply() Success/default constructor. Declaration public GrpcBaseReply() GrpcBaseReply(Exception) Error constructor. Declaration public GrpcBaseReply(Exception e) Parameters Type Name Description Exception e The exception. Properties Error Set to a non-null error when the request failed. Declaration [DataMember(Order = 1)] public GrpcError Error { get; set; } Property Value Type Description GrpcError"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcCompactDriveRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcCompactDriveRequest.html",
    "title": "Class GrpcCompactDriveRequest | NeonKUBE documentation",
    "keywords": "Class GrpcCompactDriveRequest Compacts a virtual disk. This request returns a GrpcBaseReply . Inheritance Object GrpcCompactDriveRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcCompactDriveRequest Constructors GrpcCompactDriveRequest() Default constructor. Declaration public GrpcCompactDriveRequest() GrpcCompactDriveRequest(String) Constructor. Declaration public GrpcCompactDriveRequest(string drivePath) Parameters Type Name Description String drivePath Specifies the path to the virtual drive. Properties DrivePath Specifies the path to the virtual drive. Declaration [DataMember(Order = 1)] public string DrivePath { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcEjectVmDvdRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcEjectVmDvdRequest.html",
    "title": "Class GrpcEjectVmDvdRequest | NeonKUBE documentation",
    "keywords": "Class GrpcEjectVmDvdRequest Ejects any DVD/CD inserted into a virtual machine. This request returns a GrpcBaseReply . Inheritance Object GrpcEjectVmDvdRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcEjectVmDvdRequest Constructors GrpcEjectVmDvdRequest() Default constructor. Declaration public GrpcEjectVmDvdRequest() GrpcEjectVmDvdRequest(String) Constructor. Declaration public GrpcEjectVmDvdRequest(string machineName) Parameters Type Name Description String machineName Specifies the machine name. Properties MachineName Identifies the desired virtual machine. Declaration [DataMember(Order = 1)] public string MachineName { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetIPAddressReply.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetIPAddressReply.html",
    "title": "Class GrpcGetIPAddressReply | NeonKUBE documentation",
    "keywords": "Class GrpcGetIPAddressReply Returns information about a virtual IP address. Inheritance Object GrpcGetIPAddressReply Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcGetIPAddressReply Constructors GrpcGetIPAddressReply() Default constructor. Declaration public GrpcGetIPAddressReply() GrpcGetIPAddressReply(GrpcVirtualIPAddress) Constructor. Declaration public GrpcGetIPAddressReply(GrpcVirtualIPAddress address) Parameters Type Name Description GrpcVirtualIPAddress address The virtual IP address. GrpcGetIPAddressReply(Exception) Error constructor. Declaration public GrpcGetIPAddressReply(Exception e) Parameters Type Name Description Exception e The exception. Properties Address Describes the switch or null when the switch doesn't exist. Declaration [DataMember(Order = 2)] public GrpcVirtualIPAddress Address { get; set; } Property Value Type Description GrpcVirtualIPAddress Error Set to a non-null error when the request failed. Declaration [DataMember(Order = 1)] public GrpcError Error { get; set; } Property Value Type Description GrpcError"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetIPAddressRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetIPAddressRequest.html",
    "title": "Class GrpcGetIPAddressRequest | NeonKUBE documentation",
    "keywords": "Class GrpcGetIPAddressRequest Returns information about a virtual IP address. Inheritance Object GrpcGetIPAddressRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcGetIPAddressRequest Constructors GrpcGetIPAddressRequest() Default constructor. Declaration public GrpcGetIPAddressRequest() GrpcGetIPAddressRequest(String) Constructor Declaration public GrpcGetIPAddressRequest(string address) Parameters Type Name Description String address The desired IP address. Properties Address The desired IP addess. Declaration [DataMember(Order = 1)] public string Address { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetNatByNameRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetNatByNameRequest.html",
    "title": "Class GrpcGetNatByNameRequest | NeonKUBE documentation",
    "keywords": "Class GrpcGetNatByNameRequest Returns information about a virtual Hyper-V NAT by name. This returns a GrpcGetNatReply . Inheritance Object GrpcGetNatByNameRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcGetNatByNameRequest Constructors GrpcGetNatByNameRequest() Default constructor. Declaration public GrpcGetNatByNameRequest() GrpcGetNatByNameRequest(String) Constructor. Declaration public GrpcGetNatByNameRequest(string name) Parameters Type Name Description String name Specifies the desired NAT name. Properties Name Identifies the NAT by name. Declaration [DataMember(Order = 1)] public string Name { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetNatBySubnetRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetNatBySubnetRequest.html",
    "title": "Class GrpcGetNatBySubnetRequest | NeonKUBE documentation",
    "keywords": "Class GrpcGetNatBySubnetRequest Returns information about a virtual Hyper-V NAT by subnet. This returns a GrpcGetNatReply . Inheritance Object GrpcGetNatBySubnetRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcGetNatBySubnetRequest Constructors GrpcGetNatBySubnetRequest() Default constructor. Declaration public GrpcGetNatBySubnetRequest() GrpcGetNatBySubnetRequest(String) Constructor. Declaration public GrpcGetNatBySubnetRequest(string subnet) Parameters Type Name Description String subnet Specifies the NAT subnet. Properties Subnet Identifies the target NAT by subnet. Declaration [DataMember(Order = 1)] public string Subnet { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetNatReply.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetNatReply.html",
    "title": "Class GrpcGetNatReply | NeonKUBE documentation",
    "keywords": "Class GrpcGetNatReply Returns information about a specific virtual Hyper-V NAT. Inheritance Object GrpcGetNatReply Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcGetNatReply Constructors GrpcGetNatReply() Default constructor. Declaration public GrpcGetNatReply() GrpcGetNatReply(GrpcVirtualNat) Constructor. Declaration public GrpcGetNatReply(GrpcVirtualNat nat) Parameters Type Name Description GrpcVirtualNat nat The NAT details. GrpcGetNatReply(Exception) Error constructor. Declaration public GrpcGetNatReply(Exception e) Parameters Type Name Description Exception e The exception. Properties Error Set to a non-null error when the request failed. Declaration [DataMember(Order = 1)] public GrpcError Error { get; set; } Property Value Type Description GrpcError Nat The NAT details or null if the NAT doesn't exist. Declaration [DataMember(Order = 2)] public GrpcVirtualNat Nat { get; set; } Property Value Type Description GrpcVirtualNat"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetSwitchReply.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetSwitchReply.html",
    "title": "Class GrpcGetSwitchReply | NeonKUBE documentation",
    "keywords": "Class GrpcGetSwitchReply Returns information about a specific Hyper-V switch. Inheritance Object GrpcGetSwitchReply Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcGetSwitchReply Constructors GrpcGetSwitchReply() Default constructor. Declaration public GrpcGetSwitchReply() GrpcGetSwitchReply(GrpcVirtualSwitch) Constructor. Declaration public GrpcGetSwitchReply(GrpcVirtualSwitch switch) Parameters Type Name Description GrpcVirtualSwitch switch The switch details or null if the switch doesn't exist. GrpcGetSwitchReply(Exception) Error constructor. Declaration public GrpcGetSwitchReply(Exception e) Parameters Type Name Description Exception e The exception. Properties Error Set to a non-null error when the request failed. Declaration [DataMember(Order = 1)] public GrpcError Error { get; set; } Property Value Type Description GrpcError Switch Describes the switch or null when the switch doesn't exist. Declaration [DataMember(Order = 2)] public GrpcVirtualSwitch Switch { get; set; } Property Value Type Description GrpcVirtualSwitch"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetSwitchRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetSwitchRequest.html",
    "title": "Class GrpcGetSwitchRequest | NeonKUBE documentation",
    "keywords": "Class GrpcGetSwitchRequest Returns information about a specific switch. This returns a GrpcGetSwitchReply . Inheritance Object GrpcGetSwitchRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcGetSwitchRequest Constructors GrpcGetSwitchRequest() Default constructor. Declaration public GrpcGetSwitchRequest() GrpcGetSwitchRequest(String) Constructor. Declaration public GrpcGetSwitchRequest(string switchName) Parameters Type Name Description String switchName Specifies the switch name. Properties SwitchName Identifies the desired switch. Declaration [DataMember(Order = 1)] public string SwitchName { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetVmDrivesRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetVmDrivesRequest.html",
    "title": "Class GrpcGetVmDrivesRequest | NeonKUBE documentation",
    "keywords": "Class GrpcGetVmDrivesRequest Requests information about a virtual machine's drives. This request returns a GrpGetVmDrivesReply . Inheritance Object GrpcGetVmDrivesRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcGetVmDrivesRequest Constructors GrpcGetVmDrivesRequest() Default constructor. Declaration public GrpcGetVmDrivesRequest() GrpcGetVmDrivesRequest(String) Constructor. Declaration public GrpcGetVmDrivesRequest(string machineName) Parameters Type Name Description String machineName Specifies the machine name. Properties MachineName Identifies the desired virtual machine. Declaration [DataMember(Order = 1)] public string MachineName { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetVmNetworkAdaptersReply.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetVmNetworkAdaptersReply.html",
    "title": "Class GrpcGetVmNetworkAdaptersReply | NeonKUBE documentation",
    "keywords": "Class GrpcGetVmNetworkAdaptersReply Returns the network adaptors attached to a virtual machine. Inheritance Object GrpcGetVmNetworkAdaptersReply Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcGetVmNetworkAdaptersReply Constructors GrpcGetVmNetworkAdaptersReply() Default constructor. Declaration public GrpcGetVmNetworkAdaptersReply() GrpcGetVmNetworkAdaptersReply(List<GrpcVirtualNetworkAdapter>) Constructor. Declaration public GrpcGetVmNetworkAdaptersReply(List<GrpcVirtualNetworkAdapter> adapters) Parameters Type Name Description List < GrpcVirtualNetworkAdapter > adapters The attached network adapters. GrpcGetVmNetworkAdaptersReply(Exception) Error constructor. Declaration public GrpcGetVmNetworkAdaptersReply(Exception e) Parameters Type Name Description Exception e The exception. Properties Adapters Returns information about the attached network adapters. Declaration [DataMember(Order = 2)] public List<GrpcVirtualNetworkAdapter> Adapters { get; set; } Property Value Type Description List < GrpcVirtualNetworkAdapter > Error Set to a non-null error when the request failed. Declaration [DataMember(Order = 1)] public GrpcError Error { get; set; } Property Value Type Description GrpcError"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetVmNetworkAdaptersRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetVmNetworkAdaptersRequest.html",
    "title": "Class GrpcGetVmNetworkAdaptersRequest | NeonKUBE documentation",
    "keywords": "Class GrpcGetVmNetworkAdaptersRequest Returns the network adapters attached to a virtual machine. This returns a GrpcGetVmNetworkAdaptersReply . Inheritance Object GrpcGetVmNetworkAdaptersRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcGetVmNetworkAdaptersRequest Constructors GrpcGetVmNetworkAdaptersRequest() Default constructor. Declaration public GrpcGetVmNetworkAdaptersRequest() GrpcGetVmNetworkAdaptersRequest(String, Boolean) Constructor. Declaration public GrpcGetVmNetworkAdaptersRequest(string machineName, bool waitForAddresses = false) Parameters Type Name Description String machineName Specifies the machine name. Boolean waitForAddresses Optionally wait until at least one adapter has been able to acquire at least one IPv4 address. Properties MachineName Identifies the desired virtual machine. Declaration [DataMember(Order = 1)] public string MachineName { get; set; } Property Value Type Description String WaitForAddresses Optionally wait until at least one adapter has been able to acquire at least one IPv4 address. Declaration [DataMember(Order = 2)] public bool WaitForAddresses { get; set; } Property Value Type Description Boolean"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetVmReply.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetVmReply.html",
    "title": "Class GrpcGetVmReply | NeonKUBE documentation",
    "keywords": "Class GrpcGetVmReply Holds information about a specific virtual machine. Inheritance Object GrpcGetVmReply Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcGetVmReply Constructors GrpcGetVmReply() Default constructor. Declaration public GrpcGetVmReply() GrpcGetVmReply(GrpcVirtualMachine) Constructor constructor. Declaration public GrpcGetVmReply(GrpcVirtualMachine machine) Parameters Type Name Description GrpcVirtualMachine machine The machine information. GrpcGetVmReply(Exception) Error constructor. Declaration public GrpcGetVmReply(Exception e) Parameters Type Name Description Exception e The exception. Properties Error Set to a non-null error when the request failed. Declaration [DataMember(Order = 1)] public GrpcError Error { get; set; } Property Value Type Description GrpcError Machine Information about the virtual machine or null when the machine doesn't exist. Declaration [DataMember(Order = 2)] public GrpcVirtualMachine Machine { get; set; } Property Value Type Description GrpcVirtualMachine"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetVmRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetVmRequest.html",
    "title": "Class GrpcGetVmRequest | NeonKUBE documentation",
    "keywords": "Class GrpcGetVmRequest Returns information about a specific virtual machine. This request returns a GrpcGetVmReply . Inheritance Object GrpcGetVmRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcGetVmRequest Constructors GrpcGetVmRequest() Default constructor. Declaration public GrpcGetVmRequest() GrpcGetVmRequest(String) Constructor. Declaration public GrpcGetVmRequest(string machineName) Parameters Type Name Description String machineName Specifies the machine name. Properties MachineName Identifies the desired virtual machine. Declaration [DataMember(Order = 1)] public string MachineName { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetWindowsOptionalFeaturesReply.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetWindowsOptionalFeaturesReply.html",
    "title": "Class GrpcGetWindowsOptionalFeaturesReply | NeonKUBE documentation",
    "keywords": "Class GrpcGetWindowsOptionalFeaturesReply Describes the current Windows capabilities. Inheritance Object GrpcGetWindowsOptionalFeaturesReply Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcGetWindowsOptionalFeaturesReply Constructors GrpcGetWindowsOptionalFeaturesReply() Default constructor. Declaration public GrpcGetWindowsOptionalFeaturesReply() GrpcGetWindowsOptionalFeaturesReply(Dictionary<String, WindowsFeatureStatus>) Reply constructor. Declaration public GrpcGetWindowsOptionalFeaturesReply(Dictionary<string, WindowsFeatureStatus> capabilities) Parameters Type Name Description Dictionary < String , WindowsFeatureStatus > capabilities GrpcGetWindowsOptionalFeaturesReply(Exception) Error constructor. Declaration public GrpcGetWindowsOptionalFeaturesReply(Exception e) Parameters Type Name Description Exception e The exception. Properties Capabilities A dictionary mapping Windows feature names to their current status. Declaration [DataMember(Order = 2)] public Dictionary<string, WindowsFeatureStatus> Capabilities { get; set; } Property Value Type Description Dictionary < String , WindowsFeatureStatus > Error Set to a non-null error when the request failed. Declaration [DataMember(Order = 1)] public GrpcError Error { get; set; } Property Value Type Description GrpcError"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetWindowsOptionalFeaturesRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcGetWindowsOptionalFeaturesRequest.html",
    "title": "Class GrpcGetWindowsOptionalFeaturesRequest | NeonKUBE documentation",
    "keywords": "Class GrpcGetWindowsOptionalFeaturesRequest Determines whether Windows is running under nested virtualization. This request returns a GrpcGetWindowsOptionalFeaturesReply . Inheritance Object GrpcGetWindowsOptionalFeaturesRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcGetWindowsOptionalFeaturesRequest Constructors GrpcGetWindowsOptionalFeaturesRequest() Default constructor. Declaration public GrpcGetWindowsOptionalFeaturesRequest()"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcInsertVmDvdRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcInsertVmDvdRequest.html",
    "title": "Class GrpcInsertVmDvdRequest | NeonKUBE documentation",
    "keywords": "Class GrpcInsertVmDvdRequest Inserts an ISO file as the DVD/CD for a virtual machine, ejecting any existing disc first. This request returns a GrpcBaseReply . Inheritance Object GrpcInsertVmDvdRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcInsertVmDvdRequest Constructors GrpcInsertVmDvdRequest() Default constructor. Declaration public GrpcInsertVmDvdRequest() GrpcInsertVmDvdRequest(String, String) Constructor. Declaration public GrpcInsertVmDvdRequest(string machineName, string isoPath) Parameters Type Name Description String machineName Specifies the machine name. String isoPath Path to the ISO file. Properties IsoPath Path to the ISO file Declaration [DataMember(Order = 2)] public string IsoPath { get; set; } Property Value Type Description String MachineName Identifies the desired virtual machine. Declaration [DataMember(Order = 1)] public string MachineName { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcIsNestedVirtualizationReply.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcIsNestedVirtualizationReply.html",
    "title": "Class GrpcIsNestedVirtualizationReply | NeonKUBE documentation",
    "keywords": "Class GrpcIsNestedVirtualizationReply Indicates whether Windows is running with nested virtualization. Inheritance Object GrpcIsNestedVirtualizationReply Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcIsNestedVirtualizationReply Constructors GrpcIsNestedVirtualizationReply() Default constructor. Declaration public GrpcIsNestedVirtualizationReply() GrpcIsNestedVirtualizationReply(Boolean) Reply constructor. Declaration public GrpcIsNestedVirtualizationReply(bool isNested) Parameters Type Name Description Boolean isNested Indicates whether Windows is running as nested virtualization. GrpcIsNestedVirtualizationReply(Exception) Error constructor. Declaration public GrpcIsNestedVirtualizationReply(Exception e) Parameters Type Name Description Exception e The exception. Properties Error Set to a non-null error when the request failed. Declaration [DataMember(Order = 1)] public GrpcError Error { get; set; } Property Value Type Description GrpcError IsNested true for nested virtualization. Declaration [DataMember(Order = 2)] public bool IsNested { get; set; } Property Value Type Description Boolean"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcIsNestedVirtualizationRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcIsNestedVirtualizationRequest.html",
    "title": "Class GrpcIsNestedVirtualizationRequest | NeonKUBE documentation",
    "keywords": "Class GrpcIsNestedVirtualizationRequest Determines whether Windows is running under nested virtualization. This request returns a GrpcIsNestedVirtualizationReply . Inheritance Object GrpcIsNestedVirtualizationRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcIsNestedVirtualizationRequest Constructors GrpcIsNestedVirtualizationRequest() Default constructor. Declaration public GrpcIsNestedVirtualizationRequest()"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcListLocalHostsSectionsReply.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcListLocalHostsSectionsReply.html",
    "title": "Class GrpcListLocalHostsSectionsReply | NeonKUBE documentation",
    "keywords": "Class GrpcListLocalHostsSectionsReply Returned as the reply for a GrpcListLocalHostsSectionsRequest . Inheritance Object GrpcListLocalHostsSectionsReply Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcListLocalHostsSectionsReply Constructors GrpcListLocalHostsSectionsReply() Default constructor. Declaration public GrpcListLocalHostsSectionsReply() GrpcListLocalHostsSectionsReply(IEnumerable<LocalHostSection>) Constructs a reply from LocalHostSection instances enumerated by a ListLocalHostsSections() call. Declaration public GrpcListLocalHostsSectionsReply(IEnumerable<LocalHostSection> sections) Parameters Type Name Description IEnumerable < LocalHostSection > sections The enumerated local hosts sections. Properties Sections The list of local host section information. Declaration public List<GrpcLocalHostSection> Sections { get; set; } Property Value Type Description List < GrpcLocalHostSection >"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcListLocalHostsSectionsRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcListLocalHostsSectionsRequest.html",
    "title": "Class GrpcListLocalHostsSectionsRequest | NeonKUBE documentation",
    "keywords": "Class GrpcListLocalHostsSectionsRequest Lists the sections from the local $/etc/hosts file. See ListLocalHostsSections() for more information. Inheritance Object GrpcListLocalHostsSectionsRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcListLocalHostsSectionsRequest Constructors GrpcListLocalHostsSectionsRequest() Default constructor. Declaration public GrpcListLocalHostsSectionsRequest()"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcListNatsReply.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcListNatsReply.html",
    "title": "Class GrpcListNatsReply | NeonKUBE documentation",
    "keywords": "Class GrpcListNatsReply Lists the information about the Hyper-V virtual NATs. Inheritance Object GrpcListNatsReply Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcListNatsReply Constructors GrpcListNatsReply() Default constructor. Declaration public GrpcListNatsReply() GrpcListNatsReply(List<GrpcVirtualNat>) Constructor. Declaration public GrpcListNatsReply(List<GrpcVirtualNat> nats) Parameters Type Name Description List < GrpcVirtualNat > nats The virtual NATs. GrpcListNatsReply(Exception) Error constructor. Declaration public GrpcListNatsReply(Exception e) Parameters Type Name Description Exception e The exception. Properties Error Set to a non-null error when the request failed. Declaration [DataMember(Order = 1)] public GrpcError Error { get; set; } Property Value Type Description GrpcError Nats Information about the virtual NATs. Declaration [DataMember(Order = 2)] public List<GrpcVirtualNat> Nats { get; set; } Property Value Type Description List < GrpcVirtualNat >"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcListNatsRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcListNatsRequest.html",
    "title": "Class GrpcListNatsRequest | NeonKUBE documentation",
    "keywords": "Class GrpcListNatsRequest Lists the virtual Hyper-V NATs. This returns a GrpcListNatsReply . Inheritance Object GrpcListNatsRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcListNatsRequest Constructors GrpcListNatsRequest() Default constructor. Declaration public GrpcListNatsRequest()"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcListSwitchesReply.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcListSwitchesReply.html",
    "title": "Class GrpcListSwitchesReply | NeonKUBE documentation",
    "keywords": "Class GrpcListSwitchesReply Returns information about the Hyper-V switches. Inheritance Object GrpcListSwitchesReply Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcListSwitchesReply Constructors GrpcListSwitchesReply() Default constructor. Declaration public GrpcListSwitchesReply() GrpcListSwitchesReply(List<GrpcVirtualSwitch>) Constructor. Declaration public GrpcListSwitchesReply(List<GrpcVirtualSwitch> switches) Parameters Type Name Description List < GrpcVirtualSwitch > switches The switch information. GrpcListSwitchesReply(Exception) Error constructor. Declaration public GrpcListSwitchesReply(Exception e) Parameters Type Name Description Exception e The exception. Properties Error Set to a non-null error when the request failed. Declaration [DataMember(Order = 1)] public GrpcError Error { get; set; } Property Value Type Description GrpcError Switches Lists the swirch information. Declaration [DataMember(Order = 2)] public List<GrpcVirtualSwitch> Switches { get; set; } Property Value Type Description List < GrpcVirtualSwitch >"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcListSwitchesRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcListSwitchesRequest.html",
    "title": "Class GrpcListSwitchesRequest | NeonKUBE documentation",
    "keywords": "Class GrpcListSwitchesRequest Lists the Hyper-V switches. This returns a GrpcListSwitchesReply . Inheritance Object GrpcListSwitchesRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcListSwitchesRequest Constructors GrpcListSwitchesRequest() Default constructor. Declaration public GrpcListSwitchesRequest()"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcListVmsReply.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcListVmsReply.html",
    "title": "Class GrpcListVmsReply | NeonKUBE documentation",
    "keywords": "Class GrpcListVmsReply Holds the listed virtual machine information. Inheritance Object GrpcListVmsReply Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcListVmsReply Constructors GrpcListVmsReply() Default constructor. Declaration public GrpcListVmsReply() GrpcListVmsReply(List<GrpcVirtualMachine>) Reply constructor. Declaration public GrpcListVmsReply(List<GrpcVirtualMachine> virtualMachines) Parameters Type Name Description List < GrpcVirtualMachine > virtualMachines The virtual machine information. GrpcListVmsReply(Exception) Error constructor. Declaration public GrpcListVmsReply(Exception e) Parameters Type Name Description Exception e The exception. Properties Error Set to a non-null error when the request failed. Declaration [DataMember(Order = 1)] public GrpcError Error { get; set; } Property Value Type Description GrpcError VirtualMachines Lists the virtual machines. Declaration [DataMember(Order = 2)] public List<GrpcVirtualMachine> VirtualMachines { get; set; } Property Value Type Description List < GrpcVirtualMachine >"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcListVmsRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcListVmsRequest.html",
    "title": "Class GrpcListVmsRequest | NeonKUBE documentation",
    "keywords": "Class GrpcListVmsRequest Lists the virtual machines. This request returns a GrpcListVmsReply . Inheritance Object GrpcListVmsRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcListVmsRequest Constructors GrpcListVmsRequest() Default constructor. Declaration public GrpcListVmsRequest()"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcLocalHostSection.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcLocalHostSection.html",
    "title": "Class GrpcLocalHostSection | NeonKUBE documentation",
    "keywords": "Class GrpcLocalHostSection Holds information about a host section from the local $/etc/hosts file as returned for a GrpcListLocalHostsSectionsRequest within a GrpcListLocalHostsSectionsReply . Inheritance Object GrpcLocalHostSection Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax public class GrpcLocalHostSection Constructors GrpcLocalHostSection() Default constructor. Declaration public GrpcLocalHostSection() GrpcLocalHostSection(LocalHostSection) Constructs an instance using the sections passed. Declaration public GrpcLocalHostSection(LocalHostSection section) Parameters Type Name Description LocalHostSection section The LocalHostSection instance being wrapped. Properties HostEntries The map of hostnames to IP addresses. Declaration [DataMember(Order = 2)] public Dictionary<string, IPAddress> HostEntries { get; set; } Property Value Type Description Dictionary < String , IPAddress > Name The host section name. Declaration [DataMember(Order = 1)] public string Name { get; set; } Property Value Type Description String Methods ToLocalHostSection() Converts this GrpcLocalHostSection into a LocalHostSection . Declaration public LocalHostSection ToLocalHostSection() Returns Type Description LocalHostSection The converted LocalHostSection ."
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcModifyLocalHostsRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcModifyLocalHostsRequest.html",
    "title": "Class GrpcModifyLocalHostsRequest | NeonKUBE documentation",
    "keywords": "Class GrpcModifyLocalHostsRequest Modifies the local $/etc/hosts file which usually required elevated rights to access. This request returns a GrpcBaseReply . See ModifyLocalHosts(String, Dictionary<String, IPAddress>) for more information about how this works. Inheritance Object GrpcModifyLocalHostsRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcModifyLocalHostsRequest Constructors GrpcModifyLocalHostsRequest() Default constructor. Declaration public GrpcModifyLocalHostsRequest() GrpcModifyLocalHostsRequest(String, Dictionary<String, IPAddress>) Constructor. Declaration public GrpcModifyLocalHostsRequest(string section, Dictionary<string, IPAddress> hostEntries = null) Parameters Type Name Description String section Specifies the string to use to delimit the host names section. This is required and must be a non-empty string consisting of up to 63 non-control ASCII characters. Section names are case sensitive. Dictionary < String , IPAddress > hostEntries A dictionary mapping the hostnames to an IP address or null . Remarks note This method requires elevated administrative privileges. This method adds or removes a temporary section of host entry definitions delimited by special comment lines. When hostEntries is non-null and non-empty, the section will be added or updated. Otherwise, the section will be removed. You can remove all host sections by passing both hostEntries and section as null . Properties HostEntries Optionally specifies the host entries to located within the target section. Declaration [DataMember(Order = 2)] public Dictionary<string, IPAddress> HostEntries { get; set; } Property Value Type Description Dictionary < String , IPAddress > Section Identifies the section. Declaration [DataMember(Order = 1)] public string Section { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcNewExternalSwitchRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcNewExternalSwitchRequest.html",
    "title": "Class GrpcNewExternalSwitchRequest | NeonKUBE documentation",
    "keywords": "Class GrpcNewExternalSwitchRequest Creates a new external Hyper-V switch. This returns a GrpcBaseReply . Inheritance Object GrpcNewExternalSwitchRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcNewExternalSwitchRequest Constructors GrpcNewExternalSwitchRequest() Default constructor. Declaration public GrpcNewExternalSwitchRequest() GrpcNewExternalSwitchRequest(String, IPAddress) Constructor. Declaration public GrpcNewExternalSwitchRequest(string switchName, IPAddress gateway) Parameters Type Name Description String switchName The new switch name. IPAddress gateway Address of the LAN gateway, used to identify the connected network interface. Properties Gateway Address of the LAN gateway. Declaration [DataMember(Order = 2)] public string Gateway { get; set; } Property Value Type Description String SwitchName Identifies the desired switch. Declaration [DataMember(Order = 1)] public string SwitchName { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcNewInternalSwitchRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcNewInternalSwitchRequest.html",
    "title": "Class GrpcNewInternalSwitchRequest | NeonKUBE documentation",
    "keywords": "Class GrpcNewInternalSwitchRequest Adds an internal Hyper-V switch configured for the specified subnet and gateway as well as an optional NAT enabling external connectivity. This requ3est returns a GrpcBaseReply . Inheritance Object GrpcNewInternalSwitchRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcNewInternalSwitchRequest Constructors GrpcNewInternalSwitchRequest() Default constructor. Declaration public GrpcNewInternalSwitchRequest() GrpcNewInternalSwitchRequest(String, NetworkCidr, Boolean) Adds an internal Hyper-V switch configured for the specified subnet and gateway as well as an optional NAT enabling external connectivity. Declaration public GrpcNewInternalSwitchRequest(string switchName, NetworkCidr subnet, bool addNat = false) Parameters Type Name Description String switchName The new switch name. NetworkCidr subnet Specifies the internal subnet. Boolean addNat Optionally configure a NAT to support external routing. Properties AddNat Configure a NAT to support external routing. Declaration [DataMember(Order = 3)] public bool AddNat { get; set; } Property Value Type Description Boolean Subnet Specifies the internal subnet (as a NetworkCidr string. Declaration [DataMember(Order = 2)] public string Subnet { get; set; } Property Value Type Description String SwitchName The new switch name. Declaration [DataMember(Order = 1)] public string SwitchName { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcRelayLogBatchReply.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcRelayLogBatchReply.html",
    "title": "Class GrpcRelayLogBatchReply | NeonKUBE documentation",
    "keywords": "Class GrpcRelayLogBatchReply Returned as the reply for a GrpcRelayLogBatchRequest . note GrpcRelayLogBatchRequest requests fail silently. Inheritance Object GrpcRelayLogBatchReply Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcRelayLogBatchReply Constructors GrpcRelayLogBatchReply() Default constructor. Declaration public GrpcRelayLogBatchReply()"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcRelayLogBatchRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcRelayLogBatchRequest.html",
    "title": "Class GrpcRelayLogBatchRequest | NeonKUBE documentation",
    "keywords": "Class GrpcRelayLogBatchRequest Used to submit a batch of telemetry logs from neon-desktop and neon-cli to the neon-desktop-service which will then forward them to the headend. note The batch is actually serialized as a JSON string so that we won't have to define protobufs for this, keeping things simple. Inheritance Object GrpcRelayLogBatchRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcRelayLogBatchRequest Constructors GrpcRelayLogBatchRequest() Default constructor. Declaration public GrpcRelayLogBatchRequest() GrpcRelayLogBatchRequest(String) Constructor. Declaration public GrpcRelayLogBatchRequest(string batchJson) Parameters Type Name Description String batchJson The batched log records serialized as JSON. Properties BatchJson The log record batch serialized as JSON. Declaration [DataMember(Order = 1)] public string BatchJson { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcRelayTraceBatchReply.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcRelayTraceBatchReply.html",
    "title": "Class GrpcRelayTraceBatchReply | NeonKUBE documentation",
    "keywords": "Class GrpcRelayTraceBatchReply Returned as the reply for a GrpcRelayTraceBatchRequest . note GrpcRelayTraceBatchRequest requests fail silently. Inheritance Object GrpcRelayTraceBatchReply Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcRelayTraceBatchReply Constructors GrpcRelayTraceBatchReply() Default constructor. Declaration public GrpcRelayTraceBatchReply()"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcRelayTraceBatchRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcRelayTraceBatchRequest.html",
    "title": "Class GrpcRelayTraceBatchRequest | NeonKUBE documentation",
    "keywords": "Class GrpcRelayTraceBatchRequest Used to submit a batch of telemetry traces from neon-desktop and neon-cli to the neon-desktop-service which will then forward them to the headend. note The batch is actually serialized as a JSON string so that we won't have to define protobufs for this, keeping things simple. Inheritance Object GrpcRelayTraceBatchRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcRelayTraceBatchRequest Constructors GrpcRelayTraceBatchRequest() Default constructor. Declaration public GrpcRelayTraceBatchRequest() GrpcRelayTraceBatchRequest(String) Constructor. Declaration public GrpcRelayTraceBatchRequest(string batchJson) Parameters Type Name Description String batchJson The batched trace records serialized as JSON. Properties BatchJson The log record batch serialized as JSON. Declaration [DataMember(Order = 1)] public string BatchJson { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcRemoveSwitchRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcRemoveSwitchRequest.html",
    "title": "Class GrpcRemoveSwitchRequest | NeonKUBE documentation",
    "keywords": "Class GrpcRemoveSwitchRequest Removes a Hyper-V switch. This request returns a GrpcBaseReply . Inheritance Object GrpcRemoveSwitchRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcRemoveSwitchRequest Constructors GrpcRemoveSwitchRequest() Default constructor. Declaration public GrpcRemoveSwitchRequest() GrpcRemoveSwitchRequest(String, Boolean) Constructor. Declaration public GrpcRemoveSwitchRequest(string switchName, bool ignoreMissing = false) Parameters Type Name Description String switchName Specifies the switch name. Boolean ignoreMissing Optionally specifies that missing items should be ignored. Properties IgnoreMissing Indicates that missing items should be ignored. Declaration public bool? IgnoreMissing { get; set; } Property Value Type Description Nullable < Boolean > SwitchName Identifies the desired virtual switch. Declaration [DataMember(Order = 1)] public string SwitchName { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcRemoveVmRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcRemoveVmRequest.html",
    "title": "Class GrpcRemoveVmRequest | NeonKUBE documentation",
    "keywords": "Class GrpcRemoveVmRequest Removes a virtual machine. This request returns a GrpcBaseReply . Inheritance Object GrpcRemoveVmRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcRemoveVmRequest Constructors GrpcRemoveVmRequest() Default constructor. Declaration public GrpcRemoveVmRequest() GrpcRemoveVmRequest(String, Boolean) Constructor. Declaration public GrpcRemoveVmRequest(string machineName, bool keepDrives = false) Parameters Type Name Description String machineName Specifies the machine name. Boolean keepDrives Optionally retains the VM disk files. Properties KeepDrives Indicates whether the virtual machine drives should be retained after removing the machine. Declaration [DataMember(Order = 2)] public bool KeepDrives { get; set; } Property Value Type Description Boolean MachineName The machine name. Declaration [DataMember(Order = 1)] public string MachineName { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcSaveVmRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcSaveVmRequest.html",
    "title": "Class GrpcSaveVmRequest | NeonKUBE documentation",
    "keywords": "Class GrpcSaveVmRequest Saves a virtual machine (AKA puts it to sleep). This request returns a GrpcBaseReply . Inheritance Object GrpcSaveVmRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcSaveVmRequest Constructors GrpcSaveVmRequest() Default constructor. Declaration public GrpcSaveVmRequest() GrpcSaveVmRequest(String) Constructor. Declaration public GrpcSaveVmRequest(string machineName) Parameters Type Name Description String machineName Specifies the machine name. Properties MachineName Identifies the desired virtual machine. Declaration [DataMember(Order = 1)] public string MachineName { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcStartVmRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcStartVmRequest.html",
    "title": "Class GrpcStartVmRequest | NeonKUBE documentation",
    "keywords": "Class GrpcStartVmRequest Starts a specfic virtual machine exists. This request returns a GrpcBaseReply . Inheritance Object GrpcStartVmRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcStartVmRequest Constructors GrpcStartVmRequest() Default constructor. Declaration public GrpcStartVmRequest() GrpcStartVmRequest(String) Constructor. Declaration public GrpcStartVmRequest(string machineName) Parameters Type Name Description String machineName Specifies the machine name. Properties MachineName Identifies the desired virtual machine. Declaration [DataMember(Order = 1)] public string MachineName { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcStopVmRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcStopVmRequest.html",
    "title": "Class GrpcStopVmRequest | NeonKUBE documentation",
    "keywords": "Class GrpcStopVmRequest Stops a virtual machine. This request returns a GrpcBaseReply . Inheritance Object GrpcStopVmRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcStopVmRequest Constructors GrpcStopVmRequest() Default constructor. Declaration public GrpcStopVmRequest() GrpcStopVmRequest(String, Boolean) Constructor. Declaration public GrpcStopVmRequest(string machineName, bool turnOff = false) Parameters Type Name Description String machineName Specifies the machine name. Boolean turnOff Optionally just turns the VM off without performing a graceful shutdown first. note WARNING! This could result in corruption or the the loss of unsaved data. Properties MachineName Identifies the desired virtual machine. Declaration [DataMember(Order = 1)] public string MachineName { get; set; } Property Value Type Description String TurnOff Indicates that the virtual machine should be turned of as opposed to be shutdown gracefully. Declaration [DataMember(Order = 2)] public bool TurnOff { get; set; } Property Value Type Description Boolean"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcVirtualDrive.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcVirtualDrive.html",
    "title": "Class GrpcVirtualDrive | NeonKUBE documentation",
    "keywords": "Class GrpcVirtualDrive Specifies a virtual drive. Inheritance Object GrpcVirtualDrive Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcVirtualDrive Constructors GrpcVirtualDrive() Default constructor. Declaration public GrpcVirtualDrive() GrpcVirtualDrive(String, Decimal, Boolean) Constructor. Declaration public GrpcVirtualDrive(string path, decimal size, bool isDynamic) Parameters Type Name Description String path Specifies the path where the drive is located. Decimal size The drive size in bytes. Boolean isDynamic Indicates whether a dynamic drive will be created as opposed to a pre-allocated fixed drive. Properties IsDynamic Indicates whether a dynamic drive will be created as opposed to a pre-allocated fixed drive. This defaults to true . Declaration [DataMember(Order = 3)] public bool IsDynamic { get; set; } Property Value Type Description Boolean Path Specifies the path where the drive will be located. The drive format is indicated by the file type, either .vhd or .vhdx . Declaration [DataMember(Order = 1)] public string Path { get; set; } Property Value Type Description String Size The drive size in bytes. Declaration [DataMember(Order = 2)] public long Size { get; set; } Property Value Type Description Int64 Extension Methods DesktopConverters.ToLocal(GrpcVirtualDrive)"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcVirtualIPAddress.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcVirtualIPAddress.html",
    "title": "Class GrpcVirtualIPAddress | NeonKUBE documentation",
    "keywords": "Class GrpcVirtualIPAddress Describes a virtual Hyper-V IP address. Inheritance Object GrpcVirtualIPAddress Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcVirtualIPAddress Constructors GrpcVirtualIPAddress() Default constructor. Declaration public GrpcVirtualIPAddress() GrpcVirtualIPAddress(String, NetworkCidr, String) Constructor. Declaration public GrpcVirtualIPAddress(string address, NetworkCidr subnet, string interfaceName) Parameters Type Name Description String address The associated IP address. NetworkCidr subnet The network subnet. String interfaceName Identifies the network interface or switch to which this address is connected. Properties Address The associated IP address. Declaration [DataMember(Order = 1)] public string Address { get; set; } Property Value Type Description String InterfaceName Identifies the network interface or switch to which this address is connected. Declaration [DataMember(Order = 3)] public string InterfaceName { get; set; } Property Value Type Description String Subnet The network subnet. Declaration [DataMember(Order = 2)] public string Subnet { get; set; } Property Value Type Description String Extension Methods DesktopConverters.ToLocal(GrpcVirtualIPAddress)"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcVirtualMachine.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcVirtualMachine.html",
    "title": "Class GrpcVirtualMachine | NeonKUBE documentation",
    "keywords": "Class GrpcVirtualMachine Describes the state of a Hyper-V virtual machine. Inheritance Object GrpcVirtualMachine Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcVirtualMachine Constructors GrpcVirtualMachine() Default constructor. Declaration public GrpcVirtualMachine() GrpcVirtualMachine(String, String, String, String) Constructor. Declaration public GrpcVirtualMachine(string name, string state, string switchName, string interfaceName) Parameters Type Name Description String name Specifies the machine name. String state Specifies the machine state. This corresponds to [VirtualMachineState] defined in [Neon.HyperV]. String switchName Optionally identifies the attached switch. String interfaceName Optionall identifies the attached network adaptor. Properties InterfaceName Identifies the network interface or switch to which the address is assigned (or null). Declaration [DataMember(Order = 4)] public string InterfaceName { get; set; } Property Value Type Description String Name The machine name. Declaration [DataMember(Order = 1)] public string Name { get; set; } Property Value Type Description String State The current machine state. This corresponds to [VirtualMachineState] defined in [Neon.HyperV]. Declaration [DataMember(Order = 2)] public string State { get; set; } Property Value Type Description String SwitchName Identifies the virtual switch to which this virtual machine is attached (or null). Declaration [DataMember(Order = 3)] public string SwitchName { get; set; } Property Value Type Description String Extension Methods DesktopConverters.ToLocal(GrpcVirtualMachine)"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcVirtualNat.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcVirtualNat.html",
    "title": "Class GrpcVirtualNat | NeonKUBE documentation",
    "keywords": "Class GrpcVirtualNat Describes a Hyper-V virtual NAT. Inheritance Object GrpcVirtualNat Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcVirtualNat Constructors GrpcVirtualNat() Default constructor. Declaration public GrpcVirtualNat() GrpcVirtualNat(String, String) Constructor. Declaration public GrpcVirtualNat(string name, string subnet) Parameters Type Name Description String name The NAT's name. String subnet The NAT source subnet. Properties Name The NAT's name. Declaration [DataMember(Order = 1)] public string Name { get; set; } Property Value Type Description String Subnet The NAT source subnet. Declaration [DataMember(Order = 2)] public string Subnet { get; set; } Property Value Type Description String Extension Methods DesktopConverters.ToLocal(GrpcVirtualNat)"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcVirtualNetworkAdapter.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcVirtualNetworkAdapter.html",
    "title": "Class GrpcVirtualNetworkAdapter | NeonKUBE documentation",
    "keywords": "Class GrpcVirtualNetworkAdapter Describes a network adaptor attached to a virtual machine. Inheritance Object GrpcVirtualNetworkAdapter Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcVirtualNetworkAdapter Constructors GrpcVirtualNetworkAdapter() Default constructor. Declaration public GrpcVirtualNetworkAdapter() GrpcVirtualNetworkAdapter(String, Boolean, String, String, String, String, List<String>) Constructor. Declaration public GrpcVirtualNetworkAdapter(string name, bool isManagementOs, string vmName, string switchName, string macAddress, string status, List<string> addresses) Parameters Type Name Description String name The adapter name. Boolean isManagementOs true if this adapter is attached to the management operating system. String vmName The name of the attached virtual machine. String switchName TThe adapter's MAC address.he attached switch name. String macAddress The adapter's MAC address. String status The adapter status. List < String > addresses The IP addresses assigned to the adapter. Properties Addresses The IP addresses assigned to the adapter. Declaration [DataMember(Order = 7)] public List<string> Addresses { get; set; } Property Value Type Description List < String > IsManagementOs true if this adapter is attached to the management operating system. Declaration [DataMember(Order = 2)] public bool IsManagementOs { get; set; } Property Value Type Description Boolean MacAddress The adapter's MAC address. Declaration [DataMember(Order = 5)] public string MacAddress { get; set; } Property Value Type Description String Name The adapter name. Declaration [DataMember(Order = 1)] public string Name { get; set; } Property Value Type Description String Status The adapter status. Declaration [DataMember(Order = 6)] public string Status { get; set; } Property Value Type Description String SwitchName The attached switch name. Declaration [DataMember(Order = 14)] public string SwitchName { get; set; } Property Value Type Description String VMName The name of the attached virtual machine. Declaration [DataMember(Order = 3)] public string VMName { get; set; } Property Value Type Description String Extension Methods DesktopConverters.ToLocal(GrpcVirtualNetworkAdapter)"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcVirtualSwitch.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcVirtualSwitch.html",
    "title": "Class GrpcVirtualSwitch | NeonKUBE documentation",
    "keywords": "Class GrpcVirtualSwitch Describes a virtual switch. Inheritance Object GrpcVirtualSwitch Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcVirtualSwitch Constructors GrpcVirtualSwitch() Default constructor. Declaration public GrpcVirtualSwitch() GrpcVirtualSwitch(String, String) Constructor. Declaration public GrpcVirtualSwitch(string name, string type) Parameters Type Name Description String name The switch name. String type The switch type (corresponds to the [VirtualSwitchType] enum. Properties Name The switch name. Declaration [DataMember(Order = 1)] public string Name { get; set; } Property Value Type Description String Type The switch type (corresponds to the [VirtualSwitchType] enum. Declaration [DataMember(Order = 2)] public string Type { get; set; } Property Value Type Description String Extension Methods DesktopConverters.ToLocal(GrpcVirtualSwitch)"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcVmExistsReply.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcVmExistsReply.html",
    "title": "Class GrpcVmExistsReply | NeonKUBE documentation",
    "keywords": "Class GrpcVmExistsReply Indicates whether a specific virtual machine exists.. Inheritance Object GrpcVmExistsReply Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcVmExistsReply Constructors GrpcVmExistsReply() Default constructor. Declaration public GrpcVmExistsReply() GrpcVmExistsReply(Boolean) Reply constructor. Declaration public GrpcVmExistsReply(bool exists) Parameters Type Name Description Boolean exists Indicates whether the virtual machine exists. GrpcVmExistsReply(Exception) Error constructor. Declaration public GrpcVmExistsReply(Exception e) Parameters Type Name Description Exception e The exception. Properties Error Set to a non-null error when the request failed. Declaration [DataMember(Order = 1)] public GrpcError Error { get; set; } Property Value Type Description GrpcError Exists true when the virtual machine exists. Declaration [DataMember(Order = 2)] public bool Exists { get; set; } Property Value Type Description Boolean"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcVmExistsRequest.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpcVmExistsRequest.html",
    "title": "Class GrpcVmExistsRequest | NeonKUBE documentation",
    "keywords": "Class GrpcVmExistsRequest Determines whether a specfic virtual machine exists. This request returns a GrpcVmExistsReply . Inheritance Object GrpcVmExistsRequest Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcVmExistsRequest Constructors GrpcVmExistsRequest() Default constructor. Declaration public GrpcVmExistsRequest() GrpcVmExistsRequest(String) Constructor. Declaration public GrpcVmExistsRequest(string machineName) Parameters Type Name Description String machineName Specifies the machine name. Properties MachineName Identifies the desired virtual machine. Declaration [DataMember(Order = 1)] public string MachineName { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpGetVmDrivesReply.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.GrpGetVmDrivesReply.html",
    "title": "Class GrpGetVmDrivesReply | NeonKUBE documentation",
    "keywords": "Class GrpGetVmDrivesReply Holds information about a virtual machines attached drives. Inheritance Object GrpGetVmDrivesReply Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpGetVmDrivesReply Constructors GrpGetVmDrivesReply() Default constructor. Declaration public GrpGetVmDrivesReply() GrpGetVmDrivesReply(List<String>) Constructor. Declaration public GrpGetVmDrivesReply(List<string> drivePaths) Parameters Type Name Description List < String > drivePaths The drive paths. GrpGetVmDrivesReply(Exception) Error constructor. Declaration public GrpGetVmDrivesReply(Exception e) Parameters Type Name Description Exception e The exception. Properties DrivePaths The file system paths to the drives. Declaration [DataMember(Order = 2)] public List<string> DrivePaths { get; set; } Property Value Type Description List < String > Error Set to a non-null error when the request failed. Declaration [DataMember(Order = 1)] public GrpcError Error { get; set; } Property Value Type Description GrpcError"
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.html",
    "title": "Namespace Neon.Kube.GrpcProto.Desktop | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.GrpcProto.Desktop Classes DesktopConverters Conversions between gRPC proto and local types. GrpcAddVmDriveRequest Requests information about a virtual machine's drives. This request returns a GrpcBaseReply . GrpcAddVmRequest Creates a virtual machine. This request returns a GrpcBaseReply . GrpcBaseReply Used for operations that just need to return an indication of success or failure. GrpcCompactDriveRequest Compacts a virtual disk. This request returns a GrpcBaseReply . GrpcEjectVmDvdRequest Ejects any DVD/CD inserted into a virtual machine. This request returns a GrpcBaseReply . GrpcGetIPAddressReply Returns information about a virtual IP address. GrpcGetIPAddressRequest Returns information about a virtual IP address. GrpcGetNatByNameRequest Returns information about a virtual Hyper-V NAT by name. This returns a GrpcGetNatReply . GrpcGetNatBySubnetRequest Returns information about a virtual Hyper-V NAT by subnet. This returns a GrpcGetNatReply . GrpcGetNatReply Returns information about a specific virtual Hyper-V NAT. GrpcGetSwitchReply Returns information about a specific Hyper-V switch. GrpcGetSwitchRequest Returns information about a specific switch. This returns a GrpcGetSwitchReply . GrpcGetVmDrivesRequest Requests information about a virtual machine's drives. This request returns a GrpGetVmDrivesReply . GrpcGetVmNetworkAdaptersReply Returns the network adaptors attached to a virtual machine. GrpcGetVmNetworkAdaptersRequest Returns the network adapters attached to a virtual machine. This returns a GrpcGetVmNetworkAdaptersReply . GrpcGetVmReply Holds information about a specific virtual machine. GrpcGetVmRequest Returns information about a specific virtual machine. This request returns a GrpcGetVmReply . GrpcGetWindowsOptionalFeaturesReply Describes the current Windows capabilities. GrpcGetWindowsOptionalFeaturesRequest Determines whether Windows is running under nested virtualization. This request returns a GrpcGetWindowsOptionalFeaturesReply . GrpcInsertVmDvdRequest Inserts an ISO file as the DVD/CD for a virtual machine, ejecting any existing disc first. This request returns a GrpcBaseReply . GrpcIsNestedVirtualizationReply Indicates whether Windows is running with nested virtualization. GrpcIsNestedVirtualizationRequest Determines whether Windows is running under nested virtualization. This request returns a GrpcIsNestedVirtualizationReply . GrpcListLocalHostsSectionsReply Returned as the reply for a GrpcListLocalHostsSectionsRequest . GrpcListLocalHostsSectionsRequest Lists the sections from the local $/etc/hosts file. See ListLocalHostsSections() for more information. GrpcListNatsReply Lists the information about the Hyper-V virtual NATs. GrpcListNatsRequest Lists the virtual Hyper-V NATs. This returns a GrpcListNatsReply . GrpcListSwitchesReply Returns information about the Hyper-V switches. GrpcListSwitchesRequest Lists the Hyper-V switches. This returns a GrpcListSwitchesReply . GrpcListVmsReply Holds the listed virtual machine information. GrpcListVmsRequest Lists the virtual machines. This request returns a GrpcListVmsReply . GrpcLocalHostSection Holds information about a host section from the local $/etc/hosts file as returned for a GrpcListLocalHostsSectionsRequest within a GrpcListLocalHostsSectionsReply . GrpcModifyLocalHostsRequest Modifies the local $/etc/hosts file which usually required elevated rights to access. This request returns a GrpcBaseReply . See ModifyLocalHosts(String, Dictionary<String, IPAddress>) for more information about how this works. GrpcNewExternalSwitchRequest Creates a new external Hyper-V switch. This returns a GrpcBaseReply . GrpcNewInternalSwitchRequest Adds an internal Hyper-V switch configured for the specified subnet and gateway as well as an optional NAT enabling external connectivity. This requ3est returns a GrpcBaseReply . GrpcRelayLogBatchReply Returned as the reply for a GrpcRelayLogBatchRequest . note GrpcRelayLogBatchRequest requests fail silently. GrpcRelayLogBatchRequest Used to submit a batch of telemetry logs from neon-desktop and neon-cli to the neon-desktop-service which will then forward them to the headend. note The batch is actually serialized as a JSON string so that we won't have to define protobufs for this, keeping things simple. GrpcRelayTraceBatchReply Returned as the reply for a GrpcRelayTraceBatchRequest . note GrpcRelayTraceBatchRequest requests fail silently. GrpcRelayTraceBatchRequest Used to submit a batch of telemetry traces from neon-desktop and neon-cli to the neon-desktop-service which will then forward them to the headend. note The batch is actually serialized as a JSON string so that we won't have to define protobufs for this, keeping things simple. GrpcRemoveSwitchRequest Removes a Hyper-V switch. This request returns a GrpcBaseReply . GrpcRemoveVmRequest Removes a virtual machine. This request returns a GrpcBaseReply . GrpcSaveVmRequest Saves a virtual machine (AKA puts it to sleep). This request returns a GrpcBaseReply . GrpcStartVmRequest Starts a specfic virtual machine exists. This request returns a GrpcBaseReply . GrpcStopVmRequest Stops a virtual machine. This request returns a GrpcBaseReply . GrpcVirtualDrive Specifies a virtual drive. GrpcVirtualIPAddress Describes a virtual Hyper-V IP address. GrpcVirtualMachine Describes the state of a Hyper-V virtual machine. GrpcVirtualNat Describes a Hyper-V virtual NAT. GrpcVirtualNetworkAdapter Describes a network adaptor attached to a virtual machine. GrpcVirtualSwitch Describes a virtual switch. GrpcVmExistsReply Indicates whether a specific virtual machine exists.. GrpcVmExistsRequest Determines whether a specfic virtual machine exists. This request returns a GrpcVmExistsReply . GrpGetVmDrivesReply Holds information about a virtual machines attached drives. Interfaces IGrpcDesktopService Defines the Neon Desktop Service contract. This is used by neon-desktop and neon-cli to perform privileged operations."
  },
  "neonkube/api/Neon.Kube.GrpcProto.Desktop.IGrpcDesktopService.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.Desktop.IGrpcDesktopService.html",
    "title": "Interface IGrpcDesktopService | NeonKUBE documentation",
    "keywords": "Interface IGrpcDesktopService Defines the Neon Desktop Service contract. This is used by neon-desktop and neon-cli to perform privileged operations. Namespace : Neon.Kube.GrpcProto.Desktop Assembly : Neon.Kube.GrpcProto.dll Syntax [ServiceContract] public interface IGrpcDesktopService Methods AddVmAsync(GrpcAddVmRequest, CallContext) Creates a virtual machine. Declaration [OperationContract] Task<GrpcBaseReply> AddVmAsync(GrpcAddVmRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcAddVmRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > AddVmDriveAsync(GrpcAddVmDriveRequest, CallContext) Adds a drive to a virtual machine. Declaration [OperationContract] Task<GrpcBaseReply> AddVmDriveAsync(GrpcAddVmDriveRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcAddVmDriveRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . CompactDriveRequestAsync(GrpcCompactDriveRequest, CallContext) Compacts a virtual disk. Declaration [OperationContract] Task<GrpcBaseReply> CompactDriveRequestAsync(GrpcCompactDriveRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcCompactDriveRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . EjectVmDvdAsync(GrpcEjectVmDvdRequest, CallContext) Ejects any DVD/CD that's currently inserted into a virtual machine. Declaration [OperationContract] Task<GrpcBaseReply> EjectVmDvdAsync(GrpcEjectVmDvdRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcEjectVmDvdRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . GetIPAddressAsync(GrpcGetIPAddressRequest, CallContext) Returns information about a virtual IP address. Declaration [OperationContract] Task<GrpcGetIPAddressReply> GetIPAddressAsync(GrpcGetIPAddressRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcGetIPAddressRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcGetIPAddressReply > A GrpcGetIPAddressReply . GetNatByNameAsync(GrpcGetNatByNameRequest, CallContext) Looks up a virtual Hyper-V NAT by name. Declaration [OperationContract] Task<GrpcGetNatReply> GetNatByNameAsync(GrpcGetNatByNameRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcGetNatByNameRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcGetNatReply > A GrpcGetNatReply . GetNatByNameSubnetAsync(GrpcGetNatBySubnetRequest, CallContext) Looks up a virtual Hyper-V NAT by subnet. Declaration [OperationContract] Task<GrpcGetNatReply> GetNatByNameSubnetAsync(GrpcGetNatBySubnetRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcGetNatBySubnetRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcGetNatReply > A GrpcGetNatReply . GetSwitchAsync(GrpcGetSwitchRequest, CallContext) Returns information about a specific Hyper-V virtual switch. Declaration [OperationContract] Task<GrpcGetSwitchReply> GetSwitchAsync(GrpcGetSwitchRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcGetSwitchRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcGetSwitchReply > A GrpcGetSwitchReply . GetVmAsync(GrpcGetVmRequest, CallContext) Returns information about a specific virtual machine if it exists. Declaration [OperationContract] Task<GrpcGetVmReply> GetVmAsync(GrpcGetVmRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcGetVmRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcGetVmReply > A GrpcGetVmReply with the results. GetVmDrivesAsync(GrpcGetVmDrivesRequest, CallContext) Returns information about a virtual machine's attached drives. Declaration [OperationContract] Task<GrpGetVmDrivesReply> GetVmDrivesAsync(GrpcGetVmDrivesRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcGetVmDrivesRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpGetVmDrivesReply > A GrpGetVmDrivesReply . GetVmNetworkAdaptersAsync(GrpcGetVmNetworkAdaptersRequest, CallContext) Returns information about the network adaptors attached to a virtual machine. Declaration [OperationContract] Task<GrpcGetVmNetworkAdaptersReply> GetVmNetworkAdaptersAsync(GrpcGetVmNetworkAdaptersRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcGetVmNetworkAdaptersRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcGetVmNetworkAdaptersReply > A GrpcGetVmNetworkAdaptersReply . GetWindowsOptionalFeaturesAsync(GrpcGetWindowsOptionalFeaturesRequest, CallContext) Returns a dictionary mapping Windows features to their current status. Declaration [OperationContract] Task<GrpcGetWindowsOptionalFeaturesReply> GetWindowsOptionalFeaturesAsync(GrpcGetWindowsOptionalFeaturesRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcGetWindowsOptionalFeaturesRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcGetWindowsOptionalFeaturesReply > A GrpcGetWindowsOptionalFeaturesReply holding the feature information. Exceptions Type Condition GrpcServiceException Thrown on errors. InsertVmDvdAsync(GrpcInsertVmDvdRequest, CallContext) Inserts an ISO file as the DVD/CD for a virtual machine, ejecting any existing disc. Declaration [OperationContract] Task<GrpcBaseReply> InsertVmDvdAsync(GrpcInsertVmDvdRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcInsertVmDvdRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . IsNestedVirtualizationAsync(GrpcIsNestedVirtualizationRequest, CallContext) Returns an indication as to whether Windows is running with nested virtualization. Declaration [OperationContract] Task<GrpcIsNestedVirtualizationReply> IsNestedVirtualizationAsync(GrpcIsNestedVirtualizationRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcIsNestedVirtualizationRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcIsNestedVirtualizationReply > A GrpcIsNestedVirtualizationReply holding the feature information. Exceptions Type Condition GrpcServiceException Thrown on errors. ListLocalHostSections(GrpcListLocalHostsSectionsRequest, CallContext) Lists the sections from the local $/etc/hosts file. Declaration [OperationContract] Task<GrpcListLocalHostsSectionsReply> ListLocalHostSections(GrpcListLocalHostsSectionsRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcListLocalHostsSectionsRequest request The request specifying how to modify the local hosts. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcListLocalHostsSectionsReply > The GrpcListLocalHostsSectionsReply . ListNatsAsync(GrpcListNatsRequest, CallContext) Lists the virtual Hyper-V NATs. Declaration [OperationContract] Task<GrpcListNatsReply> ListNatsAsync(GrpcListNatsRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcListNatsRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcListNatsReply > A GrpcListNatsReply . ListSwitchesAsync(GrpcListSwitchesRequest, CallContext) Lists the Hyper-V virtual switches. Declaration [OperationContract] Task<GrpcListSwitchesReply> ListSwitchesAsync(GrpcListSwitchesRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcListSwitchesRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcListSwitchesReply > A GrpcListSwitchesReply . ListVmsAsync(GrpcListVmsRequest, CallContext) Lists the Hyper-V virtual machines. Declaration [OperationContract] Task<GrpcListVmsReply> ListVmsAsync(GrpcListVmsRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcListVmsRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcListVmsReply > A GrpcListVmsReply with the results. ModifyLocalHosts(GrpcModifyLocalHostsRequest, CallContext) Modifies the local $/etc/hosts file which usually required elevated rights to access. Declaration [OperationContract] Task<GrpcBaseReply> ModifyLocalHosts(GrpcModifyLocalHostsRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcModifyLocalHostsRequest request The request specifying how to modify the local hosts. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > The GrpcBaseReply . NewExternalSwitchAsync(GrpcNewExternalSwitchRequest, CallContext) Creates a new external Hyper-V virtual switch. Declaration [OperationContract] Task<GrpcBaseReply> NewExternalSwitchAsync(GrpcNewExternalSwitchRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcNewExternalSwitchRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . NewInternalSwitchAsync(GrpcNewInternalSwitchRequest, CallContext) Creates a new internal Hyper-V virtual switch. Declaration [OperationContract] Task<GrpcBaseReply> NewInternalSwitchAsync(GrpcNewInternalSwitchRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcNewInternalSwitchRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . RelayLogBatchAsync(GrpcRelayLogBatchRequest, CallContext) Sends a batch of telemetry logs to the neon-desktop-service which will then forward them on to the headend. Declaration [OperationContract] Task<GrpcRelayLogBatchReply> RelayLogBatchAsync(GrpcRelayLogBatchRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcRelayLogBatchRequest request The request holding the batch of log records. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcRelayLogBatchReply > The GrpcRelayLogBatchReply . RelayTraceBatchAsync(GrpcRelayTraceBatchRequest, CallContext) Sends a batch of telemetry traces to the neon-desktop-service which will then forward them on to the headend. Declaration [OperationContract] Task<GrpcRelayTraceBatchReply> RelayTraceBatchAsync(GrpcRelayTraceBatchRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcRelayTraceBatchRequest request The request holding the batch of traces. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcRelayTraceBatchReply > The GrpcRelayTraceBatchReply . RemoveSwitchAsync(GrpcRemoveSwitchRequest, CallContext) Removes a Hyper-V virtual switch. Declaration [OperationContract] Task<GrpcBaseReply> RemoveSwitchAsync(GrpcRemoveSwitchRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcRemoveSwitchRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . RemoveVmAsync(GrpcRemoveVmRequest, CallContext) Removes a named virtual machine and all of its drives (by default). Declaration [OperationContract] Task<GrpcBaseReply> RemoveVmAsync(GrpcRemoveVmRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcRemoveVmRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply indicating success or failure. SaveVmAsync(GrpcSaveVmRequest, CallContext) Saves a virtual machine (AKA puts it to sleep). Declaration [OperationContract] Task<GrpcBaseReply> SaveVmAsync(GrpcSaveVmRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcSaveVmRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . StartVmAsync(GrpcStartVmRequest, CallContext) Starts a virtual machine. Declaration [OperationContract] Task<GrpcBaseReply> StartVmAsync(GrpcStartVmRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcStartVmRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . StopVmAsync(GrpcStopVmRequest, CallContext) Stops a virtual machine. Declaration [OperationContract] Task<GrpcBaseReply> StopVmAsync(GrpcStopVmRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcStopVmRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcBaseReply > A GrpcBaseReply . VmExistsAsync(GrpcVmExistsRequest, CallContext) Determines whether a virtual machine exists. Declaration [OperationContract] Task<GrpcVmExistsReply> VmExistsAsync(GrpcVmExistsRequest request, CallContext context = default(CallContext)) Parameters Type Name Description GrpcVmExistsRequest request The request. ProtoBuf.Grpc.CallContext context Optionally specifies the gRPC call context. Returns Type Description Task < GrpcVmExistsReply > A GrpcVmExistsReply with the result."
  },
  "neonkube/api/Neon.Kube.GrpcProto.GrpcError.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.GrpcError.html",
    "title": "Class GrpcError | NeonKUBE documentation",
    "keywords": "Class GrpcError Holds information about an exception caught by the neon desktop service. Inheritance Object GrpcError Namespace : Neon.Kube.GrpcProto Assembly : Neon.Kube.GrpcProto.dll Syntax [DataContract] public class GrpcError Constructors GrpcError() Default constructor. Declaration public GrpcError() GrpcError(Exception) Constructor. Declaration public GrpcError(Exception e) Parameters Type Name Description Exception e The exception being wrapped. Properties ExceptionType The fully qualified type name of the exception. Declaration [DataMember(Order = 1)] public string ExceptionType { get; set; } Property Value Type Description String Message The exception message. Declaration [DataMember(Order = 2)] public string Message { get; set; } Property Value Type Description String StackTrace The stack trace where the exception was thrown or null when not available. Declaration [DataMember(Order = 3)] public string StackTrace { get; set; } Property Value Type Description String Extension Methods GrpcErrorExtensions.EnsureSuccess(GrpcError)"
  },
  "neonkube/api/Neon.Kube.GrpcProto.GrpcErrorExtensions.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.GrpcErrorExtensions.html",
    "title": "Class GrpcErrorExtensions | NeonKUBE documentation",
    "keywords": "Class GrpcErrorExtensions GrpcError extensions. Inheritance Object GrpcErrorExtensions Namespace : Neon.Kube.GrpcProto Assembly : Neon.Kube.GrpcProto.dll Syntax public static class GrpcErrorExtensions Methods EnsureSuccess(GrpcError) Throws a GrpcServiceException when the GrpcError is not null . Declaration public static void EnsureSuccess(this GrpcError error) Parameters Type Name Description GrpcError error The error."
  },
  "neonkube/api/Neon.Kube.GrpcProto.GrpcServiceException.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.GrpcServiceException.html",
    "title": "Class GrpcServiceException | NeonKUBE documentation",
    "keywords": "Class GrpcServiceException Thrown by EnsureSuccess(GrpcError) for non-null errors. Inheritance Object Exception GrpcServiceException Namespace : Neon.Kube.GrpcProto Assembly : Neon.Kube.GrpcProto.dll Syntax public class GrpcServiceException : Exception, ISerializable Constructors GrpcServiceException(String, Exception) Constructor. Declaration public GrpcServiceException(string message, Exception innerException = null) Parameters Type Name Description String message The exception message. Exception innerException Optionally specifies an inner exception."
  },
  "neonkube/api/Neon.Kube.GrpcProto.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.html",
    "title": "Namespace Neon.Kube.GrpcProto | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.GrpcProto Classes GrpcError Holds information about an exception caught by the neon desktop service. GrpcErrorExtensions GrpcError extensions. GrpcServiceException Thrown by EnsureSuccess(GrpcError) for non-null errors. NeonGrpcServices Creates clients for neonKUBE related gRPC services."
  },
  "neonkube/api/Neon.Kube.GrpcProto.NeonGrpcServices.html": {
    "href": "neonkube/api/Neon.Kube.GrpcProto.NeonGrpcServices.html",
    "title": "Class NeonGrpcServices | NeonKUBE documentation",
    "keywords": "Class NeonGrpcServices Creates clients for neonKUBE related gRPC services. Inheritance Object NeonGrpcServices Namespace : Neon.Kube.GrpcProto Assembly : Neon.Kube.GrpcProto.dll Syntax public static class NeonGrpcServices Methods CreateDesktopServiceChannel(String) Creates a gRPC channel that can be used to access the Neon Desktop Service. Declaration public static GrpcChannel CreateDesktopServiceChannel(string socketPath = null) Parameters Type Name Description String socketPath Optionally specifies an alternative path to the desktop services Unix domain socket for testing purposes. This defaults to WinDesktopServiceSocketPath where neon-desktop and neon-cli expect it to be. Returns Type Description Grpc.Net.Client.GrpcChannel A IGrpcDesktopService or null when the neon-desktop-service is not running."
  },
  "neonkube/api/Neon.Kube.GrpcTraceExporter.html": {
    "href": "neonkube/api/Neon.Kube.GrpcTraceExporter.html",
    "title": "Class GrpcTraceExporter | NeonKUBE documentation",
    "keywords": "Class GrpcTraceExporter Implements a trace exporter that forwards trace batches to the neon-desktop-service which then handles the transmission to the headend. Inheritance Object OpenTelemetry.BaseExporter < Activity > GrpcTraceExporter Namespace : Neon.Kube Assembly : Neon.Kube.GrpcProto.dll Syntax public class GrpcTraceExporter : BaseExporter<Activity>, IDisposable Constructors GrpcTraceExporter(IGrpcDesktopService) Constructor. Declaration public GrpcTraceExporter(IGrpcDesktopService desktopService) Parameters Type Name Description IGrpcDesktopService desktopService Specifies the gRPC client for the neon-desktop-service . Methods Export(in Batch<Activity>) Declaration public override ExportResult Export(in Batch<Activity> batch) Parameters Type Name Description OpenTelemetry.Batch < Activity > batch Returns Type Description OpenTelemetry.ExportResult Overrides OpenTelemetry.BaseExporter<System.Diagnostics.Activity>.Export(OpenTelemetry.Batch<System.Diagnostics.Activity>)"
  },
  "neonkube/api/Neon.Kube.Hosting.Aws.AwsHostingManager.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.Aws.AwsHostingManager.html",
    "title": "Class AwsHostingManager | NeonKUBE documentation",
    "keywords": "Class AwsHostingManager Manages cluster provisioning on Amazon Web Services. Inheritance Object HostingManager AwsHostingManager Implements IHostingManager Inherited Members HostingManager.MaxAsyncParallelHostingOperations HostingManager.SupportsFsTrim(HostingEnvironment) HostingManager.SupportsFsZero(HostingEnvironment) HostingManager.Dispose() HostingManager.MaxParallel HostingManager.WaitSeconds HostingManager.NodeMtu HostingManager.AssignNodeAddresses(ClusterDefinition) HostingManager.DefaultStatusTimeout HostingManager.PauseClusterAsync() HostingManager.ResumeClusterAsync() Namespace : Neon.Kube.Hosting.Aws Assembly : Neon.Kube.Aws.dll Syntax [HostingProvider(HostingEnvironment.Aws)] public class AwsHostingManager : HostingManager, IHostingManager, IDisposable Remarks Optional capability support: Pausable YES Stoppable YES Constructors AwsHostingManager() Creates an instance that is only capable of validating the hosting related options in the cluster definition. Declaration public AwsHostingManager() AwsHostingManager(ClusterProxy, Boolean, String, String, String) Creates an instance that is capable of provisioning a cluster on AWS. Declaration public AwsHostingManager(ClusterProxy cluster, bool cloudMarketplace, string nodeImageUri = null, string nodeImagePath = null, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. Boolean cloudMarketplace For cloud environments, this specifies whether the cluster should be provisioned using a VM image from the public cloud marketplace when true or from the private NEONFORGE image gallery for testing when false . This is ignored for on-premise environments. note Only NEONFORGE maintainers will have permission to use the private image. String nodeImageUri Ignored. String nodeImagePath Ignored. String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. Properties CanManageRouter Returns true if the hosting manage is capable of updating the upstream network router or load balancer. Cloud based managers will return true whereas on-premise managers will return false because we don't have the ability to manage physical routers yet. Declaration public override bool CanManageRouter { get; } Property Value Type Description Boolean Overrides HostingManager.CanManageRouter Capabilities Returns flags describing any optional capabilities supported by the hosting manager. Declaration public override HostingCapabilities Capabilities { get; } Property Value Type Description HostingCapabilities Overrides HostingManager.Capabilities HostingEnvironment Returns the hosting environment implemented by the manager. Declaration public override HostingEnvironment HostingEnvironment { get; } Property Value Type Description HostingEnvironment Overrides HostingManager.HostingEnvironment RequiresNodeAddressCheck Returns true if the hosting manager requires that the LAN be scanned for devices assigned IP addresses that may conflict with node addresses. This is typically required only for clusters deployed on-premise because cloud clusters are typically provisioned to their own isolated network. Declaration public override bool RequiresNodeAddressCheck { get; } Property Value Type Description Boolean Overrides HostingManager.RequiresNodeAddressCheck Methods AddPostProvisioningSteps(SetupController<NodeDefinition>) Adds any steps to be performed after the node has been otherwise prepared. Declaration public override void AddPostProvisioningSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The target setup controller. Overrides HostingManager.AddPostProvisioningSteps(SetupController<NodeDefinition>) AddPostSetupSteps(SetupController<NodeDefinition>) Adds any stps to be performed after cluster setup. Declaration public override void AddPostSetupSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller Overrides HostingManager.AddPostSetupSteps(SetupController<NodeDefinition>) AddProvisioningSteps(SetupController<NodeDefinition>) Adds the steps required to the setup controller passed that creates and initializes the cluster resources such as the virtual machines, networks, load balancers, network security groups, public IP addresses. Declaration public override void AddProvisioningSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The setup controller. Overrides HostingManager.AddProvisioningSteps(SetupController<NodeDefinition>) AddSetupSteps(SetupController<NodeDefinition>) Adds any steps to be performed before starting cluster setup. Declaration public override void AddSetupSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The target setup controller. Overrides HostingManager.AddSetupSteps(SetupController<NodeDefinition>) DeleteClusterAsync(Boolean) Deletes an existing cluster by terminating any nodes and then removing node VMs and any related resources as well as the related local cluster login by default. The cluster does not need to be running. This method can optionally remove clusters or VMs potentially orphaned by interrupted unit tests as identified by a resource group or VM name prefix. note This operation may not be supported for all environments. Declaration public override async Task DeleteClusterAsync(bool removeOrphans = false) Parameters Type Name Description Boolean removeOrphans Optionally specifies that VMs or clusters with the same resource group prefix or VM name prefix will be removed as well. See the remarks for more information. Returns Type Description Task The tracking Task . Overrides HostingManager.DeleteClusterAsync(Boolean) Remarks The removeOrphans parameter is typically enabled when running unit tests via the ClusterFixture to ensure that clusters and VMs orphaned by previous interrupted test runs are removed in addition to removing the cluster specified by the cluster definition. Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. DisableInternetSshAsync() Disables public SSH access for every node in the cluster, honoring source address limitations specified by ManagementAddressRules in the cluster definition. note This currently supported only by cloud hosting managers like: Azure, AWS, and Google. This will do nothing for the on-premise hosting managers because we don't have the ability to manage physical routers yet. Declaration public override async Task DisableInternetSshAsync() Returns Type Description Task Overrides HostingManager.DisableInternetSshAsync() Dispose(Boolean) Releases any important resources associated with the instance. Declaration public override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if the instance is being disposed as opposed to being finalized. Overrides HostingManager.Dispose(Boolean) EnableInternetSshAsync() Enables public SSH access for every node in the cluster, honoring source address limitations specified by ManagementAddressRules in the cluster definition. Each node will be assigned a public port that has a NAT rule directing SSH traffic to that specific node. These ports will be in the range of Neon.Kube.ClusterDef.NetworkOptions.FirstExternalSshPort to Neon.Kube.ClusterDef.NetworkOptions.LastExternalSshPort . GetSshEndpoint(String) will return the external endpoint for nodes when external SSH is enabled. note This currently supported only by cloud hosting managers like: Azure, AWS, and Google. This will do nothing for the on-premise hosting managers because we don't have the ability to manage physical routers yet. Declaration public override async Task EnableInternetSshAsync() Returns Type Description Task Overrides HostingManager.EnableInternetSshAsync() GetClusterAddresses() Returns the IP address to be used to access the cluster. For clusters deployed the the cloud, this will be the ingress IP address assigned to the load balancer. For on-premise clusters, this returns the private IP addresses for the control-plane nodes. Declaration public override IEnumerable<string> GetClusterAddresses() Returns Type Description IEnumerable < String > The list of cluster IP addresses. Overrides HostingManager.GetClusterAddresses() GetClusterHealthAsync(TimeSpan) Retrieves the health status of a cluster from the hosting manager's perspective. This includes information about the infrastructor provisioned for the cluster. Declaration public override async Task<ClusterHealth> GetClusterHealthAsync(TimeSpan timeout = default(TimeSpan)) Parameters Type Name Description TimeSpan timeout Optionally specifies the maximum time to wait for the result. This defaults to 15 seconds . Returns Type Description Task < ClusterHealth > The ClusterHealth . Overrides HostingManager.GetClusterHealthAsync(TimeSpan) GetDataDisk(LinuxSshProxy) Identifies the data disk device for a node. This returns the data disk's device name when an uninitialized data disk exists or \"PRIMARY\" when the OS disk will be used for data. Declaration public override string GetDataDisk(LinuxSshProxy node) Parameters Type Name Description LinuxSshProxy node Returns Type Description String The disk device name or \"PRIMARY\". Overrides HostingManager.GetDataDisk(LinuxSshProxy) Remarks note This will not work after the node's data disk has been initialized. GetResourceAvailabilityAsync(Int64, Int64) Returns the availability of resources required to deploy a cluster. Declaration public override async Task<HostingResourceAvailability> GetResourceAvailabilityAsync(long reserveMemory = 0L, long reserveDisk = 0L) Parameters Type Name Description Int64 reserveMemory Optionally specifies the amount of host memory (in bytes) to be reserved for host operations. Int64 reserveDisk Optionally specifies the amount of host disk disk (in bytes) to be reserved for host operations. Returns Type Description Task < HostingResourceAvailability > Details about whether cluster deployment can proceed. Overrides HostingManager.GetResourceAvailabilityAsync(Int64, Int64) Remarks The optional reserveMemory and reserveDisk parameters can be used to specify memory and disk that are to be reserved for the host environment. Hosting manager implementations are free to ignore this when they don't really makse sense. This is currently used for Hyper-V based clusters running on a user workstation or laptop to ensure that deployed clusters don't adverserly impact the host machine too badly. These parameters don't really make sense for cloud or dedicated hypervisor hosting environments because those environemnts will still work well when all available resources are consumed. GetSshEndpoint(String) Returns the FQDN or IP address (as a string) and the port to use to establish a SSH connection to a specific node. Declaration public override (string Address, int Port) GetSshEndpoint(string nodeName) Parameters Type Name Description String nodeName The target node's name. Returns Type Description (T1, T2) < String , Int32 > A (string Address, int Port) tuple. Overrides HostingManager.GetSshEndpoint(String) Remarks This will return the direct private node endpoint by default. If EnableInternetSshAsync() has been called and is supported by the hosting manager, then this returns the public address of the cluster along with the public NAT port. Load() Ensures that the assembly hosting this hosting manager is loaded. Declaration public static void Load() StartClusterAsync() Starts a cluster if it's not already running. note This operation may not be supported for all environments. Declaration public override async Task StartClusterAsync() Returns Type Description Task The tracking Task . Overrides HostingManager.StartClusterAsync() Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. StopClusterAsync(StopMode) Shuts down a cluster if it's running. note This operation may not be supported for all environments. Declaration public override async Task StopClusterAsync(StopMode stopMode = StopMode.Graceful) Parameters Type Name Description StopMode stopMode Optionally specifies how the cluster nodes are stopped. This defaults to Graceful . Returns Type Description Task The tracking Task . Overrides HostingManager.StopClusterAsync(StopMode) Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. UpdateInternetRoutingAsync() Updates the cluster's load balancer or router to use the current set of ingress rules defined by IngressRules and the egress rules defined by EgressAddressRules . note This currently supported only by cloud hosting managers like for Azure, AWS, and Google. This will do nothing for the on-premise hosting managers because we don't have the ability to manage physical routers yet. Declaration public override async Task UpdateInternetRoutingAsync() Returns Type Description Task Overrides HostingManager.UpdateInternetRoutingAsync() Validate(ClusterDefinition) Verifies that a cluster is valid for the hosting manager, customizing properties as required. Declaration public override void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Overrides HostingManager.Validate(ClusterDefinition) Exceptions Type Condition ClusterDefinitionException Thrown if any problems were detected. Implements IHostingManager"
  },
  "neonkube/api/Neon.Kube.Hosting.Aws.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.Aws.html",
    "title": "Namespace Neon.Kube.Hosting.Aws | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Hosting.Aws Classes AwsHostingManager Manages cluster provisioning on Amazon Web Services."
  },
  "neonkube/api/Neon.Kube.Hosting.Azure.AzureHostingManager.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.Azure.AzureHostingManager.html",
    "title": "Class AzureHostingManager | NeonKUBE documentation",
    "keywords": "Class AzureHostingManager Manages cluster provisioning on the Google Cloud Platform. Inheritance Object HostingManager AzureHostingManager Implements IHostingManager Inherited Members HostingManager.MaxAsyncParallelHostingOperations HostingManager.SupportsFsTrim(HostingEnvironment) HostingManager.SupportsFsZero(HostingEnvironment) HostingManager.Dispose() HostingManager.MaxParallel HostingManager.WaitSeconds HostingManager.AssignNodeAddresses(ClusterDefinition) HostingManager.DefaultStatusTimeout HostingManager.PauseClusterAsync() HostingManager.ResumeClusterAsync() Namespace : Neon.Kube.Hosting.Azure Assembly : Neon.Kube.Azure.dll Syntax [HostingProvider(HostingEnvironment.Azure)] public class AzureHostingManager : HostingManager, IHostingManager, IDisposable Remarks Optional capability support: Pausable NO Stoppable YES Constructors AzureHostingManager() Creates an instance that is only capable of validating the hosting related options in the cluster definition. Declaration public AzureHostingManager() AzureHostingManager(ClusterProxy, Boolean, String, String, String) Creates an instance that is capable of provisioning a cluster on Azure. Declaration public AzureHostingManager(ClusterProxy cluster, bool cloudMarketplace, string nodeImageUri = null, string nodeImagePath = null, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. Boolean cloudMarketplace For cloud environments, this specifies whether the cluster should be provisioned using a VM image from the public cloud marketplace when true or from the private NEONFORGE image gallery for testing when false . This is ignored for on-premise environments. note Only NEONFORGE maintainers will have permission to use the private image. String nodeImageUri Ignored. String nodeImagePath Ignored. String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. Remarks note WARNING! All hosting manager constructors must have the same signature because these are constructed via reflection by the HostingLoader class in the Neon.Kube.Hosting assembly. The parameter must match what the HostingLoader expects. Properties CanManageRouter Returns true if the hosting manage is capable of updating the upstream network router or load balancer. Cloud based managers will return true whereas on-premise managers will return false because we don't have the ability to manage physical routers yet. Declaration public override bool CanManageRouter { get; } Property Value Type Description Boolean Overrides HostingManager.CanManageRouter Capabilities Returns flags describing any optional capabilities supported by the hosting manager. Declaration public override HostingCapabilities Capabilities { get; } Property Value Type Description HostingCapabilities Overrides HostingManager.Capabilities HostingEnvironment Returns the hosting environment implemented by the manager. Declaration public override HostingEnvironment HostingEnvironment { get; } Property Value Type Description HostingEnvironment Overrides HostingManager.HostingEnvironment NodeMtu Returns the MTU (Maximum Transmission Unit) to be configured for network interfaces on node machines created by the hosting manager. This may return 0 which indicates that the default MTU (typically DefaultMTU bytes) should be set or a custom value between [512-9000]. Declaration public override int NodeMtu { get; } Property Value Type Description Int32 Overrides HostingManager.NodeMtu RequiresNodeAddressCheck Returns true if the hosting manager requires that the LAN be scanned for devices assigned IP addresses that may conflict with node addresses. This is typically required only for clusters deployed on-premise because cloud clusters are typically provisioned to their own isolated network. Declaration public override bool RequiresNodeAddressCheck { get; } Property Value Type Description Boolean Overrides HostingManager.RequiresNodeAddressCheck Methods AddPostProvisioningSteps(SetupController<NodeDefinition>) Adds any steps to be performed after the node has been otherwise prepared. Declaration public override void AddPostProvisioningSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The target setup controller. Overrides HostingManager.AddPostProvisioningSteps(SetupController<NodeDefinition>) AddPostSetupSteps(SetupController<NodeDefinition>) Adds any stps to be performed after cluster setup. Declaration public override void AddPostSetupSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller Overrides HostingManager.AddPostSetupSteps(SetupController<NodeDefinition>) AddProvisioningSteps(SetupController<NodeDefinition>) Adds the steps required to the setup controller passed that creates and initializes the cluster resources such as the virtual machines, networks, load balancers, network security groups, public IP addresses. Declaration public override void AddProvisioningSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The setup controller. Overrides HostingManager.AddProvisioningSteps(SetupController<NodeDefinition>) AddSetupSteps(SetupController<NodeDefinition>) Adds any steps to be performed before starting cluster setup. Declaration public override void AddSetupSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The target setup controller. Overrides HostingManager.AddSetupSteps(SetupController<NodeDefinition>) DeleteClusterAsync(Boolean) Deletes an existing cluster by terminating any nodes and then removing node VMs and any related resources as well as the related local cluster login by default. The cluster does not need to be running. This method can optionally remove clusters or VMs potentially orphaned by interrupted unit tests as identified by a resource group or VM name prefix. note This operation may not be supported for all environments. Declaration public override async Task DeleteClusterAsync(bool removeOrphans = false) Parameters Type Name Description Boolean removeOrphans Optionally specifies that VMs or clusters with the same resource group prefix or VM name prefix will be removed as well. See the remarks for more information. Returns Type Description Task The tracking Task . Overrides HostingManager.DeleteClusterAsync(Boolean) Remarks The removeOrphans parameter is typically enabled when running unit tests via the ClusterFixture to ensure that clusters and VMs orphaned by previous interrupted test runs are removed in addition to removing the cluster specified by the cluster definition. Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. DisableInternetSshAsync() Disables public SSH access for every node in the cluster, honoring source address limitations specified by ManagementAddressRules in the cluster definition. note This currently supported only by cloud hosting managers like: Azure, AWS, and Google. This will do nothing for the on-premise hosting managers because we don't have the ability to manage physical routers yet. Declaration public override async Task DisableInternetSshAsync() Returns Type Description Task Overrides HostingManager.DisableInternetSshAsync() Dispose(Boolean) Releases any important resources associated with the instance. Declaration public override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if the instance is being disposed as opposed to being finalized. Overrides HostingManager.Dispose(Boolean) EnableInternetSshAsync() Enables public SSH access for every node in the cluster, honoring source address limitations specified by ManagementAddressRules in the cluster definition. Each node will be assigned a public port that has a NAT rule directing SSH traffic to that specific node. These ports will be in the range of Neon.Kube.ClusterDef.NetworkOptions.FirstExternalSshPort to Neon.Kube.ClusterDef.NetworkOptions.LastExternalSshPort . GetSshEndpoint(String) will return the external endpoint for nodes when external SSH is enabled. note This currently supported only by cloud hosting managers like: Azure, AWS, and Google. This will do nothing for the on-premise hosting managers because we don't have the ability to manage physical routers yet. Declaration public override async Task EnableInternetSshAsync() Returns Type Description Task Overrides HostingManager.EnableInternetSshAsync() GetClusterAddresses() Returns the IP address to be used to access the cluster. For clusters deployed the the cloud, this will be the ingress IP address assigned to the load balancer. For on-premise clusters, this returns the private IP addresses for the control-plane nodes. Declaration public override IEnumerable<string> GetClusterAddresses() Returns Type Description IEnumerable < String > The list of cluster IP addresses. Overrides HostingManager.GetClusterAddresses() GetClusterHealthAsync(TimeSpan) Retrieves the health status of a cluster from the hosting manager's perspective. This includes information about the infrastructor provisioned for the cluster. Declaration public override async Task<ClusterHealth> GetClusterHealthAsync(TimeSpan timeout = default(TimeSpan)) Parameters Type Name Description TimeSpan timeout Optionally specifies the maximum time to wait for the result. This defaults to 15 seconds . Returns Type Description Task < ClusterHealth > The ClusterHealth . Overrides HostingManager.GetClusterHealthAsync(TimeSpan) GetDataDisk(LinuxSshProxy) Identifies the data disk device for a node. This returns the data disk's device name when an uninitialized data disk exists or \"PRIMARY\" when the OS disk will be used for data. Declaration public override string GetDataDisk(LinuxSshProxy node) Parameters Type Name Description LinuxSshProxy node Returns Type Description String The disk device name or \"PRIMARY\". Overrides HostingManager.GetDataDisk(LinuxSshProxy) Remarks note This will not work after the node's data disk has been initialized. GetResourceAvailabilityAsync(Int64, Int64) Returns the availability of resources required to deploy a cluster. Declaration public override async Task<HostingResourceAvailability> GetResourceAvailabilityAsync(long reserveMemory = 0L, long reserveDisk = 0L) Parameters Type Name Description Int64 reserveMemory Optionally specifies the amount of host memory (in bytes) to be reserved for host operations. Int64 reserveDisk Optionally specifies the amount of host disk disk (in bytes) to be reserved for host operations. Returns Type Description Task < HostingResourceAvailability > Details about whether cluster deployment can proceed. Overrides HostingManager.GetResourceAvailabilityAsync(Int64, Int64) Remarks The optional reserveMemory and reserveDisk parameters can be used to specify memory and disk that are to be reserved for the host environment. Hosting manager implementations are free to ignore this when they don't really makse sense. This is currently used for Hyper-V based clusters running on a user workstation or laptop to ensure that deployed clusters don't adverserly impact the host machine too badly. These parameters don't really make sense for cloud or dedicated hypervisor hosting environments because those environemnts will still work well when all available resources are consumed. GetSshEndpoint(String) Returns the FQDN or IP address (as a string) and the port to use to establish a SSH connection to a specific node. Declaration public override (string Address, int Port) GetSshEndpoint(string nodeName) Parameters Type Name Description String nodeName The target node's name. Returns Type Description (T1, T2) < String , Int32 > A (string Address, int Port) tuple. Overrides HostingManager.GetSshEndpoint(String) Remarks This will return the direct private node endpoint by default. If EnableInternetSshAsync() has been called and is supported by the hosting manager, then this returns the public address of the cluster along with the public NAT port. Load() Ensures that the assembly hosting this hosting manager is loaded. Declaration public static void Load() StartClusterAsync() Starts a cluster if it's not already running. note This operation may not be supported for all environments. Declaration public override async Task StartClusterAsync() Returns Type Description Task The tracking Task . Overrides HostingManager.StartClusterAsync() Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. StopClusterAsync(StopMode) Shuts down a cluster if it's running. note This operation may not be supported for all environments. Declaration public override async Task StopClusterAsync(StopMode stopMode = StopMode.Graceful) Parameters Type Name Description StopMode stopMode Optionally specifies how the cluster nodes are stopped. This defaults to Graceful . Returns Type Description Task The tracking Task . Overrides HostingManager.StopClusterAsync(StopMode) Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. UpdateInternetRoutingAsync() Updates the cluster's load balancer or router to use the current set of ingress rules defined by IngressRules and the egress rules defined by EgressAddressRules . note This currently supported only by cloud hosting managers like for Azure, AWS, and Google. This will do nothing for the on-premise hosting managers because we don't have the ability to manage physical routers yet. Declaration public override async Task UpdateInternetRoutingAsync() Returns Type Description Task Overrides HostingManager.UpdateInternetRoutingAsync() Validate(ClusterDefinition) Verifies that a cluster is valid for the hosting manager, customizing properties as required. Declaration public override void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Overrides HostingManager.Validate(ClusterDefinition) Exceptions Type Condition ClusterDefinitionException Thrown if any problems were detected. Implements IHostingManager"
  },
  "neonkube/api/Neon.Kube.Hosting.Azure.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.Azure.html",
    "title": "Namespace Neon.Kube.Hosting.Azure | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Hosting.Azure Classes AzureHostingManager Manages cluster provisioning on the Google Cloud Platform."
  },
  "neonkube/api/Neon.Kube.Hosting.BareMetal.BareMetalHostingManager.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.BareMetal.BareMetalHostingManager.html",
    "title": "Class BareMetalHostingManager | NeonKUBE documentation",
    "keywords": "Class BareMetalHostingManager Manages cluster provisioning directly on (mostly) bare manually provisioned machines or virtual machines. Inheritance Object HostingManager BareMetalHostingManager Implements IHostingManager Inherited Members HostingManager.MaxAsyncParallelHostingOperations HostingManager.SupportsFsTrim(HostingEnvironment) HostingManager.SupportsFsZero(HostingEnvironment) HostingManager.Dispose() HostingManager.MaxParallel HostingManager.WaitSeconds HostingManager.NodeMtu HostingManager.AddPostProvisioningSteps(SetupController<NodeDefinition>) HostingManager.AddSetupSteps(SetupController<NodeDefinition>) HostingManager.AddPostSetupSteps(SetupController<NodeDefinition>) HostingManager.CanManageRouter HostingManager.UpdateInternetRoutingAsync() HostingManager.EnableInternetSshAsync() HostingManager.DisableInternetSshAsync() HostingManager.AssignNodeAddresses(ClusterDefinition) HostingManager.DefaultStatusTimeout HostingManager.StartClusterAsync() HostingManager.StopClusterAsync(StopMode) HostingManager.PauseClusterAsync() HostingManager.ResumeClusterAsync() HostingManager.DeleteClusterAsync(Boolean) Namespace : Neon.Kube.Hosting.BareMetal Assembly : Neon.Kube.BareMetal.dll Syntax [HostingProvider(HostingEnvironment.BareMetal)] public class BareMetalHostingManager : HostingManager, IHostingManager, IDisposable Remarks Optional capability support: Pausable NO Stoppable NO Constructors BareMetalHostingManager() Creates an instance that is only capable of validating the hosting related options in the cluster definition. Declaration public BareMetalHostingManager() BareMetalHostingManager(ClusterProxy, Boolean, String, String, String) Creates an instance that is capable of provisioning a cluster on manually provisioned servers or virtual machines. Declaration public BareMetalHostingManager(ClusterProxy cluster, bool cloudMarketplace, string nodeImageUri = null, string nodeImagePath = null, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. Boolean cloudMarketplace Ignored String nodeImageUri Optionally specifies the node image URI (one of nodeImageUri or nodeImagePath must be passed). String nodeImagePath Optionally specifies the path to the local node image file (one of nodeImageUri or nodeImagePath must be passed). String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. Remarks note One of nodeImageUri or nodeImagePath must be specified. Properties Capabilities Returns flags describing any optional capabilities supported by the hosting manager. Declaration public override HostingCapabilities Capabilities { get; } Property Value Type Description HostingCapabilities Overrides HostingManager.Capabilities HostingEnvironment Returns the hosting environment implemented by the manager. Declaration public override HostingEnvironment HostingEnvironment { get; } Property Value Type Description HostingEnvironment Overrides HostingManager.HostingEnvironment RequiresNodeAddressCheck Returns true if the hosting manager requires that the LAN be scanned for devices assigned IP addresses that may conflict with node addresses. This is typically required only for clusters deployed on-premise because cloud clusters are typically provisioned to their own isolated network. Declaration public override bool RequiresNodeAddressCheck { get; } Property Value Type Description Boolean Overrides HostingManager.RequiresNodeAddressCheck Methods AddProvisioningSteps(SetupController<NodeDefinition>) Adds the steps required to the setup controller passed that creates and initializes the cluster resources such as the virtual machines, networks, load balancers, network security groups, public IP addresses. Declaration public override void AddProvisioningSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The setup controller. Overrides HostingManager.AddProvisioningSteps(SetupController<NodeDefinition>) Dispose(Boolean) Releases any important resources associated with the instance. Declaration public override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if the instance is being disposed as opposed to being finalized. Overrides HostingManager.Dispose(Boolean) GetClusterAddresses() Returns the IP address to be used to access the cluster. For clusters deployed the the cloud, this will be the ingress IP address assigned to the load balancer. For on-premise clusters, this returns the private IP addresses for the control-plane nodes. Declaration public override IEnumerable<string> GetClusterAddresses() Returns Type Description IEnumerable < String > The list of cluster IP addresses. Overrides HostingManager.GetClusterAddresses() GetClusterHealthAsync(TimeSpan) Retrieves the health status of a cluster from the hosting manager's perspective. This includes information about the infrastructor provisioned for the cluster. Declaration public override Task<ClusterHealth> GetClusterHealthAsync(TimeSpan timeout = default(TimeSpan)) Parameters Type Name Description TimeSpan timeout Optionally specifies the maximum time to wait for the result. This defaults to 15 seconds . Returns Type Description Task < ClusterHealth > The ClusterHealth . Overrides HostingManager.GetClusterHealthAsync(TimeSpan) GetDataDisk(LinuxSshProxy) Identifies the data disk device for a node. This returns the data disk's device name when an uninitialized data disk exists or \"PRIMARY\" when the OS disk will be used for data. Declaration public override string GetDataDisk(LinuxSshProxy node) Parameters Type Name Description LinuxSshProxy node Returns Type Description String The disk device name or \"PRIMARY\". Overrides HostingManager.GetDataDisk(LinuxSshProxy) Remarks note This will not work after the node's data disk has been initialized. GetResourceAvailabilityAsync(Int64, Int64) Returns the availability of resources required to deploy a cluster. Declaration public override async Task<HostingResourceAvailability> GetResourceAvailabilityAsync(long reserveMemory = 0L, long reserveDisk = 0L) Parameters Type Name Description Int64 reserveMemory Optionally specifies the amount of host memory (in bytes) to be reserved for host operations. Int64 reserveDisk Optionally specifies the amount of host disk disk (in bytes) to be reserved for host operations. Returns Type Description Task < HostingResourceAvailability > Details about whether cluster deployment can proceed. Overrides HostingManager.GetResourceAvailabilityAsync(Int64, Int64) Remarks The optional reserveMemory and reserveDisk parameters can be used to specify memory and disk that are to be reserved for the host environment. Hosting manager implementations are free to ignore this when they don't really makse sense. This is currently used for Hyper-V based clusters running on a user workstation or laptop to ensure that deployed clusters don't adverserly impact the host machine too badly. These parameters don't really make sense for cloud or dedicated hypervisor hosting environments because those environemnts will still work well when all available resources are consumed. GetSshEndpoint(String) Returns the FQDN or IP address (as a string) and the port to use to establish a SSH connection to a specific node. Declaration public override (string Address, int Port) GetSshEndpoint(string nodeName) Parameters Type Name Description String nodeName The target node's name. Returns Type Description (T1, T2) < String , Int32 > A (string Address, int Port) tuple. Overrides HostingManager.GetSshEndpoint(String) Remarks This will return the direct private node endpoint by default. If EnableInternetSshAsync() has been called and is supported by the hosting manager, then this returns the public address of the cluster along with the public NAT port. Load() Ensures that the assembly hosting this hosting manager is loaded. Declaration public static void Load() Validate(ClusterDefinition) Verifies that a cluster is valid for the hosting manager, customizing properties as required. Declaration public override void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Overrides HostingManager.Validate(ClusterDefinition) Exceptions Type Condition ClusterDefinitionException Thrown if any problems were detected. Implements IHostingManager"
  },
  "neonkube/api/Neon.Kube.Hosting.BareMetal.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.BareMetal.html",
    "title": "Namespace Neon.Kube.Hosting.BareMetal | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Hosting.BareMetal Classes BareMetalHostingManager Manages cluster provisioning directly on (mostly) bare manually provisioned machines or virtual machines."
  },
  "neonkube/api/Neon.Kube.Hosting.Google.GoogleHostingManager.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.Google.GoogleHostingManager.html",
    "title": "Class GoogleHostingManager | NeonKUBE documentation",
    "keywords": "Class GoogleHostingManager Manages cluster provisioning on the Google Cloud Platform. Inheritance Object HostingManager GoogleHostingManager Implements IHostingManager Inherited Members HostingManager.MaxAsyncParallelHostingOperations HostingManager.SupportsFsTrim(HostingEnvironment) HostingManager.SupportsFsZero(HostingEnvironment) HostingManager.Dispose() HostingManager.MaxParallel HostingManager.WaitSeconds HostingManager.NodeMtu HostingManager.AddPostProvisioningSteps(SetupController<NodeDefinition>) HostingManager.AddSetupSteps(SetupController<NodeDefinition>) HostingManager.AddPostSetupSteps(SetupController<NodeDefinition>) HostingManager.AssignNodeAddresses(ClusterDefinition) HostingManager.DefaultStatusTimeout HostingManager.StartClusterAsync() HostingManager.StopClusterAsync(StopMode) HostingManager.PauseClusterAsync() HostingManager.ResumeClusterAsync() HostingManager.DeleteClusterAsync(Boolean) Namespace : Neon.Kube.Hosting.Google Assembly : Neon.Kube.Google.dll Syntax [HostingProvider(HostingEnvironment.Google)] public class GoogleHostingManager : HostingManager, IHostingManager, IDisposable Remarks Optional capability support: Pausable YES Stoppable YES Constructors GoogleHostingManager() Creates an instance that is only capable of validating the hosting related options in the cluster definition. Declaration public GoogleHostingManager() GoogleHostingManager(ClusterProxy, Boolean, String, String, String) Creates an instance that is capable of provisioning a cluster on Google Cloud. Declaration public GoogleHostingManager(ClusterProxy cluster, bool cloudMarketplace, string nodeImageUri = null, string nodeImagePath = null, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. Boolean cloudMarketplace For cloud environments, this specifies whether the cluster should be provisioned using a VM image from the public cloud marketplace when true or from the private NEONFORGE image gallery for testing when false . This is ignored for on-premise environments. note Only NEONFORGE maintainers will have permission to use the private image. String nodeImageUri Ignored. String nodeImagePath Ignored. String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. Remarks note One of nodeImageUri or nodeImagePath must be specified. Properties CanManageRouter Returns true if the hosting manage is capable of updating the upstream network router or load balancer. Cloud based managers will return true whereas on-premise managers will return false because we don't have the ability to manage physical routers yet. Declaration public override bool CanManageRouter { get; } Property Value Type Description Boolean Overrides HostingManager.CanManageRouter Capabilities Returns flags describing any optional capabilities supported by the hosting manager. Declaration public override HostingCapabilities Capabilities { get; } Property Value Type Description HostingCapabilities Overrides HostingManager.Capabilities HostingEnvironment Returns the hosting environment implemented by the manager. Declaration public override HostingEnvironment HostingEnvironment { get; } Property Value Type Description HostingEnvironment Overrides HostingManager.HostingEnvironment RequiresNodeAddressCheck Returns true if the hosting manager requires that the LAN be scanned for devices assigned IP addresses that may conflict with node addresses. This is typically required only for clusters deployed on-premise because cloud clusters are typically provisioned to their own isolated network. Declaration public override bool RequiresNodeAddressCheck { get; } Property Value Type Description Boolean Overrides HostingManager.RequiresNodeAddressCheck Methods AddProvisioningSteps(SetupController<NodeDefinition>) Adds the steps required to the setup controller passed that creates and initializes the cluster resources such as the virtual machines, networks, load balancers, network security groups, public IP addresses. Declaration public override void AddProvisioningSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The setup controller. Overrides HostingManager.AddProvisioningSteps(SetupController<NodeDefinition>) DisableInternetSshAsync() Disables public SSH access for every node in the cluster, honoring source address limitations specified by ManagementAddressRules in the cluster definition. note This currently supported only by cloud hosting managers like: Azure, AWS, and Google. This will do nothing for the on-premise hosting managers because we don't have the ability to manage physical routers yet. Declaration public override async Task DisableInternetSshAsync() Returns Type Description Task Overrides HostingManager.DisableInternetSshAsync() Dispose(Boolean) Releases any important resources associated with the instance. Declaration public override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if the instance is being disposed as opposed to being finalized. Overrides HostingManager.Dispose(Boolean) EnableInternetSshAsync() Enables public SSH access for every node in the cluster, honoring source address limitations specified by ManagementAddressRules in the cluster definition. Each node will be assigned a public port that has a NAT rule directing SSH traffic to that specific node. These ports will be in the range of Neon.Kube.ClusterDef.NetworkOptions.FirstExternalSshPort to Neon.Kube.ClusterDef.NetworkOptions.LastExternalSshPort . GetSshEndpoint(String) will return the external endpoint for nodes when external SSH is enabled. note This currently supported only by cloud hosting managers like: Azure, AWS, and Google. This will do nothing for the on-premise hosting managers because we don't have the ability to manage physical routers yet. Declaration public override async Task EnableInternetSshAsync() Returns Type Description Task Overrides HostingManager.EnableInternetSshAsync() GetClusterAddresses() Returns the IP address to be used to access the cluster. For clusters deployed the the cloud, this will be the ingress IP address assigned to the load balancer. For on-premise clusters, this returns the private IP addresses for the control-plane nodes. Declaration public override IEnumerable<string> GetClusterAddresses() Returns Type Description IEnumerable < String > The list of cluster IP addresses. Overrides HostingManager.GetClusterAddresses() GetClusterHealthAsync(TimeSpan) Retrieves the health status of a cluster from the hosting manager's perspective. This includes information about the infrastructor provisioned for the cluster. Declaration public override Task<ClusterHealth> GetClusterHealthAsync(TimeSpan timeout = default(TimeSpan)) Parameters Type Name Description TimeSpan timeout Optionally specifies the maximum time to wait for the result. This defaults to 15 seconds . Returns Type Description Task < ClusterHealth > The ClusterHealth . Overrides HostingManager.GetClusterHealthAsync(TimeSpan) GetDataDisk(LinuxSshProxy) Identifies the data disk device for a node. This returns the data disk's device name when an uninitialized data disk exists or \"PRIMARY\" when the OS disk will be used for data. Declaration public override string GetDataDisk(LinuxSshProxy node) Parameters Type Name Description LinuxSshProxy node Returns Type Description String The disk device name or \"PRIMARY\". Overrides HostingManager.GetDataDisk(LinuxSshProxy) Remarks note This will not work after the node's data disk has been initialized. GetResourceAvailabilityAsync(Int64, Int64) Returns the availability of resources required to deploy a cluster. Declaration public override async Task<HostingResourceAvailability> GetResourceAvailabilityAsync(long reserveMemory = 0L, long reserveDisk = 0L) Parameters Type Name Description Int64 reserveMemory Optionally specifies the amount of host memory (in bytes) to be reserved for host operations. Int64 reserveDisk Optionally specifies the amount of host disk disk (in bytes) to be reserved for host operations. Returns Type Description Task < HostingResourceAvailability > Details about whether cluster deployment can proceed. Overrides HostingManager.GetResourceAvailabilityAsync(Int64, Int64) Remarks The optional reserveMemory and reserveDisk parameters can be used to specify memory and disk that are to be reserved for the host environment. Hosting manager implementations are free to ignore this when they don't really makse sense. This is currently used for Hyper-V based clusters running on a user workstation or laptop to ensure that deployed clusters don't adverserly impact the host machine too badly. These parameters don't really make sense for cloud or dedicated hypervisor hosting environments because those environemnts will still work well when all available resources are consumed. GetSshEndpoint(String) Returns the FQDN or IP address (as a string) and the port to use to establish a SSH connection to a specific node. Declaration public override (string Address, int Port) GetSshEndpoint(string nodeName) Parameters Type Name Description String nodeName The target node's name. Returns Type Description (T1, T2) < String , Int32 > A (string Address, int Port) tuple. Overrides HostingManager.GetSshEndpoint(String) Remarks This will return the direct private node endpoint by default. If EnableInternetSshAsync() has been called and is supported by the hosting manager, then this returns the public address of the cluster along with the public NAT port. Load() Ensures that the assembly hosting this hosting manager is loaded. Declaration public static void Load() UpdateInternetRoutingAsync() Updates the cluster's load balancer or router to use the current set of ingress rules defined by IngressRules and the egress rules defined by EgressAddressRules . note This currently supported only by cloud hosting managers like for Azure, AWS, and Google. This will do nothing for the on-premise hosting managers because we don't have the ability to manage physical routers yet. Declaration public override async Task UpdateInternetRoutingAsync() Returns Type Description Task Overrides HostingManager.UpdateInternetRoutingAsync() Validate(ClusterDefinition) Verifies that a cluster is valid for the hosting manager, customizing properties as required. Declaration public override void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Overrides HostingManager.Validate(ClusterDefinition) Exceptions Type Condition ClusterDefinitionException Thrown if any problems were detected. Implements IHostingManager"
  },
  "neonkube/api/Neon.Kube.Hosting.Google.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.Google.html",
    "title": "Namespace Neon.Kube.Hosting.Google | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Hosting.Google Classes GoogleHostingManager Manages cluster provisioning on the Google Cloud Platform."
  },
  "neonkube/api/Neon.Kube.Hosting.HostingCapabilities.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.HostingCapabilities.html",
    "title": "Enum HostingCapabilities | NeonKUBE documentation",
    "keywords": "Enum HostingCapabilities Flags that describe any optional capabilities of a IHostingManager implementation. Namespace : Neon.Kube.Hosting Assembly : Neon.Kube.dll Syntax [Flags] public enum HostingCapabilities Fields Name Description None The cluster has no special capabilities. Pausable The cluster can be paused and resumed, saving and restoring memory such that the cluster restarts exactly where it left off. Removable The cluster can be removed. Stoppable The cluster can be stopped and restarted."
  },
  "neonkube/api/Neon.Kube.Hosting.HostingConstrainedResourceType.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.HostingConstrainedResourceType.html",
    "title": "Enum HostingConstrainedResourceType | NeonKUBE documentation",
    "keywords": "Enum HostingConstrainedResourceType Enumerates the types of HostingResourceConstraint instances, indicating the type of resource could not be accommodated by a hosting environment to deploy a cluster. Namespace : Neon.Kube.Hosting Assembly : Neon.Kube.dll Syntax public enum HostingConstrainedResourceType Fields Name Description Cpu CPU cores. Disk Disk space. Memory Memory/RAM. Unknown The resource type cannot be determined. VmHost Virtual machine host specific issue."
  },
  "neonkube/api/Neon.Kube.Hosting.HostingLoader.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.HostingLoader.html",
    "title": "Class HostingLoader | NeonKUBE documentation",
    "keywords": "Class HostingLoader Cluster hosting utilities. Inheritance Object HostingLoader Implements IHostingLoader Namespace : Neon.Kube.Hosting Assembly : Neon.Kube.Hosting.dll Syntax public class HostingLoader : IHostingLoader Properties IsIntialized Returns true when the loader has already been initialized. Declaration public static bool IsIntialized { get; } Property Value Type Description Boolean Methods GetManager(HostingEnvironment) Returns the HostingManager for an environment that can be used for validating the hosting related options. Declaration public HostingManager GetManager(HostingEnvironment environment) Parameters Type Name Description HostingEnvironment environment The target hosting environment. Returns Type Description HostingManager The HostingManager or null if no hosting manager could be located for the specified cluster environment. GetManager(ClusterProxy, Boolean, String) Returns the HostingManager for provisioning a cluster using the default node image for the cluster environment. Declaration public HostingManager GetManager(ClusterProxy cluster, bool cloudMarketplace, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. Boolean cloudMarketplace For cloud environments, this specifies whether the cluster should be provisioned using a VM image from the public cloud marketplace when true or from the private NEONFORGE image gallery for testing when false . This is ignored for on-premise environments. note Only NEONFORGE maintainers will have permission to use the private image. String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. note Specific hosting managers may choose to ignore this when it doesn't make sense. Returns Type Description HostingManager The HostingManager or null if no hosting manager could be located for the specified cluster environment. Exceptions Type Condition NeonKubeException Thrown if the multiple managers implement support for the same hosting environment. GetManagerWithNodeImageFile(ClusterProxy, String, String) Returns the HostingManager for provisioning a cluster from an already downloaded image file already downloaded. This cannot be used for cloud environments. Declaration public HostingManager GetManagerWithNodeImageFile(ClusterProxy cluster, string nodeImagePath, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. String nodeImagePath Specifies the path to the local node image file. String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. Returns Type Description HostingManager The HostingManager or null if no hosting manager could be located for the specified cluster environment. Exceptions Type Condition NeonKubeException Thrown if the multiple managers implement support for the same hosting environment. GetManagerWithNodeImageUri(ClusterProxy, Boolean, String, String) Returns the HostingManager for provisioning a cluster by downloading a node image from a URI that references a single image file or a multi-part DownloadManifest image. Declaration public HostingManager GetManagerWithNodeImageUri(ClusterProxy cluster, bool cloudMarketplace, string nodeImageUri, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. Boolean cloudMarketplace For cloud environments, this specifies whether the cluster should be provisioned using a VM image from the public cloud marketplace when true or from the private NEONFORGE image gallery for testing when false . This is ignored for on-premise environments. note Only NEONFORGE maintainers will have permission to use the private image. String nodeImageUri For on-premise hosting environments, this specifies the node image URI that references a single image file or a multi-part DownloadManifest image. This is ignored for cloud environments and must be passed as null . String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. Returns Type Description HostingManager The HostingManager or null if no hosting manager could be located for the specified cluster environment. Exceptions Type Condition NeonKubeException Thrown if the multiple managers implement support for the same hosting environment. Initialize() Loads the known cluster hosting manager assemblies so they'll be available to GetManagerWithNodeImageUri(ClusterProxy, Boolean, String, String) , and Validate(ClusterDefinition) when they are called. note It is safe to call this multiple times because any calls after the first will be ignored. Declaration public static void Initialize() Exceptions Type Condition NeonKubeException Thrown if multiple managers implement support for the same hosting environment. IsCloudEnvironment(HostingEnvironment) Determines whether a hosting environment is hosted in the cloud. Declaration public bool IsCloudEnvironment(HostingEnvironment environment) Parameters Type Name Description HostingEnvironment environment The target hosting environment. Returns Type Description Boolean true for cloud environments. Implements IHostingLoader"
  },
  "neonkube/api/Neon.Kube.Hosting.HostingManager.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.HostingManager.html",
    "title": "Class HostingManager | NeonKUBE documentation",
    "keywords": "Class HostingManager Base class for environment specific hosting managers. Inheritance Object HostingManager AwsHostingManager AzureHostingManager BareMetalHostingManager GoogleHostingManager HyperVHostingManager XenServerHostingManager Implements IHostingManager Namespace : Neon.Kube.Hosting Assembly : Neon.Kube.dll Syntax public abstract class HostingManager : IHostingManager, IDisposable Fields DefaultStatusTimeout The default timeout for GetClusterHealthAsync(TimeSpan) implementations. Declaration protected readonly TimeSpan DefaultStatusTimeout Field Value Type Description TimeSpan MaxAsyncParallelHostingOperations Maximum number of async operations that hosting managers should perform in parallel. Declaration protected const int MaxAsyncParallelHostingOperations = 25 Field Value Type Description Int32 Properties CanManageRouter Returns true if the hosting manage is capable of updating the upstream network router or load balancer. Cloud based managers will return true whereas on-premise managers will return false because we don't have the ability to manage physical routers yet. Declaration public virtual bool CanManageRouter { get; } Property Value Type Description Boolean Capabilities Returns flags describing any optional capabilities supported by the hosting manager. Declaration public abstract HostingCapabilities Capabilities { get; } Property Value Type Description HostingCapabilities HostingEnvironment Returns the hosting environment implemented by the manager. Declaration public abstract HostingEnvironment HostingEnvironment { get; } Property Value Type Description HostingEnvironment MaxParallel The maximum number of nodes that will execute provisioning steps in parallel. This defaults to 25 for on-premise hosting managers and 100 for the cloud. This may also be customized by specific IHostingManager implementations. Declaration public virtual int MaxParallel { get; set; } Property Value Type Description Int32 NodeMtu Returns the MTU (Maximum Transmission Unit) to be configured for network interfaces on node machines created by the hosting manager. This may return 0 which indicates that the default MTU (typically DefaultMTU bytes) should be set or a custom value between [512-9000]. Declaration public virtual int NodeMtu { get; } Property Value Type Description Int32 RequiresNodeAddressCheck Returns true if the hosting manager requires that the LAN be scanned for devices assigned IP addresses that may conflict with node addresses. This is typically required only for clusters deployed on-premise because cloud clusters are typically provisioned to their own isolated network. Declaration public virtual bool RequiresNodeAddressCheck { get; } Property Value Type Description Boolean WaitSeconds Number of seconds to delay after specific operations (e.g. to allow services to stablize). This defaults to 0.0 . Declaration public double WaitSeconds { get; set; } Property Value Type Description Double Methods AddPostProvisioningSteps(SetupController<NodeDefinition>) Adds any steps to be performed after the node has been otherwise prepared. Declaration public virtual void AddPostProvisioningSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The target setup controller. AddPostSetupSteps(SetupController<NodeDefinition>) Adds any stps to be performed after cluster setup. Declaration public virtual void AddPostSetupSteps(SetupController<NodeDefinition> controllerd) Parameters Type Name Description SetupController < NodeDefinition > controllerd AddProvisioningSteps(SetupController<NodeDefinition>) Adds the steps required to the setup controller passed that creates and initializes the cluster resources such as the virtual machines, networks, load balancers, network security groups, public IP addresses. Declaration public abstract void AddProvisioningSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The setup controller. AddSetupSteps(SetupController<NodeDefinition>) Adds any steps to be performed before starting cluster setup. Declaration public virtual void AddSetupSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The target setup controller. AssignNodeAddresses(ClusterDefinition) Used by cloud and potentially other hosting manager implementations to verify the node address assignments and/or to automatically assign these addresses. Declaration protected void AssignNodeAddresses(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Remarks note This method verifies that node addresses for on-premise environments are located within the premise subnet. The method will not attempt to assign node addresses for on-premise node and requires all nodes have explicit addresses. DeleteClusterAsync(Boolean) Deletes an existing cluster by terminating any nodes and then removing node VMs and any related resources as well as the related local cluster login by default. The cluster does not need to be running. This method can optionally remove clusters or VMs potentially orphaned by interrupted unit tests as identified by a resource group or VM name prefix. note This operation may not be supported for all environments. Declaration public virtual async Task DeleteClusterAsync(bool removeOrphans = false) Parameters Type Name Description Boolean removeOrphans Optionally specifies that VMs or clusters with the same resource group prefix or VM name prefix will be removed as well. See the remarks for more information. Returns Type Description Task The tracking Task . Remarks The removeOrphans parameter is typically enabled when running unit tests via the ClusterFixture to ensure that clusters and VMs orphaned by previous interrupted test runs are removed in addition to removing the cluster specified by the cluster definition. Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. DisableInternetSshAsync() Disables public SSH access for every node in the cluster, honoring source address limitations specified by ManagementAddressRules in the cluster definition. note This currently supported only by cloud hosting managers like: Azure, AWS, and Google. This will do nothing for the on-premise hosting managers because we don't have the ability to manage physical routers yet. Declaration public virtual async Task DisableInternetSshAsync() Returns Type Description Task Dispose() Releases any important resources associated with the instance. Declaration public void Dispose() Dispose(Boolean) Releases any important resources associated with the instance. Declaration public abstract void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if the instance is being disposed as opposed to being finalized. EnableInternetSshAsync() Enables public SSH access for every node in the cluster, honoring source address limitations specified by ManagementAddressRules in the cluster definition. Each node will be assigned a public port that has a NAT rule directing SSH traffic to that specific node. These ports will be in the range of Neon.Kube.ClusterDef.NetworkOptions.FirstExternalSshPort to Neon.Kube.ClusterDef.NetworkOptions.LastExternalSshPort . GetSshEndpoint(String) will return the external endpoint for nodes when external SSH is enabled. note This currently supported only by cloud hosting managers like: Azure, AWS, and Google. This will do nothing for the on-premise hosting managers because we don't have the ability to manage physical routers yet. Declaration public virtual async Task EnableInternetSshAsync() Returns Type Description Task Finalize() Finalizer. Declaration protected void Finalize() GetClusterAddresses() Returns the IP address to be used to access the cluster. For clusters deployed the the cloud, this will be the ingress IP address assigned to the load balancer. For on-premise clusters, this returns the private IP addresses for the control-plane nodes. Declaration public abstract IEnumerable<string> GetClusterAddresses() Returns Type Description IEnumerable < String > The list of cluster IP addresses. GetClusterHealthAsync(TimeSpan) Retrieves the health status of a cluster from the hosting manager's perspective. This includes information about the infrastructor provisioned for the cluster. Declaration public abstract Task<ClusterHealth> GetClusterHealthAsync(TimeSpan timeout = default(TimeSpan)) Parameters Type Name Description TimeSpan timeout Optionally specifies the maximum time to wait for the result. This defaults to 15 seconds . Returns Type Description Task < ClusterHealth > The ClusterHealth . GetDataDisk(LinuxSshProxy) Identifies the data disk device for a node. This returns the data disk's device name when an uninitialized data disk exists or \"PRIMARY\" when the OS disk will be used for data. Declaration public abstract string GetDataDisk(LinuxSshProxy node) Parameters Type Name Description LinuxSshProxy node Returns Type Description String The disk device name or \"PRIMARY\". Remarks note This will not work after the node's data disk has been initialized. GetResourceAvailabilityAsync(Int64, Int64) Returns the availability of resources required to deploy a cluster. Declaration public abstract Task<HostingResourceAvailability> GetResourceAvailabilityAsync(long reserveMemory = 0L, long reserveDisk = 0L) Parameters Type Name Description Int64 reserveMemory Optionally specifies the amount of host memory (in bytes) to be reserved for host operations. Int64 reserveDisk Optionally specifies the amount of host disk disk (in bytes) to be reserved for host operations. Returns Type Description Task < HostingResourceAvailability > Details about whether cluster deployment can proceed. Remarks The optional reserveMemory and reserveDisk parameters can be used to specify memory and disk that are to be reserved for the host environment. Hosting manager implementations are free to ignore this when they don't really makse sense. This is currently used for Hyper-V based clusters running on a user workstation or laptop to ensure that deployed clusters don't adverserly impact the host machine too badly. These parameters don't really make sense for cloud or dedicated hypervisor hosting environments because those environemnts will still work well when all available resources are consumed. GetSshEndpoint(String) Returns the FQDN or IP address (as a string) and the port to use to establish a SSH connection to a specific node. Declaration public abstract (string Address, int Port) GetSshEndpoint(string nodeName) Parameters Type Name Description String nodeName The target node's name. Returns Type Description (T1, T2) < String , Int32 > A (string Address, int Port) tuple. Remarks This will return the direct private node endpoint by default. If EnableInternetSshAsync() has been called and is supported by the hosting manager, then this returns the public address of the cluster along with the public NAT port. PauseClusterAsync() Pauses a cluster if it's running, by putting all cluster nodes to sleep. note This operation may not be supported for all environments. Declaration public virtual async Task PauseClusterAsync() Returns Type Description Task The tracking Task . Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. ResumeClusterAsync() Resumes a paused cluster, by waking all cluster nodes. note This operation may not be supported for all environments. Declaration public virtual async Task ResumeClusterAsync() Returns Type Description Task The tracking Task . Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. StartClusterAsync() Starts a cluster if it's not already running. note This operation may not be supported for all environments. Declaration public virtual async Task StartClusterAsync() Returns Type Description Task The tracking Task . Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. StopClusterAsync(StopMode) Shuts down a cluster if it's running. note This operation may not be supported for all environments. Declaration public virtual async Task StopClusterAsync(StopMode stopMode = StopMode.Graceful) Parameters Type Name Description StopMode stopMode Optionally specifies how the cluster nodes are stopped. This defaults to Graceful . Returns Type Description Task The tracking Task . Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. SupportsFsTrim(HostingEnvironment) Determines whether the hosting environment supports fstrim . Declaration public static bool SupportsFsTrim(HostingEnvironment environment) Parameters Type Name Description HostingEnvironment environment Specifies the hosting environment. Returns Type Description Boolean true if fstrim is supported. SupportsFsZero(HostingEnvironment) Determines whether the hosting environment supports zeroing block devices. Declaration public static bool SupportsFsZero(HostingEnvironment environment) Parameters Type Name Description HostingEnvironment environment Specifies the hosting environment. Returns Type Description Boolean true if fstrim is supported. UpdateInternetRoutingAsync() Updates the cluster's load balancer or router to use the current set of ingress rules defined by IngressRules and the egress rules defined by EgressAddressRules . note This currently supported only by cloud hosting managers like for Azure, AWS, and Google. This will do nothing for the on-premise hosting managers because we don't have the ability to manage physical routers yet. Declaration public virtual async Task UpdateInternetRoutingAsync() Returns Type Description Task Validate(ClusterDefinition) Verifies that a cluster is valid for the hosting manager, customizing properties as required. Declaration public abstract void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if any problems were detected. Implements IHostingManager"
  },
  "neonkube/api/Neon.Kube.Hosting.HostingManagerFactory.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.HostingManagerFactory.html",
    "title": "Class HostingManagerFactory | NeonKUBE documentation",
    "keywords": "Class HostingManagerFactory Provides for the creation of HostingManager implementations for a target hosting environment. Inheritance Object HostingManagerFactory Implements IHostingManagerFactory Namespace : Neon.Kube.Hosting Assembly : Neon.Kube.dll Syntax public class HostingManagerFactory : IHostingManagerFactory Constructors HostingManagerFactory(Action) Constructor. Declaration public HostingManagerFactory(Action loaderAction = null) Parameters Type Name Description Action loaderAction The optional action that will initialize the static Loader property with the IHostingLoader implemention. Properties Loader INTERNAL USE ONLY: The driver providing low-level access to hosting manager implementations. This is initialized by a call to HostingLoader.Initialize() defined withing the Neon.Kube.Hosting assembly. Declaration public static IHostingLoader Loader { get; set; } Property Value Type Description IHostingLoader Methods GetManager(HostingEnvironment) Returns the HostingManager for an environment that can be used for validating the hosting related options. Declaration public HostingManager GetManager(HostingEnvironment environment) Parameters Type Name Description HostingEnvironment environment The target hosting environment. Returns Type Description HostingManager The HostingManager or null if no hosting manager could be located for the specified cluster environment. GetManager(ClusterProxy, Boolean, String) Returns the HostingManager for provisioning a cluster using the default node image URI for the cluster environment. Declaration public HostingManager GetManager(ClusterProxy cluster, bool cloudMarketplace, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. Boolean cloudMarketplace For cloud environments, this specifies whether the cluster should be provisioned using a VM image from the public cloud marketplace when true or from the private NEONFORGE image gallery for testing when false . This is ignored for on-premise environments. note Only NEONFORGE maintainers will have permission to use the private image. String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. note Specific hosting managers may choose to ignore this when it doesn't make sense. Returns Type Description HostingManager The HostingManager or null if no hosting manager could be located for the specified cluster environment. Exceptions Type Condition NeonKubeException Thrown if the multiple managers implement support for the same hosting environment. GetManagerWithNodeImageFile(ClusterProxy, String, String) Returns the HostingManager for provisioning a cluster from an already downloaded image file already downloaded. Declaration public HostingManager GetManagerWithNodeImageFile(ClusterProxy cluster, string nodeImagePath, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. String nodeImagePath Specifies the path to the local node image file. String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. Returns Type Description HostingManager The HostingManager or null if no hosting manager could be located for the specified cluster environment. Exceptions Type Condition NeonKubeException Thrown if the multiple managers implement support for the same hosting environment. GetManagerWithNodeImageUri(ClusterProxy, Boolean, String, String) Returns the HostingManager for provisioning a cluster using a node image specified by HTTP/HTTPS URI. Declaration public HostingManager GetManagerWithNodeImageUri(ClusterProxy cluster, bool cloudMarketplace, string nodeImageUri, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. Boolean cloudMarketplace For cloud environments, this specifies whether the cluster should be provisioned using a VM image from the public cloud marketplace when true or from the private NEONFORGE image gallery for testing when false . This is ignored for on-premise environments. note Only NEONFORGE maintainers will have permission to use the private image. String nodeImageUri The node image URI. String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. note Specific hosting managers may choose to ignore this when it doesn't make sense. Returns Type Description HostingManager The HostingManager or null if no hosting manager could be located for the specified cluster environment. Exceptions Type Condition NeonKubeException Thrown if the multiple managers implement support for the same hosting environment. IsCloudEnvironment(HostingEnvironment) Determines whether a hosting environment is hosted in the cloud. Declaration public bool IsCloudEnvironment(HostingEnvironment environment) Parameters Type Name Description HostingEnvironment environment The target hosting environment. Returns Type Description Boolean true for cloud environments. Validate(ClusterDefinition) Ensures that that a cluster definition has valid hosting options. Declaration public void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Implements IHostingManagerFactory"
  },
  "neonkube/api/Neon.Kube.Hosting.HostingProviderAttribute.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.HostingProviderAttribute.html",
    "title": "Class HostingProviderAttribute | NeonKUBE documentation",
    "keywords": "Class HostingProviderAttribute Use this attribute to identify IHostingManager class implementations so they can be discovered by the HostingManager class. Inheritance Object Attribute HostingProviderAttribute Namespace : Neon.Kube.Hosting Assembly : Neon.Kube.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class HostingProviderAttribute : Attribute Constructors HostingProviderAttribute(HostingEnvironment) Constructor. Declaration public HostingProviderAttribute(HostingEnvironment environment) Parameters Type Name Description HostingEnvironment environment Specifies the target hosting environment. Properties Environment Returns the target hosting environment supported by the tagged IHostingManager . Declaration public HostingEnvironment Environment { get; } Property Value Type Description HostingEnvironment"
  },
  "neonkube/api/Neon.Kube.Hosting.HostingResourceAvailability.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.HostingResourceAvailability.html",
    "title": "Class HostingResourceAvailability | NeonKUBE documentation",
    "keywords": "Class HostingResourceAvailability Returned by GetResourceAvailabilityAsync(Int64, Int64) indicating whether a hosting environment has sufficient resources available to deploy a cluster. Inheritance Object HostingResourceAvailability Namespace : Neon.Kube.Hosting Assembly : Neon.Kube.dll Syntax public class HostingResourceAvailability Remarks The CanBeDeployed property returns true when the environment has sufficent resources to deploy the cluster. Properties CanBeDeployed Returns true when the cluster can be deployed. Declaration [JsonProperty(PropertyName = \"CanBeDeployed\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"canBeDeployed\", ApplyNamingConventions = false)] public bool CanBeDeployed { get; } Property Value Type Description Boolean Constraints Details the constraints preventing the cluster from being deployed. Declaration [JsonProperty(PropertyName = \"Constraints\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"constraints\", ApplyNamingConventions = false)] public Dictionary<string, List<HostingResourceConstraint>> Constraints { get; set; } Property Value Type Description Dictionary < String , List < HostingResourceConstraint >> Remarks This is a dictionary mapping hosting environment entity names to one or more resource constraints preventing cluster deployment. The entity names are hosting environment specific and will refer to things like virtualization hosts for environments like Hyper-V and XenServer, server pools for bare metal, or datacenters for clouds like AWS, Azure, and Google. Each constraint includes information about the constrained resource as well as the cluster nodes that exceeded the constraint."
  },
  "neonkube/api/Neon.Kube.Hosting.HostingResourceConstraint.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.HostingResourceConstraint.html",
    "title": "Class HostingResourceConstraint | NeonKUBE documentation",
    "keywords": "Class HostingResourceConstraint Describes a resource constraint that will prevent a cluster from being deployed. Inheritance Object HostingResourceConstraint Namespace : Neon.Kube.Hosting Assembly : Neon.Kube.dll Syntax public class HostingResourceConstraint Constructors HostingResourceConstraint() Default constructor. Declaration public HostingResourceConstraint() Properties Details Returns an optional string with additional human readable details about the hosting environment's resource constraint. Declaration [JsonProperty(PropertyName = \"Details\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"details\", ApplyNamingConventions = false)] public string Details { get; set; } Property Value Type Description String Nodes Lists the cluster nodes by name that are impacted by the resource constraint. Declaration [JsonProperty(PropertyName = \"Nodes\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"nodes\", ApplyNamingConventions = false)] public List<string> Nodes { get; set; } Property Value Type Description List < String > ResourceType Indicates the constrained resource type: Memory, CPU, disk,... Declaration [JsonProperty(PropertyName = \"ResourceType\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"resourceType\", ApplyNamingConventions = false)] public HostingConstrainedResourceType ResourceType { get; set; } Property Value Type Description HostingConstrainedResourceType"
  },
  "neonkube/api/Neon.Kube.Hosting.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.html",
    "title": "Namespace Neon.Kube.Hosting | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Hosting Classes HostingLoader Cluster hosting utilities. HostingManager Base class for environment specific hosting managers. HostingManagerFactory Provides for the creation of HostingManager implementations for a target hosting environment. HostingProviderAttribute Use this attribute to identify IHostingManager class implementations so they can be discovered by the HostingManager class. HostingResourceAvailability Returned by GetResourceAvailabilityAsync(Int64, Int64) indicating whether a hosting environment has sufficient resources available to deploy a cluster. HostingResourceConstraint Describes a resource constraint that will prevent a cluster from being deployed. Interfaces IHostingLoader INTERNAL USE ONLY: This interface describes a low-level class implementations that are registered by the Neon.Kube.Hosting class library with HostingManager to provide a way to access the various hosting implementations without having to bake this into the Neon.Kube assembly. IHostingManager Interface describing neonKUBE hosting manager implementions for different environments.. IHostingManagerFactory Describes the implementation for mapping a hosting environment into a concrete IHostingManager implementation. Enums HostingCapabilities Flags that describe any optional capabilities of a IHostingManager implementation. HostingConstrainedResourceType Enumerates the types of HostingResourceConstraint instances, indicating the type of resource could not be accommodated by a hosting environment to deploy a cluster. StopMode Used to control how cluster nodes are shutdown."
  },
  "neonkube/api/Neon.Kube.Hosting.HyperV.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.HyperV.html",
    "title": "Namespace Neon.Kube.Hosting.HyperV | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Hosting.HyperV Classes HyperVHostingManager Manages cluster provisioning using Microsoft Hyper-V virtual machines."
  },
  "neonkube/api/Neon.Kube.Hosting.HyperV.HyperVHostingManager.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.HyperV.HyperVHostingManager.html",
    "title": "Class HyperVHostingManager | NeonKUBE documentation",
    "keywords": "Class HyperVHostingManager Manages cluster provisioning using Microsoft Hyper-V virtual machines. Inheritance Object HostingManager HyperVHostingManager Implements IHostingManager Inherited Members HostingManager.MaxAsyncParallelHostingOperations HostingManager.SupportsFsTrim(HostingEnvironment) HostingManager.SupportsFsZero(HostingEnvironment) HostingManager.Dispose() HostingManager.MaxParallel HostingManager.WaitSeconds HostingManager.NodeMtu HostingManager.AddSetupSteps(SetupController<NodeDefinition>) HostingManager.AddPostSetupSteps(SetupController<NodeDefinition>) HostingManager.CanManageRouter HostingManager.UpdateInternetRoutingAsync() HostingManager.EnableInternetSshAsync() HostingManager.DisableInternetSshAsync() HostingManager.AssignNodeAddresses(ClusterDefinition) HostingManager.DefaultStatusTimeout HostingManager.PauseClusterAsync() HostingManager.ResumeClusterAsync() Namespace : Neon.Kube.Hosting.HyperV Assembly : Neon.Kube.HyperV.dll Syntax [HostingProvider(HostingEnvironment.HyperV)] public class HyperVHostingManager : HostingManager, IHostingManager, IDisposable Remarks Optional capability support: Pausable YES Stoppable YES Constructors HyperVHostingManager() Creates an instance that is only capable of validating the hosting related options in the cluster definition. Declaration public HyperVHostingManager() HyperVHostingManager(ClusterProxy, Boolean, String, String, String) Creates an instance that is capable of managing and/or provisioning a cluster on the local machine using Hyper-V. Declaration public HyperVHostingManager(ClusterProxy cluster, bool cloudMarketplace, string nodeImageUri = null, string nodeImagePath = null, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. Boolean cloudMarketplace Ignored String nodeImageUri Optionally specifies the node image URI. String nodeImagePath Optionally specifies the path to the local node image file. String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. Remarks note One of nodeImageUri or nodeImagePath must be specified to be able to provision a cluster but these can be null when you need to manage a cluster lifecycle. Properties Capabilities Returns flags describing any optional capabilities supported by the hosting manager. Declaration public override HostingCapabilities Capabilities { get; } Property Value Type Description HostingCapabilities Overrides HostingManager.Capabilities HostingEnvironment Returns the hosting environment implemented by the manager. Declaration public override HostingEnvironment HostingEnvironment { get; } Property Value Type Description HostingEnvironment Overrides HostingManager.HostingEnvironment RequiresNodeAddressCheck Returns true if the hosting manager requires that the LAN be scanned for devices assigned IP addresses that may conflict with node addresses. This is typically required only for clusters deployed on-premise because cloud clusters are typically provisioned to their own isolated network. Declaration public override bool RequiresNodeAddressCheck { get; } Property Value Type Description Boolean Overrides HostingManager.RequiresNodeAddressCheck Methods AddPostProvisioningSteps(SetupController<NodeDefinition>) Adds any steps to be performed after the node has been otherwise prepared. Declaration public override void AddPostProvisioningSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The target setup controller. Overrides HostingManager.AddPostProvisioningSteps(SetupController<NodeDefinition>) AddProvisioningSteps(SetupController<NodeDefinition>) Adds the steps required to the setup controller passed that creates and initializes the cluster resources such as the virtual machines, networks, load balancers, network security groups, public IP addresses. Declaration public override void AddProvisioningSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The setup controller. Overrides HostingManager.AddProvisioningSteps(SetupController<NodeDefinition>) DeleteClusterAsync(Boolean) Deletes an existing cluster by terminating any nodes and then removing node VMs and any related resources as well as the related local cluster login by default. The cluster does not need to be running. This method can optionally remove clusters or VMs potentially orphaned by interrupted unit tests as identified by a resource group or VM name prefix. note This operation may not be supported for all environments. Declaration public override async Task DeleteClusterAsync(bool removeOrphans = false) Parameters Type Name Description Boolean removeOrphans Optionally specifies that VMs or clusters with the same resource group prefix or VM name prefix will be removed as well. See the remarks for more information. Returns Type Description Task The tracking Task . Overrides HostingManager.DeleteClusterAsync(Boolean) Remarks The removeOrphans parameter is typically enabled when running unit tests via the ClusterFixture to ensure that clusters and VMs orphaned by previous interrupted test runs are removed in addition to removing the cluster specified by the cluster definition. Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. Dispose(Boolean) Releases any important resources associated with the instance. Declaration public override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if the instance is being disposed as opposed to being finalized. Overrides HostingManager.Dispose(Boolean) GetClusterAddresses() Returns the IP address to be used to access the cluster. For clusters deployed the the cloud, this will be the ingress IP address assigned to the load balancer. For on-premise clusters, this returns the private IP addresses for the control-plane nodes. Declaration public override IEnumerable<string> GetClusterAddresses() Returns Type Description IEnumerable < String > The list of cluster IP addresses. Overrides HostingManager.GetClusterAddresses() GetClusterHealthAsync(TimeSpan) Retrieves the health status of a cluster from the hosting manager's perspective. This includes information about the infrastructor provisioned for the cluster. Declaration public override async Task<ClusterHealth> GetClusterHealthAsync(TimeSpan timeout = default(TimeSpan)) Parameters Type Name Description TimeSpan timeout Optionally specifies the maximum time to wait for the result. This defaults to 15 seconds . Returns Type Description Task < ClusterHealth > The ClusterHealth . Overrides HostingManager.GetClusterHealthAsync(TimeSpan) GetDataDisk(LinuxSshProxy) Identifies the data disk device for a node. This returns the data disk's device name when an uninitialized data disk exists or \"PRIMARY\" when the OS disk will be used for data. Declaration public override string GetDataDisk(LinuxSshProxy node) Parameters Type Name Description LinuxSshProxy node Returns Type Description String The disk device name or \"PRIMARY\". Overrides HostingManager.GetDataDisk(LinuxSshProxy) Remarks note This will not work after the node's data disk has been initialized. GetResourceAvailabilityAsync(Int64, Int64) Returns the availability of resources required to deploy a cluster. Declaration public override async Task<HostingResourceAvailability> GetResourceAvailabilityAsync(long reservedMemory = 0L, long reserveDisk = 0L) Parameters Type Name Description Int64 reservedMemory Int64 reserveDisk Optionally specifies the amount of host disk disk (in bytes) to be reserved for host operations. Returns Type Description Task < HostingResourceAvailability > Details about whether cluster deployment can proceed. Overrides HostingManager.GetResourceAvailabilityAsync(Int64, Int64) Remarks The optional reserveMemory and reserveDisk parameters can be used to specify memory and disk that are to be reserved for the host environment. Hosting manager implementations are free to ignore this when they don't really makse sense. This is currently used for Hyper-V based clusters running on a user workstation or laptop to ensure that deployed clusters don't adverserly impact the host machine too badly. These parameters don't really make sense for cloud or dedicated hypervisor hosting environments because those environemnts will still work well when all available resources are consumed. GetSshEndpoint(String) Returns the FQDN or IP address (as a string) and the port to use to establish a SSH connection to a specific node. Declaration public override (string Address, int Port) GetSshEndpoint(string nodeName) Parameters Type Name Description String nodeName The target node's name. Returns Type Description (T1, T2) < String , Int32 > A (string Address, int Port) tuple. Overrides HostingManager.GetSshEndpoint(String) Remarks This will return the direct private node endpoint by default. If EnableInternetSshAsync() has been called and is supported by the hosting manager, then this returns the public address of the cluster along with the public NAT port. Load() Ensures that the assembly hosting this hosting manager is loaded. Declaration public static void Load() StartClusterAsync() Starts a cluster if it's not already running. note This operation may not be supported for all environments. Declaration public override async Task StartClusterAsync() Returns Type Description Task The tracking Task . Overrides HostingManager.StartClusterAsync() Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. StopClusterAsync(StopMode) Shuts down a cluster if it's running. note This operation may not be supported for all environments. Declaration public override async Task StopClusterAsync(StopMode stopMode = StopMode.Graceful) Parameters Type Name Description StopMode stopMode Optionally specifies how the cluster nodes are stopped. This defaults to Graceful . Returns Type Description Task The tracking Task . Overrides HostingManager.StopClusterAsync(StopMode) Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. Validate(ClusterDefinition) Verifies that a cluster is valid for the hosting manager, customizing properties as required. Declaration public override void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Overrides HostingManager.Validate(ClusterDefinition) Exceptions Type Condition ClusterDefinitionException Thrown if any problems were detected. Implements IHostingManager"
  },
  "neonkube/api/Neon.Kube.Hosting.IHostingLoader.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.IHostingLoader.html",
    "title": "Interface IHostingLoader | NeonKUBE documentation",
    "keywords": "Interface IHostingLoader INTERNAL USE ONLY: This interface describes a low-level class implementations that are registered by the Neon.Kube.Hosting class library with HostingManager to provide a way to access the various hosting implementations without having to bake this into the Neon.Kube assembly. Namespace : Neon.Kube.Hosting Assembly : Neon.Kube.dll Syntax public interface IHostingLoader Methods GetManager(HostingEnvironment) Returns the HostingManager for an environment that can be used for validating the hosting related options. Declaration HostingManager GetManager(HostingEnvironment environment) Parameters Type Name Description HostingEnvironment environment The target hosting environment. Returns Type Description HostingManager The HostingManager or null if no hosting manager could be located for the specified cluster environment. GetManager(ClusterProxy, Boolean, String) Returns the HostingManager for provisioning a cluster using the default node image for the cluster environment. Declaration HostingManager GetManager(ClusterProxy cluster, bool cloudMarketplace, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. Boolean cloudMarketplace For cloud environments, this specifies whether the cluster should be provisioned using a VM image from the public cloud marketplace when true or from the private NEONFORGE image gallery for testing when false . This is ignored for on-premise environments. note Only NEONFORGE maintainers will have permission to use the private image. String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. note Specific hosting managers may choose to ignore this when it doesn't make sense. Returns Type Description HostingManager The HostingManager or null if no hosting manager could be located for the specified cluster environment. Exceptions Type Condition NeonKubeException Thrown if the multiple managers implement support for the same hosting environment. GetManagerWithNodeImageFile(ClusterProxy, String, String) Returns the HostingManager for provisioning a cluster from an already downloaded image file already downloaded. This cannot be used for cloud environments. Declaration HostingManager GetManagerWithNodeImageFile(ClusterProxy cluster, string nodeImagePath = null, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. String nodeImagePath Specifies the path to the local node image file. String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. Returns Type Description HostingManager The HostingManager or null if no hosting manager could be located for the specified cluster environment. Exceptions Type Condition NeonKubeException Thrown if the multiple managers implement support for the same hosting environment. GetManagerWithNodeImageUri(ClusterProxy, Boolean, String, String) Returns the HostingManager for provisioning a cluster by downloading a node image from a URI that references a single image file or a multi-part DownloadManifest image. Declaration HostingManager GetManagerWithNodeImageUri(ClusterProxy cluster, bool cloudMarketplace, string nodeImageUri, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. Boolean cloudMarketplace For cloud environments, this specifies whether the cluster should be provisioned using a VM image from the public cloud marketplace when true or from the private NEONFORGE image gallery for testing when false . This is ignored for on-premise environments. note Only NEONFORGE maintainers will have permission to use the private image. String nodeImageUri For on-premise hosting environments, this specifies the node image URI that references a single image file or a multi-part DownloadManifest image. This is ignored for cloud environments and must be passed as null . String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. Returns Type Description HostingManager The HostingManager or null if no hosting manager could be located for the specified cluster environment. Exceptions Type Condition NeonKubeException Thrown if the multiple managers implement support for the same hosting environment. IsCloudEnvironment(HostingEnvironment) Determines whether a hosting environment is hosted in the cloud. Declaration bool IsCloudEnvironment(HostingEnvironment environment) Parameters Type Name Description HostingEnvironment environment The target hosting environment. Returns Type Description Boolean true for cloud environments."
  },
  "neonkube/api/Neon.Kube.Hosting.IHostingManager.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.IHostingManager.html",
    "title": "Interface IHostingManager | NeonKUBE documentation",
    "keywords": "Interface IHostingManager Interface describing neonKUBE hosting manager implementions for different environments.. Namespace : Neon.Kube.Hosting Assembly : Neon.Kube.dll Syntax public interface IHostingManager : IDisposable Remarks IHostingManager implementations are used to provision the infrastructure required to deploy a neonKUBE cluster to various environments including on-premise via XenServer or Hyper-V hypervisors or to public clouds like AWS, Azure, and Google. This infrastructure includes creating or initializing the servers as well as configuring networking in cloud environments. This interface also defines the mechanism for deprovisioning a cluster. Properties CanManageRouter Returns true if the hosting manage is capable of updating the upstream network router or load balancer. Cloud based managers will return true whereas on-premise managers will return false because we don't have the ability to manage physical routers yet. Declaration bool CanManageRouter { get; } Property Value Type Description Boolean Capabilities Returns flags describing any optional capabilities supported by the hosting manager. Declaration HostingCapabilities Capabilities { get; } Property Value Type Description HostingCapabilities HostingEnvironment Returns the hosting environment implemented by the manager. Declaration HostingEnvironment HostingEnvironment { get; } Property Value Type Description HostingEnvironment MaxParallel The maximum number of nodes that will execute provisioning steps in parallel. This defaults to 25 for on-premise hosting managers and 100 for the cloud. This may also be customized by specific IHostingManager implementations. Declaration int MaxParallel { get; set; } Property Value Type Description Int32 NodeMtu Returns the MTU (Maximum Transmission Unit) to be configured for network interfaces on node machines created by the hosting manager. This may return 0 which indicates that the default MTU (typically DefaultMTU bytes) should be set or a custom value between [512-9000]. Declaration int NodeMtu { get; } Property Value Type Description Int32 RequiresNodeAddressCheck Returns true if the hosting manager requires that the LAN be scanned for devices assigned IP addresses that may conflict with node addresses. This is typically required only for clusters deployed on-premise because cloud clusters are typically provisioned to their own isolated network. Declaration bool RequiresNodeAddressCheck { get; } Property Value Type Description Boolean WaitSeconds Number of seconds to delay after specific operations (e.g. to allow services to stablize). This defaults to 0.0 . Declaration double WaitSeconds { get; set; } Property Value Type Description Double Methods AddPostProvisioningSteps(SetupController<NodeDefinition>) Adds any steps to be performed after the node has been otherwise prepared. Declaration void AddPostProvisioningSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The target setup controller. AddPostSetupSteps(SetupController<NodeDefinition>) Adds any stps to be performed after cluster setup. Declaration void AddPostSetupSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The target setup controller. AddProvisioningSteps(SetupController<NodeDefinition>) Adds the steps required to the setup controller passed that creates and initializes the cluster resources such as the virtual machines, networks, load balancers, network security groups, public IP addresses. Declaration void AddProvisioningSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The setup controller. AddSetupSteps(SetupController<NodeDefinition>) Adds any steps to be performed before starting cluster setup. Declaration void AddSetupSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The target setup controller. DeleteClusterAsync(Boolean) Deletes an existing cluster by terminating any nodes and then removing node VMs and any related resources as well as the related local cluster login by default. The cluster does not need to be running. This method can optionally remove clusters or VMs potentially orphaned by interrupted unit tests as identified by a resource group or VM name prefix. note This operation may not be supported for all environments. Declaration Task DeleteClusterAsync(bool removeOrphans = false) Parameters Type Name Description Boolean removeOrphans Optionally specifies that VMs or clusters with the same resource group prefix or VM name prefix will be removed as well. See the remarks for more information. Returns Type Description Task The tracking Task . Remarks The removeOrphans parameter is typically enabled when running unit tests via the ClusterFixture to ensure that clusters and VMs orphaned by previous interrupted test runs are removed in addition to removing the cluster specified by the cluster definition. Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. DisableInternetSshAsync() Disables public SSH access for every node in the cluster, honoring source address limitations specified by ManagementAddressRules in the cluster definition. note This currently supported only by cloud hosting managers like: Azure, AWS, and Google. This will do nothing for the on-premise hosting managers because we don't have the ability to manage physical routers yet. Declaration Task DisableInternetSshAsync() Returns Type Description Task EnableInternetSshAsync() Enables public SSH access for every node in the cluster, honoring source address limitations specified by ManagementAddressRules in the cluster definition. Each node will be assigned a public port that has a NAT rule directing SSH traffic to that specific node. These ports will be in the range of Neon.Kube.ClusterDef.NetworkOptions.FirstExternalSshPort to Neon.Kube.ClusterDef.NetworkOptions.LastExternalSshPort . GetSshEndpoint(String) will return the external endpoint for nodes when external SSH is enabled. note This currently supported only by cloud hosting managers like: Azure, AWS, and Google. This will do nothing for the on-premise hosting managers because we don't have the ability to manage physical routers yet. Declaration Task EnableInternetSshAsync() Returns Type Description Task GetClusterAddresses() Returns the IP address to be used to access the cluster. For clusters deployed the the cloud, this will be the ingress IP address assigned to the load balancer. For on-premise clusters, this returns the private IP addresses for the control-plane nodes. Declaration IEnumerable<string> GetClusterAddresses() Returns Type Description IEnumerable < String > The list of cluster IP addresses. GetClusterHealthAsync(TimeSpan) Retrieves the health status of a cluster from the hosting manager's perspective. This includes information about the infrastructor provisioned for the cluster. Declaration Task<ClusterHealth> GetClusterHealthAsync(TimeSpan timeout = default(TimeSpan)) Parameters Type Name Description TimeSpan timeout Optionally specifies the maximum time to wait for the result. This defaults to 15 seconds . Returns Type Description Task < ClusterHealth > The ClusterHealth . GetDataDisk(LinuxSshProxy) Identifies the data disk device for a node. This returns the data disk's device name when an uninitialized data disk exists or \"PRIMARY\" when the OS disk will be used for data. Declaration string GetDataDisk(LinuxSshProxy node) Parameters Type Name Description LinuxSshProxy node Returns Type Description String The disk device name or \"PRIMARY\". Remarks note This will not work after the node's data disk has been initialized. GetResourceAvailabilityAsync(Int64, Int64) Returns the availability of resources required to deploy a cluster. Declaration Task<HostingResourceAvailability> GetResourceAvailabilityAsync(long reserveMemory = 0L, long reserveDisk = 0L) Parameters Type Name Description Int64 reserveMemory Optionally specifies the amount of host memory (in bytes) to be reserved for host operations. Int64 reserveDisk Optionally specifies the amount of host disk disk (in bytes) to be reserved for host operations. Returns Type Description Task < HostingResourceAvailability > Details about whether cluster deployment can proceed. Remarks The optional reserveMemory and reserveDisk parameters can be used to specify memory and disk that are to be reserved for the host environment. Hosting manager implementations are free to ignore this when they don't really makse sense. This is currently used for Hyper-V based clusters running on a user workstation or laptop to ensure that deployed clusters don't adverserly impact the host machine too badly. These parameters don't really make sense for cloud or dedicated hypervisor hosting environments because those environemnts will still work well when all available resources are consumed. GetSshEndpoint(String) Returns the FQDN or IP address (as a string) and the port to use to establish a SSH connection to a specific node. Declaration (string Address, int Port) GetSshEndpoint(string nodeName) Parameters Type Name Description String nodeName The target node's name. Returns Type Description (T1, T2) < String , Int32 > A (string Address, int Port) tuple. Remarks This will return the direct private node endpoint by default. If EnableInternetSshAsync() has been called and is supported by the hosting manager, then this returns the public address of the cluster along with the public NAT port. PauseClusterAsync() Pauses a cluster if it's running, by putting all cluster nodes to sleep. note This operation may not be supported for all environments. Declaration Task PauseClusterAsync() Returns Type Description Task The tracking Task . Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. ResumeClusterAsync() Resumes a paused cluster, by waking all cluster nodes. note This operation may not be supported for all environments. Declaration Task ResumeClusterAsync() Returns Type Description Task The tracking Task . Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. StartClusterAsync() Starts a cluster if it's not already running. note This operation may not be supported for all environments. Declaration Task StartClusterAsync() Returns Type Description Task The tracking Task . Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. StopClusterAsync(StopMode) Shuts down a cluster if it's running. note This operation may not be supported for all environments. Declaration Task StopClusterAsync(StopMode stopMode = StopMode.Graceful) Parameters Type Name Description StopMode stopMode Optionally specifies how the cluster nodes are stopped. This defaults to Graceful . Returns Type Description Task The tracking Task . Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. UpdateInternetRoutingAsync() Updates the cluster's load balancer or router to use the current set of ingress rules defined by IngressRules and the egress rules defined by EgressAddressRules . note This currently supported only by cloud hosting managers like for Azure, AWS, and Google. This will do nothing for the on-premise hosting managers because we don't have the ability to manage physical routers yet. Declaration Task UpdateInternetRoutingAsync() Returns Type Description Task Validate(ClusterDefinition) Verifies that a cluster is valid for the hosting manager, customizing properties as required. Declaration void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Exceptions Type Condition ClusterDefinitionException Thrown if any problems were detected."
  },
  "neonkube/api/Neon.Kube.Hosting.IHostingManagerFactory.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.IHostingManagerFactory.html",
    "title": "Interface IHostingManagerFactory | NeonKUBE documentation",
    "keywords": "Interface IHostingManagerFactory Describes the implementation for mapping a hosting environment into a concrete IHostingManager implementation. Namespace : Neon.Kube.Hosting Assembly : Neon.Kube.dll Syntax public interface IHostingManagerFactory Methods GetManager(HostingEnvironment) Returns the HostingManager for an environment that can be used for validating the hosting related options. Declaration HostingManager GetManager(HostingEnvironment environment) Parameters Type Name Description HostingEnvironment environment The target hosting environment. Returns Type Description HostingManager The HostingManager or null if no hosting manager could be located for the specified cluster environment. GetManager(ClusterProxy, Boolean, String) Returns the HostingManager for provisioning a cluster using the default node image URI for the cluster environment. Declaration HostingManager GetManager(ClusterProxy cluster, bool cloudMarketplace, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. Boolean cloudMarketplace For cloud environments, this specifies whether the cluster should be provisioned using a VM image from the public cloud marketplace when true or from the private NEONFORGE image gallery for testing when false . This is ignored for on-premise environments. note Only NEONFORGE maintainers will have permission to use the private image. String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. note Specific hosting managers may choose to ignore this when it doesn't make sense. Returns Type Description HostingManager The HostingManager or null if no hosting manager could be located for the specified cluster environment. Exceptions Type Condition NeonKubeException Thrown if the multiple managers implement support for the same hosting environment. GetManagerWithNodeImageFile(ClusterProxy, String, String) Returns the HostingManager for provisioning a cluster from an already downloaded image file already downloaded. Declaration HostingManager GetManagerWithNodeImageFile(ClusterProxy cluster, string nodeImagePath = null, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. String nodeImagePath Specifies the path to the local node image file. String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. Returns Type Description HostingManager The HostingManager or null if no hosting manager could be located for the specified cluster environment. Exceptions Type Condition NeonKubeException Thrown if the multiple managers implement support for the same hosting environment. GetManagerWithNodeImageUri(ClusterProxy, Boolean, String, String) Returns the HostingManager for provisioning a cluster using a node image specified by HTTP/HTTPS URI. Declaration HostingManager GetManagerWithNodeImageUri(ClusterProxy cluster, bool cloudMarketplace, string nodeImageUri, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. Boolean cloudMarketplace For cloud environments, this specifies whether the cluster should be provisioned using a VM image from the public cloud marketplace when true or from the private NEONFORGE image gallery for testing when false . This is ignored for on-premise environments. note Only NEONFORGE maintainers will have permission to use the private image. String nodeImageUri The node image URI. String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. note Specific hosting managers may choose to ignore this when it doesn't make sense. Returns Type Description HostingManager The HostingManager or null if no hosting manager could be located for the specified cluster environment. Exceptions Type Condition NeonKubeException Thrown if the multiple managers implement support for the same hosting environment. IsCloudEnvironment(HostingEnvironment) Determines whether a hosting environment is hosted in the cloud. Declaration bool IsCloudEnvironment(HostingEnvironment environment) Parameters Type Name Description HostingEnvironment environment The target hosting environment. Returns Type Description Boolean true for cloud environments."
  },
  "neonkube/api/Neon.Kube.Hosting.StopMode.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.StopMode.html",
    "title": "Enum StopMode | NeonKUBE documentation",
    "keywords": "Enum StopMode Used to control how cluster nodes are shutdown. Namespace : Neon.Kube.Hosting Assembly : Neon.Kube.dll Syntax public enum StopMode Fields Name Description Graceful Performs a graceful shutdown of the nodes such that all services have a chance to persist their state before the node stops. Pause Pauses the nodes when supported by the hosting environment. This quickly persists the node state to disk such that it can be restarted relatively quickly where it left off. note This is not supported by some hosting environments. Those environments will treat this as Graceful . TurnOff Immediately turns the the nodes off without shutting them down gracefully. This is equivalent to pulling the power plug on a physical machine and may result in data loss."
  },
  "neonkube/api/Neon.Kube.Hosting.XenServer.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.XenServer.html",
    "title": "Namespace Neon.Kube.Hosting.XenServer | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Hosting.XenServer Classes XenServerHostingManager Manages cluster provisioning on the XenServer hypervisor. XenServerHostingManager.DiskTemplateInfo Used to persist information about downloaded XVA template files."
  },
  "neonkube/api/Neon.Kube.Hosting.XenServer.XenServerHostingManager.DiskTemplateInfo.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.XenServer.XenServerHostingManager.DiskTemplateInfo.html",
    "title": "Class XenServerHostingManager.DiskTemplateInfo | NeonKUBE documentation",
    "keywords": "Class XenServerHostingManager.DiskTemplateInfo Used to persist information about downloaded XVA template files. Inheritance Object XenServerHostingManager.DiskTemplateInfo Namespace : Neon.Kube.Hosting.XenServer Assembly : Neon.Kube.XenServer.dll Syntax public class DiskTemplateInfo Properties ETag The downloaded file ETAG. Declaration [JsonProperty(PropertyName = \"ETag\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"etag\", ApplyNamingConventions = false)] public string ETag { get; set; } Property Value Type Description String Length The downloaded file length used as a quick verification that the complete file was downloaded. Declaration [JsonProperty(PropertyName = \"Length\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"length\", ApplyNamingConventions = false)] public long Length { get; set; } Property Value Type Description Int64"
  },
  "neonkube/api/Neon.Kube.Hosting.XenServer.XenServerHostingManager.html": {
    "href": "neonkube/api/Neon.Kube.Hosting.XenServer.XenServerHostingManager.html",
    "title": "Class XenServerHostingManager | NeonKUBE documentation",
    "keywords": "Class XenServerHostingManager Manages cluster provisioning on the XenServer hypervisor. Inheritance Object HostingManager XenServerHostingManager Implements IHostingManager Inherited Members HostingManager.MaxAsyncParallelHostingOperations HostingManager.SupportsFsTrim(HostingEnvironment) HostingManager.SupportsFsZero(HostingEnvironment) HostingManager.Dispose() HostingManager.MaxParallel HostingManager.WaitSeconds HostingManager.NodeMtu HostingManager.AddSetupSteps(SetupController<NodeDefinition>) HostingManager.AddPostSetupSteps(SetupController<NodeDefinition>) HostingManager.CanManageRouter HostingManager.UpdateInternetRoutingAsync() HostingManager.EnableInternetSshAsync() HostingManager.DisableInternetSshAsync() HostingManager.AssignNodeAddresses(ClusterDefinition) HostingManager.DefaultStatusTimeout HostingManager.PauseClusterAsync() HostingManager.ResumeClusterAsync() Namespace : Neon.Kube.Hosting.XenServer Assembly : Neon.Kube.XenServer.dll Syntax [HostingProvider(HostingEnvironment.XenServer)] public class XenServerHostingManager : HostingManager, IHostingManager, IDisposable Remarks Optional capability support: Pausable YES Stoppable YES Constructors XenServerHostingManager() Creates an instance that is only capable of validating the hosting related options in the cluster definition. Declaration public XenServerHostingManager() XenServerHostingManager(ClusterProxy, Boolean, String, String, String) Creates an instance that is capable of provisioning a cluster on XenServer/XCP-ng servers. Declaration public XenServerHostingManager(ClusterProxy cluster, bool cloudMarketplace, string nodeImageUri = null, string nodeImagePath = null, string logFolder = null) Parameters Type Name Description ClusterProxy cluster The cluster being managed. Boolean cloudMarketplace Ignored. String nodeImageUri Optionally specifies the node image URI. String nodeImagePath Optionally specifies the path to the local node image file. String logFolder The folder where log files are to be written, otherwise or null or empty if logging is disabled. Remarks note One of nodeImageUri or nodeImagePath must be specified. Properties Capabilities Returns flags describing any optional capabilities supported by the hosting manager. Declaration public override HostingCapabilities Capabilities { get; } Property Value Type Description HostingCapabilities Overrides HostingManager.Capabilities HostingEnvironment Returns the hosting environment implemented by the manager. Declaration public override HostingEnvironment HostingEnvironment { get; } Property Value Type Description HostingEnvironment Overrides HostingManager.HostingEnvironment RequiresNodeAddressCheck Returns true if the hosting manager requires that the LAN be scanned for devices assigned IP addresses that may conflict with node addresses. This is typically required only for clusters deployed on-premise because cloud clusters are typically provisioned to their own isolated network. Declaration public override bool RequiresNodeAddressCheck { get; } Property Value Type Description Boolean Overrides HostingManager.RequiresNodeAddressCheck Methods AddPostProvisioningSteps(SetupController<NodeDefinition>) Adds any steps to be performed after the node has been otherwise prepared. Declaration public override void AddPostProvisioningSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The target setup controller. Overrides HostingManager.AddPostProvisioningSteps(SetupController<NodeDefinition>) AddProvisioningSteps(SetupController<NodeDefinition>) Adds the steps required to the setup controller passed that creates and initializes the cluster resources such as the virtual machines, networks, load balancers, network security groups, public IP addresses. Declaration public override void AddProvisioningSteps(SetupController<NodeDefinition> controller) Parameters Type Name Description SetupController < NodeDefinition > controller The setup controller. Overrides HostingManager.AddProvisioningSteps(SetupController<NodeDefinition>) DeleteClusterAsync(Boolean) Deletes an existing cluster by terminating any nodes and then removing node VMs and any related resources as well as the related local cluster login by default. The cluster does not need to be running. This method can optionally remove clusters or VMs potentially orphaned by interrupted unit tests as identified by a resource group or VM name prefix. note This operation may not be supported for all environments. Declaration public override async Task DeleteClusterAsync(bool removeOrphans = false) Parameters Type Name Description Boolean removeOrphans Optionally specifies that VMs or clusters with the same resource group prefix or VM name prefix will be removed as well. See the remarks for more information. Returns Type Description Task The tracking Task . Overrides HostingManager.DeleteClusterAsync(Boolean) Remarks The removeOrphans parameter is typically enabled when running unit tests via the ClusterFixture to ensure that clusters and VMs orphaned by previous interrupted test runs are removed in addition to removing the cluster specified by the cluster definition. Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. Dispose(Boolean) Releases any important resources associated with the instance. Declaration public override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if the instance is being disposed as opposed to being finalized. Overrides HostingManager.Dispose(Boolean) GetClusterAddresses() Returns the IP address to be used to access the cluster. For clusters deployed the the cloud, this will be the ingress IP address assigned to the load balancer. For on-premise clusters, this returns the private IP addresses for the control-plane nodes. Declaration public override IEnumerable<string> GetClusterAddresses() Returns Type Description IEnumerable < String > The list of cluster IP addresses. Overrides HostingManager.GetClusterAddresses() GetClusterHealthAsync(TimeSpan) Retrieves the health status of a cluster from the hosting manager's perspective. This includes information about the infrastructor provisioned for the cluster. Declaration public override async Task<ClusterHealth> GetClusterHealthAsync(TimeSpan timeout = default(TimeSpan)) Parameters Type Name Description TimeSpan timeout Optionally specifies the maximum time to wait for the result. This defaults to 15 seconds . Returns Type Description Task < ClusterHealth > The ClusterHealth . Overrides HostingManager.GetClusterHealthAsync(TimeSpan) GetDataDisk(LinuxSshProxy) Identifies the data disk device for a node. This returns the data disk's device name when an uninitialized data disk exists or \"PRIMARY\" when the OS disk will be used for data. Declaration public override string GetDataDisk(LinuxSshProxy node) Parameters Type Name Description LinuxSshProxy node Returns Type Description String The disk device name or \"PRIMARY\". Overrides HostingManager.GetDataDisk(LinuxSshProxy) Remarks note This will not work after the node's data disk has been initialized. GetResourceAvailabilityAsync(Int64, Int64) Returns the availability of resources required to deploy a cluster. Declaration public override async Task<HostingResourceAvailability> GetResourceAvailabilityAsync(long reserveMemory = 0L, long reserveDisk = 0L) Parameters Type Name Description Int64 reserveMemory Optionally specifies the amount of host memory (in bytes) to be reserved for host operations. Int64 reserveDisk Optionally specifies the amount of host disk disk (in bytes) to be reserved for host operations. Returns Type Description Task < HostingResourceAvailability > Details about whether cluster deployment can proceed. Overrides HostingManager.GetResourceAvailabilityAsync(Int64, Int64) Remarks The optional reserveMemory and reserveDisk parameters can be used to specify memory and disk that are to be reserved for the host environment. Hosting manager implementations are free to ignore this when they don't really makse sense. This is currently used for Hyper-V based clusters running on a user workstation or laptop to ensure that deployed clusters don't adverserly impact the host machine too badly. These parameters don't really make sense for cloud or dedicated hypervisor hosting environments because those environemnts will still work well when all available resources are consumed. GetSshEndpoint(String) Returns the FQDN or IP address (as a string) and the port to use to establish a SSH connection to a specific node. Declaration public override (string Address, int Port) GetSshEndpoint(string nodeName) Parameters Type Name Description String nodeName The target node's name. Returns Type Description (T1, T2) < String , Int32 > A (string Address, int Port) tuple. Overrides HostingManager.GetSshEndpoint(String) Remarks This will return the direct private node endpoint by default. If EnableInternetSshAsync() has been called and is supported by the hosting manager, then this returns the public address of the cluster along with the public NAT port. Load() Ensures that the assembly hosting this hosting manager is loaded. Declaration public static void Load() StartClusterAsync() Starts a cluster if it's not already running. note This operation may not be supported for all environments. Declaration public override async Task StartClusterAsync() Returns Type Description Task The tracking Task . Overrides HostingManager.StartClusterAsync() Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. StopClusterAsync(StopMode) Shuts down a cluster if it's running. note This operation may not be supported for all environments. Declaration public override async Task StopClusterAsync(StopMode stopMode = StopMode.Graceful) Parameters Type Name Description StopMode stopMode Optionally specifies how the cluster nodes are stopped. This defaults to Graceful . Returns Type Description Task The tracking Task . Overrides HostingManager.StopClusterAsync(StopMode) Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. Validate(ClusterDefinition) Verifies that a cluster is valid for the hosting manager, customizing properties as required. Declaration public override void Validate(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Overrides HostingManager.Validate(ClusterDefinition) Exceptions Type Condition ClusterDefinitionException Thrown if any problems were detected. Implements IHostingManager"
  },
  "neonkube/api/Neon.Kube.html": {
    "href": "neonkube/api/Neon.Kube.html",
    "title": "Namespace Neon.Kube | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube Classes ClusterContainerImage Holds information about a container image deployed as part of cluster setup. ClusterDefinitionException Signals cluster definition errors. ClusterHealth Describes the current health of a cluster. ClusterHost Important cluster host names. ClusterInfo Holds details about a cluster. ClusterLock Describes the current lock status of a cluster. ClusterLogin Holds extended cluster information such as the cluster definition and node SSH credentials. These records are persisted as files to the $HOME/.neonkube/logins folder in YAML files named like USER @ NAME .login.yaml . ClusterLoginExport Holds all of the information required to import/export a cluster login. This includes the Kubernetes cluster, login, and neonKUBE extensions. ClusterManifest Holds information about a deployed cluster including things like the container images that need to be present in the local Harbor deployment. This information is associated with a specific version of neonKUBE and is generated automatically during neonCLOUD node image builds and is uploaded to S3 as a JSON document. This ends up being embedded into the neon-cluster-operator as a resource via a build task that uses the neon-build get-cluster-manifest command to download the file from S3 so it can be included in the project. ClusterSetupFailureMetadata Holds metadata about a cluster whose prepare or setup operations failed. This is included in the ZIP file uploaded to the headend as a file named metadata.yaml . ClusterTelemetry Models cluster telemetry. GrpcLogExporter Implements a trace exporter that forwards log batches to the neon-desktop-service which then handles the transmission to the headend. GrpcTraceExporter Implements a trace exporter that forwards trace batches to the neon-desktop-service which then handles the transmission to the headend. KubeClientConfig Used by the neonKUBE client desktop and command line tools to manage the client side configuration. KubeClusterAdvice Holds cluster configuration advice initialized early during cluster setup. This is used to centralize the decisions about things like resource limitations and node taints/affinity based on the overall resources available to the cluster. KubeConfig Used to manage serialization of Kubernetes kubeconfig files. These are used to manage cluster contexts on client machines: more information . KubeConfigCluster Describes a Kubernetes cluster configuration. KubeConfigClusterProperties Describes a Kubernetes cluster's properties. KubeConfigContext Describes a Kubernetes context. KubeConfigContextProperties Describes a Kubernetes context properties. KubeConfigMapName Defines internal neonKUBE global cluster configmap names. KubeConfigUser Describes a Kubernetes user configuration. KubeConfigUserProperties Describes a Kubernetes user's credentials. KubeConst Important cluster constants. KubeContainerRegistry Describes the location of the neonKUBE related container registries. KubeContextName Handles the parsing of a Kubernetes context name which by convention encodes the user, cluster, and optional namespace as a string. KubeDiagnostics neonKUBE cluster diagnostics. KubeDownloads Kubernetes related component download URIs. KubeEnv Defines the neonKUBE related environment variables as well as properties that access them. KubeFileDetails Holds the contents and permissions for a downloaded Kubernetes text file. KubeHelper cluster related utilties. KubeMinioBucket Defines the Minio bucket names used by neonKUBE applications. KubeNamespace Defines the built-in namespace names created for Kubernetes and neonKUBE. KubeNodeFolder Enumerates the paths of important directories on cluster node servers. KubeNodePort Defines reserved node and cluster network ports. KubernetesExtensions Kubernetes related extension methods. KubernetesObjectMetadata Describes a Kubernetes object by its basic properties, ApiVersion , Kind , and Metadata . KubernetesRetryHandler A DelegatingHandler optionally used to retry transient errors encountered by k8s.Kubernetes clients. KubeService Defines the Neon service names. KubeServiceAdvice Used by KubeClusterAdvice to record configuration advice for a specific Kurbernetes service being deployed. KubeSetupDetails Holds details required during setup or for provisioning additional cluster nodes. KubeSetupProperty Identifies the cluster setup state available in an ISetupController . KubeSshKey Describes a client key used for SSH public key authentication. KubeVersions Specifies deployment related component versions for the current neonKUBE release. Kubernetes release information can be found here: https://kubernetes.io/releases/ LeaderElectionConfig Configuration information for the LeaderElector class. LeaderElector Implements a thin wrapper over k8s.LeaderElection.LeaderElector integrating optional metric counters for tracking leadership changes. NeonAnnotation Defines the non-node annotations used to tag objects by neonKUBE. NeonKubeException Describes a cluster related related error. NeonLabel Defines the non-node cluster definition labels used to tag objects by neonKUBE. note Labels specified by the cluster definition and assigned to nodes are defined here: NodeLabels . NeonNodeTaskType Defines node task types. NodeImageInfo Holds information about a setup container image. NodeSshProxyExtensions Extends the NodeSshProxy<TMetadata> class by adding cluster setup related methods. PriorityClass Enumerates the system and neonKUBE pod PriorityClass values. These are used by Kubernetes when deciding which pod to evict from a node when necessary as well as for ordering how pods will be terminated when nodes are shutdown gracefully. Each priority property defines the priority name and value. note Higher priorities have higher values and non-Kubernetes defined priority values must be less than 1 billion. neonKUBE priority property names are prefixed by \"Neon\" and built-in Kubernetes priority property names are prefixed by \"System\" and will have IsSystem set to true . Values returns the list of all known priorities. Here are the known priority values, in decending order by priority. SystemNodeCritical (2000001000) Built-in Kubernetes priority used for the most important pods running on a node. SystemClusterCritical (2000000000) Built-in Kubernetes priority used for the important pods running on a cluster. NeonMax (999999999) Idenifies the maximum priority reserved for neonKUBE applications. You should avoid using priorities in the range of NeonMin and NeonMax (inclusive) for your applications. NeonOperator (900008000) Used for critical neonKUBE operators. NeonNetwork (900007000) Used for neonKUBE database deployments. NeonStorage (900006000) Used for critical OpenEBS related storage services that back critical neonKUBE and user deployments. NeonData (900005000) Used for neonKUBE database deployments. NeonApi (900004000) Used for neonKUBE API deployments. NeonApp (900003000) Used for neonKUBE application deployments. NeonMonitor (900002000) Used for neonKUBE monitoring components. NeonMin (900000000) Idenifies the maximum priority reserved for neonKUBE applications. You should avoid using priorities in the range of NeonMin and NeonMax (inclusive) for your applications. UserVeryHigh (5000) Available for very-high priority user pods. UserHigh (4000) Available for high priority user pods. UserMedium (3000) Available for medium priority user pods. Note that this is also configured as the global default priority class. Pods deployed without a specific priority class will be assigned this one. UserLow (2000) Available for user user pods. UserVeryLow (1000) Available for very-low priority user pods. The values defined above won't change and they are spaced well apart so users can insert additional priorities as required. The user priorities defined here are just a starting point and you're free to add add additional priorities as required or remove or edit the ones you degine. We recommend that most user defined priorities be lower than NeonApp to avoid conflicts with critical Kubernetes and neonKUBE pods. note UserMedium is configured as the global priority class by default. This means that any pods you deploy without explicitly specifying a priority class will be assigned 1000002000 rather than 0 . This can come in handy when you have an existing cluster and realize you need to run new pods at a lower priority than already running pods, and you prefer not to mess the running pod priorities. note You should avoid using priorities in the range of NeonMin and NeonMax (inclusive) for your applications. The ToManifest() method returns the Kubernetes manifest text that to be allpied to the cluster to initialize the priority classes. PrometheusClient Client for interacting with the Prometheus API. PrometheusMatrixResult Models a Prometheus matrix result. PrometheusMatrixValue Models a Prometheus matrix value. PrometheusResponse<T> Models the Prometheus HTTP API response. PrometheusResponseData<T> Models the Prometheus result data. PrometheusResult Models a Prometheus result. PrometheusTimeSeriesValueConverter A JSON converter for converting PrometheusTimeSeriesValue. PrometheusVectorResult Models a Prometheus vector result. PrometheusVectorValue Models a Prometheus vector value. TypeSafeConfigMap<TConfig> Wraps a Kubernetes k8s.Models.V1ConfigMap to support strongly typed configurations. This is persisted using a string dictionary where the configuration is persisted as JSON using the \"data\" key. note This is typically used for persisting state to the cluster rather than for setting configuration for pods. V1CustomObjectList<T> Holds a list of generic custom object instances returned by the API server. VersionException Indicates a client or other version incompatiblity. Watcher<T> A generic Kubernetes watcher. WatchEvent<T> A kubernetes watch event. Structs PriorityClass.PriorityDef Used to define a pod priority. PrometheusTimeSeriesValue Models a prometheus time series value. Enums ClusterNodeState Enumerates the possible states of a cluster node from the hosting manager's perspective. ClusterState Enumerates the possible overall states for a cluster. KubeClientPlatform Enumerates the operating systems supported by neonKUBE client applications used on developer or operator workstations to manage remote neonKUBE clusters. KubeImageType Enumerates the neonKUBE image types. PrometheusResponseStatus Specifies response status from Prometheus HTTP API. PrometheusResultType Specifies the result type."
  },
  "neonkube/api/Neon.Kube.KubeClientConfig.html": {
    "href": "neonkube/api/Neon.Kube.KubeClientConfig.html",
    "title": "Class KubeClientConfig | NeonKUBE documentation",
    "keywords": "Class KubeClientConfig Used by the neonKUBE client desktop and command line tools to manage the client side configuration. Inheritance Object KubeClientConfig Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class KubeClientConfig Constructors KubeClientConfig() Default constuctor. Declaration public KubeClientConfig() Properties InstallationId The globally unique client installation ID. Declaration [JsonProperty(PropertyName = \"InstallationId\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"installationId\", ApplyNamingConventions = false)] public string InstallationId { get; set; } Property Value Type Description String Schema The schema version for this state file. Declaration [JsonProperty(PropertyName = \"Schema\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"schema\", ApplyNamingConventions = false)] public string Schema { get; set; } Property Value Type Description String Methods Validate() Ensures that the state is valid. Declaration public void Validate()"
  },
  "neonkube/api/Neon.Kube.KubeClientPlatform.html": {
    "href": "neonkube/api/Neon.Kube.KubeClientPlatform.html",
    "title": "Enum KubeClientPlatform | NeonKUBE documentation",
    "keywords": "Enum KubeClientPlatform Enumerates the operating systems supported by neonKUBE client applications used on developer or operator workstations to manage remote neonKUBE clusters. Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public enum KubeClientPlatform Fields Name Description Linux Linux. Osx OS/X Windows Windows."
  },
  "neonkube/api/Neon.Kube.KubeClusterAdvice.html": {
    "href": "neonkube/api/Neon.Kube.KubeClusterAdvice.html",
    "title": "Class KubeClusterAdvice | NeonKUBE documentation",
    "keywords": "Class KubeClusterAdvice Holds cluster configuration advice initialized early during cluster setup. This is used to centralize the decisions about things like resource limitations and node taints/affinity based on the overall resources available to the cluster. Inheritance Object KubeClusterAdvice Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class KubeClusterAdvice Remarks KubeClusterAdvice maintains a dictionary of KubeServiceAdvice instances keyed by the service identity (one of the service identify constants defined here). The constructor initializes empty advice instances for each of the known neonKUBE services. The basic idea here is that an early setup step will be executed that constructs a KubeClusterAdvice instance, determines resource and other limitations holistically based on the cluster hosting environment as well as the total resources available to the cluster, potentially priortizing resource assignments to some services over others. The step will persist the KubeClusterAdvice to the setup controller state as the ClusterAdvice property so this information will be available to all other deployment steps. KubeServiceAdvice inherits from ObjectDictionary and can hold arbitrary key/values. The idea is to make it easy to add custom values to the advice for a service that can be picked up in subsequent deployment steps and used for things like initializing Helm chart values. Although KubeServiceAdvice can hold arbitrary key/values, we've defined class properties to manage the common service properties: PodCpuLimit Double : Identifies the property specifying the maximum CPU to assign to each service pod. PodCpuRequest Double : Identifies the property specifying the CPU to reserve for each service pod. PodMemoryLimit Decimal : Identifies the property specifying the maxumum bytes RAM that can be consumed by each service pod. PodMemoryRequest Decimal : Identifies the property specifying the bytes of RAM to be reserved for each service pod. ReplicaCount Int32 : Identifies the property specifying how many pods should be deployed for the service. Constructors KubeClusterAdvice() Constructs an instance by initialize empty KubeServiceAdvice instances for each cluster service defined above. Declaration public KubeClusterAdvice() Fields AlertManager Identifies the neonKUBE cluster's AlertManager service. Declaration public static string AlertManager Field Value Type Description String BlackboxExporter Identifies the neonKUBE cluster's BlackboxExporter service. Declaration public static string BlackboxExporter Field Value Type Description String Calico Identifies the neonKUBE cluster's Calico service. Declaration public static string Calico Field Value Type Description String CertManager Identifies the neonKUBE cluster's Cert Manager service manager nodes. Declaration public static string CertManager Field Value Type Description String CoreDns Identifies the neonKUBE cluster's CoreDNS service. Declaration public static string CoreDns Field Value Type Description String Dex Identifies the neonKUBE cluster's Dex service. Declaration public static string Dex Field Value Type Description String EtcdCluster Identifies the neonKUBE cluster's etcd nodes service. Declaration public static string EtcdCluster Field Value Type Description String EtcdOperator Identifies the neonKUBE cluster's Etcd Operator service. Declaration public static string EtcdOperator Field Value Type Description String FluentBit Identifies the neonKUBE cluster's FluentBit service. Declaration public static string FluentBit Field Value Type Description String Glauth Identifies the neonKUBE cluster's Glauth service. Declaration public static string Glauth Field Value Type Description String Grafana Identifies the neonKUBE cluster's Grafana service. Declaration public static string Grafana Field Value Type Description String GrafanaAgent Identifies the neonKUBE cluster's Grafana Agent service. Declaration public static string GrafanaAgent Field Value Type Description String GrafanaAgentNode Identifies the neonKUBE cluster's Grafana Agent daemonset service. Declaration public static string GrafanaAgentNode Field Value Type Description String GrafanaAgentOperator Identifies the neonKUBE cluster's Grafana Agent service. Declaration public static string GrafanaAgentOperator Field Value Type Description String Harbor Identifies the neonKUBE cluster's Harbor service. Declaration public static string Harbor Field Value Type Description String HarborChartmuseum Identifies the neonKUBE cluster's Harbor Chartmuseum service. Declaration public static string HarborChartmuseum Field Value Type Description String HarborClair Identifies the neonKUBE cluster's Harbor Clair service. Declaration public static string HarborClair Field Value Type Description String HarborCore Identifies the neonKUBE cluster's Harbor Core service. Declaration public static string HarborCore Field Value Type Description String HarborJobservice Identifies the neonKUBE cluster's Harbor Jobservice service. Declaration public static string HarborJobservice Field Value Type Description String HarborNotaryServer Identifies the neonKUBE cluster's Harbor Notary Server service. Declaration public static string HarborNotaryServer Field Value Type Description String HarborNotarySigner Identifies the neonKUBE cluster's Harbor Notary Signer service. Declaration public static string HarborNotarySigner Field Value Type Description String HarborPortal Identifies the neonKUBE cluster's Harbor Portal service. Declaration public static string HarborPortal Field Value Type Description String HarborRegistry Identifies the neonKUBE cluster's Harbor Registry service. Declaration public static string HarborRegistry Field Value Type Description String IstioIngressGateway Identifies the neonKUBE cluster's Istio Ingress Gateway service. Declaration public static string IstioIngressGateway Field Value Type Description String IstioPilot Identifies the neonKUBE cluster's Istio Pilot service. Declaration public static string IstioPilot Field Value Type Description String IstioProxy Identifies the neonKUBE cluster's Istio Proxy service. Declaration public static string IstioProxy Field Value Type Description String Kiali Identifies the neonKUBE cluster's Kiali service. Declaration public static string Kiali Field Value Type Description String KubeApiServerWatchCacheSize Specifies the default watch cache size for the Kubernetes API Server. Declaration public int KubeApiServerWatchCacheSize Field Value Type Description Int32 KubernetesDashboard Identifies the neonKUBE cluster's Kubernetes Dashboard service. Declaration public static string KubernetesDashboard Field Value Type Description String KubeStateMetrics Identifies the Kube State Metrics service. Declaration public static string KubeStateMetrics Field Value Type Description String LogsQuota Specifies the cluster default Logs quota. Declaration public string LogsQuota Field Value Type Description String Loki Identifies the neonKUBE cluster's Loki service. Declaration public static string Loki Field Value Type Description String LokiCompactor Identifies the neonKUBE cluster's Loki Compactor service. Declaration public static string LokiCompactor Field Value Type Description String LokiDistributor Identifies the neonKUBE cluster's Loki Distributor service. Declaration public static string LokiDistributor Field Value Type Description String LokiIndexGateway Identifies the neonKUBE cluster's Loki Index Gateway service. Declaration public static string LokiIndexGateway Field Value Type Description String LokiIngester Identifies the neonKUBE cluster's Loki Ingester service. Declaration public static string LokiIngester Field Value Type Description String LokiQuerier Identifies the neonKUBE cluster's Loki Querier service. Declaration public static string LokiQuerier Field Value Type Description String LokiQueryFrontend Identifies the neonKUBE cluster's Loki Query Frontend service. Declaration public static string LokiQueryFrontend Field Value Type Description String LokiRuler Identifies the neonKUBE cluster's Loki Ruler service. Declaration public static string LokiRuler Field Value Type Description String LokiTableManager Identifies the neonKUBE cluster's Loki Table Manager service. Declaration public static string LokiTableManager Field Value Type Description String Memcached Identifies the neonKUBE cluster's Memcached service. Declaration public static string Memcached Field Value Type Description String MetricsEnabled Specifies whether cluster metrics are enabled by default. Declaration public bool? MetricsEnabled Field Value Type Description Nullable < Boolean > MetricsInterval Specifies the cluster default Metrics scrape interval. Declaration public string MetricsInterval Field Value Type Description String MetricsQuota Specifies the cluster default Metrics quota. Declaration public string MetricsQuota Field Value Type Description String MetricsServer Identifies the neonKUBE cluster's Metrics-Server service. Declaration public static string MetricsServer Field Value Type Description String Mimir Identifies the neonKUBE cluster's Mimir service. Declaration public static string Mimir Field Value Type Description String MimirAlertmanager Identifies the neonKUBE cluster's Mimir Alertmanager service. Declaration public static string MimirAlertmanager Field Value Type Description String MimirCompactor Identifies the neonKUBE cluster's Mimir Compactor service. Declaration public static string MimirCompactor Field Value Type Description String MimirDistributor Identifies the neonKUBE cluster's Mimir Distributor service. Declaration public static string MimirDistributor Field Value Type Description String MimirIngester Identifies the neonKUBE cluster's Mimir Ingester service. Declaration public static string MimirIngester Field Value Type Description String MimirOverridesExporter Identifies the neonKUBE cluster's Mimir OverridesExporter service. Declaration public static string MimirOverridesExporter Field Value Type Description String MimirQuerier Identifies the neonKUBE cluster's Mimir Querier service. Declaration public static string MimirQuerier Field Value Type Description String MimirQueryFrontend Identifies the neonKUBE cluster's Mimir Query Frontend service. Declaration public static string MimirQueryFrontend Field Value Type Description String MimirRuler Identifies the neonKUBE cluster's Mimir Alertmanager service. Declaration public static string MimirRuler Field Value Type Description String MimirStoreGateway Identifies the neonKUBE cluster's Mimir Alertmanager service. Declaration public static string MimirStoreGateway Field Value Type Description String Minio Identifies the neonKUBE cluster's Minio service. Declaration public static string Minio Field Value Type Description String MinioOperator Identifies the neonKUBE cluster's Minio Operator service. Declaration public static string MinioOperator Field Value Type Description String NeonClusterOperator Identifies the neonKUBE cluster's neon-cluster-operator service. Declaration public static string NeonClusterOperator Field Value Type Description String NeonDashboard Identifies the neonKUBE cluster's neon-dashboard service. Declaration public static string NeonDashboard Field Value Type Description String NeonNodeAgent Identifies the neonKUBE cluster's neon-node-agent service. Declaration public static string NeonNodeAgent Field Value Type Description String NeonSsoSessionProxy Identifies the neonKUBE cluster's neon-sso-session-proxy service. Declaration public static string NeonSsoSessionProxy Field Value Type Description String NeonSystemDb Identifies the neonKUBE cluster's system database. Declaration public static string NeonSystemDb Field Value Type Description String NodeProblemDetector Identifies the neonKUBE cluster's Node Problem Detector service. Declaration public static string NodeProblemDetector Field Value Type Description String Oauth2Proxy Identifies the neonKUBE cluster's oauth2-proxy service. Declaration public static string Oauth2Proxy Field Value Type Description String OpenEbsAdmissionServer Identifies the neonKUBE cluster's OpenEBS Admission Server service. Declaration public static string OpenEbsAdmissionServer Field Value Type Description String OpenEbsApiServer Identifies the neonKUBE cluster's OpenEBS API Server service. Declaration public static string OpenEbsApiServer Field Value Type Description String OpenEbsCstor Identifies the neonKUBE cluster's OpenEBS cStor service. Declaration public static string OpenEbsCstor Field Value Type Description String OpenEbsCstorAdmissionServer Identifies the neonKUBE cluster's OpenEBS cStor Admission Server service. Declaration public static string OpenEbsCstorAdmissionServer Field Value Type Description String OpenEbsCstorCsiController Identifies the neonKUBE cluster's OpenEBS cStor CSI Controller service. Declaration public static string OpenEbsCstorCsiController Field Value Type Description String OpenEbsCstorCsiNode Identifies the neonKUBE cluster's OpenEBS cStor CSI Node service. Declaration public static string OpenEbsCstorCsiNode Field Value Type Description String OpenEbsCstorCspcOperator Identifies the neonKUBE cluster's OpenEBS cStor CSPC Operator service. Declaration public static string OpenEbsCstorCspcOperator Field Value Type Description String OpenEbsCstorCvcOperator Identifies the neonKUBE cluster's OpenEBS cStor CVC Operator service. Declaration public static string OpenEbsCstorCvcOperator Field Value Type Description String OpenEbsCstorPool Identifies the neonKUBE cluster's OpenEBS Cstor Pool containers. Declaration public static string OpenEbsCstorPool Field Value Type Description String OpenEbsCstorPoolAux Identifies the neonKUBE cluster's OpenEBS Cstor Pool sidecar containers. Declaration public static string OpenEbsCstorPoolAux Field Value Type Description String OpenEbsJiva Identifies the neonKUBE cluster's OpenEBS Jiva service. Declaration public static string OpenEbsJiva Field Value Type Description String OpenEbsLocalPvProvisioner Identifies the neonKUBE cluster's OpenEBS Local PV Provisioner service. Declaration public static string OpenEbsLocalPvProvisioner Field Value Type Description String OpenEbsNdm Identifies the neonKUBE cluster's OpenEBS Node Disk Manager service. Declaration public static string OpenEbsNdm Field Value Type Description String OpenEbsNdmOperator Identifies the neonKUBE cluster's OpenEBS Node Disk Manager Operator service. Declaration public static string OpenEbsNdmOperator Field Value Type Description String OpenEbsProvisioner Identifies the neonKUBE cluster's OpenEBS API Server service. Declaration public static string OpenEbsProvisioner Field Value Type Description String OpenEbsSnapshotOperator Identifies the neonKUBE cluster's OpenEBS Snapshot Operator service. Declaration public static string OpenEbsSnapshotOperator Field Value Type Description String OpenEbsWebhook Identifies the neonKUBE cluster's OpenEBS Snapshot Webhook service. Declaration public static string OpenEbsWebhook Field Value Type Description String Prometheus Identifies the neonKUBE cluster's Prometheus service. Declaration public static string Prometheus Field Value Type Description String PrometheusOperator Identifies the neonKUBE cluster's Prometheus Operator service. Declaration public static string PrometheusOperator Field Value Type Description String Redis Identifies the neonKUBE cluster's Redis service. Declaration public static string Redis Field Value Type Description String RedisHA Identifies the neonKUBE cluster's Redis HA service. Declaration public static string RedisHA Field Value Type Description String Reloader Identifies the neonKUBE cluster's Reloader service. Declaration public static string Reloader Field Value Type Description String Tempo Identifies the neonKUBE cluster's Tempo service. Declaration public static string Tempo Field Value Type Description String TempoAlertmanager Identifies the neonKUBE cluster's Tempo Alertmanager service. Declaration public static string TempoAlertmanager Field Value Type Description String TempoCompactor Identifies the neonKUBE cluster's Tempo Compactor service. Declaration public static string TempoCompactor Field Value Type Description String TempoDistributor Identifies the neonKUBE cluster's Tempo Distributor service. Declaration public static string TempoDistributor Field Value Type Description String TempoIngester Identifies the neonKUBE cluster's Tempo Ingester service. Declaration public static string TempoIngester Field Value Type Description String TempoOverridesExporter Identifies the neonKUBE cluster's Tempo OverridesExporter service. Declaration public static string TempoOverridesExporter Field Value Type Description String TempoQuerier Identifies the neonKUBE cluster's Tempo Querier service. Declaration public static string TempoQuerier Field Value Type Description String TempoQueryFrontend Identifies the neonKUBE cluster's Tempo Query Frontend service. Declaration public static string TempoQueryFrontend Field Value Type Description String TempoRuler Identifies the neonKUBE cluster's Tempo Alertmanager service. Declaration public static string TempoRuler Field Value Type Description String TempoStoreGateway Identifies the neonKUBE cluster's Tempo Alertmanager service. Declaration public static string TempoStoreGateway Field Value Type Description String TracesQuota Specifies the cluster default Traces quota. Declaration public string TracesQuota Field Value Type Description String Properties IsReadOnly Cluster advice is designed to be configured once during cluster setup and then be considered to be read-only thereafter. This property should be set to true after the advice is intialized to prevent it from being modified again. note This is necessary because setup is performed on multiple threads and this class is not inheritly thread-safe. This also fits with the idea that the logic behind this advice is to be centralized. Declaration public bool IsReadOnly { get; set; } Property Value Type Description Boolean Exceptions Type Condition InvalidOperationException Thrown when attempting to make the instance read/write aftyer being set to read-only. Methods AddServiceAdvice(String, KubeServiceAdvice) Adds the KubeServiceAdvice for the specified service. Declaration public void AddServiceAdvice(string serviceName, KubeServiceAdvice advice) Parameters Type Name Description String serviceName Identifies the service (one of the constants defined by this class). KubeServiceAdvice advice The KubeServiceAdvice instance for the service GetServiceAdvice(String) Returns the KubeServiceAdvice for the specified service. Declaration public KubeServiceAdvice GetServiceAdvice(string serviceName) Parameters Type Name Description String serviceName Identifies the service (one of the constants defined by this class). Returns Type Description KubeServiceAdvice The KubeServiceAdvice instance for the service. Exceptions Type Condition KeyNotFoundException Thrown when there's no advice for the service."
  },
  "neonkube/api/Neon.Kube.KubeConfig.html": {
    "href": "neonkube/api/Neon.Kube.KubeConfig.html",
    "title": "Class KubeConfig | NeonKUBE documentation",
    "keywords": "Class KubeConfig Used to manage serialization of Kubernetes kubeconfig files. These are used to manage cluster contexts on client machines: more information . Inheritance Object KubeConfig Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class KubeConfig Remarks neonKUBE client side tools like neon-cli and neonDESKTOP maintain cluster login information within Constructors KubeConfig() Default constructor. Declaration public KubeConfig() Properties ApiVersion The cluster API server protocol version (defaults to v1 ). Declaration [JsonProperty(PropertyName = \"apiVersion\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"apiVersion\", ApplyNamingConventions = false)] public string ApiVersion { get; set; } Property Value Type Description String Clusters The list of cluster configurations. Declaration [JsonProperty(PropertyName = \"clusters\", Required = Required.Always)] [YamlMember(Alias = \"clusters\", ApplyNamingConventions = false)] public List<KubeConfigCluster> Clusters { get; set; } Property Value Type Description List < KubeConfigCluster > Context Returns the current context or null . Declaration [JsonIgnore] [YamlIgnore] public KubeConfigContext Context { get; } Property Value Type Description KubeConfigContext Contexts The list of config contexts. Declaration [JsonProperty(PropertyName = \"contexts\", Required = Required.Always)] [YamlMember(Alias = \"contexts\", ApplyNamingConventions = false)] public List<KubeConfigContext> Contexts { get; set; } Property Value Type Description List < KubeConfigContext > CurrentContext The name of the current context or null when there is no current context. Declaration [JsonProperty(PropertyName = \"current-context\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"current-context\", ApplyNamingConventions = false)] public string CurrentContext { get; set; } Property Value Type Description String Kind Identifies the document type: Config . Declaration [JsonProperty(PropertyName = \"kind\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"kind\", ApplyNamingConventions = false)] public string Kind { get; set; } Property Value Type Description String Preferences The optional dictionary of preferences. Declaration [JsonProperty(PropertyName = \"preferences\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"preferences\", ApplyNamingConventions = false)] public Dictionary<string, string> Preferences { get; set; } Property Value Type Description Dictionary < String , String > Users The list of user configurations. Declaration [JsonProperty(PropertyName = \"users\", Required = Required.Always)] [YamlMember(Alias = \"users\", ApplyNamingConventions = false)] public List<KubeConfigUser> Users { get; set; } Property Value Type Description List < KubeConfigUser > Methods GetCluster(String) Returns the named neonKUBE related cluster. Declaration public KubeConfigCluster GetCluster(string name) Parameters Type Name Description String name The cluster name. Returns Type Description KubeConfigCluster The KubeConfigCluster or null . GetContext(KubeContextName) Returns the named neonKUBE related context (using a structured context name). Declaration public KubeConfigContext GetContext(KubeContextName name) Parameters Type Name Description KubeContextName name The raw context name. Returns Type Description KubeConfigContext The KubeConfigContext or null . GetContext(String) Returns the named neonKUBE related context (using a raw context name). Declaration public KubeConfigContext GetContext(string rawName) Parameters Type Name Description String rawName The raw context name. Returns Type Description KubeConfigContext The KubeConfigContext or null . GetUser(String) Returns the named user. Declaration public KubeConfigUser GetUser(string name) Parameters Type Name Description String name The user name. Returns Type Description KubeConfigUser The KubeConfigUser or null . Load() Reads and returns information loaded from the current ~/.kube/config file. Declaration public static KubeConfig Load() Returns Type Description KubeConfig The parsed KubeConfig or an empty config if the file doesn't exist. Exceptions Type Condition NeonKubeException Thrown when the current config is invalid. RemoveContext(KubeConfigContext, Boolean) Removes a neonKUBE related kubecontext if it exists. Declaration public void RemoveContext(KubeConfigContext context, bool noSave = false) Parameters Type Name Description KubeConfigContext context The context to be removed. Boolean noSave Optionally prevent context save after the change. RemoveContext(KubeContextName, Boolean) Removes a neonKUBE related kubecontext if it exists. Declaration public void RemoveContext(KubeContextName name, bool noSave = false) Parameters Type Name Description KubeContextName name The context name. Boolean noSave Optionally prevent context save after the change. Save() Persists the KubeContext along with any neonKUBE extension information to the local user folder. Declaration public void Save() SetContext(KubeConfigContext, KubeConfigCluster, KubeConfigUser, Boolean) Adds or updates a kubecontext. Declaration public void SetContext(KubeConfigContext context, KubeConfigCluster cluster, KubeConfigUser user, bool noSave = false) Parameters Type Name Description KubeConfigContext context The new context. KubeConfigCluster cluster The context cluster information. KubeConfigUser user The context user information. Boolean noSave Optionally prevent context save after the change. SetContext(String) Sets the current context. Declaration public void SetContext(string contextName = null) Parameters Type Name Description String contextName The name of the current context or null to deselect the context. Exceptions Type Condition NeonKubeException Thrown if the context does not exist. Validate() Validates the configuration and also prunes any non-neonKUBE contexts. Declaration public void Validate() Exceptions Type Condition NeonKubeException Thrown when the current config is invalid."
  },
  "neonkube/api/Neon.Kube.KubeConfigCluster.html": {
    "href": "neonkube/api/Neon.Kube.KubeConfigCluster.html",
    "title": "Class KubeConfigCluster | NeonKUBE documentation",
    "keywords": "Class KubeConfigCluster Describes a Kubernetes cluster configuration. Inheritance Object KubeConfigCluster Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class KubeConfigCluster Constructors KubeConfigCluster() Default constructor. Declaration public KubeConfigCluster() Properties Name The local nickname for the cluster. Declaration [JsonProperty(PropertyName = \"name\", Required = Required.Always)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String Properties The cluster properties. Declaration [JsonProperty(PropertyName = \"cluster\", Required = Required.Always)] [YamlMember(Alias = \"cluster\", ApplyNamingConventions = false)] public KubeConfigClusterProperties Properties { get; set; } Property Value Type Description KubeConfigClusterProperties"
  },
  "neonkube/api/Neon.Kube.KubeConfigClusterProperties.html": {
    "href": "neonkube/api/Neon.Kube.KubeConfigClusterProperties.html",
    "title": "Class KubeConfigClusterProperties | NeonKUBE documentation",
    "keywords": "Class KubeConfigClusterProperties Describes a Kubernetes cluster's properties. Inheritance Object KubeConfigClusterProperties Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class KubeConfigClusterProperties Constructors KubeConfigClusterProperties() Default constructor. Declaration public KubeConfigClusterProperties() Properties CertificateAuthorityData Optional path to the cluster certificate authority file. Declaration [JsonProperty(PropertyName = \"certificate-authority-data\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"certificate-authority-data\", ApplyNamingConventions = false)] public string CertificateAuthorityData { get; set; } Property Value Type Description String InsecureSkipTlsVerify Optionally disables TLS verification of the server. Declaration [JsonProperty(PropertyName = \"insecure-skip-tls-verify\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"insecure-skip-tls-verify\", ApplyNamingConventions = false)] public bool InsecureSkipTlsVerify { get; set; } Property Value Type Description Boolean Server Fully qualified URL to the cluster's API server. Declaration [JsonProperty(PropertyName = \"server\", Required = Required.Always)] [YamlMember(Alias = \"server\", ApplyNamingConventions = false)] public string Server { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.KubeConfigContext.html": {
    "href": "neonkube/api/Neon.Kube.KubeConfigContext.html",
    "title": "Class KubeConfigContext | NeonKUBE documentation",
    "keywords": "Class KubeConfigContext Describes a Kubernetes context. Inheritance Object KubeConfigContext Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class KubeConfigContext Constructors KubeConfigContext() Default constructor. Declaration public KubeConfigContext() KubeConfigContext(KubeContextName) Constructs a configuration from a structured name. Declaration public KubeConfigContext(KubeContextName contextName) Parameters Type Name Description KubeContextName contextName The structured context name. Properties Extension The cluster login information for the context. Declaration [JsonIgnore] [YamlIgnore] public ClusterLogin Extension { get; set; } Property Value Type Description ClusterLogin IsDesktop Indicates whether the Kubernetes context references a neon-desktop built-in cluster. Declaration [JsonIgnore] [YamlIgnore] public bool IsDesktop { get; } Property Value Type Description Boolean IsNeonKube Indicates whether the Kubernetes context references a neonKUBE cluster. Declaration [JsonIgnore] [YamlIgnore] public bool IsNeonKube { get; } Property Value Type Description Boolean Name The local nickname for the context. Declaration [JsonProperty(PropertyName = \"name\", Required = Required.Always)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String Properties The context properties. Declaration [JsonProperty(PropertyName = \"context\", Required = Required.Always)] [YamlMember(Alias = \"context\", ApplyNamingConventions = false)] public KubeConfigContextProperties Properties { get; set; } Property Value Type Description KubeConfigContextProperties"
  },
  "neonkube/api/Neon.Kube.KubeConfigContextProperties.html": {
    "href": "neonkube/api/Neon.Kube.KubeConfigContextProperties.html",
    "title": "Class KubeConfigContextProperties | NeonKUBE documentation",
    "keywords": "Class KubeConfigContextProperties Describes a Kubernetes context properties. Inheritance Object KubeConfigContextProperties Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class KubeConfigContextProperties Constructors KubeConfigContextProperties() Default constructor. Declaration public KubeConfigContextProperties() Properties Cluster The optional cluster nickname. Declaration [JsonProperty(PropertyName = \"cluster\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"cluster\", ApplyNamingConventions = false)] public string Cluster { get; set; } Property Value Type Description String Namespace The optional namespace. Declaration [JsonProperty(PropertyName = \"namespace\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"namespace\", ApplyNamingConventions = false)] public string Namespace { get; set; } Property Value Type Description String User The optional user nickname. Declaration [JsonProperty(PropertyName = \"user\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"user\", ApplyNamingConventions = false)] public string User { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.KubeConfigMapName.html": {
    "href": "neonkube/api/Neon.Kube.KubeConfigMapName.html",
    "title": "Class KubeConfigMapName | NeonKUBE documentation",
    "keywords": "Class KubeConfigMapName Defines internal neonKUBE global cluster configmap names. Inheritance Object KubeConfigMapName Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class KubeConfigMapName Fields ClusterHealth Identifes the neonKUBE configmap used to report cluster health. This configmap is located in the NeonStatus namespace and is initially created during cluster setup and is maintained by the neon-cluster-operator thereafter. Declaration public const string ClusterHealth = \"cluster-health\" Field Value Type Description String ClusterInfo Identifes the neonKUBE configmap used to report cluster info. This configmap is located in the NeonStatus namespace and is initially created during cluster setup and is maintained by the neon-cluster-operator thereafter. Declaration public const string ClusterInfo = \"cluster-info\" Field Value Type Description String ClusterLock Identifies the neonKUBE configmap used to indicate whether the cluster is considered to be locked. neon-desktop , neon-cli , and ClusterFixture use this to block operations like cluster reset , remove , pause , and stop when the cluster is locked in an attempt to avoid harmful operations on production or otherwise important clusters. This configmap is located in the NeonStatus namespace. Declaration public const string ClusterLock = \"cluster-lock\" Field Value Type Description String"
  },
  "neonkube/api/Neon.Kube.KubeConfigUser.html": {
    "href": "neonkube/api/Neon.Kube.KubeConfigUser.html",
    "title": "Class KubeConfigUser | NeonKUBE documentation",
    "keywords": "Class KubeConfigUser Describes a Kubernetes user configuration. Inheritance Object KubeConfigUser Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class KubeConfigUser Constructors KubeConfigUser() Default constructor. Declaration public KubeConfigUser() Properties Name The local nickname for the user. Declaration [JsonProperty(PropertyName = \"name\", Required = Required.Always)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String Properties The user properties. Declaration [JsonProperty(PropertyName = \"user\", Required = Required.Always)] [YamlMember(Alias = \"user\", ApplyNamingConventions = false)] public KubeConfigUserProperties Properties { get; set; } Property Value Type Description KubeConfigUserProperties"
  },
  "neonkube/api/Neon.Kube.KubeConfigUserProperties.html": {
    "href": "neonkube/api/Neon.Kube.KubeConfigUserProperties.html",
    "title": "Class KubeConfigUserProperties | NeonKUBE documentation",
    "keywords": "Class KubeConfigUserProperties Describes a Kubernetes user's credentials. Inheritance Object KubeConfigUserProperties Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class KubeConfigUserProperties Constructors KubeConfigUserProperties() Default constructor. Declaration public KubeConfigUserProperties() Properties ClientCertificateData The optional path to the client certificate (or null ). Declaration [JsonProperty(PropertyName = \"client-certificate-data\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"client-certificate-data\", ApplyNamingConventions = false)] public string ClientCertificateData { get; set; } Property Value Type Description String ClientKeyData The optional client key data. Declaration [JsonProperty(PropertyName = \"client-key-data\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"client-key-data\", ApplyNamingConventions = false)] public string ClientKeyData { get; set; } Property Value Type Description String Password The optional password (or null ). Declaration [JsonProperty(PropertyName = \"password\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"password\", ApplyNamingConventions = false)] public string Password { get; set; } Property Value Type Description String Token The optional authentication token (or null ). Declaration [JsonProperty(PropertyName = \"token\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"token\", ApplyNamingConventions = false)] public string Token { get; set; } Property Value Type Description String Username The optional username (or null ). Declaration [JsonProperty(PropertyName = \"username\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"username\", ApplyNamingConventions = false)] public string Username { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.KubeConst.html": {
    "href": "neonkube/api/Neon.Kube.KubeConst.html",
    "title": "Class KubeConst | NeonKUBE documentation",
    "keywords": "Class KubeConst Important cluster constants. Inheritance Object KubeConst Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class KubeConst Fields CitusSecretKey Identifies the secret name where the citus credentials are stored. Declaration public const string CitusSecretKey = \"citus\" Field Value Type Description String CloudSubnetEndReservedIPs The number of IP addresses reserved by cloud deployments at the end of the node subnet by the cloud provider. This typically includes the network UDP broadcast address. Declaration public const int CloudSubnetEndReservedIPs = 1 Field Value Type Description Int32 CloudSubnetStartReservedIPs The number of IP addresses reserved by cloud deployments at the beginning of the node subnet by the cloud provider and also for future neonKUBE features. This typically includes the cloud default gateway and DNS forwarding IPs as well as potential future neonKUBE features such as an integrated VPN and perhaps management VMs. Declaration public const int CloudSubnetStartReservedIPs = 10 Field Value Type Description Int32 ClusterImagesLastChecked Entry storing the last time cluster images were checked. Declaration public const string ClusterImagesLastChecked = \"cluster-images-last-checked\" Field Value Type Description String ClusterLogName Specifies the file name to use for the global cluster (non-node) log file. Declaration public const string ClusterLogName = \"cluster.log\" Field Value Type Description String ClusterNodeDomain Returns the domain used to configure cluster DNS names that can be resolved on the cluster nodes to access internal Kubernetes services like the Harbor registry etc. Declaration public const string ClusterNodeDomain = \"neon.local\" Field Value Type Description String ClusterRegistryProjectName Returns the Harbor Project name. Declaration public const string ClusterRegistryProjectName = \"neon-internal\" Field Value Type Description String CrioSocketPath The CIR-O socket. Declaration public const string CrioSocketPath = \"/var/run/crio/crio.sock\" Field Value Type Description String DefaultPodSubnet Default subnet for Kubernetes pods. Declaration public const string DefaultPodSubnet = \"10.254.0.0/16\" Field Value Type Description String DefaultServiceSubnet Default subnet for Kubernetes services. Declaration public const string DefaultServiceSubnet = \"10.253.0.0/16\" Field Value Type Description String DesktopClusterDomain The fixed domain for all desktop clusters. Declaration public const string DesktopClusterDomain = \"desktop.neoncluster.io\" Field Value Type Description String DexSecret Identifies the secret containing Dex credentials. Declaration public const string DexSecret = \"neon-sso-dex\" Field Value Type Description String EtcHostsSectionName $/etc/hosts section name used by neonKUBE applications for persisting DNS host entries via ModifyLocalHosts(String, Dictionary<String, IPAddress>) . Declaration public const string EtcHostsSectionName = \"Added by NEONKUBE\" Field Value Type Description String GrafanaAdminSecret Identifies the the secret containing admin credentials for Grafana. Declaration public const string GrafanaAdminSecret = \"grafana-admin-credentials\" Field Value Type Description String GrafanaSecret Identifies the the secret containing credentials used by Grafana. Declaration public const string GrafanaSecret = \"grafana-secret\" Field Value Type Description String HarborCrioUser User name used to log CRI-O on the cluster nodes into the local Harbor registry via podman . Declaration public const string HarborCrioUser = \"root\" Field Value Type Description String HyperVInternalSwitchName The name used by the HyperV hosting manager for creating the internal virtual switch where the neonDESKTOP built-in cluster as well as user-defined internal clusters will be attached. Declaration public const string HyperVInternalSwitchName = \"neon-internal\" Field Value Type Description String ImagePrebuiltDesktopPath Path to the node file indicating whether the node hosts a pre-built desktop cluster. Declaration public const string ImagePrebuiltDesktopPath = \"/etc/neonkube/prebuilt-desktop\" Field Value Type Description String ImageTypePath Path to the node image file holding the image type defined by KubeImageType . Declaration public const string ImageTypePath = \"/etc/neonkube/image-type\" Field Value Type Description String ImageVersionPath Path to the node file holding the neonKUBE version. Declaration public const string ImageVersionPath = \"/etc/neonkube/image-version\" Field Value Type Description String KubeGitHubRepoUrl Returns the URL to the neonKUBE GitHub repository. Declaration public const string KubeGitHubRepoUrl = \"https://github.com/nforgeio/neonKUBE\" Field Value Type Description String KubeHelpUrl Returns the URL to th neonKUBE help site. Declaration public const string KubeHelpUrl = \"https://github.com/nforgeio/neonKUBE\" Field Value Type Description String LocalClusterRegistry Hostname used to reference the local Harbor registry within the cluster. Declaration public const string LocalClusterRegistry = \"registry.neon.local/neonkube\" Field Value Type Description String LocalClusterRegistryHostName Hostname used to reference the local Harbor registry within the cluster. Declaration public const string LocalClusterRegistryHostName = \"registry.neon.local\" Field Value Type Description String LocalClusterRegistryProject The local cluster registry project. Declaration public const string LocalClusterRegistryProject = \"neonkube\" Field Value Type Description String LocalStorageClassName The default name for the local k8s.Models.V1StorageClass Declaration public const string LocalStorageClassName = \"local-storage\" Field Value Type Description String LocalVolumePath The default path for the LocalStorageClassName note This is temporary, once Kubernetes supports dynamic provisioning of local storage volumes, we'll use that instead. Declaration public const string LocalVolumePath = \"/var/lib/neonkube/volumes\" Field Value Type Description String MaxControlNodes The maximum number of cluster control-plane nodes. Declaration public const int MaxControlNodes = 5 Field Value Type Description Int32 MaxJitter Timespan used to introduce some random jitter before an operation is performed. This is typically used when it's possible that a large number of entities will tend to perform an operation at nearly the same time (e.g. when a message signalling that an operation should be performed is broadcast to a large number of listeners. Components can pass this to PseudoRandomTimespan(TimeSpan) to obtain a random delay timespan. Declaration public static readonly TimeSpan MaxJitter Field Value Type Description TimeSpan MaxLabelLength The maximum label length allowed. Declaration public const byte MaxLabelLength = 63 Field Value Type Description Byte MinControlNodeCores The minimum number of cores required by control-plane nodes. Declaration public const int MinControlNodeCores = 4 Field Value Type Description Int32 MinControlNodeNics The minimum required network interface cards for control-plane nodes. Declaration public const int MinControlNodeNics = 1 Field Value Type Description Int32 MinControlNodeRamMiB The minimum RAM (MiB) required for control-plane nodes. Declaration public const int MinControlNodeRamMiB = 8192 Field Value Type Description Int32 MinimumOsDiskAfterMinio The minimum amount of OS disk on a cluster node after accounting for Minio volumes. Declaration public const string MinimumOsDiskAfterMinio = \"40 GiB\" Field Value Type Description String MinNodeDiskSizeGiB The minimum supported cluster node disk size in GiB. note This size should match the size of the virtual disks created the base Hyper-V and XenServer Ubuntu images. Declaration public const int MinNodeDiskSizeGiB = 32 Field Value Type Description Int32 MinWorkerCores The minimum number of cores required by worker nodes. Declaration public const int MinWorkerCores = 4 Field Value Type Description Int32 MinWorkerNics The minimum required network interface cards for worker nodes. Declaration public const int MinWorkerNics = 1 Field Value Type Description Int32 MinWorkerRamMiB The minimum RAM (MiB) required for worker nodes. Declaration public const int MinWorkerRamMiB = 8192 Field Value Type Description Int32 MinXenServerVersion The minimum supported XenServer/XCP-ng hypervisor host version. Declaration public static readonly SemanticVersion MinXenServerVersion Field Value Type Description SemanticVersion NeonClusterDomain The neonKUBE domain used to host neonKUBE cluster DNS records. Declaration public const string NeonClusterDomain = \"neoncluster.io\" Field Value Type Description String NeonClusterOperatorDatabase Identifies the neon-system-db superuser database. Declaration public const string NeonClusterOperatorDatabase = \"neon_cluster_operator\" Field Value Type Description String NeonDesktopClusterName The built-in neon-desktop cluster name. Declaration public const string NeonDesktopClusterName = \"neon-desktop\" Field Value Type Description String NeonDesktopContextName Identifies the Kubernetes context name for the neon-desktop built-in cluster. Declaration public const string NeonDesktopContextName = \"root@neon-desktop\" Field Value Type Description String NeonDesktopHyperVBuiltInVmName Identifies the Hyper-V virtual machine used to host the neonDESKTOP built-in cluster. Declaration public const string NeonDesktopHyperVBuiltInVmName = \"neon-desktop\" Field Value Type Description String NeonJobSetupGrafana Identifies the Kubernetes Job that is deployed to setup Grafana. Declaration public const string NeonJobSetupGrafana = \"setup-grafana\" Field Value Type Description String NeonJobSetupHarbor Identifies the Kubernetes Job that is deployed to setup Harbor. Declaration public const string NeonJobSetupHarbor = \"setup-harbor\" Field Value Type Description String NeonKubeDevRegistry Identifies the development neonKUBE container image registry. Declaration public const string NeonKubeDevRegistry = \"ghcr.io/neonkube-dev\" Field Value Type Description String NeonKubeImageTag The container image tag used to reference cluster container images tagged our prefix and the cluster version number. Declaration public const string NeonKubeImageTag = \"neonkube-0.8.7-alpha\" Field Value Type Description String NeonKubeProdRegistry Identifies the production neonKUBE container image registry. Declaration public const string NeonKubeProdRegistry = \"ghcr.io/neonkube-release\" Field Value Type Description String NeonKubeResourceGroup Identifies the Kubernetes group where neonKUBE custom resources will be located. Declaration public const string NeonKubeResourceGroup = \"neonkube.io\" Field Value Type Description String NeonSsoOauth2Proxy Identifies the secret containing Neon SSO Oauth2 Proxy credentials. Declaration public const string NeonSsoOauth2Proxy = \"neon-sso-oauth2-proxy\" Field Value Type Description String NeonSsoSessionProxySecret Identifies the secret containing Neon SSO Session Proxy credentials. Declaration public const string NeonSsoSessionProxySecret = \"neon-sso-session-proxy\" Field Value Type Description String NeonSystemDbAdminSecret Identifies the secret containing the password for the NeonSystemDbAdminUser . Declaration public const string NeonSystemDbAdminSecret = \"neon-admin.neon-system-db.credentials.postgresql\" Field Value Type Description String NeonSystemDbAdminUser Identifies the username of the neon-system-db superuser. Declaration public const string NeonSystemDbAdminUser = \"neon_admin\" Field Value Type Description String NeonSystemDbGrafanaDatabase Identifies the database name to be used by Grafana. Declaration public const string NeonSystemDbGrafanaDatabase = \"grafana\" Field Value Type Description String NeonSystemDbHarborPrefix Identifies the prefix to be used by the Harbor Operator when creating Harbor related databases in neon-system-db. Declaration public const string NeonSystemDbHarborPrefix = \"harbor\" Field Value Type Description String NeonSystemDbServiceSecret Identifies the secret containing the password for the NeonSystemDbServiceUser . Declaration public const string NeonSystemDbServiceSecret = \"neon-service.neon-system-db.credentials.postgresql\" Field Value Type Description String NeonSystemDbServiceUser Identifies the neon-system-db username used by neon services. Declaration public const string NeonSystemDbServiceUser = \"neon_service\" Field Value Type Description String NodeImagePartSize The maximum size in bytes of a node image part published as a GitHub release. Declaration public const long NodeImagePartSize = 104857600L Field Value Type Description Int64 RegistrySecretKey Identifies the secret name where the harbor credentials are stored. Declaration public const string RegistrySecretKey = \"registry\" Field Value Type Description String RegistryTokenCertSecretKey Identifies the secret name where the harbor token cert is stored. Declaration public const string RegistryTokenCertSecretKey = \"registry-token-cert\" Field Value Type Description String RootDesktopPassword The fixed SSO password for desktop clusters. note This isn't really a security risk because the desktop cluster cannot be reached from outside the computer because the cluster IP address is not routable. Declaration public const string RootDesktopPassword = \"root\" Field Value Type Description String RootUser The root Kubernetes context username for provisioned clusters. Declaration public const string RootUser = \"root\" Field Value Type Description String SysAdminGID The default host machine sysadmin group ID. Declaration public const int SysAdminGID = 1000 Field Value Type Description Int32 SysAdminGroup The default host machine sysadmin group. Declaration public const string SysAdminGroup = \"sysadmin\" Field Value Type Description String SysAdminPassword The default sysadmin account password baked into neonKUBE base images. This will generally be changed to a secure password during cluster provisioning. Declaration public const string SysAdminPassword = \"sysadmin0000\" Field Value Type Description String SysAdminUID The default host machine sysadmin user ID. Declaration public const int SysAdminUID = 1000 Field Value Type Description Int32 SysAdminUser The default host machine sysadmin username. Declaration public const string SysAdminUser = \"sysadmin\" Field Value Type Description String Properties NeonKubeBranchRegistry Returns the appropriate public container neonKUBE registry to be used for the git branch the assembly was built from. This returns NeonKubeProdRegistry for release branches and NeonKubeDevRegistry for all other branches. Declaration public static string NeonKubeBranchRegistry { get; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.KubeContainerRegistry.html": {
    "href": "neonkube/api/Neon.Kube.KubeContainerRegistry.html",
    "title": "Class KubeContainerRegistry | NeonKUBE documentation",
    "keywords": "Class KubeContainerRegistry Describes the location of the neonKUBE related container registries. Inheritance Object KubeContainerRegistry Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class KubeContainerRegistry Remarks neonKUBE uses four container registries for testing and deployment purposes. MainProdRegistry and MainDevRegistry hold the container images that will be used for deploying clusters via prepositioning the images on the cluster VM images. The images in these cluster will be tagged like neonkube-0.1.0-alpha , specifying the cluster version with MainProdRegistry holding the released production images and MainDevRegistry holding intermediate development images. The BaseProdRegistry and BaseDevRegistry registries are used the base and layer images used for the creating the main container images as well as for deploying clusters without prepositioning images (typically while working on setting up new cluster features). The MainBranchRegistry and BaseBranchRegistry properties return the corresponding registry to use based on the the git branch the code was built on. These return the production registries for release branches whose names start with release- (by convention) otherwise the development registry will be returned. Fields BaseDevRegistry Identifies the development NEONFORGE container image registry. This is a public registry that holds non-cluster setup related images during development between releases. Declaration public const string BaseDevRegistry = \"ghcr.io/neonkube-base-dev\" Field Value Type Description String BaseProdRegistry Identifies the production NEONFORGE container image registry. This is a public registry that holds non-cluster setup related images. Declaration public const string BaseProdRegistry = \"ghcr.io/neonkube-base\" Field Value Type Description String MainDevRegistry Identifies the development NEONFORGE container image registry. This is a public registry that holds non-cluster setup related images during development between releases. Declaration public const string MainDevRegistry = \"ghcr.io/neonkube-dev\" Field Value Type Description String MainProdRegistry Identifies the production NEONFORGE container image registry. This is a public registry that holds non-cluster setup related images. Declaration public const string MainProdRegistry = \"ghcr.io/neonkube\" Field Value Type Description String Properties BaseBranchRegistry Returns the appropriate public container NEONFORGE registry to be used for the git branch the assembly was built from. This returns MainProdRegistry for release branches and MainDevRegistry for all other branches. Declaration public static string BaseBranchRegistry { get; } Property Value Type Description String MainBranchRegistry Returns the appropriate public container NEONFORGE registry to be used for the git branch the assembly was built from. This returns MainProdRegistry for release branches and MainDevRegistry for all other branches. Declaration public static string MainBranchRegistry { get; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.KubeContextName.html": {
    "href": "neonkube/api/Neon.Kube.KubeContextName.html",
    "title": "Class KubeContextName | NeonKUBE documentation",
    "keywords": "Class KubeContextName Handles the parsing of a Kubernetes context name which by convention encodes the user, cluster, and optional namespace as a string. Inheritance Object KubeContextName Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class KubeContextName Remarks neonKUBE encodes context names like: USER &quot;@\" CLUSTER [ \"/\" NAMESPACE ] k where USER is the username, CLUSTER identifies the cluster and NAMESPACE optionally identifies the Kubernetes namespace (which defaults to default when not specified). Constructors KubeContextName(String, String, String) Parameterized constructor. Declaration public KubeContextName(string username, string cluster, string kubeNamespace = \"default\") Parameters Type Name Description String username The username. This may be null for non-neonKUBE cluster logins. String cluster The cluster name. String kubeNamespace Optionally specifies the namespace (defaults to \"default\" ). Remarks note The username, cluster, and namespace will be converted to lowercase. Properties Cluster Returns the cluster name. Declaration public string Cluster { get; } Property Value Type Description String IsNeonKube Indicates whether this is a neonKUBE context name or a standard one. neonKUBE contexts include a user name before the &quot;@\" symbol. Declaration public bool IsNeonKube { get; } Property Value Type Description Boolean Namespace Returns the namespace or default . Declaration public string Namespace { get; } Property Value Type Description String User Returns the username if present, otherwise null . note We currently assume that only contexts with a User are neonKUBE clusters. Declaration public string User { get; } Property Value Type Description String Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() Parse(String) Parses a Kubernetes context name. Declaration public static KubeContextName Parse(string input) Parameters Type Name Description String input The input text. Returns Type Description KubeContextName The parsed name. Remarks neonKUBE supports a context name format that includes a user name like: USER &quot;@\" CLUSTER [ \"/\" NAMESPACE ] We assume that contexts including an &quot;@\" are associated with a neonKUBE cluster and use this to link to additional login information. We can also parse context names without an &quot;@\" . The parsed User property will be set to null in this case. CLUSTER [ \"/\" NAMESPACE ] note The User , Cluster , and Namespace properties will be converted to lowercase. Exceptions Type Condition FormatException Thrown if the name is not valid. ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators Equality(KubeContextName, KubeContextName) Compares KubeContextName for equality. Declaration public static bool operator ==(KubeContextName name1, KubeContextName name2) Parameters Type Name Description KubeContextName name1 Name 1 KubeContextName name2 Name 2 Returns Type Description Boolean true if the names are equal. Explicit(KubeContextName to String) Explicitly casts a KubeContextName into a string . Declaration public static explicit operator string (KubeContextName name) Parameters Type Name Description KubeContextName name The context name or null . Returns Type Description String The converted string. Explicit(String to KubeContextName) Explicitly casts a string into a KubeContextName . Declaration public static explicit operator KubeContextName(string name) Parameters Type Name Description String name The context name or null . Returns Type Description KubeContextName The converted context name. Inequality(KubeContextName, KubeContextName) Compares KubeContextName for inequality. Declaration public static bool operator !=(KubeContextName name1, KubeContextName name2) Parameters Type Name Description KubeContextName name1 Name 1 KubeContextName name2 Name 2 Returns Type Description Boolean true if the names are not equal."
  },
  "neonkube/api/Neon.Kube.KubeDiagnostics.html": {
    "href": "neonkube/api/Neon.Kube.KubeDiagnostics.html",
    "title": "Class KubeDiagnostics | NeonKUBE documentation",
    "keywords": "Class KubeDiagnostics neonKUBE cluster diagnostics. Inheritance Object KubeDiagnostics Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class KubeDiagnostics Methods CheckControlNode(NodeSshProxy<NodeDefinition>, ClusterDefinition) Verifies that a cluster control-plane node is healthy. Declaration public static void CheckControlNode(NodeSshProxy<NodeDefinition> node, ClusterDefinition clusterDefinition) Parameters Type Name Description NodeSshProxy < NodeDefinition > node The control-plane node. ClusterDefinition clusterDefinition The cluster definition. CheckWorker(NodeSshProxy<NodeDefinition>, ClusterDefinition) Verifies that a cluster worker node is healthy. Declaration public static void CheckWorker(NodeSshProxy<NodeDefinition> node, ClusterDefinition clusterDefinition) Parameters Type Name Description NodeSshProxy < NodeDefinition > node The server node. ClusterDefinition clusterDefinition The cluster definition."
  },
  "neonkube/api/Neon.Kube.KubeDownloads.html": {
    "href": "neonkube/api/Neon.Kube.KubeDownloads.html",
    "title": "Class KubeDownloads | NeonKUBE documentation",
    "keywords": "Class KubeDownloads Kubernetes related component download URIs. Inheritance Object KubeDownloads Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class KubeDownloads Fields HelmLinuxUri The Helm binary URL for Linux. Declaration public static readonly string HelmLinuxUri Field Value Type Description String HelmOsxUri The Helm binary URL for OS/X. Declaration public static readonly string HelmOsxUri Field Value Type Description String HelmWindowsUri The Helm binary URL for Windows. Declaration public static readonly string HelmWindowsUri Field Value Type Description String NeonClusterManifestUri The URI for the cluster manifest ( ClusterManifest ) JSON file for the current neonKUBE cluster version. Declaration public const string NeonClusterManifestUri = \"https://neonkube-stage.s3.us-west-2.amazonaws.com/manifests/neonkube-0.8.7-alpha.json\" Field Value Type Description String NeonKubeReleaseBucketUri The URI for the public AWS S3 bucket for public neonKUBE releases Declaration public const string NeonKubeReleaseBucketUri = \"https://neonkube-release.s3.us-west-2.amazonaws.com\" Field Value Type Description String NeonKubeStageBucketUri The URI for the public AWS S3 bucket for public neonKUBE releases Declaration public const string NeonKubeStageBucketUri = \"https://neonkube-stage.s3.us-west-2.amazonaws.com\" Field Value Type Description String PrivateNodeImagesRepo The GitHub repository path where pre-release node images will be published. Declaration public const string PrivateNodeImagesRepo = \"nforgeio/neonKUBE-images-dev\" Field Value Type Description String PublicNodeImageRepo The GitHub repository path where public node images will be published. Declaration public const string PublicNodeImageRepo = \"nforgeio/neonKUBE-images\" Field Value Type Description String Methods GetDesktopImageUriAsync(HostingEnvironment, CpuArchitecture, String) Returns the URI of the download manifest for a neonKUBE desktop image. Declaration public static async Task<string> GetDesktopImageUriAsync(HostingEnvironment hostingEnvironment, CpuArchitecture architecture = CpuArchitecture.amd64, string stageBranch = null) Parameters Type Name Description HostingEnvironment hostingEnvironment Identifies the hosting environment. CpuArchitecture architecture Specifies the target CPU architecture. String stageBranch To obtain the URI for a staged desktop image, pass this as the name of the branch from which neonKUBE libraries were built. Returns Type Description Task < String > The action result. Remarks When stageBranch is null , the URI for the published node image will be returned. Otherwise, stageBranch should be passed as the name of the branch from which the Neon.Kube libraries were built. In this case, this method will return a URI to the staged desktop image also build from that branch. For non-release branches, this method will append a dot and the branch name to NeonKube and include that in the URI. This allows us to have multiple development versions of any given image for development and testing purposes. For release branches, the URI returned will reference the staged desktop image including the NeonKube without any branch part. note Release branch names always start with: \"release-\" GetNeonClusterManifestUri(String) Returns the URI for the cluster manifest for a specific neonKUBE version. Declaration public static string GetNeonClusterManifestUri(string version) Parameters Type Name Description String version The neonKUBE version. Returns Type Description String The manifest URI. GetNodeImageUriAsync(HostingEnvironment, String, CpuArchitecture, String) Returns the URI of the download manifest for a neonKUBE node image. Declaration public static async Task<string> GetNodeImageUriAsync(HostingEnvironment hostingEnvironment, string version, CpuArchitecture architecture = CpuArchitecture.amd64, string stageBranch = null) Parameters Type Name Description HostingEnvironment hostingEnvironment Identifies the hosting environment. String version Specifies the neonKUBE version. CpuArchitecture architecture Specifies the target CPU architecture. String stageBranch To obtain the URI for a staged node image, pass this as the name of the branch from which neonKUBE libraries were built. Returns Type Description Task < String > The action result. Remarks When stageBranch is null , the URI for the published node image will be returned. Otherwise, stageBranch should be passed as the name of the branch from which the Neon.Kube libraries were built. In this case, this method will return a URI to the staged node image also build from that branch. For non-release branches, this method will append a dot and the branch name to NeonKube and include that in the URI. This allows us to have multiple development versions of any given image for development and testing purposes. For release branches, the URI returned will reference the staged node image including the NeonKube without any branch part. note Release branch names always start with: \"release-\""
  },
  "neonkube/api/Neon.Kube.KubeEnv.html": {
    "href": "neonkube/api/Neon.Kube.KubeEnv.html",
    "title": "Class KubeEnv | NeonKUBE documentation",
    "keywords": "Class KubeEnv Defines the neonKUBE related environment variables as well as properties that access them. Inheritance Object KubeEnv Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class KubeEnv Fields DisableTelemetryVariable Environment variable used to disable telemetry from neonKUBE client applications. The supported values are true or false . Declaration public const string DisableTelemetryVariable = \"NEONKUBE_DISABLE_TELEMETRY\" Field Value Type Description String HeadendUriVariable Environment variable used by developers to redirect cloent application headend service requests for testing purposes. Declaration public const string HeadendUriVariable = \"NEONKUBE_HEADEND_URI\" Field Value Type Description String TelemetryUriVariable Environment variable used by developers to redirect client application telemetry to a non-production cluster for testing purposes. Declaration public const string TelemetryUriVariable = \"NEONKUBE_TELEMETRY_URI\" Field Value Type Description String Properties HeadendUri Returns the URI neonKUBE related headend services. This defaults to https://headend.neoncloud.io but can be modified bhy developers for testing purposes by setting the NEONKUBE_HEADEND_URI environment variable. Declaration public static Uri HeadendUri { get; } Property Value Type Description Uri IsTelemetryDisabled Determines whether the user has disabled Neon telemetry by the presence of the NEONKUBE_DISABLE_TELEMETRY=true environment variable. Declaration public static bool IsTelemetryDisabled { get; set; } Property Value Type Description Boolean TelemetryUri Returns the OTEL Collector endpoint URI where neonKUBE related clients should direct their telemetry. This defaults to https://telemetry.neoncloud.io but can be modified by developers for testing purposes by setting the NEONKUBE_TELEMETRY_URI environment variable. Declaration public static Uri TelemetryUri { get; } Property Value Type Description Uri"
  },
  "neonkube/api/Neon.Kube.KubeFileDetails.html": {
    "href": "neonkube/api/Neon.Kube.KubeFileDetails.html",
    "title": "Class KubeFileDetails | NeonKUBE documentation",
    "keywords": "Class KubeFileDetails Holds the contents and permissions for a downloaded Kubernetes text file. Inheritance Object KubeFileDetails Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class KubeFileDetails Constructors KubeFileDetails() Default constructor. Declaration public KubeFileDetails() KubeFileDetails(String, String, String) Parameterized constructor. Declaration public KubeFileDetails(string text, string permissions = \"600\", string owner = \"root:root\") Parameters Type Name Description String text The file contexts. String permissions Optional file permissions (defaults to 600 ). String owner Optional file owner (defaults to root:root ). Properties Owner The file owner. Declaration [JsonProperty(PropertyName = \"Owner\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"owner\", ApplyNamingConventions = false)] public string Owner { get; set; } Property Value Type Description String Permissions The file permissions. Declaration [JsonProperty(PropertyName = \"Permissions\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"permissions\", ApplyNamingConventions = false)] public string Permissions { get; set; } Property Value Type Description String Text The file text. Declaration [JsonProperty(PropertyName = \"Text\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"text\", ScalarStyle = ScalarStyle.Literal, ApplyNamingConventions = false)] public string Text { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.KubeHelper.html": {
    "href": "neonkube/api/Neon.Kube.KubeHelper.html",
    "title": "Class KubeHelper | NeonKUBE documentation",
    "keywords": "Class KubeHelper cluster related utilties. Inheritance Object KubeHelper Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class KubeHelper Fields CurlOptions CURL command common options. Declaration public const string CurlOptions = \"-4fsSL --retry 10 --retry-delay 30 --max-redirs 10\" Field Value Type Description String Properties CacheFolder Returns the path the folder containing cached files for various environments. Declaration public static string CacheFolder { get; } Property Value Type Description String The folder path. ClientConfig Accesses the neonDESKTOP client configuration. Declaration public static KubeClientConfig ClientConfig { get; set; } Property Value Type Description KubeClientConfig ClientId Returns a unique ID for the client installation. This used for identifying the client for logs and traces so we can correlate problems specific users are seeing. note This is persisted to: ~/.neonkube/desktop/client-id Declaration public static Guid ClientId { get; } Property Value Type Description Guid Config Returns the user's current Config . Declaration public static KubeConfig Config { get; } Property Value Type Description KubeConfig CurrentContext Returns the CurrentContext for the connected cluster or null when there is no current context. Declaration public static KubeConfigContext CurrentContext { get; } Property Value Type Description KubeConfigContext CurrentContextName Returns the current context's CurrentContextName or null if there's no current context. Declaration public static KubeContextName CurrentContextName { get; } Property Value Type Description KubeContextName DashboardStateFolder Creates a new folder for holding neonDESKTOP dashboard browser state if it doesn't exist and returns its path. Declaration public static string DashboardStateFolder { get; } Property Value Type Description String Path to the folder. DesktopCommonFolder Returns the path to the global neonDESKTOP program data folder. This is used for information to be shared across all users as well as between the user programs and the Neon Desktop Service. note All users will have read/write access to files in this folder. Declaration public static string DesktopCommonFolder { get; } Property Value Type Description String DesktopFolder Returns the path to the neon-desktop state folder. Declaration public static string DesktopFolder { get; } Property Value Type Description String DesktopHypervFolder Returns path to the neonDESKTOP Hyper-V state folder. Declaration public static string DesktopHypervFolder { get; } Property Value Type Description String DesktopLogFolder Returns path to the neonDESKTOP log folder. Declaration public static string DesktopLogFolder { get; } Property Value Type Description String HostPlatform Returns the KubeClientPlatform for the current workstation. Declaration public static KubeClientPlatform HostPlatform { get; } Property Value Type Description KubeClientPlatform InstallFolder Returns the path to the neon installation folder. This is where the either neon-cli or neon-desktop are installed. This is used to determine where tools like pwsh and ssh-keygen are located. Declaration public static string InstallFolder { get; } Property Value Type Description String Remarks One of neon-cli or neon-desktop are allowed to be installed on a user's workstation and the NEON_INSTALL_FOLDER environment variable will be set during installation to point to the program installation folder. This folder will be structured like for a neon-cli only installation: C:\\Program Files\\NEONFORGE\\neon-cli\\ neon\\ # neon-cli binaries powershell\\ # Powershell 7.x ssh\\ # SSH related tools and this for neon-desktop (which includes neon-cli ): C:\\Program Files\\NEONFORGE\\neon-desktop\\ desktop\\ # neon-desktop binaries neon\\ # neon-cli binaries powershell\\ # Powershell 7.x ssh\\ # SSH related tools IsBuiltinCluster Returns true if the current cluster is the neon-desktop built-in cluster. Declaration public static bool IsBuiltinCluster { get; } Property Value Type Description Boolean IsRelease Returns true if the current assembly was built from the production PROD source code branch. Declaration public static bool IsRelease { get; } Property Value Type Description Boolean KubeConfigPath Returns the path to the Kubernetes configuration file. Declaration public static string KubeConfigPath { get; } Property Value Type Description String LogDetailsFolder Returns the default directory path where neon-cli cluster details will be written. Declaration public static string LogDetailsFolder { get; } Property Value Type Description String The folder path. LogFolder Returns the default directory path where neon-cli logs will be written. Declaration public static string LogFolder { get; } Property Value Type Description String The folder path. LoginsFolder Returns the path the folder containing cluster login files, creating the folder if it doesn't already exist. Declaration public static string LoginsFolder { get; } Property Value Type Description String The folder path. Remarks This folder will exist on developer/operator workstations that have used the neon-cli to deploy and manage clusters. Each known cluster will have a JSON file named NAME .context.json holding the serialized ClusterLogin information for the cluster, where NAME maps to a cluster configuration name within the kubeconfig file. NeonKubeUserFolder Returns the path the folder holding the user specific cluster logins and other files. Declaration public static string NeonKubeUserFolder { get; } Property Value Type Description String The folder path. NodeImageFolder Returns the path to the current user's cluster virtual machine node image cache, creating the directory if it doesn't already exist. Declaration public static string NodeImageFolder { get; } Property Value Type Description String The path to the cluster setup folder. OpenSshConfig Returns the OpenSSH configuration file used for cluster nodes. Declaration public static string OpenSshConfig { get; } Property Value Type Description String PasswordsFolder Returns path to the folder holding the encryption passwords. Declaration public static string PasswordsFolder { get; } Property Value Type Description String The folder path. PwshPath Returns the path to the Powershell Core executable to be used. This will first examine the NEON_INSTALL_FOLDER environment variable to see if the installed version of Powershell Core should be used, otherwise it will simply return pwsh.exe so that the PATH will be searched. Declaration public static string PwshPath { get; } Property Value Type Description String Resources Returns the IStaticDirectory for the assembly's resources. Declaration public static IStaticDirectory Resources { get; } Property Value Type Description IStaticDirectory RunFolder Returns the directory path where the [neon run CMD ...] will copy secrets and run the command. Declaration public static string RunFolder { get; } Property Value Type Description String The folder path. StandardNeonKubeFolder Returns the path to the current user's .neonkube folder. Declaration public static string StandardNeonKubeFolder { get; } Property Value Type Description String TelemetryTags Returns the tags to be included in all logs and root activity traces. Declaration public static IEnumerable<KeyValuePair<string, object>> TelemetryTags { get; } Property Value Type Description IEnumerable < KeyValuePair < String , Object >> TempFolder Returns the path the user specific neonKUBE temporary folder, creating the folder if it doesn't already exist. Declaration public static string TempFolder { get; } Property Value Type Description String The folder path. Remarks This folder will exist on developer/operator workstations that have used the neon-cli to deploy and manage clusters. ToolsFolder Returns the path the folder containing kubernetes related tools, creating the folder if it doesn't already exist. Declaration public static string ToolsFolder { get; } Property Value Type Description String The folder path. UserSshFolder Returns the path to the .ssh folder within user's home folder. Declaration public static string UserSshFolder { get; } Property Value Type Description String WinDesktopServiceSocketPath k Returns the path to the Windows Desktop Service Unix domain socket. note The Neon Windows Desktop Service runs in the background for all users so the socket will be located within the Windows program data folder. Declaration public static string WinDesktopServiceSocketPath { get; } Property Value Type Description String Methods CheckName(String) Determines whether a name is a valid Kubernetes name. contain no more than 253 characters contain only lowercase alphanumeric characters, '-' or '.' start with an alphanumeric character end with an alphanumeric character Declaration public static void CheckName(string name) Parameters Type Name Description String name The name to check. Exceptions Type Condition ArgumentNullException Thrown for null or empty names. FormatException Thrown for invalid names. ClearDashboardStateFolder() Clears the contents of the dashboard state folder. Declaration public static void ClearDashboardStateFolder() CreateIsoFile(String, String, String) Packages the files within a folder into an ISO file. note This requires Powershell to be installed and this will favor using the version of Powershell installed along with the neon-cli, if present. Declaration public static void CreateIsoFile(string inputFolder, string isoPath, string label = null) Parameters Type Name Description String inputFolder Path to the input folder. String isoPath Path to the output ISO file. String label Optionally specifies a volume label. Exceptions Type Condition ExecuteException Thrown if the operation failed. CreateKubeObject<T>(String) Constructs an initialized Kubernetes object of a specific type. Declaration public static T CreateKubeObject<T>(string name) where T : IKubernetesObject, IMetadata<V1ObjectMeta>, new() Parameters Type Name Description String name Specifies the object name. Returns Type Description T The new T . Type Parameters Name Description T The Kubernetes object type. Remarks Unfortunately, the default constructors for objects like k8s.Models.V1ConfigMap do not initialize the k8s.IKubernetesObject.ApiVersion and k8s.IKubernetesObject.Kind and properties even though these values will be the same for all instances of each object type. (I assume that Microsoft doesn't do this as an optimization that avoids initializing these properties and then doing that again when deserializing responses from the API server. This method constructs the request object and then configures its k8s.IKubernetesObject.ApiVersion and k8s.IKubernetesObject.Kind properties by reflecting T and using the constant KubeGroup , KubeApiVersion and KubeKind values. This is very convenient but will be somwehat slower than setting these values explicitly but is probably worth the cost in most situations because Kubernetes objects are typically read much more often than created. note This method requires that T define string KubeGroup KubeApiVersion and KubeKind constants that return the correct values for the type. Exceptions Type Condition NotSupportedException Thrown when T does not define define string KubeGroup , KubeApiVersion and KubeKind constants. CreateNeonInitIso(ClusterDefinition, NodeDefinition, Int32, String) Creates an ISO file containing the neon-init.sh script that will be used for confguring the node on first boot. This includes disabling the APT package update services, optionally setting a secure password for the sysadmin account, and configuring the network interface with a static IP address. This override has obtains network settings from a ClusterDefinition and NodeDefinition . Declaration public static TempFile CreateNeonInitIso(ClusterDefinition clusterDefinition, NodeDefinition nodeDefinition, int nodeMtu = 0, string newPassword = null) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. NodeDefinition nodeDefinition The node definition. Int32 nodeMtu Optionally specifies the MTU to be configured for the node's network interface. Pass 0 to configure DefaultMTU or a value between 512-9000 . String newPassword Optionally specifies the new SSH password to be configured on the node. Returns Type Description TempFile A TempFile that references the generated ISO file. Remarks The hosting manager will call this for each node being prepared and then insert the ISO into the node VM's DVD/CD drive before booting the node for the first time. The neon-init service configured on the corresponding node templates will look for this DVD and script and execute it early during the node boot process. The ISO file reference is returned as a TempFile . The caller should call Dispose() when it's done with the file to ensure that it is deleted. CreateNeonInitIso(String, String, String, IEnumerable<String>, Int32, String) Creates an ISO file containing the neon-init.sh script that will be used for confguring the node on first boot. This includes disabling the APT package update services, optionally setting a secure password for the sysadmin account, and configuring the network interface with a static IP address. This override has explict parameters for configuring the network. Declaration public static TempFile CreateNeonInitIso(string address, string subnet, string gateway, IEnumerable<string> nameServers, int nodeMtu = 0, string newPassword = null) Parameters Type Name Description String address The IP address to be assigned the the VM. String subnet The network subnet to be configured. String gateway The network gateway to be configured. IEnumerable < String > nameServers The nameserver addresses to be configured. Int32 nodeMtu Optionally specifies the MTU to be configured for the node's network interface. Pass 0 to configure DefaultMTU or a value between 512-9000 . String newPassword Optionally specifies the new SSH password to be configured on the node. Returns Type Description TempFile A TempFile that references the generated ISO file. Remarks The hosting manager will call this for each node being prepared and then insert the ISO into the node VM's DVD/CD drive before booting the node for the first time. The neon-init service configured on the corresponding node templates will look for this DVD and script and execute it early during the node boot process. The ISO file reference is returned as a TempFile . The caller should call Dispose() when it's done with the file to ensure that it is deleted. CreateSelfSigned(String, Int32, Int32, Wildcard, String, String, String) Generates a self-signed certificate for arbitrary hostnames, possibly including hostnames with wildcards. Declaration public static X509Certificate2 CreateSelfSigned(string hostname, int bitCount = 2048, int validDays = 365000, Wildcard wildcard = Wildcard.None, string issuedBy = null, string issuedTo = null, string friendlyName = null) Parameters Type Name Description String hostname The certificate host names. note You can use include a \" \" to specify a wildcard certificate like: .test.com . Int32 bitCount The certificate key size in bits: one of 1024 , 2048 , or 4096 (defaults to 2048 ). Int32 validDays The number of days the certificate will be valid. This defaults to 365,000 days or about 1,000 years. Wildcard wildcard Optionally generate a wildcard certificate for the subdomains of hostname or the combination of the subdomains and the hostname. This defaults to None which does not generate a wildcard certificate. String issuedBy Optionally specifies the issuer. String issuedTo Optionally specifies who/what the certificate is issued for. String friendlyName Optionally specifies the certificate's friendly name. Returns Type Description X509Certificate2 The new X509Certificate2 . DownloadNodeImageAsync(String, String, DownloadProgressDelegate, Boolean, CancellationToken) Downloads a multi-part node image to a local folder. Declaration public static async Task<string> DownloadNodeImageAsync(string imageUri, string imagePath, DownloadProgressDelegate progressAction = null, bool strictCheck = true, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String imageUri The node image multi-part download information URI. String imagePath The local path where the image will be written. DownloadProgressDelegate progressAction Optional progress action that will be called with operation percent complete. Boolean strictCheck Optionally used to disable a slow but more comprehensive check of any existing file. When this is disabled and the download file already exists along with its MD5 hash file, the method will assume that the existing file matches when the file size is the same as specified in the manifest and manifest overall MD5 matches the local MD5 file. Otherwise when strictCheck is true , this method will need to compute the MD5 hashes for the existing file parts and compare those to the part MD5 hashes in the manifest, which can take quite a while for large files. This defaults to true . CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < String > The path to the downloaded file. Remarks This checks to see if the target file already exists and will download only what's required to update the file to match the source. This means that partially completed downloads can restart essentially where they left off. Exceptions Type Condition SocketException Thrown for network errors. HttpException Thrown for HTTP network errors. OperationCanceledException Thrown when the operation was cancelled. EditNeonKubeVersion(SemanticVersion) Edits the $/neonKUBE/Lib/Neon.Kube/KubeVersions.cs source file by setting the NeonKube constant to the version passed. Declaration public static bool EditNeonKubeVersion(SemanticVersion version) Parameters Type Name Description SemanticVersion version The new version number. Returns Type Description Boolean true if the version constant value was changed, false when the constant was already set to this version. EnsureIngressNodes(ClusterDefinition) Ensures that at least one cluster node is enabled for cluster ingress network traffic. note It is possible for the user to have set Ingress to false for all nodes. We're going to pick a reasonable set of nodes in this case. I there are 3 or more workers, then only the workers will receive traffic, otherwise all nodes will receive traffic. Declaration public static void EnsureIngressNodes(ClusterDefinition clusterDefinition) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. GenerateClusterId() Generates a unique cluster ID. Declaration public static string GenerateClusterId() Returns Type Description String The generated cluster ID. GenerateSshKey(String, String) Creates a SSH key for a neonKUBE cluster. Declaration public static KubeSshKey GenerateSshKey(string clusterName, string userName = \"root\") Parameters Type Name Description String clusterName The cluster name. String userName Optionally specifies the user name (defaults to root ). Returns Type Description KubeSshKey A KubeSshKey holding the public and private parts of the key. GetBuiltinDesktopSshKey() Returns the fixed SSH key shared by all neon-desktop built-in clusters. note This isn't really a security issue because built-in clusters are not reachable from outside the machine they're deployed on and also because the built-in desktop cluster is not intended to host production workloads. Declaration public static KubeSshKey GetBuiltinDesktopSshKey() Returns Type Description KubeSshKey The KubeSshKey . GetCachedComponentPath(KubeClientPlatform, String, String) Returns the path to the cached file for a specific named component with optional version. Declaration public static string GetCachedComponentPath(KubeClientPlatform platform, string component, string version) Parameters Type Name Description KubeClientPlatform platform Identifies the platform. String component The component name. String version The component version (or null ). Returns Type Description String The component file path. GetClusterHealthAsync(KubeConfigContext, CancellationToken) Determines the health of a cluster by querying the API server. Declaration public static async Task<ClusterHealth> GetClusterHealthAsync(KubeConfigContext context, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description KubeConfigContext context The cluster context. CancellationToken cancellationToken Optionally specifies the cancellation token. Returns Type Description Task < ClusterHealth > A ClusterHealth instance. GetClusterLdapUserAsync(IKubernetes, String) Returns the credentials for a specific cluster user from the Glauth LDAP secret. Declaration public static async Task<GlauthUser> GetClusterLdapUserAsync(IKubernetes k8s, string username) Parameters Type Name Description k8s.IKubernetes k8s The Kubernetes client. String username The desired username. Returns Type Description Task < GlauthUser > The GlauthUser requested user credentials. Exceptions Type Condition KeyNotFoundException Thrown when the user doesn't exist. GetClusterLogin(KubeContextName) Returns the cluster login for the structured configuration name. Declaration public static ClusterLogin GetClusterLogin(KubeContextName name) Parameters Type Name Description KubeContextName name The structured context name. Returns Type Description ClusterLogin The ClusterLogin or null . GetClusterLoginPath(KubeContextName) Returns the path to the cluster login file path for a specific context by raw name. Declaration public static string GetClusterLoginPath(KubeContextName contextName) Parameters Type Name Description KubeContextName contextName The kubecontext name. Returns Type Description String The file path. GetCurrentNamespaceAsync() Gets the current namespace fromwithin a pod. Declaration public static async Task<string> GetCurrentNamespaceAsync() Returns Type Description Task < String > GetEmulatedPodName(String) Generates a unique(ish) pod name for application instances that are actually running outside of the cluster, typically for testing purposes. This is based on the deployment name passed and a small UUID. Declaration public static string GetEmulatedPodName(string deployment) Parameters Type Name Description String deployment Returns Type Description String The emulated pod name. GetHelmPath(String, Boolean) Returns the path to the a tool binary to be used by neon-cli . Declaration public static string GetHelmPath(string installFolder, bool userToolsFolder = false) Parameters Type Name Description String installFolder Path to the tool installation folder. Boolean userToolsFolder Optionally specifies that instead of downloading missing tool binaries to installFolder , the method will download the file to ToolsFolder . Returns Type Description String The fully qualified tool path. Remarks If the installFolder folder and the binary exist then we'll simply return the tool path when userToolsFolder =true and verify that tool version is correct when userToolsFolder =false . If the installFolder or binary does not exist, then the user is probably a developer running an uninstalled version of the tool, perhaps in the debugger. In this case, we're going to download the binaries to installFolder by default or to ToolsFolder when userToolsFolder =true . Exceptions Type Condition FileNotFoundException Thrown when the tool cannot be located. GetKubectlPath(String, Boolean) Returns the path to the a tool binary to be used by neon-cli . Declaration public static string GetKubectlPath(string installFolder, bool userToolsFolder = false) Parameters Type Name Description String installFolder Path to the tool installation folder. Boolean userToolsFolder Optionally specifies that instead of downloading missing tool binaries to installFolder , the method will download the file to ToolsFolder . Returns Type Description String The fully qualified tool path. Remarks If the installFolder folder and the binary exist then we'll simply return the tool path when userToolsFolder =true and verify that tool version is correct when userToolsFolder =false . If the installFolder or binary does not exist, then the user is probably a developer running an uninstalled version of the tool, perhaps in the debugger. In this case, we're going to download the binaries to installFolder by default or to ToolsFolder when userToolsFolder =true . Exceptions Type Condition FileNotFoundException Thrown when the tool cannot be located. GetNeonKubeVersion() Returns the NeonKube contant value extracted from the $/neonKUBE/Lib/Neon.Kube/KubeVersions.cs source file. Note that the NK_ROOT environment variable must reference the root of the neonKUBE git repository. Declaration public static SemanticVersion GetNeonKubeVersion() Returns Type Description SemanticVersion The NeonKube version. Exceptions Type Condition InvalidOperationException Thrown if the NK_ROOT environment variable does not exist or the git repo is invalid, the source file doesn't exist or the NeonKube constant could not be located. GetOpenSshPrepareSubConfig(Boolean) Returns the contexts of the OpenSSH sub-config file to deployed during as node images are created or when the cluster nodes are provisioned to /etc/ssh/sshd_config.d/20-neonkube.conf to customize OpenSSH. Declaration public static string GetOpenSshPrepareSubConfig(bool allowPasswordAuth) Parameters Type Name Description Boolean allowPasswordAuth Enable password authentication. Returns Type Description String GetPlatformCacheFolder(KubeClientPlatform) Returns the path to the folder containing cached files for the specified platform. Declaration public static string GetPlatformCacheFolder(KubeClientPlatform platform) Parameters Type Name Description KubeClientPlatform platform Identifies the platform. Returns Type Description String The folder path. GetToolPath(String, String, Func<String, Boolean>, Func<String>, Boolean) Returns the path to the a tool binary to be used by neon-cli . Declaration public static string GetToolPath(string installFolder, string toolName, Func<string, bool> toolChecker, Func<string> toolUriRetriever, bool userToolsFolder = false) Parameters Type Name Description String installFolder Path to the tool installation folder. String toolName The requested tool name, one of: helm or kubectl Func < String , Boolean > toolChecker Callback taking the the tool path as a parameter and returning true when the tool version matches what's required. Func < String > toolUriRetriever Callback that returns the URI to be used to download the tool. Boolean userToolsFolder Optionally specifies that instead of downloading missing tool binaries to installFolder , the method will download the file to ToolsFolder . Returns Type Description String The fully qualified tool path. Remarks If the installFolder folder and the binary exist then we'll simply return the tool path when userToolsFolder =true and verify that tool version is correct when userToolsFolder =false . If the installFolder or binary does not exist, then the user is probably a developer running an uninstalled version of the tool, perhaps in the debugger. In this case, we're going to download the binaries to installFolder by default or to ToolsFolder when userToolsFolder =true . Exceptions Type Condition FileNotFoundException Thrown when the tool cannot be located. InitContext(KubeConfigContext) This is used for special situations like setting up a cluster to set an uninitialized Kubernetes config context as the current CurrentContext . Declaration public static void InitContext(KubeConfigContext context = null) Parameters Type Name Description KubeConfigContext context The context being set or null to reset. InitializeJson() Used to initialize k8s.KubernetesJson . Declaration public static void InitializeJson() InstallKubeCtl() Ensures that kubectl tool whose version is at least as great as the Kubernetes cluster version is installed to the neonKUBE programs folder by copying the tool from the cache if necessary. note This will probably require elevated privileges. note This assumes that kubectl has already been downloaded and cached and also that more recent kubectl releases are backwards compatible with older deployed versions of Kubernetes. Declaration public static void InstallKubeCtl() InstallWorkstationHelm() Ensures that helm client installed on the workstation version is at least as great as the requested cluster version is installed to the neonKUBE programs folder by copying the tool from the cache if necessary. note This will probably require elevated privileges. note This assumes that Helm has already been downloaded and cached and also that more recent Helm releases are backwards compatible with older deployed versions of Tiller. Declaration public static void InstallWorkstationHelm() IsCloudEnvironment(HostingEnvironment) Determines whether a cluster hosting environment deploys to the cloud. Declaration public static bool IsCloudEnvironment(HostingEnvironment hostingEnvironment) Parameters Type Name Description HostingEnvironment hostingEnvironment The hosting environment. Returns Type Description Boolean true for cloud environments. IsNeonKubeCustomResource(V1CustomResourceDefinition) Determines whether a custom resource definition is a neonKUBE custom resource. Declaration public static bool IsNeonKubeCustomResource(V1CustomResourceDefinition crd) Parameters Type Name Description k8s.Models.V1CustomResourceDefinition crd The custom resource definition. Returns Type Description Boolean true for neonKUBE resource definitions. IsOnPremiseEnvironment(HostingEnvironment) Determines whether a cluster hosting environment deploys on-premise. Declaration public static bool IsOnPremiseEnvironment(HostingEnvironment hostingEnvironment) Parameters Type Name Description HostingEnvironment hostingEnvironment The hosting environment. Returns Type Description Boolean true for on-premise environments. IsOnPremiseHypervisorEnvironment(HostingEnvironment) Determines whether a cluster hosting environment deploys to on-premise hypervisors. Declaration public static bool IsOnPremiseHypervisorEnvironment(HostingEnvironment hostingEnvironment) Parameters Type Name Description HostingEnvironment hostingEnvironment The hosting environment. Returns Type Description Boolean true for on-premise environments. IsPremiumEnvironment(HostingEnvironment) Determines whether a cluster hosting environment is available only for NEONFORGE premium (closed-source) related projects. Declaration public static bool IsPremiumEnvironment(HostingEnvironment hostingEnvironment) Parameters Type Name Description HostingEnvironment hostingEnvironment The hosting environment. Returns Type Description Boolean true for enteprise/closed-source related projects. Kubectl(Object[]) Executes a kubectl command on the local workstation. Declaration public static ExecuteResponse Kubectl(params object[] args) Parameters Type Name Description Object [] args The command arguments. Returns Type Description ExecuteResponse The ExecuteResponse . LoadClientConfig() Loads or reloads the ClientConfig . Declaration public static KubeClientConfig LoadClientConfig() Returns Type Description KubeClientConfig The client configuration. LoadConfig() Loads or reloads the Kubernetes configuration. Declaration public static KubeConfig LoadConfig() Returns Type Description KubeConfig The Config . LookupPassword(String) Looks up a password given its name. Declaration public static string LookupPassword(string passwordName) Parameters Type Name Description String passwordName The password name. Returns Type Description String The password value. Exceptions Type Condition KeyNotFoundException Thrown if the password doesn't exist. PortForward(String, Int32, Int32, String, Process) Executes a kubectl port-forward command on the local workstation. Declaration public static void PortForward(string serviceName, int remotePort, int localPort, string namespace, Process process) Parameters Type Name Description String serviceName The service to forward. Int32 remotePort The service port. Int32 localPort The local port to forward to. String namespace The Kubernetes namespace where the service is running. Process process The Process to use. SaveClientState() Persists the ClientConfig to disk. Declaration public static void SaveClientState() SetConfig(KubeConfig) Rewrites the local kubeconfig file. Declaration public static void SetConfig(KubeConfig config) Parameters Type Name Description KubeConfig config The new configuration. SetCurrentContext(KubeContextName) Sets the current Kubernetes config context. Declaration public static void SetCurrentContext(KubeContextName contextName) Parameters Type Name Description KubeContextName contextName The context name or null to clear the current context. Exceptions Type Condition ArgumentException Thrown if the context specified doesn't exist. SetCurrentContext(String) Sets the current Kubernetes config context by string name. Declaration public static void SetCurrentContext(string contextName) Parameters Type Name Description String contextName The context name or null to clear the current context. Exceptions Type Condition ArgumentException Thrown if the context specified doesn't exist."
  },
  "neonkube/api/Neon.Kube.KubeImageType.html": {
    "href": "neonkube/api/Neon.Kube.KubeImageType.html",
    "title": "Enum KubeImageType | NeonKUBE documentation",
    "keywords": "Enum KubeImageType Enumerates the neonKUBE image types. Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public enum KubeImageType Fields Name Description Base Identifies a base image. Desktop Identifies a prebuilt built-in neondesktop cluster image. Node Identifies the general purpose image that can be used to deploy single or multi-node clusters. Unknown Identifies a virgin images."
  },
  "neonkube/api/Neon.Kube.KubeMinioBucket.html": {
    "href": "neonkube/api/Neon.Kube.KubeMinioBucket.html",
    "title": "Class KubeMinioBucket | NeonKUBE documentation",
    "keywords": "Class KubeMinioBucket Defines the Minio bucket names used by neonKUBE applications. Inheritance Object KubeMinioBucket Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class KubeMinioBucket Fields All Returns the list of all internal neonKUBE Minio bucket names. Declaration public static readonly IReadOnlyList<string> All Field Value Type Description IReadOnlyList < String > Grafana Harbor bucket name. Declaration public const string Grafana = \"grafana\" Field Value Type Description String Harbor Harbor bucket name. Declaration public const string Harbor = \"harbor\" Field Value Type Description String Loki Loki bucket name. Declaration public const string Loki = \"loki\" Field Value Type Description String Mimir Mimir bucket name. Declaration public const string Mimir = \"mimir-tsdb\" Field Value Type Description String MimirRuler Mimir-ruler bucket name. Declaration public const string MimirRuler = \"mimir-ruler\" Field Value Type Description String Tempo Tempo bucket name. Declaration public const string Tempo = \"tempo\" Field Value Type Description String"
  },
  "neonkube/api/Neon.Kube.KubeNamespace.html": {
    "href": "neonkube/api/Neon.Kube.KubeNamespace.html",
    "title": "Class KubeNamespace | NeonKUBE documentation",
    "keywords": "Class KubeNamespace Defines the built-in namespace names created for Kubernetes and neonKUBE. Inheritance Object KubeNamespace Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class KubeNamespace Fields Default The default namespace. Declaration public const string Default = \"default\" Field Value Type Description String KubeNodeLease Hosts the Kubernetes node leases. Declaration public const string KubeNodeLease = \"kube-node-lease\" Field Value Type Description String KubePublic Hosts Kubernetes public services. Declaration public const string KubePublic = \"kube-public\" Field Value Type Description String KubernetesDashboard Hosts the Kubernetes dashboard. Declaration public const string KubernetesDashboard = \"kubernetes-dashboard\" Field Value Type Description String KubeSystem Hosts Kubernetes infrastructure components. Declaration public const string KubeSystem = \"kube-system\" Field Value Type Description String NeonIngress Hosts the remaining Istio components. Declaration public const string NeonIngress = \"neon-ingress\" Field Value Type Description String NeonMonitor Hosts cluster monitoring. Declaration public const string NeonMonitor = \"neon-monitor\" Field Value Type Description String NeonStatus Hosts cluster status information. Declaration public const string NeonStatus = \"neon-status\" Field Value Type Description String NeonStorage Hosts OpenEBS components. Declaration public const string NeonStorage = \"neon-storage\" Field Value Type Description String NeonSystem Hosts neonKUBE infrastructure. Declaration public const string NeonSystem = \"neon-system\" Field Value Type Description String Properties InternalNamespaces Returns the set of all Kubernetes and neonKUBE namespaces. Declaration public static IReadOnlySet<string> InternalNamespaces { get; } Property Value Type Description IReadOnlySet < String > InternalNamespacesWithoutDefault Returns the set of all Kubernetes and neonKUBE namespaces but without the default namespace. Declaration public static IReadOnlySet<string> InternalNamespacesWithoutDefault { get; } Property Value Type Description IReadOnlySet < String > KubernetesNamespaces Returns the set of built-in Kubernetes namespaces. Declaration public static IReadOnlyList<string> KubernetesNamespaces { get; } Property Value Type Description IReadOnlyList < String > NeonNamespaces Returns the set of built-in neonKUBE namespaces. Declaration public static IReadOnlyList<string> NeonNamespaces { get; } Property Value Type Description IReadOnlyList < String >"
  },
  "neonkube/api/Neon.Kube.KubeNodeFolder.html": {
    "href": "neonkube/api/Neon.Kube.KubeNodeFolder.html",
    "title": "Class KubeNodeFolder | NeonKUBE documentation",
    "keywords": "Class KubeNodeFolder Enumerates the paths of important directories on cluster node servers. Inheritance Object KubeNodeFolder Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class KubeNodeFolder Remarks note Although these constants are referenced by C# code, Linux scripts are likely to hardcode these strings. You should do a search and replace whenever you change any of these values. note Changing any of these will likely break [neon-cli] interactions with existing clusters that use the previous folder path. Be ver sure you know what you're doing when you make changes. Fields Bin Path to the cluster executable files directory. Declaration public const string Bin = \"/lib/neonkube/bin\" Field Value Type Description String Config Path to the cluster configuration directory. Declaration public const string Config = \"/etc/neonkube\" Field Value Type Description String Helm Path to the cluster setup Helm charts folder. Declaration public const string Helm = \"/lib/neonkube/helm\" Field Value Type Description String NeonRun Folder where neonKUBE related components will maintain runtime state. Declaration public const string NeonRun = \"/run/neonkube\" Field Value Type Description String Scripts Path to the cluster management scripts directory. Declaration public const string Scripts = \"/lib/neonkube/scripts\" Field Value Type Description String Setup Path to the cluster setup scripts directory. Declaration public const string Setup = \"/lib/neonkube/setup\" Field Value Type Description String State Path to the cluster setup state directory. Declaration public const string State = \"/var/local/neonkube\" Field Value Type Description String Tmpfs Root folder on the local tmpfs (shared memory) folder where cluster will persist misc temporary files. Declaration public const string Tmpfs = \"/dev/shm/neonkube\" Field Value Type Description String Methods Download(String) Path to the user download directory. Declaration public static string Download(string username) Parameters Type Name Description String username The username. Returns Type Description String The directory path. Exec(String) The user folder where cluster tools can upload, unpack, and then execute CommandBundle s as well as store temporary command output files. Declaration public static string Exec(string username) Parameters Type Name Description String username The username. Returns Type Description String The directory path. Home(String) Path to a user archive directory. Declaration public static string Home(string username) Parameters Type Name Description String username The username. Returns Type Description String The directory path. NeonHome(String) Path to a user's .neon home directory. Declaration public static string NeonHome(string username) Parameters Type Name Description String username The username. Returns Type Description String The directory path. Upload(String) Path to a user upload directory. Declaration public static string Upload(string username) Parameters Type Name Description String username The username. Returns Type Description String The directory path."
  },
  "neonkube/api/Neon.Kube.KubeNodePort.html": {
    "href": "neonkube/api/Neon.Kube.KubeNodePort.html",
    "title": "Class KubeNodePort | NeonKUBE documentation",
    "keywords": "Class KubeNodePort Defines reserved node and cluster network ports. Inheritance Object KubeNodePort Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class KubeNodePort Fields IstioIngressHttp The node port exposed by the Istio Ingress HTTP service. Declaration public const int IstioIngressHttp = 30080 Field Value Type Description Int32 IstioIngressHttps The node port exposed by the Istio Ingress HTTPS service. Declaration public const int IstioIngressHttps = 30443 Field Value Type Description Int32 KubeApiServer The port exposed by the Kubernetes API servers on the control-plane nodes. Declaration public const int KubeApiServer = 6443 Field Value Type Description Int32 KubeFirstNodePort The first port reserved by Kubernetes for exposing node ports. Declaration public const int KubeFirstNodePort = 30000 Field Value Type Description Int32 KubeLastNodePort The last port reserved by Kubernetes for exposing node ports. Declaration public const int KubeLastNodePort = 32767 Field Value Type Description Int32"
  },
  "neonkube/api/Neon.Kube.KubernetesExtensions.html": {
    "href": "neonkube/api/Neon.Kube.KubernetesExtensions.html",
    "title": "Class KubernetesExtensions | NeonKUBE documentation",
    "keywords": "Class KubernetesExtensions Kubernetes related extension methods. Inheritance Object KubernetesExtensions Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class KubernetesExtensions Methods CreateClusterCustomObjectAsync<T>(ICustomObjectsOperations, T, String, String, String, CancellationToken) Create a cluster scoped custom object. Declaration public static async Task<T> CreateClusterCustomObjectAsync<T>(this ICustomObjectsOperations k8s, T body, string name, string dryRun = null, string fieldManager = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. T body The object data. String name Specifies the object name. String dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed String fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint . CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task <T> The new object. Type Parameters Name Description T The custom object type. CreateNamespacedCustomObjectAsync<T>(ICustomObjectsOperations, T, String, String, String, String, CancellationToken) Create a namespaced custom object. Declaration public static async Task<T> CreateNamespacedCustomObjectAsync<T>(this ICustomObjectsOperations k8s, T body, string name, string namespaceParameter, string dryRun = null, string fieldManager = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. T body The object data. String name Specifies the object name. String namespaceParameter That target Kubernetes namespace. String dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed String fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint . CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task <T> The new object. Type Parameters Name Description T The custom object type. DeleteClusterCustomObjectAsync<T>(ICustomObjectsOperations, T, V1DeleteOptions, Nullable<Int32>, Nullable<Boolean>, String, String, CancellationToken) Deletes a namespace scoped custom object of the specified generic object type, and doesn't throw any exceptions if the object doesn't exist. Declaration public static async Task DeleteClusterCustomObjectAsync<T>(this ICustomObjectsOperations k8s, T object, V1DeleteOptions body = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null, string dryRun = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. T object Specifies the object being deleted. k8s.Models.V1DeleteOptions body Optionally specifies deletion options. Nullable < Int32 > gracePeriodSeconds Optionally specifies the duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. Nullable < Boolean > orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both. String propagationPolicy Optionally specifies ehether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. String dryRun Optionally specifies that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task The tracking Task . Type Parameters Name Description T The custom object type. DeleteClusterCustomObjectAsync<T>(ICustomObjectsOperations, String, V1DeleteOptions, Nullable<Int32>, Nullable<Boolean>, String, String, CancellationToken) Deletes a namespace scoped custom object of the specified generic object type, and doesn't throw any exceptions if the object doesn't exist. Declaration public static async Task DeleteClusterCustomObjectAsync<T>(this ICustomObjectsOperations k8s, string name, V1DeleteOptions body = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null, string dryRun = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. String name Specifies the object name. k8s.Models.V1DeleteOptions body Optionally specifies deletion options. Nullable < Int32 > gracePeriodSeconds Optionally specifies the duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. Nullable < Boolean > orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both. String propagationPolicy Optionally specifies ehether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. String dryRun Optionally specifies that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task The tracking Task . Type Parameters Name Description T The custom object type. DeleteNamespacedCustomObjectAsync<T>(ICustomObjectsOperations, String, T, V1DeleteOptions, Nullable<Int32>, Nullable<Boolean>, String, String, CancellationToken) Deletes a namespace scoped custom object passed, and name and doesn't throw any exceptions if the object doesn't exist. Declaration public static async Task DeleteNamespacedCustomObjectAsync<T>(this ICustomObjectsOperations k8s, string namespaceParameter, T object, V1DeleteOptions body = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null, string dryRun = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. String namespaceParameter Specifies the target Kubernetes namespace. T object Specifies the object being deleted. k8s.Models.V1DeleteOptions body Optionally specifies deletion options. Nullable < Int32 > gracePeriodSeconds Optionally specifies the duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. Nullable < Boolean > orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both. String propagationPolicy Optionally specifies ehether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. String dryRun Optionally specifies that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task The tracking Task . Type Parameters Name Description T The custom object type. DeleteNamespacedCustomObjectAsync<T>(ICustomObjectsOperations, String, String, V1DeleteOptions, Nullable<Int32>, Nullable<Boolean>, String, String, CancellationToken) Deletes a namespace scoped custom object of the specified generic object type, nanmespace, and name and doesn't throw any exceptions if the object doesn't exist. Declaration public static async Task DeleteNamespacedCustomObjectAsync<T>(this ICustomObjectsOperations k8s, string namespaceParameter, string name, V1DeleteOptions body = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null, string dryRun = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. String namespaceParameter Specifies the target Kubernetes namespace. String name Specifies the object name. k8s.Models.V1DeleteOptions body Optionally specifies deletion options. Nullable < Int32 > gracePeriodSeconds Optionally specifies the duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. Nullable < Boolean > orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both. String propagationPolicy Optionally specifies ehether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. String dryRun Optionally specifies that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task The tracking Task . Type Parameters Name Description T The custom object type. GetLabel(V1ObjectMeta, String) Fetches the value of a label from the metadata. Declaration public static string GetLabel(this V1ObjectMeta metadata, string name) Parameters Type Name Description k8s.Models.V1ObjectMeta metadata The metadata instance. String name The label name. Returns Type Description String The label value or null when the label doesn't exist. GetNamespacedRunningPodAsync(IKubernetes, String, String) Returns a running pod within the specified namespace that matches a label selector. Declaration public static async Task<V1Pod> GetNamespacedRunningPodAsync(this IKubernetes k8s, string namespaceParameter, string labelSelector) Parameters Type Name Description k8s.IKubernetes k8s The k8s.Kubernetes client. String namespaceParameter Specifies the namespace hosting the pod. String labelSelector Specifies the label selector to constrain the set of pods to be targeted. This is required. Returns Type Description Task < k8s.Models.V1Pod > Exceptions Type Condition k8s.KubernetesException Thrown when no healthy pods exist. ListAllPodsAsync(IKubernetes) Lists pods from all cluster namespaces. Declaration public static async Task<V1PodList> ListAllPodsAsync(this IKubernetes k8s) Parameters Type Name Description k8s.IKubernetes k8s The k8s.IKubernetes instance. Returns Type Description Task < k8s.Models.V1PodList > The k8s.Models.V1PodList . ListClusterCustomObjectAsync<T>(ICustomObjectsOperations, Nullable<Boolean>, String, String, String, Nullable<Int32>, String, String, Nullable<Int32>, Nullable<Boolean>, CancellationToken) List or watch cluster scoped custom objects, deserializing them into the specified generic type. Declaration public static async Task<V1CustomObjectList<T>> ListClusterCustomObjectAsync<T>(this ICustomObjectsOperations k8s, bool? allowWatchBookmarks = null, string continueParameter = null, string fieldSelector = null, string labelSelector = null, int? limit = null, string resourceVersion = null, string resourceVersionMatch = null, int? timeoutSeconds = null, bool? watch = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. Nullable < Boolean > allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored. String continueParameter The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. String fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. String labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. Nullable < Int32 > limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the continue field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. String resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. String resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset Nullable < Int32 > timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. Nullable < Boolean > watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task < V1CustomObjectList <T>> The deserialized object list. Type Parameters Name Description T The custom object list type. ListClusterCustomObjectMetadataAsync(ICustomObjectsOperations, String, String, String, Nullable<Boolean>, String, String, String, Nullable<Int32>, String, String, Nullable<Int32>, Nullable<Boolean>, CancellationToken) List or watch cluster scoped custom objects by group, version, and plural name, deserializing them into KubernetesObjectMetadata instances holding just the common metadata properties. This is useful for managing objects without needing the resource type implementation. Declaration public static async Task<V1CustomObjectList<KubernetesObjectMetadata>> ListClusterCustomObjectMetadataAsync(this ICustomObjectsOperations k8s, string group, string version, string plural, bool? allowWatchBookmarks = null, string continueParameter = null, string fieldSelector = null, string labelSelector = null, int? limit = null, string resourceVersion = null, string resourceVersionMatch = null, int? timeoutSeconds = null, bool? watch = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. String group The custom resource's group name String version The custom resource's version String plural The custom resource's plural name. For TPRs this would be lowercase plural kind. Nullable < Boolean > allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored. String continueParameter The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. String fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. String labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. Nullable < Int32 > limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the continue field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. String resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. String resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset Nullable < Int32 > timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. Nullable < Boolean > watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task < V1CustomObjectList < KubernetesObjectMetadata >> The deserialized object list. ListClusterCustomObjectWithHttpMessagesAsync<T>(ICustomObjectsOperations, Nullable<Boolean>, String, String, String, Nullable<Int32>, String, String, Nullable<Int32>, Nullable<Boolean>, CancellationToken) List or watch cluster scoped custom objects, deserializing them into the specified generic type. Declaration public static async Task<HttpOperationResponse<object>> ListClusterCustomObjectWithHttpMessagesAsync<T>(this ICustomObjectsOperations k8s, bool? allowWatchBookmarks = null, string continueParameter = null, string fieldSelector = null, string labelSelector = null, int? limit = null, string resourceVersion = null, string resourceVersionMatch = null, int? timeoutSeconds = null, bool? watch = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. Nullable < Boolean > allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored. String continueParameter The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. String fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. String labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. Nullable < Int32 > limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the continue field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. String resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. String resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset Nullable < Int32 > timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. Nullable < Boolean > watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task < k8s.Autorest.HttpOperationResponse < Object >> The deserialized object list. Type Parameters Name Description T The custom object list type. ListNamespacedCustomObjectAsync<T>(ICustomObjectsOperations, String, Nullable<Boolean>, String, String, String, Nullable<Int32>, String, String, Nullable<Int32>, Nullable<Boolean>, CancellationToken) List or watch namespaced custom objects, deserializing them into the specified generic type. Declaration public static async Task<V1CustomObjectList<T>> ListNamespacedCustomObjectAsync<T>(this ICustomObjectsOperations k8s, string namespaceParameter, bool? allowWatchBookmarks = null, string continueParameter = null, string fieldSelector = null, string labelSelector = null, int? limit = null, string resourceVersion = null, string resourceVersionMatch = null, int? timeoutSeconds = null, bool? watch = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. String namespaceParameter Specifies the namespace hosting the pod. Nullable < Boolean > allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored. String continueParameter The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. String fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. String labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. Nullable < Int32 > limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the continue field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. String resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. String resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset Nullable < Int32 > timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. Nullable < Boolean > watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task < V1CustomObjectList <T>> The deserialized object list. Type Parameters Name Description T The custom object list type. ListNamespacedCustomObjectMetadataAsync<T>(ICustomObjectsOperations, String, String, String, String, Nullable<Boolean>, String, String, String, Nullable<Int32>, String, String, Nullable<Int32>, Nullable<Boolean>, CancellationToken) List or watch namespace scoped custom objects by group, version, and plural name, deserializing them into KubernetesObjectMetadata instances holding just the common metadata properties. This is useful for managing objects without needing the resource type implementation. Declaration public static async Task<V1CustomObjectList<KubernetesObjectMetadata>> ListNamespacedCustomObjectMetadataAsync<T>(this ICustomObjectsOperations k8s, string namespaceParameter, string group, string version, string plural, bool? allowWatchBookmarks = null, string continueParameter = null, string fieldSelector = null, string labelSelector = null, int? limit = null, string resourceVersion = null, string resourceVersionMatch = null, int? timeoutSeconds = null, bool? watch = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. String namespaceParameter Specifies the namespace hosting the pod. String group The custom resource's group name String version The custom resource's version String plural The custom resource's plural name. For TPRs this would be lowercase plural kind. Nullable < Boolean > allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored. String continueParameter The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. String fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. String labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. Nullable < Int32 > limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the continue field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. String resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. String resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset Nullable < Int32 > timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. Nullable < Boolean > watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task < V1CustomObjectList < KubernetesObjectMetadata >> The deserialized object list. Type Parameters Name Description T ListNamespacedCustomObjectWithHttpMessagesAsync<T>(ICustomObjectsOperations, String, Nullable<Boolean>, String, String, String, Nullable<Int32>, String, String, Nullable<Int32>, Nullable<Boolean>, CancellationToken) List or watch namespaced custom objects, deserializing them into the specified generic type. Declaration public static Task<HttpOperationResponse<object>> ListNamespacedCustomObjectWithHttpMessagesAsync<T>(this ICustomObjectsOperations k8s, string namespaceParameter, bool? allowWatchBookmarks = null, string continueParameter = null, string fieldSelector = null, string labelSelector = null, int? limit = null, string resourceVersion = null, string resourceVersionMatch = null, int? timeoutSeconds = null, bool? watch = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. String namespaceParameter Specifies the namespace hosting the pod. Nullable < Boolean > allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored. String continueParameter The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. String fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. String labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. Nullable < Int32 > limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the continue field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. String resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. String resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset Nullable < Int32 > timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. Nullable < Boolean > watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task < k8s.Autorest.HttpOperationResponse < Object >> The deserialized object list. Type Parameters Name Description T The custom object list type. NamespacedPodExecAsync(IKubernetes, String, String, String, String[], Boolean, CancellationToken) Executes a command within a pod container. Declaration public static async Task<ExecuteResponse> NamespacedPodExecAsync(this IKubernetes k8s, string namespaceParameter, string name, string container, string[] command, bool noSuccessCheck = false, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description k8s.IKubernetes k8s The k8s.Kubernetes client. String namespaceParameter Specifies the namespace hosting the pod. String name Specifies the target pod name. String container Identifies the target container within the pod. String [] command Specifies the program and arguments to be executed. Boolean noSuccessCheck Optionally disables the EnsureSuccess() check. CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task < ExecuteResponse > An ExecuteResponse with the command exit code and output and error text. Exceptions Type Condition ExecuteException Thrown if the exit code isn't zero and noSuccessCheck =false . NamespacedPodExecWithRetryAsync(IKubernetes, IRetryPolicy, String, String, String, String[], CancellationToken) Executes a command within a pod container with a IRetryPolicy Declaration public static async Task<ExecuteResponse> NamespacedPodExecWithRetryAsync(this IKubernetes k8s, IRetryPolicy retryPolicy, string namespaceParameter, string name, string container, string[] command, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description k8s.IKubernetes k8s The k8s.Kubernetes client. IRetryPolicy retryPolicy The IRetryPolicy . String namespaceParameter Specifies the namespace hosting the pod. String name Specifies the target pod name. String container Identifies the target container within the pod. String [] command Specifies the program and arguments to be executed. CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task < ExecuteResponse > An ExecuteResponse with the command exit code and output and error text. Exceptions Type Condition ExecuteException Thrown if the exit code isn't zero. PatchClusterCustomObjectAsync<T>(ICustomObjectsOperations, V1Patch, String, String, String, Nullable<Boolean>, CancellationToken) Updates the spec of a cluster scoped custom object of the specified generic object type and name. Declaration public static async Task<T> PatchClusterCustomObjectAsync<T>(this ICustomObjectsOperations k8s, V1Patch patch, string name, string dryRun = null, string fieldManager = null, bool? force = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. k8s.Models.V1Patch patch Specifies the patch to be applied to the object spec. This is typically a k8s.Models.V1Patch instance but additional patch types may be supported in String name Specifies the object name. String dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed String fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint . Nullable < Boolean > force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task <T> The updated custom object. Type Parameters Name Description T The custom object type. PatchClusterCustomObjectStatusAsync<T>(ICustomObjectsOperations, V1Patch, String, String, String, Nullable<Boolean>, CancellationToken) Updates the status of a cluster scoped custom object of the specified generic object type and name. Declaration public static async Task<T> PatchClusterCustomObjectStatusAsync<T>(this ICustomObjectsOperations k8s, V1Patch patch, string name, string dryRun = null, string fieldManager = null, bool? force = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. k8s.Models.V1Patch patch Specifies the patch to be applied to the object status. This is typically a k8s.Models.V1Patch instance but additional patch types may be supported in String name Specifies the object name. String dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed String fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint . Nullable < Boolean > force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task <T> The updated custom object. Type Parameters Name Description T The custom object type. PatchNamespacedCustomObjectStatusAsync<T>(ICustomObjectsOperations, V1Patch, String, String, String, String, Nullable<Boolean>, CancellationToken) Updates the status of a namespace scoped custom object of the specified generic object type and name. Declaration public static async Task<T> PatchNamespacedCustomObjectStatusAsync<T>(this ICustomObjectsOperations k8s, V1Patch patch, string namespaceParameter, string name, string dryRun = null, string fieldManager = null, bool? force = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. k8s.Models.V1Patch patch Specifies the patch to be applied to the object status. This is typically a k8s.Models.V1Patch instance but additional patch types may be supported in String namespaceParameter That target Kubernetes namespace. String name Specifies the object name. String dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed String fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint . Nullable < Boolean > force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task <T> The updated custom object. Type Parameters Name Description T The custom object type. Note that this is passed as the entire custom object including its status. ReadClusterCustomObjectAsync<T>(ICustomObjectsOperations, String, CancellationToken) Returns a cluster scoped custom object, deserialized as the specified generic object type. Declaration public static async Task<T> ReadClusterCustomObjectAsync<T>(this ICustomObjectsOperations k8s, string name, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. String name Specifies the object name. CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task <T> The deserialized object. Type Parameters Name Description T The custom object type. ReadNamespacedCustomObjectAsync<T>(ICustomObjectsOperations, String, String, CancellationToken) Returns a namespaced custom object, deserialized as the specified generic object type. Declaration public static async Task<T> ReadNamespacedCustomObjectAsync<T>(this ICustomObjectsOperations k8s, string namespaceParameter, string name, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. String namespaceParameter That target Kubernetes namespace. String name Specifies the object name. CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task <T> The deserialized object. Type Parameters Name Description T The custom object type. ReplaceClusterCustomObjectAsync<T>(ICustomObjectsOperations, T, String, String, String, CancellationToken) Replace a cluster scoped custom object of the specified generic object type. Declaration public static async Task<T> ReplaceClusterCustomObjectAsync<T>(this ICustomObjectsOperations k8s, T body, string name, string dryRun = null, string fieldManager = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. T body Specifies the new object data. String name Specifies the object name. String dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed String fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint . CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task <T> The updated object. Type Parameters Name Description T The custom object type. ReplaceNamespacedCustomObjectAsync<T>(ICustomObjectsOperations, T, String, String, String, String, CancellationToken) Replace a namespaced custom object of the specified generic object type. Declaration public static async Task<T> ReplaceNamespacedCustomObjectAsync<T>(this ICustomObjectsOperations k8s, T body, string namespaceParameter, string name, string dryRun = null, string fieldManager = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. T body Specifies the new object data. String namespaceParameter That target Kubernetes namespace. String name Specifies the object name. String dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed String fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint . CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task <T> The updated object. Type Parameters Name Description T The custom object type. RestartAsync(V1DaemonSet, IKubernetes) Restarts a k8s.Models.V1DaemonSet . Declaration public static async Task RestartAsync(this V1DaemonSet daemonset, IKubernetes k8s) Parameters Type Name Description k8s.Models.V1DaemonSet daemonset The daemonset being restarted. k8s.IKubernetes k8s The k8s.IKubernetes client to be used for the operation. Returns Type Description Task The tracking Task . RestartAsync(V1Deployment, IKubernetes) Restarts a k8s.Models.V1Deployment . Declaration public static async Task RestartAsync(this V1Deployment deployment, IKubernetes k8s) Parameters Type Name Description k8s.Models.V1Deployment deployment The target deployment. k8s.IKubernetes k8s The k8s.IKubernetes client to be used for the operation. Returns Type Description Task The tracking Task . RestartAsync(V1StatefulSet, IKubernetes) Restarts a k8s.Models.V1StatefulSet . Declaration public static async Task RestartAsync(this V1StatefulSet statefulset, IKubernetes k8s) Parameters Type Name Description k8s.Models.V1StatefulSet statefulset The deployment being restarted. k8s.IKubernetes k8s The k8s.IKubernetes client to be used for the operation. Returns Type Description Task The tracking Task . SetLabel(V1ObjectMeta, String, String) Sets a label within the metadata, constructing the label dictionary when necessary. Declaration public static void SetLabel(this V1ObjectMeta metadata, string name, string value = null) Parameters Type Name Description k8s.Models.V1ObjectMeta metadata The metadata instance. String name The label name. String value Optionally specifies a label value. This defaults to an empty string. SetMetadata(IKubernetesObject) Initializes a custom Kubernetes object's metadata Group , ApiVersion , and Kind properties from the k8s.Models.KubernetesEntityAttribute attached to the object's type. Declaration public static void SetMetadata(this IKubernetesObject obj) Parameters Type Name Description k8s.IKubernetesObject obj The object. Remarks This should be called in all custom object constructors to ensure that the object's metadata is configured and matches what was specified in the attribute. Here's what this will look like: [KubernetesEntity(Group = \"mygroup.io\", ApiVersion = \"v1\", Kind = \"my-resource\", PluralName = \"my-resources\")] [KubernetesEntityShortNames] [EntityScope(EntityScope.Cluster)] [Description(\"My custom resource.\")] public class V1MyCustomResource : CustomKubernetesEntity<V1ContainerRegistry.V1ContainerRegistryEntitySpec> { public V1ContainerRegistry() { ((IKubernetesObject)this).InitializeMetadata(); } ... Exceptions Type Condition InvalidDataException Thrown when the object's type does not have a k8s.Models.KubernetesEntityAttribute . UpsertClusterCustomObjectAsync<T>(ICustomObjectsOperations, T, String, String, String, CancellationToken) Creates or replaces a cluster scoped custom object of the specified generic object type and name, depending on whether the object already exists in the cluster. Declaration public static async Task<T> UpsertClusterCustomObjectAsync<T>(this ICustomObjectsOperations k8s, T body, string name, string dryRun = null, string fieldManager = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. T body Specifies the new object data. String name Specifies the object name. String dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed String fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint . CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task <T> The updated object. Type Parameters Name Description T The custom object type. UpsertNamespacedCustomObjectAsync<T>(ICustomObjectsOperations, T, String, String, String, String, CancellationToken) Creates or replaces a namespace scoped custom object of the specified generic object type, depending on whether the object already exists in the cluster. Declaration public static async Task<T> UpsertNamespacedCustomObjectAsync<T>(this ICustomObjectsOperations k8s, T body, string namespaceParameter, string name, string dryRun = null, string fieldManager = null, CancellationToken cancellationToken = default(CancellationToken)) where T : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description k8s.ICustomObjectsOperations k8s The k8s.Kubernetes client. T body Specifies the new object data. String namespaceParameter That target Kubernetes namespace. String name Specifies the object name. String dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed String fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint . CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task <T> The updated object. Type Parameters Name Description T The custom object type. UpsertSecretAsync(ICoreV1Operations, V1Secret, String) Adds a new Kubernetes secret or updates an existing secret. Declaration public static async Task<V1Secret> UpsertSecretAsync(this ICoreV1Operations k8s, V1Secret secret, string namespace = null) Parameters Type Name Description k8s.ICoreV1Operations k8s The k8s.Kubernetes client. k8s.Models.V1Secret secret The secret. String namespace Optionally overrides the default namespace. Returns Type Description Task < k8s.Models.V1Secret > The updated secret. WaitForCustomResourceDefinitionAsync<TEntity>(IKubernetes, TimeSpan, TimeSpan, CancellationToken) Waits for a customresourcedefinition to be created in the API server. Declaration public static async Task WaitForCustomResourceDefinitionAsync<TEntity>(this IKubernetes k8s, TimeSpan pollInterval = default(TimeSpan), TimeSpan timeout = default(TimeSpan), CancellationToken cancellationToken = default(CancellationToken)) where TEntity : IKubernetesObject<V1ObjectMeta> Parameters Type Name Description k8s.IKubernetes k8s TimeSpan pollInterval TimeSpan timeout CancellationToken cancellationToken Returns Type Description Task Type Parameters Name Description TEntity WaitForDaemonsetAsync(IKubernetes, String, String, String, String, TimeSpan, TimeSpan, CancellationToken) Waits for a daemon set to start successfully. Declaration public static async Task WaitForDaemonsetAsync(this IKubernetes k8s, string namespaceParameter, string name = null, string labelSelector = null, string fieldSelector = null, TimeSpan pollInterval = default(TimeSpan), TimeSpan timeout = default(TimeSpan), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description k8s.IKubernetes k8s The k8s.Kubernetes client. String namespaceParameter The namespace. String name The daemonset name. String labelSelector Optionally specifies a label selector. String fieldSelector Optionally specifies a field selector. TimeSpan pollInterval Optionally specifies the polling interval. This defaults to 1 second. TimeSpan timeout Optopnally specifies the operation timeout. This defaults to 30 seconds. CancellationToken cancellationToken Optionally specifies the cancellation token. Returns Type Description Task The tracking Task . Remarks One of name , labelSelector , or fieldSelector must be specified. WaitForDeploymentAsync(IKubernetes, String, String, String, String, TimeSpan, TimeSpan, CancellationToken) Waits for a service deployment to start successfully. Declaration public static async Task WaitForDeploymentAsync(this IKubernetes k8s, string namespaceParameter, string name = null, string labelSelector = null, string fieldSelector = null, TimeSpan pollInterval = default(TimeSpan), TimeSpan timeout = default(TimeSpan), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description k8s.IKubernetes k8s The k8s.Kubernetes client. String namespaceParameter The namespace. String name The deployment name. String labelSelector Optionally specifies a label selector. String fieldSelector Optionally specifies a field selector. TimeSpan pollInterval Optionally specifies the polling interval. This defaults to 1 second. TimeSpan timeout Optopnally specifies the operation timeout. This defaults to 30 seconds. CancellationToken cancellationToken Optionally specifies the cancellation token. Returns Type Description Task The tracking Task . Remarks One of name , labelSelector , or fieldSelector must be specified. WaitForPodAsync(IKubernetes, String, String, TimeSpan, TimeSpan, CancellationToken) Waits for a pod to start successfully. Declaration public static async Task WaitForPodAsync(this IKubernetes k8s, string namespaceParameter, string name = null, TimeSpan pollInterval = default(TimeSpan), TimeSpan timeout = default(TimeSpan), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description k8s.IKubernetes k8s The k8s.Kubernetes client. String namespaceParameter The namespace. String name The pod name. TimeSpan pollInterval Optionally specifies the polling interval. This defaults to 1 second. TimeSpan timeout Optopnally specifies the operation timeout. This defaults to 30 seconds. CancellationToken cancellationToken Optionally specifies the cancellation token. Returns Type Description Task The tracking Task . WaitForStatefulSetAsync(IKubernetes, String, String, String, String, TimeSpan, TimeSpan, CancellationToken) Waits for a stateful set to start successfully. Declaration public static async Task WaitForStatefulSetAsync(this IKubernetes k8s, string namespaceParameter, string name = null, string labelSelector = null, string fieldSelector = null, TimeSpan pollInterval = default(TimeSpan), TimeSpan timeout = default(TimeSpan), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description k8s.IKubernetes k8s The k8s.Kubernetes client. String namespaceParameter The namespace. String name The statefulset name. String labelSelector Optionally specifies a label selector. String fieldSelector Optionally specifies a field selector. TimeSpan pollInterval Optionally specifies the polling interval. This defaults to 1 second. TimeSpan timeout Optopnally specifies the operation timeout. This defaults to 30 seconds. CancellationToken cancellationToken Optionally specifies the cancellation token. Returns Type Description Task The tracking Task . Remarks One of name , labelSelector , or fieldSelector must be specified. WatchAsync<T>(IKubernetes, Func<WatchEvent<T>, Task>, String, String, String, String, String, Nullable<Int32>, CancellationToken, ILogger) Watches a Kubernetes resource with a callback. Declaration public static async Task WatchAsync<T>(this IKubernetes k8s, Func<WatchEvent<T>, Task> actionAsync, string namespaceParameter = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, string resourceVersionMatch = null, int? timeoutSeconds = null, CancellationToken cancellationToken = default(CancellationToken), ILogger logger = null) where T : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description k8s.IKubernetes k8s The k8s.IKubernetes instance. Func < WatchEvent <T>, Task > actionAsync The async action called as watch events are received. String namespaceParameter That target Kubernetes namespace. String fieldSelector The optional field selector String labelSelector The optional label selector String resourceVersion The start resource version. String resourceVersionMatch The optional resourceVersionMatch setting. Nullable < Int32 > timeoutSeconds Optional timeout override. CancellationToken cancellationToken Optionally specifies a cancellation token. ILogger logger Optional ILogger Returns Type Description Task The tracking Task . Type Parameters Name Description T The type parameter."
  },
  "neonkube/api/Neon.Kube.KubernetesObjectMetadata.html": {
    "href": "neonkube/api/Neon.Kube.KubernetesObjectMetadata.html",
    "title": "Class KubernetesObjectMetadata | NeonKUBE documentation",
    "keywords": "Class KubernetesObjectMetadata Describes a Kubernetes object by its basic properties, ApiVersion , Kind , and Metadata . Inheritance Object KubernetesObjectMetadata Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class KubernetesObjectMetadata : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, IValidate Properties ApiVersion Declaration public string ApiVersion { get; set; } Property Value Type Description String Kind Declaration public string Kind { get; set; } Property Value Type Description String Metadata Declaration public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Methods Validate() Declaration public void Validate() Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.KubernetesRetryHandler.html": {
    "href": "neonkube/api/Neon.Kube.KubernetesRetryHandler.html",
    "title": "Class KubernetesRetryHandler | NeonKUBE documentation",
    "keywords": "Class KubernetesRetryHandler A DelegatingHandler optionally used to retry transient errors encountered by k8s.Kubernetes clients. Inheritance Object HttpMessageHandler DelegatingHandler KubernetesRetryHandler Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class KubernetesRetryHandler : DelegatingHandler, IDisposable Constructors KubernetesRetryHandler(IRetryPolicy) Constructor. Declaration public KubernetesRetryHandler(IRetryPolicy retryPolicy = null) Parameters Type Name Description IRetryPolicy retryPolicy KubernetesRetryHandler(IRetryPolicy, HttpMessageHandler) Constructor. Declaration public KubernetesRetryHandler(IRetryPolicy retryPolicy, HttpMessageHandler innerHandler) Parameters Type Name Description IRetryPolicy retryPolicy HttpMessageHandler innerHandler Methods SendAsync(HttpRequestMessage, CancellationToken) Declaration protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters Type Name Description HttpRequestMessage request CancellationToken cancellationToken Returns Type Description Task < HttpResponseMessage > Overrides DelegatingHandler.SendAsync(HttpRequestMessage, CancellationToken)"
  },
  "neonkube/api/Neon.Kube.KubeService.html": {
    "href": "neonkube/api/Neon.Kube.KubeService.html",
    "title": "Class KubeService | NeonKUBE documentation",
    "keywords": "Class KubeService Defines the Neon service names. Inheritance Object KubeService Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class KubeService Fields Dex Dex. Declaration public const string Dex = \"neon-sso-dex\" Field Value Type Description String Minio Minio. Declaration public const string Minio = \"minio\" Field Value Type Description String NeonBlazorProxy Neon Blazor Proxy. Declaration public const string NeonBlazorProxy = \"neon-blazor-proxy\" Field Value Type Description String NeonClusterOperator Neon cluster operator. This implements several control loops that help manage the cluster. Declaration public const string NeonClusterOperator = \"neon-cluster-operator\" Field Value Type Description String NeonDashboard Neon Dashboard. Declaration public const string NeonDashboard = \"neon-dashboard\" Field Value Type Description String NeonNodeAgent Neon node agent. This is an operator provisioned on each cluster node as a daemonset that performs node managment tasks. Declaration public const string NeonNodeAgent = \"neon-node-agent\" Field Value Type Description String NeonSsoSessionProxy SSO Proxy. Declaration public const string NeonSsoSessionProxy = \"neon-sso-session-proxy\" Field Value Type Description String NeonSystemDb Neon system database. Declaration public const string NeonSystemDb = \"neon-system-db\" Field Value Type Description String"
  },
  "neonkube/api/Neon.Kube.KubeServiceAdvice.html": {
    "href": "neonkube/api/Neon.Kube.KubeServiceAdvice.html",
    "title": "Class KubeServiceAdvice | NeonKUBE documentation",
    "keywords": "Class KubeServiceAdvice Used by KubeClusterAdvice to record configuration advice for a specific Kurbernetes service being deployed. Inheritance Object Dictionary < String , Object > ObjectDictionary KubeServiceAdvice Implements IObjectDictionary Inherited Members ObjectDictionary.Get<TValue>(String) ObjectDictionary.Get<TValue>(String, TValue) ObjectDictionary.TryGetValue<TValue>(String, TValue) Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class KubeServiceAdvice : ObjectDictionary, IReadOnlyDictionary<string, object>, IReadOnlyCollection<KeyValuePair<string, object>>, IDictionary, ICollection, IDeserializationCallback, ISerializable, IObjectDictionary, IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IEnumerable Remarks This class along with an early setup step is intended to be used to help centralize the logic that decides things like what resources to reserve for services, how many service pods to deploy as well as whether to control which nodes nodes a service's pods may be deployed via affinity/tainting. Constructors KubeServiceAdvice(String) Constructor. Declaration public KubeServiceAdvice(string serviceIdentity) Parameters Type Name Description String serviceIdentity Identifies the service. Fields MetricsEnabledProperty Int32 : Identifies the property specifying whether metrics are enabled for the service. Declaration public const string MetricsEnabledProperty = \"metrics.enabled\" Field Value Type Description String MetricsIntervalProperty Int32 : Identifies the property specifying how often metrics should be scraped for the service. Declaration public const string MetricsIntervalProperty = \"metrics.interval\" Field Value Type Description String PodCpuLimitProperty Double : Identifies the property specifying the maximum CPU to assign to each service pod. Declaration public const string PodCpuLimitProperty = \"pod.cpu.limit\" Field Value Type Description String PodCpuRequestProperty Double : Identifies the property specifying the CPU to reserve for each service pod. Declaration public const string PodCpuRequestProperty = \"pod.cpu.request\" Field Value Type Description String PodMemoryLimitProperty Decimal : Identifies the property specifying the maxumum bytes RAM that can be consumed by each service pod. Declaration public const string PodMemoryLimitProperty = \"pod.memory.limit\" Field Value Type Description String PodMemoryRequestProperty Decimal : Identifies the property specifying the bytes of RAM to be reserved for each service pod. Declaration public const string PodMemoryRequestProperty = \"pod.memory.request\" Field Value Type Description String ReplicaCountProperty Int32 : Identifies the property specifying how many pods should be deployed for the service. Declaration public const string ReplicaCountProperty = \"replica.count\" Field Value Type Description String Properties IsReadOnly Cluster advice is designed to be configured once during cluster setup and then be considered to be read-only thereafter. This property should be set to true after the advice is intialized to prevent it from being modified again. note This is necessary because setup is performed on multiple threads and this class is not inheritly thread-safe. This also fits with the idea that the logic behind this advice is to be centralized. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean MetricsEnabled Specifies whether metrics should be collected for the service. Declaration public bool? MetricsEnabled { get; set; } Property Value Type Description Nullable < Boolean > MetricsInterval Specifies the metrics scrape interval or null when this property is not set. Declaration public string MetricsInterval { get; set; } Property Value Type Description String PodCpuLimit Specifies the CPU limit for each service pod or null when this property is not set. Declaration public double? PodCpuLimit { get; set; } Property Value Type Description Nullable < Double > PodCpuRequest Specifies the CPU request for each service pod or null when this property is not set. Declaration public double? PodCpuRequest { get; set; } Property Value Type Description Nullable < Double > PodMemoryLimit Specifies the memory limit for each service pod or null when this property is not set. Declaration public decimal? PodMemoryLimit { get; set; } Property Value Type Description Nullable < Decimal > PodMemoryRequest Specifies the memory request for each service pod or null when this property is not set. Declaration public decimal? PodMemoryRequest { get; set; } Property Value Type Description Nullable < Decimal > ReplicaCount Specifies the number of pods to be seployed for the service or null when this property is not set. Declaration public int? ReplicaCount { get; set; } Property Value Type Description Nullable < Int32 > ServiceName Returns the service name. Declaration public string ServiceName { get; } Property Value Type Description String Methods GetProperty(String) Returns the property value if present or null . Declaration public string GetProperty(string name) Parameters Type Name Description String name The property name. Returns Type Description String The property value or null . GetProperty<T>(String) Returns the property value if present or null . Declaration public T? GetProperty<T>(string name) where T : struct Parameters Type Name Description String name The property name. Returns Type Description Nullable <T> The property value or null . Type Parameters Name Description T The value type. Implements IObjectDictionary"
  },
  "neonkube/api/Neon.Kube.KubeSetupDetails.html": {
    "href": "neonkube/api/Neon.Kube.KubeSetupDetails.html",
    "title": "Class KubeSetupDetails | NeonKUBE documentation",
    "keywords": "Class KubeSetupDetails Holds details required during setup or for provisioning additional cluster nodes. Inheritance Object KubeSetupDetails Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class KubeSetupDetails Constructors KubeSetupDetails() Default constructor. Declaration public KubeSetupDetails() Properties ClusterJoinCommand The command to be used join nodes to an existing cluster. Declaration [JsonProperty(PropertyName = \"ClusterJoinCommand\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"clusterJoinCommand\", ScalarStyle = ScalarStyle.Literal, ApplyNamingConventions = false)] public string ClusterJoinCommand { get; set; } Property Value Type Description String ControlNodeFiles Holds files captured from the boot control-plane node that will need to be provisioned on the remaining control-plane nodes. The dictionary key is the file path and the value specifies the file text, permissions, and owner. Declaration [JsonProperty(PropertyName = \"ControlNodeFiles\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"controlNodeFiles\", ScalarStyle = ScalarStyle.Literal, ApplyNamingConventions = false)] public Dictionary<string, KubeFileDetails> ControlNodeFiles { get; set; } Property Value Type Description Dictionary < String , KubeFileDetails > SetupPending Indicates whether provisioning is complete but setup is still pending for this cluster Declaration [JsonProperty(PropertyName = \"SetupPending\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"setupPending\", ApplyNamingConventions = false)] public bool SetupPending { get; set; } Property Value Type Description Boolean"
  },
  "neonkube/api/Neon.Kube.KubeSetupProperty.html": {
    "href": "neonkube/api/Neon.Kube.KubeSetupProperty.html",
    "title": "Class KubeSetupProperty | NeonKUBE documentation",
    "keywords": "Class KubeSetupProperty Identifies the cluster setup state available in an ISetupController . Inheritance Object KubeSetupProperty Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class KubeSetupProperty Fields BaseImageName Property name for a bool that identifies the base image name to be used for preparing a cluster in debug mode . This is the name of the base image file as persisted to our public S3 bucket. This will not be set for cluster setup. Declaration public const string BaseImageName = \"base-image-name\" Field Value Type Description String ClusterAdvice Property name for accessing the SetupController<NodeMetadata> 's KubeClusterAdvice client property. Declaration public const string ClusterAdvice = \"setup-advice\" Field Value Type Description String ClusterLogin Property name for accessing the SetupController<NodeMetadata> 's ClusterLogin property. Declaration public const string ClusterLogin = \"cluster-login\" Field Value Type Description String ClusterProxy Property name for accessing the SetupController<NodeMetadata> 's ClusterProxy property. Declaration public const string ClusterProxy = \"cluster-proxy\" Field Value Type Description String DebugMode Property name for accessing a bool that indicates that we're running cluster prepare/setup in debug mode . In debug mode, setup works like it did in the past, where we deployed the base node image first and then configured the node from that, rather than starting with the node image with assets already prepositioned. This mode is useful when debugging cluster setup or adding new features. Declaration public const string DebugMode = \"debug-setup\" Field Value Type Description String DesktopImage Property name for a bool value indicating that we're generating a ready-to-go desktop image. Declaration public const string DesktopImage = \"desktop-image\" Field Value Type Description String DesktopReadyToGo Property name for a bool value indicating whether cluster using a ready-to-go desktop image is being deployed. Declaration public const string DesktopReadyToGo = \"desktop-readytogo\" Field Value Type Description String DesktopServiceProxy Property name for a DesktopServiceProxy instance that can be used to perform specific privileged operations from a non-privileged process. Declaration public const string DesktopServiceProxy = \"desktop-service-proxy\" Field Value Type Description String DisableImageDownload Property name for a boolean indicating that the node image has already been downloaded (e.g. by neonDESKTOP) and does not need to be downloaded hosting managers during cluster provisioning. Image downloading should be considered to be enabled when this property is not present. Declaration public const string DisableImageDownload = \"image-download-disabled\" Field Value Type Description String HarborCredentials Property name for a Credentials object holding the username and password to be used to authenticate podman on the cluster node with the local Harbor registry. note Token based credentials are not supported. Declaration public const string HarborCredentials = \"harbor-credentials\" Field Value Type Description String HostingEnvironment Property name for determining the current hosting environment: HostingEnvironment , Declaration public const string HostingEnvironment = \"hosting-environment\" Field Value Type Description String HostingManager Property name for accessing the SetupController<NodeMetadata> 's IHostingManager property. Declaration public const string HostingManager = \"hosting-manager\" Field Value Type Description String K8sClient Property name for accessing the SetupController<NodeMetadata> 's k8s.Kubernetes client property. Declaration public const string K8sClient = \"k8sclient\" Field Value Type Description String MaintainerMode Property name for accessing a bool that indicates that we're running cluster prepare/setup in maintainer mode . Declaration public const string MaintainerMode = \"maintainer-setup\" Field Value Type Description String NeonCloudHeadendClient Property name for accessing the neonCLOUD headend service client. Declaration public const string NeonCloudHeadendClient = \"neoncloud-headend-client\" Field Value Type Description String Preparing Property name for accessing a bool that indicates that we're preparing a cluster vs. setting one up. Declaration public const string Preparing = \"preparing\" Field Value Type Description String Redact Property name for a bool indicating whether secrets should be redacted when logging during cluster setup. This should be generally set to true for production deployments. Declaration public const string Redact = \"redact\" Field Value Type Description String ReleaseMode Property name for accessing a bool that indicates that we're running cluster prepare/setup in release mode . Declaration public const string ReleaseMode = \"release-setup\" Field Value Type Description String"
  },
  "neonkube/api/Neon.Kube.KubeSshKey.html": {
    "href": "neonkube/api/Neon.Kube.KubeSshKey.html",
    "title": "Class KubeSshKey | NeonKUBE documentation",
    "keywords": "Class KubeSshKey Describes a client key used for SSH public key authentication. Inheritance Object KubeSshKey Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class KubeSshKey Remarks note Only RSA keys should be used in production. Other keys like DSA are no longer considered secure. SSH authentication keys have two parts, the public key that needs to be deployed to every server machine and the private key that will be retained on client machines which will be used to sign authentication challenges by servers. The PublicPUB property holds the public key. This key has a standard format can can be appended directly to the authorized_keys file on a Linux machine. PrivateOpenSSH holds the private key. Passphrase is not currently used but eventually, this will enable an additional level of encryption at rest. Properties FingerprintMd5 MD5 fingerprint of the public key formatted as colon separated HEX bytes. Declaration [JsonProperty(PropertyName = \"Fingerprint-MD5\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"fingerprint-MD5\", ScalarStyle = ScalarStyle.Literal, ApplyNamingConventions = false)] public string FingerprintMd5 { get; set; } Property Value Type Description String FingerprintSha256 SHA256 fingerprint of the public key formatted as base64. Declaration [JsonProperty(PropertyName = \"Fingerprint-SHA256\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"fingerprint-SHA256\", ScalarStyle = ScalarStyle.Literal, ApplyNamingConventions = false)] public string FingerprintSha256 { get; set; } Property Value Type Description String Passphrase Not Implemented Yet: The optional passphrase used for additional security. Declaration [JsonProperty(PropertyName = \"Passphrase\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"passphrase\", ApplyNamingConventions = false)] public string Passphrase { get; set; } Property Value Type Description String PrivateOpenSSH The private key formatted for OpenSSH . Declaration [JsonProperty(PropertyName = \"PrivateOpenSSH\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"privateOpenSSH\", ScalarStyle = ScalarStyle.Literal, ApplyNamingConventions = false)] public string PrivateOpenSSH { get; set; } Property Value Type Description String PrivatePEM The private key formatted for SSH2 as defined by RFC 4716 . Declaration [JsonProperty(PropertyName = \"PrivatePEM\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"privatePEM\", ScalarStyle = ScalarStyle.Literal, ApplyNamingConventions = false)] public string PrivatePEM { get; set; } Property Value Type Description String PublicOpenSSH The RSA public key to deployed on the server for authenticating SSH clients. This is formatted for OpenSSH as generated by the Linux ssh-keygen tool. Declaration [JsonProperty(PropertyName = \"PublicOpenSSH\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"publicOpenSSH\", ScalarStyle = ScalarStyle.Literal, ApplyNamingConventions = false)] public string PublicOpenSSH { get; set; } Property Value Type Description String PublicPUB The RSA public key to deployed on the server for authenticating SSH clients. This is formatted as PUB format as generated by the Linux ssh-keygen tool. Declaration [JsonProperty(PropertyName = \"PublicPUB\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"publicPUB\", ScalarStyle = ScalarStyle.Literal, ApplyNamingConventions = false)] public string PublicPUB { get; set; } Property Value Type Description String PublicSSH2 The RSA public key formatted as SSH2 as defined by RFC 4716 . Declaration [JsonProperty(PropertyName = \"PublicSSH2\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"publicSSH2\", ScalarStyle = ScalarStyle.Literal, ApplyNamingConventions = false)] public string PublicSSH2 { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.KubeVersions.html": {
    "href": "neonkube/api/Neon.Kube.KubeVersions.html",
    "title": "Class KubeVersions | NeonKUBE documentation",
    "keywords": "Class KubeVersions Specifies deployment related component versions for the current neonKUBE release. Kubernetes release information can be found here: https://kubernetes.io/releases/ Inheritance Object KubeVersions Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class KubeVersions Fields AlertManager The version of AlertManager to be installed. Declaration public const string AlertManager = \"v0.21.0\" Field Value Type Description String BuildBranch Returns the name of the branch from which this assembly was built. Declaration public const string BuildBranch = \"master\" Field Value Type Description String Busybox The version of busybox image to be installed. Declaration public const string Busybox = \"1.32.0\" Field Value Type Description String Calico The version of Calico to install. Declaration public const string Calico = \"3.22.2\" Field Value Type Description String CoreDNS The version of CoreDNS to be installed. Declaration public const string CoreDNS = \"1.6.2\" Field Value Type Description String CoreDNSPlugin The version of CoreDNS plugin to be installed. Declaration public const string CoreDNSPlugin = \"0.2-istio-1.1\" Field Value Type Description String Crio The version of CRI-O container runtime to be installed. note CRI-O is tied to specific Kubernetes releases and the CRI-O major and minor versions must match the Kubernetes major and minor version numbers. The revision/patch properties may be different. Versions can be seen here: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/ Make sure the package has actually been uploaded. Declaration public const string Crio = \"1.24.0\" Field Value Type Description String DnsUtils The version of dnsutils to install. Declaration public const string DnsUtils = \"1.3\" Field Value Type Description String Haproxy The version of HaProxy to install. Declaration public const string Haproxy = \"1.9.2-alpine\" Field Value Type Description String Helm The version of Helm to be installed. Declaration public const string Helm = \"3.7.1\" Field Value Type Description String Istio The version of Istio to install. Declaration public const string Istio = \"1.14.1\" Field Value Type Description String KubeAdminPackage The package version for Kubernetes admin service. Declaration public const string KubeAdminPackage = \"1.24.0-00\" Field Value Type Description String Kubectl The version of the Kubernetes client tools to be installed with neonDESKTOP. Declaration public const string Kubectl = \"1.24.0\" Field Value Type Description String KubectlPackage The package version for the Kubernetes cli. Declaration public const string KubectlPackage = \"1.24.0-00\" Field Value Type Description String KubeletPackage The package version for the Kubelet service. Declaration public const string KubeletPackage = \"1.24.0-00\" Field Value Type Description String Kubernetes The version of Kubernetes to be installed. Declaration public const string Kubernetes = \"1.24.0\" Field Value Type Description String KubernetesDashboard The version of the Kubernetes dashboard to be installed. Declaration public const string KubernetesDashboard = \"2.5.1\" Field Value Type Description String KubernetesDashboardMetrics The version of the Kubernetes dashboard metrics scraper to be installed. Declaration public const string KubernetesDashboardMetrics = \"v1.0.6\" Field Value Type Description String Kustomize The version of Kustomize to be installed. Declaration public const string Kustomize = \"4.4.1\" Field Value Type Description String NeonKube The current neonKUBE version. Declaration public const string NeonKube = \"0.8.7-alpha\" Field Value Type Description String Remarks RELEASE CONVENTIONS: We're going to use this version to help manage public releases as well as to help us isolate development changes made by individual developers or by multiple developers colloborating on common features. -alpha[.##] Used for internal releases that are not meant to be consumed by the public. The .## part is optional and can be used when it's necessary to retain artifacts like container and node images for multiple pre-releases. This must include two digits so a leading \"0\" will be required for small numbers. -preview[.##] This is used for public preview releases where NEONFORGE is not making any short or long term support promises. We may remove, change, or break features included in this release for subsequent releases. The .## part is optional and can be used when it's necessary to retain artifacts like container and node images for multiple internal pre-releases. This must include two digits so a leading \"0\" will be required for small numbers. -preview[.##] This is used for public preview releases where NEONFORGE is not making any short or long term support promises. We may remove, change, or break features included in this release for subsequent releases. The .## part is optional and can be used when it's necessary to retain artifacts like container and node images for multiple pre-releases. This must include two digits so a leading \"0\" will be required for small numbers. -rc[.##] This is used for public release candidate releases. For these releases, NEONFORGE is still not making any short or long term support promises, but we're going to try a lot harder to avoid future incompatibilities. RC release will typically be feature complete and reasonably well tested. The .## part is optional and can be used when it's necessary to retain artifacts like container and node images for multiple pre-releases. This must include two digits so a leading \"0\" will be required for small numbers. NONE Generally available non-preview public releases. The neonCLOUD stage/publish tools will use this version as is when tagging container images as well as node/desktop virtual machine images when publishing Neon.Kube libraries build from a release-* branch. Otherwise, the tool will append the branch name to the release like: 0.8.7-alpha.BRANCH note IMPORTANT: This convention allows multiple developers to work with their own versions of intermediate releases in parallel while avoiding merge conflicts caused by differing per-developer version numbers. NeonKubeContainerImageTagPrefix Returns the prefix used for neonKUBE container tags. Declaration public const string NeonKubeContainerImageTagPrefix = \"neonkube-\" Field Value Type Description String Pause The version of pause image to be installed. Declaration public const string Pause = \"3.7\" Field Value Type Description String Podman The version of Podman to be installed. Declaration public const string Podman = \"3.4.2\" Field Value Type Description String Prometheus The version of Prometheus to be installed. Declaration public const string Prometheus = \"v2.22.1\" Field Value Type Description String Properties NeonKubeContainerImageTag Returns the container image tag for the current neonKUBE release. This adds the neonkube- prefix to NeonKube . note This also includes the .BRANCH part when the assembly was built from a non-release branch. Declaration public static string NeonKubeContainerImageTag { get; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.LeaderElectionConfig.html": {
    "href": "neonkube/api/Neon.Kube.LeaderElectionConfig.html",
    "title": "Class LeaderElectionConfig | NeonKUBE documentation",
    "keywords": "Class LeaderElectionConfig Configuration information for the LeaderElector class. Inheritance Object LeaderElectionConfig Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public sealed class LeaderElectionConfig Constructors LeaderElectionConfig(IKubernetes, String, String, String, TimeSpan, TimeSpan, TimeSpan, String, String[]) Constructor. Declaration public LeaderElectionConfig(IKubernetes k8s, string namespace, string leaseName, string identity, TimeSpan leaseDuration = default(TimeSpan), TimeSpan renewDeadline = default(TimeSpan), TimeSpan retryPeriod = default(TimeSpan), string metricsPrefix = null, string[] counterLabels = null) Parameters Type Name Description k8s.IKubernetes k8s The k8s.IKubernetes client to be used to communicate with th\\e cluster. String namespace Identifies the namespace where the lease will be hosted. String leaseName Specifies the lease name used to manage elections. Note that this must be a valid Kubernetes resource name. String identity Specifies the unique identity of the entity using LeaderElector to run for the leadership role. This will typically be passed as the host pod name. note It's very important that the identifiers used by different leader candidates be unique. As mentioned above, the host pod name is a great option for most situations but this could also be a UUID or some other identity scheme which guarentees uniqueness. TimeSpan leaseDuration Optionally specifies the interval a follower must wait before attempting to become the leader. This defaults to 30 seconds . TimeSpan renewDeadline Optionally specifies the interval when the leader will attempt to renew the lease before abandonding leadership. This defaults to 15 seconds . TimeSpan retryPeriod Optionally specifies the interval that LeaderElector instances should wait before retrying any actions. This defaults to 2 seconds . String metricsPrefix Optionally specifies the metrics prefix. This defaults to null . String [] counterLabels Optionally specifies any label values to be included when the metrics counters are incremented. The values in this array must match any label names defined when the counters passed were created. Properties Identity Returns the unique identity of the entity using the elector to running for the leadership role. This is typically the hosting pod name. Declaration public string Identity { get; } Property Value Type Description String K8s Returns the k8s.IKubernetes client to be used to communicate with the cluster. Declaration public IKubernetes K8s { get; } Property Value Type Description k8s.IKubernetes LeaseDuration Returns the interval a follower must wait before attempting to become the leader. Declaration public TimeSpan LeaseDuration { get; } Property Value Type Description TimeSpan LeaseName Returns the lease name. Declaration public string LeaseName { get; } Property Value Type Description String MetricsPrefix The metrics prefix. Declaration public string MetricsPrefix { get; } Property Value Type Description String Namespace Returns the Kubernetes namespace where the lease will reside. Declaration public string Namespace { get; } Property Value Type Description String RenewDeadline Returns the interval durning the leader will attempt to renew the lease before abandonding leadership upon failures. Declaration public TimeSpan RenewDeadline { get; } Property Value Type Description TimeSpan RetryPeriod The interval that LeaderElector instances should wait before retrying any actions. Declaration public TimeSpan RetryPeriod { get; } Property Value Type Description TimeSpan Methods SetCounters(String) Declaration public void SetCounters(string metricsPrefix) Parameters Type Name Description String metricsPrefix"
  },
  "neonkube/api/Neon.Kube.LeaderElector.html": {
    "href": "neonkube/api/Neon.Kube.LeaderElector.html",
    "title": "Class LeaderElector | NeonKUBE documentation",
    "keywords": "Class LeaderElector Implements a thin wrapper over k8s.LeaderElection.LeaderElector integrating optional metric counters for tracking leadership changes. Inheritance Object LeaderElector Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public sealed class LeaderElector : IDisposable Remarks This class implements leader election uses a k8s.Models.V1Lease object to manage leadership election by trying to ensure that only one leader is active at any time. note Although this class tries fairly hard to ensure that only a single leader exists at any time, it is possible for two or more instances to believe they are the leader due to network partitions or latency issues. A client only acts on timestamps captured locally to infer the state of the leader election. The client does not consider timestamps in the leader election record to be accurate because these timestamps may not have been produced by the local clock. The implemention does not depend on their accuracy and only uses their change to indicate that another client has renewed the leader lease. Thus the implementation is tolerant to arbitrary clock skew, but is not tolerant to arbitrary clock skew rate. However, the level of tolerance to skew rate can be configured by setting RenewDeadline and LeaseDuration appropriately. The tolerance expressed as a maximum tolerated ratio of time passed on the fastest node to time passed on the slowest node can be approximately achieved with a configuration that sets the same ratio of LeaseDuration to RenewDeadline. For example if a user wanted to tolerate some nodes progressing forward in time twice as fast as other nodes, the user could set LeaseDuration to 60 seconds and RenewDeadline to 30 seconds. While not required, some method of clock synchronization between nodes in the cluster is highly recommended. It's important to keep in mind when configuring this client that the tolerance to skew rate varies inversely to control-plane node availability. Larger clusters often need a more lenient SLA for API latency. This should be taken into account when configuring the client. The rate of leader transitions should be monitored and RetryPeriod and LeaseDuration should be increased until the rate is stable and acceptably low. It's important to keep in mind when configuring this client that the tolerance to API latency varies inversely to control-plane availability. This class is very easy to use: Use the LeaderElector constructor passing a k8s.IKubernetes client instance and your LeaderElectionConfig . Call RunAsync() to start the elector. This method will return when the elector is disposed. Constructors LeaderElector(LeaderElectionConfig, Action, Action<String>, Action) Constructor. Declaration public LeaderElector(LeaderElectionConfig config, Action onStartedLeading = null, Action<string> onNewLeader = null, Action onStoppedLeading = null) Parameters Type Name Description LeaderElectionConfig config Specifies the elector configuration. Action onStartedLeading Optionally specifies the action to be called when the instance assumes leadership. Action < String > onNewLeader Optionally specifies the action to be called when leadership changes. The identity of the new leader will be passed. Action onStoppedLeading Optionally specifies the action to be called when the instance is demoted. Properties IsLeader Returns true if the current instance is currently the leader. Declaration public bool IsLeader { get; } Property Value Type Description Boolean Exceptions Type Condition ObjectDisposedException Thrown when the instance is disposed. Leader Returns the identity of the current leader or null when there's no leader. Declaration public string Leader { get; } Property Value Type Description String Exceptions Type Condition ObjectDisposedException Thrown when the instance is disposed. Methods Dispose() Declaration public void Dispose() RunAsync() Starts the elector. Note that this will return when the elector is disposed. Declaration public async Task RunAsync() Returns Type Description Task The tracking Task . Exceptions Type Condition ObjectDisposedException Thrown when the instance is disposed."
  },
  "neonkube/api/Neon.Kube.Models.AzureComputePlan.html": {
    "href": "neonkube/api/Neon.Kube.Models.AzureComputePlan.html",
    "title": "Interface AzureComputePlan | NeonKUBE documentation",
    "keywords": "Interface AzureComputePlan Namespace : Neon.Kube.Models Assembly : Neon.Kube.Models.dll Syntax [Target(\"all\")] public interface AzureComputePlan Properties Name Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] string Name { get; set; } Property Value Type Description String Product Declaration [JsonProperty(PropertyName = \"Product\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] string Product { get; set; } Property Value Type Description String Publisher Declaration [JsonProperty(PropertyName = \"Publisher\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] string Publisher { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Models.AzureImageDetails.html": {
    "href": "neonkube/api/Neon.Kube.Models.AzureImageDetails.html",
    "title": "Interface AzureImageDetails | NeonKUBE documentation",
    "keywords": "Interface AzureImageDetails Namespace : Neon.Kube.Models Assembly : Neon.Kube.Models.dll Syntax [Target(\"all\")] public interface AzureImageDetails Properties ComputePlan Declaration [JsonProperty(PropertyName = \"ComputePlan\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] AzureComputePlan ComputePlan { get; set; } Property Value Type Description AzureComputePlan ImageReference Declaration [JsonProperty(PropertyName = \"ImageReference\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] AzureImageReference ImageReference { get; set; } Property Value Type Description AzureImageReference"
  },
  "neonkube/api/Neon.Kube.Models.AzureImageReference.html": {
    "href": "neonkube/api/Neon.Kube.Models.AzureImageReference.html",
    "title": "Interface AzureImageReference | NeonKUBE documentation",
    "keywords": "Interface AzureImageReference Namespace : Neon.Kube.Models Assembly : Neon.Kube.Models.dll Syntax [Target(\"all\")] public interface AzureImageReference Properties Offer Declaration [JsonProperty(PropertyName = \"Offer\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] string Offer { get; set; } Property Value Type Description String Publisher Declaration [JsonProperty(PropertyName = \"Publisher\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] string Publisher { get; set; } Property Value Type Description String Sku Declaration [JsonProperty(PropertyName = \"Sku\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] string Sku { get; set; } Property Value Type Description String Version Declaration [JsonProperty(PropertyName = \"Version\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] string Version { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Models.Headend.html": {
    "href": "neonkube/api/Neon.Kube.Models.Headend.html",
    "title": "Namespace Neon.Kube.Models.Headend | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Models.Headend Classes Stub $todo(jefflill): Delete this after we've added a legitimate model to this assembly. Interfaces IClusterController Implements cluster methods. IClusterSetupController INeonDesktopController Implements cluster methods."
  },
  "neonkube/api/Neon.Kube.Models.Headend.IClusterController.html": {
    "href": "neonkube/api/Neon.Kube.Models.Headend.IClusterController.html",
    "title": "Interface IClusterController | NeonKUBE documentation",
    "keywords": "Interface IClusterController Implements cluster methods. Namespace : Neon.Kube.Models.Headend Assembly : Neon.Kube.Models.dll Syntax [Target(\"all\")] [Target(\"headend\")] [ServiceModel(\"Headend\", \"Cluster\")] [Route(\"cluster\")] [ApiVersion(\"0.2\")] public interface IClusterController Methods CreateSsoClientAsync(String, String) Declaration [HttpPost(null)] [Route(\"{clusterId}/sso-client\")] Dictionary<string, string> CreateSsoClientAsync([FromRoute(null)] string clusterId, [FromQuery(null)] string clusterName) Parameters Type Name Description String clusterId String clusterName Returns Type Description Dictionary < String , String > GetTokenAsync(String) Declaration [HttpGet(null)] [Route(\"{clusterId}/token/renew\")] string GetTokenAsync([FromRoute(null)] string clusterId) Parameters Type Name Description String clusterId Returns Type Description String UpdateClusterDomainAsync(String, String) Declaration [HttpPut(null)] [Route(\"{clusterId}/domain\")] string UpdateClusterDomainAsync([FromRoute(null)] string clusterId, [FromQuery(null)] string addresses) Parameters Type Name Description String clusterId String addresses Returns Type Description String"
  },
  "neonkube/api/Neon.Kube.Models.Headend.IClusterSetupController.html": {
    "href": "neonkube/api/Neon.Kube.Models.Headend.IClusterSetupController.html",
    "title": "Interface IClusterSetupController | NeonKUBE documentation",
    "keywords": "Interface IClusterSetupController Namespace : Neon.Kube.Models.Headend Assembly : Neon.Kube.Models.dll Syntax [Target(\"all\")] [Target(\"headend\")] [ServiceModel(\"Headend\", \"ClusterSetup\")] [Route(\"cluster-setup\")] [ApiVersion(\"0.2\")] public interface IClusterSetupController Methods CreateClusterAsync() Declaration [HttpPost(null)] [Route(\"create\")] Dictionary<string, string> CreateClusterAsync() Returns Type Description Dictionary < String , String > GetAzureImageDetailsAsync(String, CpuArchitecture) Declaration [HttpGet(null)] [Route(\"image/node/azure\")] AzureImageDetails GetAzureImageDetailsAsync([FromQuery(null)] string version, [FromQuery(null)] CpuArchitecture architecture) Parameters Type Name Description String version CpuArchitecture architecture Returns Type Description AzureImageDetails GetDesktopImageManifestUriAsync(String, String, CpuArchitecture, String) Declaration [HttpGet(null)] [Route(\"image/desktop\")] string GetDesktopImageManifestUriAsync([FromQuery(null)] string hostingEnvironment, [FromQuery(null)] string version, [FromQuery(null)] CpuArchitecture architecture, [FromQuery(null)] string stageBranch) Parameters Type Name Description String hostingEnvironment String version CpuArchitecture architecture String stageBranch Returns Type Description String GetNodeImageManifestUriAsync(String, String, CpuArchitecture, String) Declaration [HttpGet(null)] [Route(\"image/node\")] string GetNodeImageManifestUriAsync([FromQuery(null)] string hostingEnvironment, [FromQuery(null)] string version, [FromQuery(null)] CpuArchitecture architecture, [FromQuery(null)] string stageBranch) Parameters Type Name Description String hostingEnvironment String version CpuArchitecture architecture String stageBranch Returns Type Description String PostDeploymentLogAsync(String, DateTime, String, String, String, Boolean) Declaration [HttpPost(null)] [BodyStream(IncludeContentSize = true)] [Route(\"deployment-log\")] void PostDeploymentLogAsync([FromQuery(null)] string uploadId, [FromQuery(null)] DateTime timestampUtc, [FromQuery(null)] string version, [FromQuery(null)] string clientId, [FromQuery(null)] string userId, [FromQuery(null)] bool preparing) Parameters Type Name Description String uploadId DateTime timestampUtc String version String clientId String userId Boolean preparing"
  },
  "neonkube/api/Neon.Kube.Models.Headend.INeonDesktopController.html": {
    "href": "neonkube/api/Neon.Kube.Models.Headend.INeonDesktopController.html",
    "title": "Interface INeonDesktopController | NeonKUBE documentation",
    "keywords": "Interface INeonDesktopController Implements cluster methods. Namespace : Neon.Kube.Models.Headend Assembly : Neon.Kube.Models.dll Syntax [Target(\"all\")] [Target(\"headend\")] [ServiceModel(\"Headend\", \"NeonDesktop\")] [Route(\"\")] [ApiVersion(\"0.2\")] public interface INeonDesktopController Methods GetNeonDesktopCertificateAsync() Declaration [HttpGet(null)] [Route(\"neondesktop/certificate\")] IDictionary<string, byte[]> GetNeonDesktopCertificateAsync() Returns Type Description IDictionary < String , Byte []>"
  },
  "neonkube/api/Neon.Kube.Models.Headend.Stub.html": {
    "href": "neonkube/api/Neon.Kube.Models.Headend.Stub.html",
    "title": "Class Stub | NeonKUBE documentation",
    "keywords": "Class Stub $todo(jefflill): Delete this after we've added a legitimate model to this assembly. Inheritance Object Stub Namespace : Neon.Kube.Models.Headend Assembly : Neon.Kube.Models.dll Syntax public class Stub"
  },
  "neonkube/api/Neon.Kube.Models.html": {
    "href": "neonkube/api/Neon.Kube.Models.html",
    "title": "Namespace Neon.Kube.Models | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Models Interfaces AzureComputePlan AzureImageDetails AzureImageReference"
  },
  "neonkube/api/Neon.Kube.NeonAnnotation.html": {
    "href": "neonkube/api/Neon.Kube.NeonAnnotation.html",
    "title": "Class NeonAnnotation | NeonKUBE documentation",
    "keywords": "Class NeonAnnotation Defines the non-node annotations used to tag objects by neonKUBE. Inheritance Object NeonAnnotation Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class NeonAnnotation Fields OtelCollector Used by neon-cluster-operator to identify namespaces where the neon-otel-collector shoule be created. The idea is that telemetry forwarding will be enabled by default but that users can disable this on a namespace basis by adding this label, with the value set to false. Declaration public const string OtelCollector = \"neonkube.io/otel-collector\" Field Value Type Description String"
  },
  "neonkube/api/Neon.Kube.NeonKubeException.html": {
    "href": "neonkube/api/Neon.Kube.NeonKubeException.html",
    "title": "Class NeonKubeException | NeonKUBE documentation",
    "keywords": "Class NeonKubeException Describes a cluster related related error. Inheritance Object Exception NeonKubeException Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class NeonKubeException : Exception, ISerializable Constructors NeonKubeException() Default constructor. Declaration public NeonKubeException() NeonKubeException(String, Exception) Constructs and instance with a message and an optional inner exception. Declaration public NeonKubeException(string message, Exception innerException = null) Parameters Type Name Description String message The message. Exception innerException The optional inner exception."
  },
  "neonkube/api/Neon.Kube.NeonLabel.html": {
    "href": "neonkube/api/Neon.Kube.NeonLabel.html",
    "title": "Class NeonLabel | NeonKUBE documentation",
    "keywords": "Class NeonLabel Defines the non-node cluster definition labels used to tag objects by neonKUBE. note Labels specified by the cluster definition and assigned to nodes are defined here: NodeLabels . Inheritance Object NeonLabel Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class NeonLabel Fields ManagedBy Used to identify which service manages the entity. Declaration public const string ManagedBy = \"neonkube.io/managed-by\" Field Value Type Description String NodeTaskType Specifies the type of node task. Declaration public const string NodeTaskType = \"neonkube.io/nodetask-type\" Field Value Type Description String RemoveOnClusterReset Used to label custom neonKUBE resources that should be removed by ClusterFixture or ClusterProxy when resetting a test cluster. Declaration public const string RemoveOnClusterReset = \"neonkube.io/remove-on-cluster-reset\" Field Value Type Description String"
  },
  "neonkube/api/Neon.Kube.NeonNodeTaskType.html": {
    "href": "neonkube/api/Neon.Kube.NeonNodeTaskType.html",
    "title": "Class NeonNodeTaskType | NeonKUBE documentation",
    "keywords": "Class NeonNodeTaskType Defines node task types. Inheritance Object NeonNodeTaskType Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class NeonNodeTaskType Fields ContainerImageSync Node task to sync container images to the cluster registry. Declaration public const string ContainerImageSync = \"container-image-sync\" Field Value Type Description String ControlPlaneCertExpirationCheck Node task to check the expiration of the cluster control plane certificates. Declaration public const string ControlPlaneCertExpirationCheck = \"control-plane-cert-expiration-check\" Field Value Type Description String ControlPlaneCertUpdate Node task to update control plane certificates. Declaration public const string ControlPlaneCertUpdate = \"control-plane-cert-update\" Field Value Type Description String NodeCaCertUpdate Node task to update node CA certificates. Declaration public const string NodeCaCertUpdate = \"node-ca-cert-update\" Field Value Type Description String"
  },
  "neonkube/api/Neon.Kube.NodeImageInfo.html": {
    "href": "neonkube/api/Neon.Kube.NodeImageInfo.html",
    "title": "Class NodeImageInfo | NeonKUBE documentation",
    "keywords": "Class NodeImageInfo Holds information about a setup container image. Inheritance Object NodeImageInfo Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class NodeImageInfo Constructors NodeImageInfo(String, String, String, String) Constructor. Declaration public NodeImageInfo(string imageFolder, string imageName, string targetTag, string registry) Parameters Type Name Description String imageFolder The image folder path. String imageName The image name. String targetTag The target tag. String registry The source registry. Properties Folder Returns the image folder path. Declaration public string Folder { get; } Property Value Type Description String Name Returns the image name without the hoster's prefix or image tag. Declaration public string Name { get; } Property Value Type Description String Registry Returns the registry used for the source image. Declaration public string Registry { get; } Property Value Type Description String SourceImage Returns the fully qualified source image name from one of the NeonSdkProdRegistry or NeonSdkDevRegistry container registries and will be tagged with the cluster version. Declaration public string SourceImage { get; } Property Value Type Description String TargetImage Returns the fully qualified name of the image as it will be deployed to a cluster, with the registry being set to LocalClusterRegistry which maps to the cluster's internal container registry. Declaration public string TargetImage { get; } Property Value Type Description String TargetTag Returns the tag used for the target image persisted to the internal cluster registry. This will be set to the original source component tag as built for the base images. Declaration public string TargetTag { get; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.NodeSshProxyExtensions.html": {
    "href": "neonkube/api/Neon.Kube.NodeSshProxyExtensions.html",
    "title": "Class NodeSshProxyExtensions | NeonKUBE documentation",
    "keywords": "Class NodeSshProxyExtensions Extends the NodeSshProxy<TMetadata> class by adding cluster setup related methods. Inheritance Object NodeSshProxyExtensions Namespace : Neon.Kube Assembly : Neon.Kube.Setup.dll Syntax public static class NodeSshProxyExtensions Methods NodeInstallHelmArchive(ILinuxSshProxy, ISetupController) Installs the Helm charts as a single ZIP archive written to the neonKUBE node's Helm folder. Declaration public static void NodeInstallHelmArchive(this ILinuxSshProxy node, ISetupController controller) Parameters Type Name Description ILinuxSshProxy node The node instance. ISetupController controller The setup controller."
  },
  "neonkube/api/Neon.Kube.Oauth2Proxy.html": {
    "href": "neonkube/api/Neon.Kube.Oauth2Proxy.html",
    "title": "Namespace Neon.Kube.Oauth2Proxy | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Oauth2Proxy Classes Oauth2ProxyConfig Oauth2Proxy configuration model. Oauth2ProxyHeader Oauth2Proxy header model. Oauth2ProxyHeaderValue Oauth2Proxy header value model. Oauth2ProxyLoginUrlParameterRule Oauth2Proxy login url parameters model. Oauth2ProxyLoginUrlParameters Oauth2Proxy login url parameters model. Oauth2ProxyOidcOptions Oauth2Proxy OIDC option model. Oauth2ProxyProvider Oauth2Proxy providers model. Oauth2ProxySecretSource Oauth2Proxy header model. Oauth2ProxyServer Oauth2Proxy header model. Oauth2ProxyTls Oauth2Proxy TLS model. Oauth2ProxyUpstream Oauth2Proxy header model. Oauth2ProxyUpstreamConfig Oauth2Proxy header model. Enums Oauth2ProxyProviderType Oauth2Proxy providers model."
  },
  "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyConfig.html": {
    "href": "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyConfig.html",
    "title": "Class Oauth2ProxyConfig | NeonKUBE documentation",
    "keywords": "Class Oauth2ProxyConfig Oauth2Proxy configuration model. Inheritance Object Oauth2ProxyConfig Namespace : Neon.Kube.Oauth2Proxy Assembly : Neon.Kube.dll Syntax public class Oauth2ProxyConfig Constructors Oauth2ProxyConfig() Constructor. Declaration public Oauth2ProxyConfig() Properties InjectRequestHeaders Used to configure headers that should be added to requests to upstream servers. Headers may source values from either the authenticated user's session or from a static secret value. Declaration [JsonProperty(PropertyName = \"InjectRequestHeaders\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"injectRequestHeaders\", ApplyNamingConventions = false)] public List<Oauth2ProxyHeader> InjectRequestHeaders { get; set; } Property Value Type Description List < Oauth2ProxyHeader > InjectResponseHeaders Used to configure headers that should be added to responses from the proxy. This is typically used when using the proxy as an external authentication provider in conjunction with another proxy such as NGINX and its auth_request module. Headers may source values from either the authenticated user's session or from a static secret value. Declaration [JsonProperty(PropertyName = \"InjectResponseHeaders\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"injectResponseHeaders\", ApplyNamingConventions = false)] public List<Oauth2ProxyHeader> InjectResponseHeaders { get; set; } Property Value Type Description List < Oauth2ProxyHeader > MetricsServer Used to configure the HTTP(S) server for metrics. You may choose to run both HTTP and HTTPS servers simultaneously. This can be done by setting the BindAddress and the SecureBindAddress simultaneously. To use the secure server you must configure a TLS certificate and key. Declaration [JsonProperty(PropertyName = \"MetricsServer\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"metricsServer\", ApplyNamingConventions = false)] public Oauth2ProxyServer MetricsServer { get; set; } Property Value Type Description Oauth2ProxyServer Providers Used to configure multiple providers. Declaration [JsonProperty(PropertyName = \"Providers\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"providers\", ApplyNamingConventions = false)] public List<Oauth2ProxyProvider> Providers { get; set; } Property Value Type Description List < Oauth2ProxyProvider > Server Used to configure headers that should be added to responses from the proxy. This is typically used when using the proxy as an external authentication provider in conjunction with another proxy such as NGINX and its auth_request module. Headers may source values from either the authenticated user's session or from a static secret value. Declaration [JsonProperty(PropertyName = \"Server\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"server\", ApplyNamingConventions = false)] public Oauth2ProxyServer Server { get; set; } Property Value Type Description Oauth2ProxyServer UpstreamConfig Used to configure upstream servers. Once a user is authenticated, requests to the server will be proxied to these upstream servers based on the path mappings defined in this list. Declaration [JsonProperty(PropertyName = \"UpstreamConfig\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"upstreamConfig\", ApplyNamingConventions = false)] public Oauth2ProxyUpstreamConfig UpstreamConfig { get; set; } Property Value Type Description Oauth2ProxyUpstreamConfig"
  },
  "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyHeader.html": {
    "href": "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyHeader.html",
    "title": "Class Oauth2ProxyHeader | NeonKUBE documentation",
    "keywords": "Class Oauth2ProxyHeader Oauth2Proxy header model. Inheritance Object Oauth2ProxyHeader Namespace : Neon.Kube.Oauth2Proxy Assembly : Neon.Kube.dll Syntax public class Oauth2ProxyHeader Constructors Oauth2ProxyHeader() Constructor. Declaration public Oauth2ProxyHeader() Properties Name The header name to be used for this set of values. Names should be unique within a list of Headers. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Always)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String PreserveRequestValue Determines whether any values for this header should be preserved for the request to the upstream server. This option only applies to injected request headers. Defaults to false (headers that match this header will be stripped). Declaration [JsonProperty(PropertyName = \"PreserveRequestValue\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"preserveRequestValue\", ApplyNamingConventions = false)] public bool PreserveRequestValue { get; set; } Property Value Type Description Boolean Values Contains the desired values for this header Declaration [JsonProperty(PropertyName = \"Values\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"values\", ApplyNamingConventions = false)] public List<Oauth2ProxyHeaderValue> Values { get; set; } Property Value Type Description List < Oauth2ProxyHeaderValue >"
  },
  "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyHeaderValue.html": {
    "href": "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyHeaderValue.html",
    "title": "Class Oauth2ProxyHeaderValue | NeonKUBE documentation",
    "keywords": "Class Oauth2ProxyHeaderValue Oauth2Proxy header value model. Inheritance Object Oauth2ProxyHeaderValue Namespace : Neon.Kube.Oauth2Proxy Assembly : Neon.Kube.dll Syntax public class Oauth2ProxyHeaderValue Constructors Oauth2ProxyHeaderValue() Constructor. Declaration public Oauth2ProxyHeaderValue() Properties BasicAuthPassword Converts this claim into a basic auth header. Note the value of claim will become the basic auth username and the basicAuthPassword will be used as the password value. Declaration [JsonProperty(PropertyName = \"BasicAuthPassword\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"basicAuthPassword\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public Oauth2ProxySecretSource BasicAuthPassword { get; set; } Property Value Type Description Oauth2ProxySecretSource Claim The name of the claim in the session that the value should be loaded from. Declaration [JsonProperty(PropertyName = \"Claim\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"claim\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string Claim { get; set; } Property Value Type Description String FromEnv Expects the name of an environment variable. Declaration [JsonProperty(PropertyName = \"FromEnv\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"fromEnv\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string FromEnv { get; set; } Property Value Type Description String FromFile Expects a path to a file containing the secret value. Declaration [JsonProperty(PropertyName = \"FromFile\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"fromFile\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string FromFile { get; set; } Property Value Type Description String Prefix An optional prefix that will be prepended to the value of the claim if it is non-empty. Declaration [JsonProperty(PropertyName = \"Prefix\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"prefix\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string Prefix { get; set; } Property Value Type Description String Value A base64 encoded string value. Declaration [JsonProperty(PropertyName = \"Value\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"value\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string Value { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyLoginUrlParameterRule.html": {
    "href": "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyLoginUrlParameterRule.html",
    "title": "Class Oauth2ProxyLoginUrlParameterRule | NeonKUBE documentation",
    "keywords": "Class Oauth2ProxyLoginUrlParameterRule Oauth2Proxy login url parameters model. Inheritance Object Oauth2ProxyLoginUrlParameterRule Namespace : Neon.Kube.Oauth2Proxy Assembly : Neon.Kube.dll Syntax public class Oauth2ProxyLoginUrlParameterRule Constructors Oauth2ProxyLoginUrlParameterRule() Constructor. Declaration public Oauth2ProxyLoginUrlParameterRule() Properties Pattern A Pattern rule gives a regular expression that must be matched by some substring of the value.The expression is not automatically anchored to the start and end of the value, if you want to restrict the whole parameter value you must anchor it yourself with ^ and $. Declaration [JsonProperty(PropertyName = \"Pattern\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"pattern\", ApplyNamingConventions = false)] public string Pattern { get; set; } Property Value Type Description String Value A Value rule matches just this specific value. Declaration [JsonProperty(PropertyName = \"Value\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"value\", ApplyNamingConventions = false)] public string Value { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyLoginUrlParameters.html": {
    "href": "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyLoginUrlParameters.html",
    "title": "Class Oauth2ProxyLoginUrlParameters | NeonKUBE documentation",
    "keywords": "Class Oauth2ProxyLoginUrlParameters Oauth2Proxy login url parameters model. Inheritance Object Oauth2ProxyLoginUrlParameters Namespace : Neon.Kube.Oauth2Proxy Assembly : Neon.Kube.dll Syntax public class Oauth2ProxyLoginUrlParameters Constructors Oauth2ProxyLoginUrlParameters() Constructor. Declaration public Oauth2ProxyLoginUrlParameters() Properties Allow Specifies rules about how the default (if any) may be overridden via the query string to /oauth2/start. Only values that match one or more of the allow rules will be forwarded to the IdP. Declaration [JsonProperty(PropertyName = \"Allow\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"allow\", ApplyNamingConventions = false)] public List<Oauth2ProxyLoginUrlParameterRule> Allow { get; set; } Property Value Type Description List < Oauth2ProxyLoginUrlParameterRule > Default Specifies a default value or values that will be passed to the IdP if not overridden. Declaration [JsonProperty(PropertyName = \"Default\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"default\", ApplyNamingConventions = false)] public List<string> Default { get; set; } Property Value Type Description List < String > Name Specifies the name of the query parameter. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Always)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyOidcOptions.html": {
    "href": "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyOidcOptions.html",
    "title": "Class Oauth2ProxyOidcOptions | NeonKUBE documentation",
    "keywords": "Class Oauth2ProxyOidcOptions Oauth2Proxy OIDC option model. Inheritance Object Oauth2ProxyOidcOptions Namespace : Neon.Kube.Oauth2Proxy Assembly : Neon.Kube.dll Syntax public class Oauth2ProxyOidcOptions Constructors Oauth2ProxyOidcOptions() Constructor. Declaration public Oauth2ProxyOidcOptions() Properties AudienceClaims Allows to define any claim that is verified against the client id. By default aud claim is used for verification. Declaration [JsonProperty(PropertyName = \"AudienceClaims\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"audienceClaims\", ApplyNamingConventions = false)] public List<string> AudienceClaims { get; set; } Property Value Type Description List < String > EmailClaim Indicates which claim contains the user email. Declaration [JsonProperty(PropertyName = \"EmailClaim\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"emailClaim\", ApplyNamingConventions = false)] public string EmailClaim { get; set; } Property Value Type Description String ExtraAudiences A list of additional audiences that are allowed to pass verification in addition to the client id. Declaration [JsonProperty(PropertyName = \"ExtraAudiences\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"extraAudiences\", ApplyNamingConventions = false)] public List<string> ExtraAudiences { get; set; } Property Value Type Description List < String > GroupsClaim Indicates which claim contains the user groups. Declaration [JsonProperty(PropertyName = \"GroupsClaim\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"groupsClaim\", ApplyNamingConventions = false)] public string GroupsClaim { get; set; } Property Value Type Description String InsecureAllowUnverifiedEmail Prevents failures if an email address in an id_token is not verified. Declaration [JsonProperty(PropertyName = \"InsecureAllowUnverifiedEmail\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"insecureAllowUnverifiedEmail\", ApplyNamingConventions = false)] public bool InsecureAllowUnverifiedEmail { get; set; } Property Value Type Description Boolean InsecureSkipIssuerVerification Skips verification of ID token issuers. When false, ID Token Issuers must match the OIDC discovery URL. Declaration [JsonProperty(PropertyName = \"InsecureSkipIssuerVerification\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"insecureSkipIssuerVerification\", ApplyNamingConventions = false)] public bool InsecureSkipIssuerVerification { get; set; } Property Value Type Description Boolean InsecureSkipNonce Skips verifying the ID Token's nonce claim that must match the random nonce sent in the initial OAuth flow.Otherwise, the nonce is checked after the initial OAuth redeem and subsequent token refreshes. Declaration [JsonProperty(PropertyName = \"InsecureSkipNonce\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"insecureSkipNonce\", ApplyNamingConventions = false)] public bool InsecureSkipNonce { get; set; } Property Value Type Description Boolean IssuerUrl The OpenID Connect issuer URL. Declaration [JsonProperty(PropertyName = \"IssuerUrl\", Required = Required.Always)] [YamlMember(Alias = \"issuerURL\", ApplyNamingConventions = false)] public string IssuerUrl { get; set; } Property Value Type Description String JwksUrl JwksURL is the OpenID Connect JWKS URL Declaration [JsonProperty(PropertyName = \"JwksUrl\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"jwksURL\", ApplyNamingConventions = false)] public string JwksUrl { get; set; } Property Value Type Description String SkipDiscovery Allows to skip OIDC discovery and use manually supplied Endpoints. Declaration [JsonProperty(PropertyName = \"SkipDiscovery\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"skipDiscovery\", ApplyNamingConventions = false)] public bool SkipDiscovery { get; set; } Property Value Type Description Boolean UserIdClaim Indicates which claim contains the user ID. Declaration [JsonProperty(PropertyName = \"UserIdClaim\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"userIDClaim\", ApplyNamingConventions = false)] public string UserIdClaim { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyProvider.html": {
    "href": "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyProvider.html",
    "title": "Class Oauth2ProxyProvider | NeonKUBE documentation",
    "keywords": "Class Oauth2ProxyProvider Oauth2Proxy providers model. Inheritance Object Oauth2ProxyProvider Namespace : Neon.Kube.Oauth2Proxy Assembly : Neon.Kube.dll Syntax public class Oauth2ProxyProvider Constructors Oauth2ProxyProvider() Constructor. Declaration public Oauth2ProxyProvider() Properties AllowedGroups A list of restrict logins to members of this group. Declaration [JsonProperty(PropertyName = \"AllowedGroups\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"allowedGroups\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public List<string> AllowedGroups { get; set; } Property Value Type Description List < String > CaFiles A list of paths to CA certificates that should be used when connecting to the provider. Declaration [JsonProperty(PropertyName = \"CaFiles\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"caFiles\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public List<string> CaFiles { get; set; } Property Value Type Description List < String > Remarks If not specified, the default Go trust sources are used instead ClientId The OAuth Client ID that is defined in the provider This value is required for all providers. Declaration [JsonProperty(PropertyName = \"ClientId\", Required = Required.Always)] [YamlMember(Alias = \"clientID\", ApplyNamingConventions = false)] public string ClientId { get; set; } Property Value Type Description String ClientSecret The OAuth Client Secret that is defined in the provider This value is required for all providers. Declaration [JsonProperty(PropertyName = \"ClientSecret\", Required = Required.Always)] [YamlMember(Alias = \"clientSecret\", ApplyNamingConventions = false)] public string ClientSecret { get; set; } Property Value Type Description String ClientSecretFile The name of the file containing the OAuth Client Secret, it will be used if ClientSecret is not set. This value is required for all providers. Declaration [JsonProperty(PropertyName = \"ClientSecretFile\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"clientSecretFile\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string ClientSecretFile { get; set; } Property Value Type Description String CodeChallengeMethod The access token validation endpoint. Declaration [JsonProperty(PropertyName = \"CodeChallengeMethod\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"code_challenge_method\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string CodeChallengeMethod { get; set; } Property Value Type Description String Id ID should be a unique identifier for the provider. Declaration [JsonProperty(PropertyName = \"Id\", Required = Required.Always)] [YamlMember(Alias = \"id\", ApplyNamingConventions = false)] public string Id { get; set; } Property Value Type Description String LoginUrl The authentication endpoint Declaration [JsonProperty(PropertyName = \"LoginUrl\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"loginURL\", ApplyNamingConventions = false)] public string LoginUrl { get; set; } Property Value Type Description String LoginUrlParameters Defines the parameters that can be passed from the start URL to the IdP login URL Declaration [JsonProperty(PropertyName = \"LoginUrlParameters\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"loginURLParameters\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public List<Oauth2ProxyLoginUrlParameters> LoginUrlParameters { get; set; } Property Value Type Description List < Oauth2ProxyLoginUrlParameters > Name The providers display name if set, it will be shown to the users in the login page. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String OidcConfig Holds all configurations for OIDC provider or providers utilize OIDC configurations. Declaration [JsonProperty(PropertyName = \"OidcConfig\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"oidcConfig\", ApplyNamingConventions = false)] public Oauth2ProxyOidcOptions OidcConfig { get; set; } Property Value Type Description Oauth2ProxyOidcOptions ProfileUrl The profile access endpoint. Declaration [JsonProperty(PropertyName = \"ProfileUrl\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"profileURL\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string ProfileUrl { get; set; } Property Value Type Description String Provider The OAuth provider type. Oauth2ProxyProviderType Declaration [JsonProperty(PropertyName = \"Provider\", Required = Required.Always)] [YamlMember(Alias = \"provider\", ApplyNamingConventions = false)] public Oauth2ProxyProviderType Provider { get; set; } Property Value Type Description Oauth2ProxyProviderType RedeemUrl The token redemption endpoint. Declaration [JsonProperty(PropertyName = \"RedeemUrl\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"redeemURL\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string RedeemUrl { get; set; } Property Value Type Description String Resource The profile access endpoint. Declaration [JsonProperty(PropertyName = \"Resource\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"resource\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string Resource { get; set; } Property Value Type Description String Scope The access token validation endpoint. Declaration [JsonProperty(PropertyName = \"Scope\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"scope\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string Scope { get; set; } Property Value Type Description String ValidateUrl The access token validation endpoint. Declaration [JsonProperty(PropertyName = \"ValidateUrl\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"validateURL\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string ValidateUrl { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyProviderType.html": {
    "href": "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyProviderType.html",
    "title": "Enum Oauth2ProxyProviderType | NeonKUBE documentation",
    "keywords": "Enum Oauth2ProxyProviderType Oauth2Proxy providers model. Namespace : Neon.Kube.Oauth2Proxy Assembly : Neon.Kube.dll Syntax public enum Oauth2ProxyProviderType Fields Name Description Adfs ADFS Azure Azure BitBucket BitBucket DigitalOcean DigitalOcean Facebook Facebook GitHub GitHub GitLab GitLab Google Google Keycloak Keycloak KeycloakOidc KeyCloakOidc Linkedin Linkedin LoginGov LoginGov Nextcloud Nextcloud Oidc OIDC"
  },
  "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxySecretSource.html": {
    "href": "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxySecretSource.html",
    "title": "Class Oauth2ProxySecretSource | NeonKUBE documentation",
    "keywords": "Class Oauth2ProxySecretSource Oauth2Proxy header model. Inheritance Object Oauth2ProxySecretSource Namespace : Neon.Kube.Oauth2Proxy Assembly : Neon.Kube.dll Syntax public class Oauth2ProxySecretSource Constructors Oauth2ProxySecretSource() Constructor. Declaration public Oauth2ProxySecretSource() Properties FromEnv Expects the name of an environment variable. Declaration [JsonProperty(PropertyName = \"FromEnv\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"fromEnv\", ApplyNamingConventions = false)] public string FromEnv { get; set; } Property Value Type Description String FromFile Expects a path to a file containing the secret value. Declaration [JsonProperty(PropertyName = \"FromFile\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"fromFile\", ApplyNamingConventions = false)] public string FromFile { get; set; } Property Value Type Description String Value A base64 encoded string value. Declaration [JsonProperty(PropertyName = \"Value\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"value\", ApplyNamingConventions = false)] public string Value { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyServer.html": {
    "href": "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyServer.html",
    "title": "Class Oauth2ProxyServer | NeonKUBE documentation",
    "keywords": "Class Oauth2ProxyServer Oauth2Proxy header model. Inheritance Object Oauth2ProxyServer Namespace : Neon.Kube.Oauth2Proxy Assembly : Neon.Kube.dll Syntax public class Oauth2ProxyServer Constructors Oauth2ProxyServer() Constructor. Declaration public Oauth2ProxyServer() Properties BindAddress The address on which to serve traffic. Leave blank or set to \"-\" to disable. Declaration [JsonProperty(PropertyName = \"BindAddress\", Required = Required.Always)] [YamlMember(Alias = \"BindAddress\", ApplyNamingConventions = false)] public string BindAddress { get; set; } Property Value Type Description String SecureBindAddress The address on which to serve secure traffic. Leave blank or set to \"-\" to disable. Declaration [JsonProperty(PropertyName = \"SecureBindAddress\", Required = Required.Always)] [YamlMember(Alias = \"SecureBindAddress\", ApplyNamingConventions = false)] public string SecureBindAddress { get; set; } Property Value Type Description String TLS The address on which to serve secure traffic. Leave blank or set to \"-\" to disable. Declaration [JsonProperty(PropertyName = \"TLS\", Required = Required.Always)] [YamlMember(Alias = \"TLS\", ApplyNamingConventions = false)] public Oauth2ProxyTls TLS { get; set; } Property Value Type Description Oauth2ProxyTls"
  },
  "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyTls.html": {
    "href": "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyTls.html",
    "title": "Class Oauth2ProxyTls | NeonKUBE documentation",
    "keywords": "Class Oauth2ProxyTls Oauth2Proxy TLS model. Inheritance Object Oauth2ProxyTls Namespace : Neon.Kube.Oauth2Proxy Assembly : Neon.Kube.dll Syntax public class Oauth2ProxyTls Constructors Oauth2ProxyTls() Constructor. Declaration public Oauth2ProxyTls() Properties Cert TLS key data to use. Typically this will come from a file. Declaration [JsonProperty(PropertyName = \"Cert\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"Cert\", ApplyNamingConventions = false)] public Oauth2ProxySecretSource Cert { get; set; } Property Value Type Description Oauth2ProxySecretSource CipherSuites A list of TLS cipher suites that are allowed. E.g.: TLS_RSA_WITH_RC4_128_SHA TLS_RSA_WITH_AES_256_GCM_SHA384 If not specified, the default Go safe cipher list is used. List of valid cipher suites can be found in the crypto/tls documentation. Declaration [JsonProperty(PropertyName = \"TLS\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"TLS\", ApplyNamingConventions = false)] public List<string> CipherSuites { get; set; } Property Value Type Description List < String > Key TLS key data to use. Typically this will come from a file. Declaration [JsonProperty(PropertyName = \"Key\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"Key\", ApplyNamingConventions = false)] public Oauth2ProxySecretSource Key { get; set; } Property Value Type Description Oauth2ProxySecretSource MinVersion The minimal TLS version that is acceptable. E.g. Set to \"TLS1.3\" to select TLS version 1.3 Declaration [JsonProperty(PropertyName = \"MinVersion\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"MinVersion\", ApplyNamingConventions = false)] public string MinVersion { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyUpstream.html": {
    "href": "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyUpstream.html",
    "title": "Class Oauth2ProxyUpstream | NeonKUBE documentation",
    "keywords": "Class Oauth2ProxyUpstream Oauth2Proxy header model. Inheritance Object Oauth2ProxyUpstream Namespace : Neon.Kube.Oauth2Proxy Assembly : Neon.Kube.dll Syntax public class Oauth2ProxyUpstream Constructors Oauth2ProxyUpstream() Constructor. Declaration public Oauth2ProxyUpstream() Properties FlushInterval The period between flushing the response buffer when streaming response from the upstream. Declaration [JsonProperty(PropertyName = \"FlushInterval\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"flushInterval\", ApplyNamingConventions = false)] public string FlushInterval { get; set; } Property Value Type Description String Id Should be a unique identifier for the upstream. Declaration [JsonProperty(PropertyName = \"Id\", Required = Required.Always)] [YamlMember(Alias = \"id\", ApplyNamingConventions = false)] public string Id { get; set; } Property Value Type Description String InsecureSkipTlsVerify Will skip TLS verification of upstream HTTPS hosts. This option is insecure and will allow potential Man-In-The-Middle attacks betweem OAuth2 Proxy and the usptream server. Declaration [JsonProperty(PropertyName = \"InsecureSkipTlsVerify\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"insecureSkipTLSVerify\", ApplyNamingConventions = false)] public bool InsecureSkipTlsVerify { get; set; } Property Value Type Description Boolean PassHostHeader Determines whether the request host header should be proxied to the upstream server. Declaration [JsonProperty(PropertyName = \"PassHostHeader\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"passHostHeader\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public bool? PassHostHeader { get; set; } Property Value Type Description Nullable < Boolean > Path Used to map requests to the upstream server. The closest match will take precedence and all Paths must be unique. Path can also take a pattern when used with RewriteTarget. Path segments can be captured and matched using regular experessions. Eg: ^/foo$: Match only the explicit path /foo ^/bar/$: Match any path prefixed with /bar/ ^/baz/(.*)$: Match any path prefixed with /baz and capture the remaining path for use with RewriteTarget Declaration [JsonProperty(PropertyName = \"Path\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"path\", ApplyNamingConventions = false)] public string Path { get; set; } Property Value Type Description String ProxyWebSockets Enables proxying of websockets to upstream servers. Declaration [JsonProperty(PropertyName = \"ProxyWebSockets\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"proxyWebSockets\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public bool? ProxyWebSockets { get; set; } Property Value Type Description Nullable < Boolean > RewriteTarget Allows users to rewrite the request path before it is sent to the upstream server. Use the Path to capture segments for reuse within the rewrite target. Eg: With a Path of ^/baz/(.*), a RewriteTarget of /foo/$1 would rewrite the request /baz/abc/123 to /foo/abc/123 before proxying to the upstream server. Declaration [JsonProperty(PropertyName = \"RewriteTarget\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"rewriteTarget\", ApplyNamingConventions = false)] public string RewriteTarget { get; set; } Property Value Type Description String Static Will make all requests to this upstream have a static response. The response will have a body of \"Authenticated\" and a response code matching StaticCode. If StaticCode is not set, the response will return a 200 response. Declaration [JsonProperty(PropertyName = \"Static\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"static\", ApplyNamingConventions = false)] public bool Static { get; set; } Property Value Type Description Boolean StaticCode Determines the response code for the Static response. This option can only be used with Static enabled. Declaration [JsonProperty(PropertyName = \"StaticCode\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"staticCode\", ApplyNamingConventions = false)] public int? StaticCode { get; set; } Property Value Type Description Nullable < Int32 > Timeout The maximum duration the server will wait for a response from the upstream server. Declaration [JsonProperty(PropertyName = \"Timeout\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"timeout\", ApplyNamingConventions = false)] public string Timeout { get; set; } Property Value Type Description String Uri The URI of the upstream server. This may be an HTTP(S) server of a File based URL.It may include a path, in which case all requests will be served under that path. Eg: http://localhost:8080 https://service.localhost https://service.localhost/path file://host/path If the URI's path is \"/base\" and the incoming request was for \"/dir\", the upstream request will be for \"/base/dir\". Declaration [JsonProperty(PropertyName = \"Uri\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"uri\", ApplyNamingConventions = false)] public string Uri { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyUpstreamConfig.html": {
    "href": "neonkube/api/Neon.Kube.Oauth2Proxy.Oauth2ProxyUpstreamConfig.html",
    "title": "Class Oauth2ProxyUpstreamConfig | NeonKUBE documentation",
    "keywords": "Class Oauth2ProxyUpstreamConfig Oauth2Proxy header model. Inheritance Object Oauth2ProxyUpstreamConfig Namespace : Neon.Kube.Oauth2Proxy Assembly : Neon.Kube.dll Syntax public class Oauth2ProxyUpstreamConfig Constructors Oauth2ProxyUpstreamConfig() Constructor. Declaration public Oauth2ProxyUpstreamConfig() Properties ProxyRawPath Will pass the raw url path to upstream allowing for url's like: \"/%2F/\" which would otherwise be redirected to \"/\" Declaration [JsonProperty(PropertyName = \"ProxyRawPath\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"proxyRawPath\", ApplyNamingConventions = false)] public bool? ProxyRawPath { get; set; } Property Value Type Description Nullable < Boolean > Upstreams Represents the configuration for the upstream servers. Requests will be proxied to this upstream if the path matches the request path. Declaration [JsonProperty(PropertyName = \"Upstreams\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Ignore)] [YamlMember(Alias = \"upstreams\", ApplyNamingConventions = false)] public List<Oauth2ProxyUpstream> Upstreams { get; set; } Property Value Type Description List < Oauth2ProxyUpstream >"
  },
  "neonkube/api/Neon.Kube.Operator.ApplicationBuilderExtensions.html": {
    "href": "neonkube/api/Neon.Kube.Operator.ApplicationBuilderExtensions.html",
    "title": "Class ApplicationBuilderExtensions | NeonKUBE documentation",
    "keywords": "Class ApplicationBuilderExtensions Extension methods to register kubernetes operator components with the IApplicationBuilder . Inheritance Object ApplicationBuilderExtensions Namespace : Neon.Kube.Operator Assembly : Neon.Kube.Operator.dll Syntax public static class ApplicationBuilderExtensions Methods UseKubernetesOperator(IApplicationBuilder) Use the kubernetes operator. Registers controllers and webhooks. Declaration public static void UseKubernetesOperator(this IApplicationBuilder app) Parameters Type Name Description IApplicationBuilder app The IApplicationBuilder ."
  },
  "neonkube/api/Neon.Kube.Operator.Attributes.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Attributes.html",
    "title": "Namespace Neon.Kube.Operator.Attributes | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Operator.Attributes Classes OperatorBuilderIgnoreAttribute Used to exclude a component from assembly scanning when building the operator."
  },
  "neonkube/api/Neon.Kube.Operator.Attributes.OperatorBuilderIgnoreAttribute.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Attributes.OperatorBuilderIgnoreAttribute.html",
    "title": "Class OperatorBuilderIgnoreAttribute | NeonKUBE documentation",
    "keywords": "Class OperatorBuilderIgnoreAttribute Used to exclude a component from assembly scanning when building the operator. Inheritance Object Attribute OperatorBuilderIgnoreAttribute Namespace : Neon.Kube.Operator.Attributes Assembly : Neon.Kube.Operator.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class OperatorBuilderIgnoreAttribute : Attribute Constructors OperatorBuilderIgnoreAttribute() Constructor Declaration public OperatorBuilderIgnoreAttribute()"
  },
  "neonkube/api/Neon.Kube.Operator.Builder.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Builder.html",
    "title": "Namespace Neon.Kube.Operator.Builder | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Operator.Builder Classes OperatorBuilder Used to build a kubernetes operator."
  },
  "neonkube/api/Neon.Kube.Operator.Builder.OperatorBuilder.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Builder.OperatorBuilder.html",
    "title": "Class OperatorBuilder | NeonKUBE documentation",
    "keywords": "Class OperatorBuilder Used to build a kubernetes operator. Inheritance Object OperatorBuilder Implements IOperatorBuilder Namespace : Neon.Kube.Operator.Builder Assembly : Neon.Kube.Operator.dll Syntax public class OperatorBuilder : IOperatorBuilder Constructors OperatorBuilder(IServiceCollection) Constructor. Declaration public OperatorBuilder(IServiceCollection services) Parameters Type Name Description IServiceCollection services Properties Services Returns the original service collection. Declaration public IServiceCollection Services { get; } Property Value Type Description IServiceCollection Methods AddController<TImplementation, TEntity>(String, ResourceManagerOptions, Func<TEntity, Boolean>, LeaderElectionConfig, Boolean) Adds a CRD controller to the operator. Declaration public IOperatorBuilder AddController<TImplementation, TEntity>(string namespace = null, ResourceManagerOptions options = null, Func<TEntity, bool> filter = null, LeaderElectionConfig leaderConfig = null, bool leaderElectionDisabled = false) where TImplementation : class, IOperatorController<TEntity> where TEntity : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description String namespace ResourceManagerOptions options Func <TEntity, Boolean > filter LeaderElectionConfig leaderConfig Boolean leaderElectionDisabled Returns Type Description IOperatorBuilder The builder for chaining. Type Parameters Name Description TImplementation The type of the controller to register. TEntity The type of the entity to associate the controller with. AddFinalizer<TImplementation, TEntity>() Adds a CRD finalizer to the operator. Declaration public IOperatorBuilder AddFinalizer<TImplementation, TEntity>() where TImplementation : class, IResourceFinalizer<TEntity> where TEntity : IKubernetesObject<V1ObjectMeta>, new() Returns Type Description IOperatorBuilder The builder for chaining. Type Parameters Name Description TImplementation The type of the finalizer to register. TEntity The type of the entity to associate the finalizer with. AddMutatingWebhook<TImplementation, TEntity>() Adds a mutating webhook to the operator. Declaration public IOperatorBuilder AddMutatingWebhook<TImplementation, TEntity>() where TImplementation : class, IMutatingWebhook<TEntity> where TEntity : IKubernetesObject<V1ObjectMeta>, new() Returns Type Description IOperatorBuilder The builder for chaining. Type Parameters Name Description TImplementation The type of the webhook to register. TEntity The type of the entity to associate the webhook with. AddNgrokTunnnel(String, Int32, String, String, Boolean) For development purposes only. Adds a tunnel and configures webhooks to tunnel through to the developer workstation. Declaration public IOperatorBuilder AddNgrokTunnnel(string hostname = \"localhost\", int port = 5000, string ngrokDirectory = null, string ngrokAuthToken = null, bool enabled = true) Parameters Type Name Description String hostname The hostname for the tunnel. Int32 port The port. String ngrokDirectory The directory where the ngrok binary is located. String ngrokAuthToken The ngrok auth token Boolean enabled Set to false to optionally disable this feature. Returns Type Description IOperatorBuilder AddValidatingWebhook<TImplementation, TEntity>() Adds a validating webhook to the operator. Declaration public IOperatorBuilder AddValidatingWebhook<TImplementation, TEntity>() where TImplementation : class, IValidatingWebhook<TEntity> where TEntity : IKubernetesObject<V1ObjectMeta>, new() Returns Type Description IOperatorBuilder The builder for chaining. Type Parameters Name Description TImplementation The type of the webhook to register. TEntity The type of the entity to associate the webhook with. Implements IOperatorBuilder Extension Methods OperatorBuilderExtensions.AddController<TImplementation>(IOperatorBuilder, String, ResourceManagerOptions, LeaderElectionConfig, Boolean) OperatorBuilderExtensions.AddFinalizer<TImplementation>(IOperatorBuilder) OperatorBuilderExtensions.AddMutatingWebhook<TImplementation>(IOperatorBuilder) OperatorBuilderExtensions.AddValidatingWebhook<TImplementation>(IOperatorBuilder)"
  },
  "neonkube/api/Neon.Kube.Operator.Controller.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Controller.html",
    "title": "Namespace Neon.Kube.Operator.Controller | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Operator.Controller Interfaces IOperatorController<TEntity> Describes the interface used to implement Neon based operator controllers."
  },
  "neonkube/api/Neon.Kube.Operator.Controller.IOperatorController-1.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Controller.IOperatorController-1.html",
    "title": "Interface IOperatorController<TEntity> | NeonKUBE documentation",
    "keywords": "Interface IOperatorController<TEntity> Describes the interface used to implement Neon based operator controllers. Namespace : Neon.Kube.Operator.Controller Assembly : Neon.Kube.Operator.dll Syntax public interface IOperatorController<TEntity> where TEntity : IKubernetesObject<V1ObjectMeta> Type Parameters Name Description TEntity Specifies the Kubernetes entity being managed. Methods DeletedAsync(TEntity) Called when a resource has been deleted. Declaration virtual Task DeletedAsync(TEntity entity) Parameters Type Name Description TEntity entity The deleted resource. Returns Type Description Task The tracking Task . IdleAsync() Called periodically to allow the operator to perform global operations. The period is controlled by IdleInterval . Declaration virtual Task IdleAsync() Returns Type Description Task The tracking Task . OnDemotionAsync() Called when the instance has a LeaderElector this instance has been demoted. Declaration virtual async Task OnDemotionAsync() Returns Type Description Task OnNewLeaderAsync(String) Called when the instance has a LeaderElector and a new leader has been elected. Declaration virtual async Task OnNewLeaderAsync(string identity) Parameters Type Name Description String identity Identifies the new leader. Returns Type Description Task OnPromotionAsync() Called when the instance has a LeaderElector and this instance has assumed leadership. Declaration virtual async Task OnPromotionAsync() Returns Type Description Task ReconcileAsync(TEntity) Called when a new resource is detected or when the non-status part of an existing resource is modified. Declaration virtual Task<ResourceControllerResult> ReconcileAsync(TEntity entity) Parameters Type Name Description TEntity entity The new or modified resource. Returns Type Description Task < ResourceControllerResult > A ResourceControllerResult indicating the the current event or possibly a new event is to be requeue with a possible delay. null may also bne returned, indicating that the event is not to be requeued. StartAsync(IServiceProvider) Starts the controller. Declaration static Task StartAsync(IServiceProvider serviceProvider) Parameters Type Name Description IServiceProvider serviceProvider The IServiceProvider . Returns Type Description Task The tracking Task . StatusModifiedAsync(TEntity) Called when the status part of a resource has been modified. Declaration virtual Task StatusModifiedAsync(TEntity entity) Parameters Type Name Description TEntity entity The modified resource. Returns Type Description Task The tracking Task ."
  },
  "neonkube/api/Neon.Kube.Operator.Entities.CustomResourceGenerator.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Entities.CustomResourceGenerator.html",
    "title": "Class CustomResourceGenerator | NeonKUBE documentation",
    "keywords": "Class CustomResourceGenerator A tool for generating Kubernetes Custom Resources. Inheritance Object CustomResourceGenerator Namespace : Neon.Kube.Operator.Entities Assembly : Neon.Kube.Operator.dll Syntax public class CustomResourceGenerator Constructors CustomResourceGenerator(Int32, IEnumerable<JsonConverter>) Constructor. Declaration public CustomResourceGenerator(int maxDepth = 128, IEnumerable<JsonConverter> converters = null) Parameters Type Name Description Int32 maxDepth IEnumerable < Newtonsoft.Json.JsonConverter > converters Methods GenerateCustomResourceDefinitionAsync(Type, CancellationToken) Generates a k8s.Models.V1CustomResourceDefinition for a Kubernetes custom resource entity. Declaration public async Task<V1CustomResourceDefinition> GenerateCustomResourceDefinitionAsync(Type resourceType, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Type resourceType CancellationToken cancellationToken Returns Type Description Task < k8s.Models.V1CustomResourceDefinition > WriteToFile(V1CustomResourceDefinition, String) Writes a k8s.Models.V1CustomResourceDefinition to a file. Declaration public async Task WriteToFile(V1CustomResourceDefinition resourceDefinition, string path) Parameters Type Name Description k8s.Models.V1CustomResourceDefinition resourceDefinition The Custom Resource Definition. String path The file path. Returns Type Description Task"
  },
  "neonkube/api/Neon.Kube.Operator.Entities.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Entities.html",
    "title": "Namespace Neon.Kube.Operator.Entities | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Operator.Entities Classes CustomResourceGenerator A tool for generating Kubernetes Custom Resources."
  },
  "neonkube/api/Neon.Kube.Operator.Finalizer.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Finalizer.html",
    "title": "Namespace Neon.Kube.Operator.Finalizer | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Operator.Finalizer Interfaces IFinalizerManager<TEntity> Finalizer manager. IResourceFinalizer<TEntity> Finalizer manager."
  },
  "neonkube/api/Neon.Kube.Operator.Finalizer.IFinalizerManager-1.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Finalizer.IFinalizerManager-1.html",
    "title": "Interface IFinalizerManager<TEntity> | NeonKUBE documentation",
    "keywords": "Interface IFinalizerManager<TEntity> Finalizer manager. Namespace : Neon.Kube.Operator.Finalizer Assembly : Neon.Kube.Operator.dll Syntax public interface IFinalizerManager<TEntity> where TEntity : IKubernetesObject<V1ObjectMeta>, new() Type Parameters Name Description TEntity The type of the k8s entity. Methods RegisterAllFinalizersAsync(TEntity) Registers all IResourceFinalizer<TEntity> to an entity. Declaration Task RegisterAllFinalizersAsync(TEntity entity) Parameters Type Name Description TEntity entity Returns Type Description Task RegisterFinalizerAsync<TFinalizer>(TEntity) Registers a specific IResourceFinalizer<TEntity> to an entity. Declaration Task RegisterFinalizerAsync<TFinalizer>(TEntity entity) where TFinalizer : IResourceFinalizer<TEntity> Parameters Type Name Description TEntity entity Returns Type Description Task Type Parameters Name Description TFinalizer RemoveFinalizerAsync<TFinalizer>(TEntity) Removes a IResourceFinalizer<TEntity> from an entity. Declaration Task RemoveFinalizerAsync<TFinalizer>(TEntity entity) where TFinalizer : IResourceFinalizer<TEntity> Parameters Type Name Description TEntity entity Returns Type Description Task Type Parameters Name Description TFinalizer"
  },
  "neonkube/api/Neon.Kube.Operator.Finalizer.IResourceFinalizer-1.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Finalizer.IResourceFinalizer-1.html",
    "title": "Interface IResourceFinalizer<TEntity> | NeonKUBE documentation",
    "keywords": "Interface IResourceFinalizer<TEntity> Finalizer manager. Namespace : Neon.Kube.Operator.Finalizer Assembly : Neon.Kube.Operator.dll Syntax public interface IResourceFinalizer<TEntity> where TEntity : IKubernetesObject<V1ObjectMeta>, new() Type Parameters Name Description TEntity The type of the k8s entity. Properties Identifier Identifies the resource finalizer Declaration virtual string Identifier { get; } Property Value Type Description String Methods FinalizeAsync(TEntity) Called when the entity needs to be finalized. Declaration Task FinalizeAsync(TEntity entity) Parameters Type Name Description TEntity entity Returns Type Description Task"
  },
  "neonkube/api/Neon.Kube.Operator.html": {
    "href": "neonkube/api/Neon.Kube.Operator.html",
    "title": "Namespace Neon.Kube.Operator | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Operator Classes ApplicationBuilderExtensions Extension methods to register kubernetes operator components with the IApplicationBuilder . OperatorBuilderExtensions Extension methods for adding components to the Operator. OperatorSettings Specifies global options for the Operator. ServiceCollectionExtensions Kubernetes operator IServiceCollection extension methods. Interfaces IOperatorBuilder Operator builder interface."
  },
  "neonkube/api/Neon.Kube.Operator.IOperatorBuilder.html": {
    "href": "neonkube/api/Neon.Kube.Operator.IOperatorBuilder.html",
    "title": "Interface IOperatorBuilder | NeonKUBE documentation",
    "keywords": "Interface IOperatorBuilder Operator builder interface. Namespace : Neon.Kube.Operator Assembly : Neon.Kube.Operator.dll Syntax public interface IOperatorBuilder Properties Services Returns the original service collection. Declaration IServiceCollection Services { get; } Property Value Type Description IServiceCollection Methods AddController<TImplementation, TEntity>(String, ResourceManagerOptions, Func<TEntity, Boolean>, LeaderElectionConfig, Boolean) Adds a CRD controller to the operator. Declaration IOperatorBuilder AddController<TImplementation, TEntity>(string namespace = null, ResourceManagerOptions options = null, Func<TEntity, bool> filter = null, LeaderElectionConfig leaderConfig = null, bool leaderElectionDisabled = false) where TImplementation : class, IOperatorController<TEntity> where TEntity : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description String namespace ResourceManagerOptions options Func <TEntity, Boolean > filter LeaderElectionConfig leaderConfig Boolean leaderElectionDisabled Returns Type Description IOperatorBuilder The builder for chaining. Type Parameters Name Description TImplementation The type of the controller to register. TEntity The type of the entity to associate the controller with. AddFinalizer<TImplementation, TEntity>() Adds a CRD finalizer to the operator. Declaration IOperatorBuilder AddFinalizer<TImplementation, TEntity>() where TImplementation : class, IResourceFinalizer<TEntity> where TEntity : IKubernetesObject<V1ObjectMeta>, new() Returns Type Description IOperatorBuilder The builder for chaining. Type Parameters Name Description TImplementation The type of the finalizer to register. TEntity The type of the entity to associate the finalizer with. AddMutatingWebhook<TImplementation, TEntity>() Adds a mutating webhook to the operator. Declaration IOperatorBuilder AddMutatingWebhook<TImplementation, TEntity>() where TImplementation : class, IMutatingWebhook<TEntity> where TEntity : IKubernetesObject<V1ObjectMeta>, new() Returns Type Description IOperatorBuilder The builder for chaining. Type Parameters Name Description TImplementation The type of the webhook to register. TEntity The type of the entity to associate the webhook with. AddNgrokTunnnel(String, Int32, String, String, Boolean) For development purposes only. Adds a tunnel and configures webhooks to tunnel through to the developer workstation. Declaration IOperatorBuilder AddNgrokTunnnel(string hostname = \"localhost\", int port = 5000, string ngrokDirectory = null, string ngrokAuthToken = null, bool enabled = true) Parameters Type Name Description String hostname The hostname for the tunnel. Int32 port The port. String ngrokDirectory The directory where the ngrok binary is located. String ngrokAuthToken The ngrok auth token Boolean enabled Set to false to optionally disable this feature. Returns Type Description IOperatorBuilder AddValidatingWebhook<TImplementation, TEntity>() Adds a validating webhook to the operator. Declaration IOperatorBuilder AddValidatingWebhook<TImplementation, TEntity>() where TImplementation : class, IValidatingWebhook<TEntity> where TEntity : IKubernetesObject<V1ObjectMeta>, new() Returns Type Description IOperatorBuilder The builder for chaining. Type Parameters Name Description TImplementation The type of the webhook to register. TEntity The type of the entity to associate the webhook with. Extension Methods OperatorBuilderExtensions.AddController<TImplementation>(IOperatorBuilder, String, ResourceManagerOptions, LeaderElectionConfig, Boolean) OperatorBuilderExtensions.AddFinalizer<TImplementation>(IOperatorBuilder) OperatorBuilderExtensions.AddMutatingWebhook<TImplementation>(IOperatorBuilder) OperatorBuilderExtensions.AddValidatingWebhook<TImplementation>(IOperatorBuilder)"
  },
  "neonkube/api/Neon.Kube.Operator.OperatorBuilderExtensions.html": {
    "href": "neonkube/api/Neon.Kube.Operator.OperatorBuilderExtensions.html",
    "title": "Class OperatorBuilderExtensions | NeonKUBE documentation",
    "keywords": "Class OperatorBuilderExtensions Extension methods for adding components to the Operator. Inheritance Object OperatorBuilderExtensions Namespace : Neon.Kube.Operator Assembly : Neon.Kube.Operator.dll Syntax public static class OperatorBuilderExtensions Methods AddController<TImplementation>(IOperatorBuilder, String, ResourceManagerOptions, LeaderElectionConfig, Boolean) Adds a IOperatorController<TEntity> to the Operator. Declaration public static IOperatorBuilder AddController<TImplementation>(this IOperatorBuilder builder, string namespace = null, ResourceManagerOptions options = null, LeaderElectionConfig leaderConfig = null, bool leaderElectionDisabled = false) where TImplementation : class Parameters Type Name Description IOperatorBuilder builder String namespace ResourceManagerOptions options LeaderElectionConfig leaderConfig Boolean leaderElectionDisabled Returns Type Description IOperatorBuilder Type Parameters Name Description TImplementation AddFinalizer<TImplementation>(IOperatorBuilder) Adds a IResourceFinalizer<TEntity> to the Operator. Declaration public static IOperatorBuilder AddFinalizer<TImplementation>(this IOperatorBuilder builder) where TImplementation : class Parameters Type Name Description IOperatorBuilder builder Returns Type Description IOperatorBuilder Type Parameters Name Description TImplementation AddMutatingWebhook<TImplementation>(IOperatorBuilder) Adds a IMutatingWebhook<TEntity> to the Operator. Declaration public static IOperatorBuilder AddMutatingWebhook<TImplementation>(this IOperatorBuilder builder) where TImplementation : class Parameters Type Name Description IOperatorBuilder builder Returns Type Description IOperatorBuilder Type Parameters Name Description TImplementation AddValidatingWebhook<TImplementation>(IOperatorBuilder) Adds a IValidatingWebhook<TEntity> to the Operator. Declaration public static IOperatorBuilder AddValidatingWebhook<TImplementation>(this IOperatorBuilder builder) where TImplementation : class Parameters Type Name Description IOperatorBuilder builder Returns Type Description IOperatorBuilder Type Parameters Name Description TImplementation"
  },
  "neonkube/api/Neon.Kube.Operator.OperatorSettings.html": {
    "href": "neonkube/api/Neon.Kube.Operator.OperatorSettings.html",
    "title": "Class OperatorSettings | NeonKUBE documentation",
    "keywords": "Class OperatorSettings Specifies global options for the Operator. Inheritance Object OperatorSettings Namespace : Neon.Kube.Operator Assembly : Neon.Kube.Operator.dll Syntax public class OperatorSettings Constructors OperatorSettings() Default constructor. Declaration public OperatorSettings() Properties AssemblyScanningEnabled Specifies whether assembly scanning should be enabled. If enabled, Controllers, Finalizers and Webhooks will be scanned and added automatically. Defaults to true. Declaration public bool AssemblyScanningEnabled { get; set; } Property Value Type Description Boolean Methods Validate() Validates the option properties. Declaration public void Validate() Exceptions Type Condition ValidationException Thrown when any of the properties are invalid."
  },
  "neonkube/api/Neon.Kube.Operator.ResourceManager.html": {
    "href": "neonkube/api/Neon.Kube.Operator.ResourceManager.html",
    "title": "Namespace Neon.Kube.Operator.ResourceManager | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Operator.ResourceManager Classes ResourceControllerResult Describes a reconcile result. ResourceManager<TEntity, TController> Used by custom Kubernetes operators to manage a collection of custom resources. ResourceManagerMetrics<TEntity, TController> Specifies metrics for a resource manager. See the ResourceManager<TEntity, TController> . ResourceManagerOptions Specifies options for a resource manager. See the ResourceManager<TEntity, TController> remarks for more information. Interfaces ILockProvider<TEntity> Provides resource locks on Custom Resources. Enums ModifiedEventType Enumerates different event types. Kubernetes combines all of these events into the k8s.WatchEventType.Modified event, but we need to handle them each differently in the operator."
  },
  "neonkube/api/Neon.Kube.Operator.ResourceManager.ILockProvider-1.html": {
    "href": "neonkube/api/Neon.Kube.Operator.ResourceManager.ILockProvider-1.html",
    "title": "Interface ILockProvider<TEntity> | NeonKUBE documentation",
    "keywords": "Interface ILockProvider<TEntity> Provides resource locks on Custom Resources. Namespace : Neon.Kube.Operator.ResourceManager Assembly : Neon.Kube.Operator.dll Syntax public interface ILockProvider<TEntity> where TEntity : IKubernetesObject<V1ObjectMeta> Type Parameters Name Description TEntity Methods Release(String) Releases a lock on a specific resource. Declaration void Release(string entityId) Parameters Type Name Description String entityId WaitAsync(String) Waits for a lock on a specific resource. Declaration Task<IAsyncDisposable> WaitAsync(string entityId) Parameters Type Name Description String entityId Returns Type Description Task < IAsyncDisposable >"
  },
  "neonkube/api/Neon.Kube.Operator.ResourceManager.ModifiedEventType.html": {
    "href": "neonkube/api/Neon.Kube.Operator.ResourceManager.ModifiedEventType.html",
    "title": "Enum ModifiedEventType | NeonKUBE documentation",
    "keywords": "Enum ModifiedEventType Enumerates different event types. Kubernetes combines all of these events into the k8s.WatchEventType.Modified event, but we need to handle them each differently in the operator. Namespace : Neon.Kube.Operator.ResourceManager Assembly : Neon.Kube.Operator.dll Syntax public enum ModifiedEventType Fields Name Description FinalizerUpdate Represents a finalizer update event. Finalizing Modified event should run finalizers. NoChanges Represents no changes. Other When the modified event is anything other than the special cases. StatusUpdate Represents a status update event."
  },
  "neonkube/api/Neon.Kube.Operator.ResourceManager.ResourceControllerResult.html": {
    "href": "neonkube/api/Neon.Kube.Operator.ResourceManager.ResourceControllerResult.html",
    "title": "Class ResourceControllerResult | NeonKUBE documentation",
    "keywords": "Class ResourceControllerResult Describes a reconcile result. Inheritance Object ResourceControllerResult Namespace : Neon.Kube.Operator.ResourceManager Assembly : Neon.Kube.Operator.dll Syntax public abstract class ResourceControllerResult Properties EventType Type of the event to be queued. Declaration public WatchEventType? EventType { get; } Property Value Type Description Nullable < k8s.WatchEventType > RequeueDelay Time that should be waited for a requeue. Declaration public TimeSpan RequeueDelay { get; } Property Value Type Description TimeSpan Methods RequeueEvent(TimeSpan) Create a ResourceControllerResult that requeues a resource with a given delay. When the event fires (after the delay) the resource cache is consulted and the new k8s.WatchEventType is calculated. Based on this new calculation, the new event triggers the according function. Declaration public static ResourceControllerResult RequeueEvent(TimeSpan delay) Parameters Type Name Description TimeSpan delay The delay. Please note, that a delay of Zero will result in an immediate trigger of the function. This can lead to infinite circles. Returns Type Description ResourceControllerResult The ResourceControllerResult with the configured delay. RequeueEvent(TimeSpan, WatchEventType) Create a ResourceControllerResult that requeues a resource with a given delay. When the event fires (after the delay) the resource cache is ignored in favor the specified k8s.WatchEventType . Based on the specified type, the new event triggers the according function. Declaration public static ResourceControllerResult RequeueEvent(TimeSpan delay, WatchEventType eventType) Parameters Type Name Description TimeSpan delay The delay. Please note, that a delay of Zero will result in an immediate trigger of the function. This can lead to infinite circles. k8s.WatchEventType eventType The event type to queue. Returns Type Description ResourceControllerResult The ResourceControllerResult with the configured delay and event type."
  },
  "neonkube/api/Neon.Kube.Operator.ResourceManager.ResourceManager-2.html": {
    "href": "neonkube/api/Neon.Kube.Operator.ResourceManager.ResourceManager-2.html",
    "title": "Class ResourceManager<TEntity, TController> | NeonKUBE documentation",
    "keywords": "Class ResourceManager<TEntity, TController> Used by custom Kubernetes operators to manage a collection of custom resources. Inheritance Object ResourceManager<TEntity, TController> Namespace : Neon.Kube.Operator.ResourceManager Assembly : Neon.Kube.Operator.dll Syntax public sealed class ResourceManager<TEntity, TController> : IDisposable where TEntity : IKubernetesObject<V1ObjectMeta>, new() where TController : IOperatorController<TEntity> Type Parameters Name Description TEntity Specifies the custom Kubernetes entity type being managed. TController Specifies the entity controller type. Remarks This class helps makes it easier to manage custom cluster resources. Simply construct an instance with ResourceManager<TEntity, TController> in your controller (passing any custom settings as parameters) and then call StartAsync() . After the resource manager starts, your controller's ReconcileAsync(TEntity) , DeletedAsync(TEntity) , and StatusModifiedAsync(TEntity) methods will be called as related resource related events are received. Your handlers should perform any necessary operations to converge the actual state with set of resources passed and then return a ResourceControllerResult to control event requeuing or null . note For most operators, we recommend that all of your handlers execute shared code that handles all reconcilation by comparing the desired state represented by the custom resources passed to your handler in the dictionary passed with the current state and then performing any required converge operations as opposed to handling just resource add/edits for reconciled events or just resource deletions for deletred events. This is often cleaner by keeping all of your reconcilation logic in one place. OPERATOR LIFECYCLE Kubernetes operators work by watching cluster resources via the API server. The KubeOps Operator SDK starts watching the resource specified by TEntity and raises the controller events as they are received, handling any failures seamlessly. The ResourceManager<TEntity, TController> class helps keep track of the existing resources as well reducing the complexity of determining why an event was raised. KubeOps also periodically raises reconciled events even when nothing has changed. This appears to happen once a minute. When your operator first starts, a reconciled event will be raised for each custom resource of type TEntity in the cluster and the resource manager will add these resources to its internal dictionary. By default, the resource manager will not call your handler until all existing resources have been added to this dictionary. Then after the resource manager has determined that it has collected all of the existing resources, it will call your handler for the first time, passing a null resource name and your handler can start doing it's thing. note Holding back calls to your reconciled handler is important in many situations by ensuring that the entire set of resources is known before the first handler call. Without this, your handler may perform delete actions on resources that exist in the cluster but haven't been reconciled yet which could easily cause a lot of trouble, especially if your operator gets scheduled and needs to start from scratch. After the resource manager has all of the resources, it will start calling your reconciled handler for every event raised by KUbeOps and start calling your deleted and status modified handlers for changes. Your handlers are called after the internal resource dictionary is updated with changes implied by the event. This means that a new resource received with a reconcile event will be added to the dictionary before your handler is called and a resource from a deleted event will be removed before the handler is called. The name of the new, deleted, or changed resource will be passed to your handler. This will be passed as null when nothing changed. LEADER LEADER ELECTION It's often necessary to ensure that only one entity (typically a pod) is managing a specific resource kind at a time. For example, let's say you're writing an operator that manages the deployment of other applications based on custom resources. In this case, it'll be important that only a single operator instance be managing the application at a time to avoid having the operators step on each other's toes when the operator has multiple replicas running. The KubeOps SDK and other operator SDKs allow operators to indicate that only a single replica in the cluster should be allowed to process changes to custom resources. This uses Kubernetes leases and works well for simple operators that manage only a single resource or perhaps a handful of resources that are not also managed by other operators. It's often handy to be able to have an operator application manage multiple resources, with each resource kind having their own lease enforcing this exclusivity: Allow multiple replicas of an operator be able to load balance processing of different resource kinds. Allow operators to consolidate processing of different resource kinds, some that need exclusivity and others that don't. This can help reduce the number of operator applications that need to be created, deployed, and managed and can also reduce the number of system processes required along with their associated overhead. Constructors ResourceManager(IServiceProvider, String, ResourceManagerOptions, Func<TEntity, Boolean>, LeaderElectionConfig, Boolean) Default constructor. Declaration public ResourceManager(IServiceProvider serviceProvider, string namespace = null, ResourceManagerOptions options = null, Func<TEntity, bool> filter = null, LeaderElectionConfig leaderConfig = null, bool leaderElectionDisabled = false) Parameters Type Name Description IServiceProvider serviceProvider String namespace ResourceManagerOptions options Optionally specifies options that customize the resource manager's behavior. Reasonable defaults will be used when this isn't specified. Func <TEntity, Boolean > filter Optionally specifies a predicate to be use for filtering the resources to be managed. This can be useful for situations where multiple operator instances will partition and handle the resources amongst themselves. A good example is a node based operator that handles only the resources associated with the node. Your filter should examine the resource passed and return true when the resource should be managed by this resource manager. The default filter always returns true . LeaderElectionConfig leaderConfig Optionally specifies the LeaderElectionConfig to be used to control whether only a single entity is managing a specific resource kind at a time. See the LEADER ELECTION SECTION in the ResourceManager<TEntity, TController> remarks for more information. Boolean leaderElectionDisabled Properties IsLeader Returns true when this instance is currently the leader for the resource type. Declaration public bool IsLeader { get; } Property Value Type Description Boolean LeaderIdentity Returns the identity of the current leader for the resource type or null when there is no leader. Declaration public string LeaderIdentity { get; } Property Value Type Description String Methods Dispose() Declaration public void Dispose() StartAsync() Starts the resource manager. Declaration public async Task StartAsync() Returns Type Description Task Exceptions Type Condition InvalidOperationException Thrown when the resource manager has already been started."
  },
  "neonkube/api/Neon.Kube.Operator.ResourceManager.ResourceManagerMetrics-2.html": {
    "href": "neonkube/api/Neon.Kube.Operator.ResourceManager.ResourceManagerMetrics-2.html",
    "title": "Class ResourceManagerMetrics<TEntity, TController> | NeonKUBE documentation",
    "keywords": "Class ResourceManagerMetrics<TEntity, TController> Specifies metrics for a resource manager. See the ResourceManager<TEntity, TController> . Inheritance Object ResourceManagerMetrics<TEntity, TController> Namespace : Neon.Kube.Operator.ResourceManager Assembly : Neon.Kube.Operator.dll Syntax public class ResourceManagerMetrics<TEntity, TController> where TEntity : IKubernetesObject<V1ObjectMeta>, new() where TController : IOperatorController<TEntity> Type Parameters Name Description TEntity TController Constructors ResourceManagerMetrics() Default constructor. Declaration public ResourceManagerMetrics() Properties DeleteCounter Metrics counter incremented whenever a DELETE event is passed to the operator. This defaults to a counter names operator_delete which is suitable for operator applications with only a single control loop. Operators with multiple control loops should consider setting this to a counter specific to each loop. note This may also be set to null to disable counting. Declaration public Counter DeleteCounter { get; set; } Property Value Type Description Prometheus.Counter DeleteErrorCounter Metrics counter incremented whenever an exception is thrown while handling a resource deletion. This defaults to a counter names operator_delete_errors which is suitable for operator applications with only a single control loop. Operators with multiple control loops should consider setting this to a counter specific to each loop. Declaration public Counter DeleteErrorCounter { get; set; } Property Value Type Description Prometheus.Counter FinalizeCounter Metrics counter incremented whenever a FINALIZE event is passed to the operator. This defaults to a counter names operator_finalize which is suitable for operator applications with only a single control loop. Operators with multiple control loops should consider setting this to a counter specific to each loop. note This may also be set to null to disable counting. Declaration public Counter FinalizeCounter { get; set; } Property Value Type Description Prometheus.Counter FinalizeErrorCounter Metrics counter incremented whenever an exception is thrown while handling a resource finalize. This defaults to a counter named operator_finalize_errors which is suitable for operator applications with only a single control loop. Operators with multiple control loops should consider setting this to a counter specific to each loop. Declaration public Counter FinalizeErrorCounter { get; set; } Property Value Type Description Prometheus.Counter IdleCounter Metrics counter incremented whenever a IDLE event is passed to the operator. This defaults to a counter names operator_idle which is suitable for operator applications with only a single control loop. Operators with multiple control loops should consider setting this to a counter specific to each loop. note This may also be set to null to disable counting. Declaration public Counter IdleCounter { get; set; } Property Value Type Description Prometheus.Counter IdleErrorCounter Metrics counter incremented whenever a IDLE event is passed to the operator. This defaults to a counter names operator_idle which is suitable for operator applications with only a single control loop. Operators with multiple control loops should consider setting this to a counter specific to each loop. note This may also be set to null to disable counting. Declaration public Counter IdleErrorCounter { get; set; } Property Value Type Description Prometheus.Counter ReconcileCounter Metrics counter incremented whenever a RECONCILE event is passed to the operator. This defaults to a counter names operator_reconcile which is suitable for operator applications with only a single control loop. Operators with multiple control loops should consider setting this to a counter specific to each loop. note This may also be set to null to disable counting. Declaration public Counter ReconcileCounter { get; set; } Property Value Type Description Prometheus.Counter ReconcileErrorCounter Metrics counter incremented whenever an exception is thrown while handling a resource reconiciliation. This defaults to a counter names operator_reconcile_errors which is suitable for operator applications with only a single control loop. Operators with multiple control loops should consider setting this to a counter specific to each loop. Declaration public Counter ReconcileErrorCounter { get; set; } Property Value Type Description Prometheus.Counter StatusModifyCounter Metrics counter incremented whenever a STATUS-MODIFIED event is passed to the operator. This defaults to a counter names operator_statusmodify which is suitable for operator applications with only a single control loop. Operators with multiple control loops should consider setting this to a counter specific to each loop. note This may also be set to null to disable counting. Declaration public Counter StatusModifyCounter { get; set; } Property Value Type Description Prometheus.Counter StatusModifyErrorCounter Metrics counter incremented whenever an exception is thrown while handling a resource status modification. This defaults to a counter names operator_statusmodified_errors which is suitable for operator applications with only a single control loop. Operators with multiple control loops should consider setting this to a counter specific to each loop. Declaration public Counter StatusModifyErrorCounter { get; set; } Property Value Type Description Prometheus.Counter"
  },
  "neonkube/api/Neon.Kube.Operator.ResourceManager.ResourceManagerOptions.html": {
    "href": "neonkube/api/Neon.Kube.Operator.ResourceManager.ResourceManagerOptions.html",
    "title": "Class ResourceManagerOptions | NeonKUBE documentation",
    "keywords": "Class ResourceManagerOptions Specifies options for a resource manager. See the ResourceManager<TEntity, TController> remarks for more information. Inheritance Object ResourceManagerOptions Namespace : Neon.Kube.Operator.ResourceManager Assembly : Neon.Kube.Operator.dll Syntax public class ResourceManagerOptions Constructors ResourceManagerOptions() Default constructor. Declaration public ResourceManagerOptions() Properties ErrorMaxRequeueInterval Specifies the maximum timeout to before retrying after an error. Timeouts will start at ErrorMinRequeueInterval and increase to ErrorMaxRequeueInterval until the error is resolved. This defaults to 10 minutes . Declaration public TimeSpan ErrorMaxRequeueInterval { get; set; } Property Value Type Description TimeSpan ErrorMaxRetryCount Specifies the maximum number of attempts to retry after an error. This defaults to 10 . Declaration public int ErrorMaxRetryCount { get; set; } Property Value Type Description Int32 ErrorMinRequeueInterval Specifies the minimum timeout to before retrying after an error. Timeouts will start at ErrorMinRequeueInterval and increase to ErrorMaxRequeueInterval until the error is resolved. This defaults to 15 seconds . Declaration public TimeSpan ErrorMinRequeueInterval { get; set; } Property Value Type Description TimeSpan IdleInterval Specifies the interval at which reconcile events indicating that nothing has changed will be raised. These IDLE events are a good time for controllers to operate on the entire set of resources. This defaults to 1 minutes . Declaration public TimeSpan IdleInterval { get; set; } Property Value Type Description TimeSpan ManageCustomResourceDefinitions Specifies whether Kubernetes custom resources should be created. Declaration public bool ManageCustomResourceDefinitions { get; set; } Property Value Type Description Boolean Methods Validate() Validates the option properties. Declaration public void Validate() Exceptions Type Condition ValidationException Thrown when any of the properties are invalid."
  },
  "neonkube/api/Neon.Kube.Operator.ServiceCollectionExtensions.html": {
    "href": "neonkube/api/Neon.Kube.Operator.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | NeonKUBE documentation",
    "keywords": "Class ServiceCollectionExtensions Kubernetes operator IServiceCollection extension methods. Inheritance Object ServiceCollectionExtensions Namespace : Neon.Kube.Operator Assembly : Neon.Kube.Operator.dll Syntax public static class ServiceCollectionExtensions Methods AddKubernetesOperator(IServiceCollection, OperatorSettings) Adds Kubernetes operator to the service collection. Declaration public static IOperatorBuilder AddKubernetesOperator(this IServiceCollection services, OperatorSettings settings) Parameters Type Name Description IServiceCollection services The IServiceCollection OperatorSettings settings Optional options Returns Type Description IOperatorBuilder AddKubernetesOperator(IServiceCollection, Action<OperatorSettings>) Adds Kubernetes operator to the service collection. Declaration public static IOperatorBuilder AddKubernetesOperator(this IServiceCollection services, Action<OperatorSettings> options = null) Parameters Type Name Description IServiceCollection services The IServiceCollection Action < OperatorSettings > options Optional action to configure Returns Type Description IOperatorBuilder"
  },
  "neonkube/api/Neon.Kube.Operator.Util.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Util.html",
    "title": "Namespace Neon.Kube.Operator.Util | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Operator.Util Classes OperatorHelper Useful utilities for the KubeOps operator SDK. Pod Abstracts access to the host pod properties."
  },
  "neonkube/api/Neon.Kube.Operator.Util.OperatorHelper.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Util.OperatorHelper.html",
    "title": "Class OperatorHelper | NeonKUBE documentation",
    "keywords": "Class OperatorHelper Useful utilities for the KubeOps operator SDK. Inheritance Object OperatorHelper Namespace : Neon.Kube.Operator.Util Assembly : Neon.Kube.Operator.dll Syntax public static class OperatorHelper Methods CreatePatch<T>() Creates a new JsonPatchDocument that can be used to specify modifications to a T custom object. Declaration public static JsonPatchDocument<T> CreatePatch<T>() where T : class Returns Type Description JsonPatchDocument <T> The JsonPatchDocument . Type Parameters Name Description T Specifies the custom object type. ToV1Patch<T>(JsonPatchDocument<T>) Converts a JsonPatchDocument into a k8s.Models.V1Patch that can be submitted to the Kubernetes API. Declaration public static V1Patch ToV1Patch<T>(JsonPatchDocument<T> patchDoc) where T : class Parameters Type Name Description JsonPatchDocument <T> patchDoc The configured patch document. Returns Type Description k8s.Models.V1Patch The k8s.Models.V1Patch instance. Type Parameters Name Description T Identifies the type being patched."
  },
  "neonkube/api/Neon.Kube.Operator.Util.Pod.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Util.Pod.html",
    "title": "Class Pod | NeonKUBE documentation",
    "keywords": "Class Pod Abstracts access to the host pod properties. Inheritance Object Pod Namespace : Neon.Kube.Operator.Util Assembly : Neon.Kube.Operator.dll Syntax public static class Pod Fields Name Returns the name of the executing pod. Declaration public static readonly string Name Field Value Type Description String Namespace Returns the Kubernetes namespace where the executing pod is running. Declaration public static readonly string Namespace Field Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Operator.Webhook.AdmissionOperations.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Webhook.AdmissionOperations.html",
    "title": "Enum AdmissionOperations | NeonKUBE documentation",
    "keywords": "Enum AdmissionOperations Represents admission controller operations. Namespace : Neon.Kube.Operator.Webhook Assembly : Neon.Kube.Operator.dll Syntax [Flags] public enum AdmissionOperations Fields Name Description All All. Create Create. Delete Delete. None None. Update Update. Extension Methods WebhookHelper.ToList()"
  },
  "neonkube/api/Neon.Kube.Operator.Webhook.AdmissionResult.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Webhook.AdmissionResult.html",
    "title": "Class AdmissionResult | NeonKUBE documentation",
    "keywords": "Class AdmissionResult Represents a result from an admission webhook. Inheritance Object AdmissionResult MutationResult ValidationResult Namespace : Neon.Kube.Operator.Webhook Assembly : Neon.Kube.Operator.dll Syntax public class AdmissionResult Properties StatusCode The http status code. Declaration public int? StatusCode { get; set; } Property Value Type Description Nullable < Int32 > StatusMessage The status message. Declaration public string StatusMessage { get; set; } Property Value Type Description String Valid Whether the request was valid or not. Declaration public bool Valid { get; set; } Property Value Type Description Boolean Warnings Warnings associated with the result. Declaration public IList<string> Warnings { get; set; } Property Value Type Description IList < String >"
  },
  "neonkube/api/Neon.Kube.Operator.Webhook.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Webhook.html",
    "title": "Namespace Neon.Kube.Operator.Webhook | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Operator.Webhook Classes AdmissionResult Represents a result from an admission webhook. MutationResult Represents the result of a mutating webhook. ValidationResult Represents the result of a validation webhook. WebhookAttribute Describes an admission webhook and the resources and operations it applies to. WebhookHelper Webhook helper methods. WebhookRuleAttribute Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches any Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects. Interfaces IAdmissionWebhook<TEntity, TResult> Represents an Admission webhook. IMutatingWebhook<TEntity> Represents a mutating webhook. IValidatingWebhook<TEntity> Represents a Validating webhook. Enums AdmissionOperations Represents admission controller operations. WebhookType Defines webhook types."
  },
  "neonkube/api/Neon.Kube.Operator.Webhook.IAdmissionWebhook-2.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Webhook.IAdmissionWebhook-2.html",
    "title": "Interface IAdmissionWebhook<TEntity, TResult> | NeonKUBE documentation",
    "keywords": "Interface IAdmissionWebhook<TEntity, TResult> Represents an Admission webhook. Namespace : Neon.Kube.Operator.Webhook Assembly : Neon.Kube.Operator.dll Syntax public interface IAdmissionWebhook<TEntity, TResult> where TEntity : IKubernetesObject<V1ObjectMeta>, new() where TResult : AdmissionResult, new() Type Parameters Name Description TEntity TResult Methods Create(TEntity, Boolean) Operation for Create . Declaration TResult Create(TEntity newEntity, bool dryRun) Parameters Type Name Description TEntity newEntity The newly created entity that should be validated. Boolean dryRun A boolean that indicates if this call was initiated from a dry run (kubectl ... --dry-run). Returns Type Description TResult A result that is transmitted to kubernetes. CreateAsync(TEntity, Boolean) Operation for Create . Declaration virtual Task<TResult> CreateAsync(TEntity newEntity, bool dryRun) Parameters Type Name Description TEntity newEntity The newly created entity that should be validated. Boolean dryRun A boolean that indicates if this call was initiated from a dry run (kubectl ... --dry-run). Returns Type Description Task <TResult> A result that is transmitted to kubernetes. Delete(TEntity, Boolean) Operation for Delete . Declaration TResult Delete(TEntity oldEntity, bool dryRun) Parameters Type Name Description TEntity oldEntity The entity that is being deleted. Boolean dryRun A boolean that indicates if this call was initiated from a dry run (kubectl ... --dry-run). Returns Type Description TResult A result that is transmitted to kubernetes. DeleteAsync(TEntity, Boolean) Operation for Delete . Declaration virtual Task<TResult> DeleteAsync(TEntity oldEntity, bool dryRun) Parameters Type Name Description TEntity oldEntity The entity that is being deleted. Boolean dryRun A boolean that indicates if this call was initiated from a dry run (kubectl ... --dry-run). Returns Type Description Task <TResult> A result that is transmitted to kubernetes. Update(TEntity, TEntity, Boolean) Operation for Update . Declaration TResult Update(TEntity oldEntity, TEntity newEntity, bool dryRun) Parameters Type Name Description TEntity oldEntity The old entity. This is the \"old\" version before the update. TEntity newEntity The new entity. This is the \"new\" version after the update is performed. Boolean dryRun A boolean that indicates if this call was initiated from a dry run (kubectl ... --dry-run). Returns Type Description TResult A result that is transmitted to kubernetes. UpdateAsync(TEntity, TEntity, Boolean) Operation for Update . Declaration virtual Task<TResult> UpdateAsync(TEntity oldEntity, TEntity newEntity, bool dryRun) Parameters Type Name Description TEntity oldEntity The old entity. This is the \"old\" version before the update. TEntity newEntity The new entity. This is the \"new\" version after the update is performed. Boolean dryRun A boolean that indicates if this call was initiated from a dry run (kubectl ... --dry-run). Returns Type Description Task <TResult> A result that is transmitted to kubernetes."
  },
  "neonkube/api/Neon.Kube.Operator.Webhook.IMutatingWebhook-1.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Webhook.IMutatingWebhook-1.html",
    "title": "Interface IMutatingWebhook<TEntity> | NeonKUBE documentation",
    "keywords": "Interface IMutatingWebhook<TEntity> Represents a mutating webhook. Inherited Members IAdmissionWebhook<TEntity, MutationResult>.Create(TEntity, Boolean) IAdmissionWebhook<TEntity, MutationResult>.CreateAsync(TEntity, Boolean) IAdmissionWebhook<TEntity, MutationResult>.Update(TEntity, TEntity, Boolean) IAdmissionWebhook<TEntity, MutationResult>.UpdateAsync(TEntity, TEntity, Boolean) IAdmissionWebhook<TEntity, MutationResult>.Delete(TEntity, Boolean) IAdmissionWebhook<TEntity, MutationResult>.DeleteAsync(TEntity, Boolean) Namespace : Neon.Kube.Operator.Webhook Assembly : Neon.Kube.Operator.dll Syntax public interface IMutatingWebhook<TEntity> : IAdmissionWebhook<TEntity, MutationResult> where TEntity : IKubernetesObject<V1ObjectMeta>, new() Type Parameters Name Description TEntity Properties Logger Logger. Declaration ILogger Logger { get; set; } Property Value Type Description ILogger NamespaceSelector The namespace selector. Declaration virtual V1LabelSelector NamespaceSelector { get; } Property Value Type Description k8s.Models.V1LabelSelector ObjectSelector The Object selector. Declaration virtual V1LabelSelector ObjectSelector { get; } Property Value Type Description k8s.Models.V1LabelSelector WebhookConfiguration The webhook configuration. Declaration virtual V1MutatingWebhookConfiguration WebhookConfiguration { get; } Property Value Type Description k8s.Models.V1MutatingWebhookConfiguration Explicit Interface Implementations IAdmissionWebhook<TEntity, MutationResult>.Create(TEntity, Boolean) Operation for Create . Declaration MutationResult IAdmissionWebhook<TEntity, MutationResult>.Create(TEntity newEntity, bool dryRun) Parameters Type Name Description TEntity newEntity The newly created entity that should be validated. Boolean dryRun A boolean that indicates if this call was initiated from a dry run (kubectl ... --dry-run). Returns Type Description MutationResult A result that is transmitted to kubernetes. IAdmissionWebhook<TEntity, MutationResult>.Delete(TEntity, Boolean) Operation for Delete . Declaration MutationResult IAdmissionWebhook<TEntity, MutationResult>.Delete(TEntity oldEntity, bool dryRun) Parameters Type Name Description TEntity oldEntity The entity that is being deleted. Boolean dryRun A boolean that indicates if this call was initiated from a dry run (kubectl ... --dry-run). Returns Type Description MutationResult A result that is transmitted to kubernetes. IAdmissionWebhook<TEntity, MutationResult>.Update(TEntity, TEntity, Boolean) Operation for Update . Declaration MutationResult IAdmissionWebhook<TEntity, MutationResult>.Update(TEntity oldEntity, TEntity newEntity, bool dryRun) Parameters Type Name Description TEntity oldEntity The old entity. This is the \"old\" version before the update. TEntity newEntity The new entity. This is the \"new\" version after the update is performed. Boolean dryRun A boolean that indicates if this call was initiated from a dry run (kubectl ... --dry-run). Returns Type Description MutationResult A result that is transmitted to kubernetes."
  },
  "neonkube/api/Neon.Kube.Operator.Webhook.IValidatingWebhook-1.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Webhook.IValidatingWebhook-1.html",
    "title": "Interface IValidatingWebhook<TEntity> | NeonKUBE documentation",
    "keywords": "Interface IValidatingWebhook<TEntity> Represents a Validating webhook. Inherited Members IAdmissionWebhook<TEntity, ValidationResult>.Create(TEntity, Boolean) IAdmissionWebhook<TEntity, ValidationResult>.CreateAsync(TEntity, Boolean) IAdmissionWebhook<TEntity, ValidationResult>.Update(TEntity, TEntity, Boolean) IAdmissionWebhook<TEntity, ValidationResult>.UpdateAsync(TEntity, TEntity, Boolean) IAdmissionWebhook<TEntity, ValidationResult>.Delete(TEntity, Boolean) IAdmissionWebhook<TEntity, ValidationResult>.DeleteAsync(TEntity, Boolean) Namespace : Neon.Kube.Operator.Webhook Assembly : Neon.Kube.Operator.dll Syntax public interface IValidatingWebhook<TEntity> : IAdmissionWebhook<TEntity, ValidationResult> where TEntity : IKubernetesObject<V1ObjectMeta>, new() Type Parameters Name Description TEntity Properties Logger Logger. Declaration ILogger Logger { get; set; } Property Value Type Description ILogger NamespaceSelector The namespace selector. Declaration virtual V1LabelSelector NamespaceSelector { get; } Property Value Type Description k8s.Models.V1LabelSelector ObjectSelector The Object selector. Declaration virtual V1LabelSelector ObjectSelector { get; } Property Value Type Description k8s.Models.V1LabelSelector WebhookConfiguration The webhook configuration. Declaration virtual V1ValidatingWebhookConfiguration WebhookConfiguration { get; } Property Value Type Description k8s.Models.V1ValidatingWebhookConfiguration Explicit Interface Implementations IAdmissionWebhook<TEntity, ValidationResult>.Create(TEntity, Boolean) Operation for Create . Declaration ValidationResult IAdmissionWebhook<TEntity, ValidationResult>.Create(TEntity newEntity, bool dryRun) Parameters Type Name Description TEntity newEntity The newly created entity that should be validated. Boolean dryRun A boolean that indicates if this call was initiated from a dry run (kubectl ... --dry-run). Returns Type Description ValidationResult A result that is transmitted to kubernetes. IAdmissionWebhook<TEntity, ValidationResult>.Delete(TEntity, Boolean) Operation for Delete . Declaration ValidationResult IAdmissionWebhook<TEntity, ValidationResult>.Delete(TEntity oldEntity, bool dryRun) Parameters Type Name Description TEntity oldEntity The entity that is being deleted. Boolean dryRun A boolean that indicates if this call was initiated from a dry run (kubectl ... --dry-run). Returns Type Description ValidationResult A result that is transmitted to kubernetes. IAdmissionWebhook<TEntity, ValidationResult>.Update(TEntity, TEntity, Boolean) Operation for Update . Declaration ValidationResult IAdmissionWebhook<TEntity, ValidationResult>.Update(TEntity oldEntity, TEntity newEntity, bool dryRun) Parameters Type Name Description TEntity oldEntity The old entity. This is the \"old\" version before the update. TEntity newEntity The new entity. This is the \"new\" version after the update is performed. Boolean dryRun A boolean that indicates if this call was initiated from a dry run (kubectl ... --dry-run). Returns Type Description ValidationResult A result that is transmitted to kubernetes."
  },
  "neonkube/api/Neon.Kube.Operator.Webhook.MutationResult.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Webhook.MutationResult.html",
    "title": "Class MutationResult | NeonKUBE documentation",
    "keywords": "Class MutationResult Represents the result of a mutating webhook. Inheritance Object AdmissionResult MutationResult Inherited Members AdmissionResult.Valid AdmissionResult.StatusCode AdmissionResult.StatusMessage AdmissionResult.Warnings Namespace : Neon.Kube.Operator.Webhook Assembly : Neon.Kube.Operator.dll Syntax public sealed class MutationResult : AdmissionResult Properties ModifiedObject The modified Declaration public object ModifiedObject { get; set; } Property Value Type Description Object Methods Modified(Object, String[]) Utility method that creates a return value that indicates that changes were made to the object that must be patched. This creates a json patch ( jsonpatch.com ) that describes the diff from the original object to the modified object. Declaration public static MutationResult Modified(object modifiedEntity, params string[] warnings) Parameters Type Name Description Object modifiedEntity The modified object. String [] warnings An optional list of warnings/messages given back to the user. This could contain a reason why an object was mutated. Returns Type Description MutationResult A MutationResult with a modified object. NoChanges() Utility method that creates a return value that indicates that no changes must be applied. Declaration public static MutationResult NoChanges() Returns Type Description MutationResult A MutationResult with no changes."
  },
  "neonkube/api/Neon.Kube.Operator.Webhook.ValidationResult.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Webhook.ValidationResult.html",
    "title": "Class ValidationResult | NeonKUBE documentation",
    "keywords": "Class ValidationResult Represents the result of a validation webhook. Inheritance Object AdmissionResult ValidationResult Inherited Members AdmissionResult.Valid AdmissionResult.StatusCode AdmissionResult.StatusMessage AdmissionResult.Warnings Namespace : Neon.Kube.Operator.Webhook Assembly : Neon.Kube.Operator.dll Syntax public sealed class ValidationResult : AdmissionResult Methods Fail(Nullable<Int32>, String) Constructs a fail result with optional status code and status message. Declaration public static ValidationResult Fail(int? statusCode = null, string statusMessage = null) Parameters Type Name Description Nullable < Int32 > statusCode String statusMessage Returns Type Description ValidationResult Success(String[]) Constructs a success response with optional warnings. Declaration public static ValidationResult Success(params string[] warnings) Parameters Type Name Description String [] warnings Returns Type Description ValidationResult"
  },
  "neonkube/api/Neon.Kube.Operator.Webhook.WebhookAttribute.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Webhook.WebhookAttribute.html",
    "title": "Class WebhookAttribute | NeonKUBE documentation",
    "keywords": "Class WebhookAttribute Describes an admission webhook and the resources and operations it applies to. Inheritance Object Attribute WebhookAttribute Namespace : Neon.Kube.Operator.Webhook Assembly : Neon.Kube.Operator.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class WebhookAttribute : Attribute Constructors WebhookAttribute(String, String, String, String, String, String, String, Int32, String, String, String) Constructor. Declaration public WebhookAttribute(string name, string admissionReviewVersions, string serviceName = null, string namespace = null, string certificate = null, string failurePolicy = \"Fail\", string sideEffects = \"None\", int timeoutSeconds = 5, string matchPolicy = \"Equivalent\", string reinvocationPolicy = \"Never\", string url = null) Parameters Type Name Description String name String admissionReviewVersions String serviceName String namespace String certificate String failurePolicy String sideEffects Int32 timeoutSeconds String matchPolicy String reinvocationPolicy String url Properties AdmissionReviewVersions An ordered list of preferred AdmissionReview versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. Declaration public string[] AdmissionReviewVersions { get; } Property Value Type Description String [] Certificate The certificate name. Formatted as namespace/name. Declaration public string Certificate { get; } Property Value Type Description String FailurePolicy Defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail. Declaration public string FailurePolicy { get; } Property Value Type Description String MatchPolicy Defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\". - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included apiGroups:[&quot;apps&quot;], apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;] , a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook. - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included apiGroups:[&quot;apps&quot;], apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;] , a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook. Defaults to \"Equivalent\" Declaration public string MatchPolicy { get; } Property Value Type Description String Name The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Declaration public string Name { get; } Property Value Type Description String Namespace The namespace where the webhook is deployed. Declaration public string Namespace { get; } Property Value Type Description String ReinvocationPolicy Indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are \"Never\" and \"IfNeeded\". Never: the webhook will not be called more than once in a single admission evaluation. IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option must be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead. Defaults to \"Never\". Declaration public string ReinvocationPolicy { get; } Property Value Type Description String ServiceName The kubernetes service name for the webhook. Declaration public string ServiceName { get; } Property Value Type Description String SideEffects States whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. Declaration public string SideEffects { get; } Property Value Type Description String TimeoutSeconds Specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Declaration public int TimeoutSeconds { get; } Property Value Type Description Int32 Url The external URL of the webhook. Declaration public string Url { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Operator.Webhook.WebhookHelper.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Webhook.WebhookHelper.html",
    "title": "Class WebhookHelper | NeonKUBE documentation",
    "keywords": "Class WebhookHelper Webhook helper methods. Inheritance Object WebhookHelper Namespace : Neon.Kube.Operator.Webhook Assembly : Neon.Kube.Operator.dll Syntax public static class WebhookHelper Methods CreateEndpoint(Type, Type, WebhookType) Helper method to create a route for an IAdmissionWebhook<TEntity, TResult> Declaration public static string CreateEndpoint(Type entityType, Type webhook, WebhookType webhookType) Parameters Type Name Description Type entityType Type webhook WebhookType webhookType Returns Type Description String Exceptions Type Condition ArgumentException CreateEndpoint<TEntity>(Type, WebhookType) Helper method to create a route for an IAdmissionWebhook<TEntity, TResult> Declaration public static string CreateEndpoint<TEntity>(Type webhook, WebhookType webhookType) where TEntity : IKubernetesObject<V1ObjectMeta>, new() Parameters Type Name Description Type webhook WebhookType webhookType Returns Type Description String Type Parameters Name Description TEntity Exceptions Type Condition ArgumentException ToList(AdmissionOperations) Returns a list of strings representing allowed operations. Declaration public static List<string> ToList(this AdmissionOperations operations) Parameters Type Name Description AdmissionOperations operations Returns Type Description List < String >"
  },
  "neonkube/api/Neon.Kube.Operator.Webhook.WebhookRuleAttribute.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Webhook.WebhookRuleAttribute.html",
    "title": "Class WebhookRuleAttribute | NeonKUBE documentation",
    "keywords": "Class WebhookRuleAttribute Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches any Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects. Inheritance Object Attribute WebhookRuleAttribute Namespace : Neon.Kube.Operator.Webhook Assembly : Neon.Kube.Operator.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class WebhookRuleAttribute : Attribute Constructors WebhookRuleAttribute(String, String, AdmissionOperations, String, String) Constructor. Declaration public WebhookRuleAttribute(string apiGroups, string apiVersions, AdmissionOperations operations, string resources, string scope) Parameters Type Name Description String apiGroups String apiVersions AdmissionOperations operations String resources String scope Properties ApiGroups APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Declaration public string[] ApiGroups { get; } Property Value Type Description String [] ApiVersions APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Declaration public string[] ApiVersions { get; } Property Value Type Description String [] Operations The operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Declaration public AdmissionOperations Operations { get; } Property Value Type Description AdmissionOperations Resources A list of resources this rule applies to. For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources. If wildcard is present, the validation rule will ensure resources do not overlap with each other. Depending on the enclosing object, subresources might not be allowed. Declaration public string[] Resources { get; } Property Value Type Description String [] Scope Specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \" \" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \" \" means that there are no scope restrictions. Subresources match the scope of their parent resource. Declaration public string Scope { get; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Operator.Webhook.WebhookType.html": {
    "href": "neonkube/api/Neon.Kube.Operator.Webhook.WebhookType.html",
    "title": "Enum WebhookType | NeonKUBE documentation",
    "keywords": "Enum WebhookType Defines webhook types. Namespace : Neon.Kube.Operator.Webhook Assembly : Neon.Kube.Operator.dll Syntax public enum WebhookType Fields Name Description Mutate Represents a mutating webhook. Validate Represents a validating webhook."
  },
  "neonkube/api/Neon.Kube.PriorityClass.html": {
    "href": "neonkube/api/Neon.Kube.PriorityClass.html",
    "title": "Class PriorityClass | NeonKUBE documentation",
    "keywords": "Class PriorityClass Enumerates the system and neonKUBE pod PriorityClass values. These are used by Kubernetes when deciding which pod to evict from a node when necessary as well as for ordering how pods will be terminated when nodes are shutdown gracefully. Each priority property defines the priority name and value. note Higher priorities have higher values and non-Kubernetes defined priority values must be less than 1 billion. neonKUBE priority property names are prefixed by \"Neon\" and built-in Kubernetes priority property names are prefixed by \"System\" and will have IsSystem set to true . Values returns the list of all known priorities. Here are the known priority values, in decending order by priority. SystemNodeCritical (2000001000) Built-in Kubernetes priority used for the most important pods running on a node. SystemClusterCritical (2000000000) Built-in Kubernetes priority used for the important pods running on a cluster. NeonMax (999999999) Idenifies the maximum priority reserved for neonKUBE applications. You should avoid using priorities in the range of NeonMin and NeonMax (inclusive) for your applications. NeonOperator (900008000) Used for critical neonKUBE operators. NeonNetwork (900007000) Used for neonKUBE database deployments. NeonStorage (900006000) Used for critical OpenEBS related storage services that back critical neonKUBE and user deployments. NeonData (900005000) Used for neonKUBE database deployments. NeonApi (900004000) Used for neonKUBE API deployments. NeonApp (900003000) Used for neonKUBE application deployments. NeonMonitor (900002000) Used for neonKUBE monitoring components. NeonMin (900000000) Idenifies the maximum priority reserved for neonKUBE applications. You should avoid using priorities in the range of NeonMin and NeonMax (inclusive) for your applications. UserVeryHigh (5000) Available for very-high priority user pods. UserHigh (4000) Available for high priority user pods. UserMedium (3000) Available for medium priority user pods. Note that this is also configured as the global default priority class. Pods deployed without a specific priority class will be assigned this one. UserLow (2000) Available for user user pods. UserVeryLow (1000) Available for very-low priority user pods. The values defined above won't change and they are spaced well apart so users can insert additional priorities as required. The user priorities defined here are just a starting point and you're free to add add additional priorities as required or remove or edit the ones you degine. We recommend that most user defined priorities be lower than NeonApp to avoid conflicts with critical Kubernetes and neonKUBE pods. note UserMedium is configured as the global priority class by default. This means that any pods you deploy without explicitly specifying a priority class will be assigned 1000002000 rather than 0 . This can come in handy when you have an existing cluster and realize you need to run new pods at a lower priority than already running pods, and you prefer not to mess the running pod priorities. note You should avoid using priorities in the range of NeonMin and NeonMax (inclusive) for your applications. The ToManifest() method returns the Kubernetes manifest text that to be allpied to the cluster to initialize the priority classes. Inheritance Object PriorityClass Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public static class PriorityClass Properties NeonApi Used for neonKUBE API deployments. (900004000) Declaration public static PriorityClass.PriorityDef NeonApi { get; } Property Value Type Description PriorityClass.PriorityDef NeonApp Used for neonKUBE application deployments. (900003000) Declaration public static PriorityClass.PriorityDef NeonApp { get; } Property Value Type Description PriorityClass.PriorityDef NeonData Used for neonKUBE database deployments. (900005000) Declaration public static PriorityClass.PriorityDef NeonData { get; } Property Value Type Description PriorityClass.PriorityDef NeonMax Idenifies the maximum priority reserved for neonKUBE applications. You should avoid using priorities in the range of NeonMin and NeonMax (inclusive) for your applications. Declaration public static PriorityClass.PriorityDef NeonMax { get; } Property Value Type Description PriorityClass.PriorityDef NeonMin Idenifies the minimum priority reserved for neonKUBE applications. You should avoid using priorities in the range of NeonMin and NeonMax (inclusive) for your applications. Declaration public static PriorityClass.PriorityDef NeonMin { get; } Property Value Type Description PriorityClass.PriorityDef NeonMonitor Available for neonKUBE monitoring related components. (900002000) Declaration public static PriorityClass.PriorityDef NeonMonitor { get; } Property Value Type Description PriorityClass.PriorityDef NeonNetwork Used for neonKUBE database deployments. (900007000) Declaration public static PriorityClass.PriorityDef NeonNetwork { get; } Property Value Type Description PriorityClass.PriorityDef NeonOperator Used for critical neonKUBE operators. (900008000) Declaration public static PriorityClass.PriorityDef NeonOperator { get; } Property Value Type Description PriorityClass.PriorityDef NeonStorage Used for OpenEBS related storage deployments. (1000006000) Declaration public static PriorityClass.PriorityDef NeonStorage { get; } Property Value Type Description PriorityClass.PriorityDef SystemClusterCritical Built-in Kubernetes priority used for the important pods running on a cluster. (2000000000) Declaration public static PriorityClass.PriorityDef SystemClusterCritical { get; } Property Value Type Description PriorityClass.PriorityDef SystemNodeCritical Built-in Kubernetes priority used for the most important pods running on a node. (2000001000) Declaration public static PriorityClass.PriorityDef SystemNodeCritical { get; } Property Value Type Description PriorityClass.PriorityDef UserHigh Available for high priority user pods. (4000) Declaration public static PriorityClass.PriorityDef UserHigh { get; } Property Value Type Description PriorityClass.PriorityDef UserLow Available for low priority user pods. (2000) Declaration public static PriorityClass.PriorityDef UserLow { get; } Property Value Type Description PriorityClass.PriorityDef UserMedium Available for medium priority user pods and is also configured as the global default when a priority isn't explicitly specified. (3000) Declaration public static PriorityClass.PriorityDef UserMedium { get; } Property Value Type Description PriorityClass.PriorityDef UserVeryHigh Available for very high priority user pods. (5000) Declaration public static PriorityClass.PriorityDef UserVeryHigh { get; } Property Value Type Description PriorityClass.PriorityDef UserVeryLow Available for very low priority user pods. (1000) Declaration public static PriorityClass.PriorityDef UserVeryLow { get; } Property Value Type Description PriorityClass.PriorityDef Values Returns the list of all known built-in pod priorities. Declaration public static IReadOnlyList<PriorityClass.PriorityDef> Values { get; } Property Value Type Description IReadOnlyList < PriorityClass.PriorityDef > Methods EnsureKnown(String) Ensures that a priority class name is a standard neonKUBE priority class. Declaration public static void EnsureKnown(string priorityClass) Parameters Type Name Description String priorityClass The class name to check or null . Exceptions Type Condition KeyNotFoundException Thrown for unknown priority classes. ToManifest() Generates the Kubernetes manifest to be used to initialize the non-Kubernetes priority classes. Declaration public static string ToManifest() Returns Type Description String The manifest text."
  },
  "neonkube/api/Neon.Kube.PriorityClass.PriorityDef.html": {
    "href": "neonkube/api/Neon.Kube.PriorityClass.PriorityDef.html",
    "title": "Struct PriorityClass.PriorityDef | NeonKUBE documentation",
    "keywords": "Struct PriorityClass.PriorityDef Used to define a pod priority. Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public struct PriorityDef Constructors PriorityDef(String, Int32, String, Boolean, Boolean) Constructor. Declaration public PriorityDef(string name, int value, string description = null, bool isSystem = false, bool isDefault = false) Parameters Type Name Description String name The priority name. Int32 value The priority value. String description Optionally specifies the priority description. Boolean isSystem Optionally indicates that this is a built-in Kubernetes priority. Boolean isDefault Optionally indicates that this is the global default priority class. Properties Description Returns the priority descripton (or null ). Declaration public string Description { readonly get; } Property Value Type Description String IsDefault Returns true for the global default priority class. Declaration public bool IsDefault { readonly get; } Property Value Type Description Boolean IsSystem Returns true for built-in Kubernetes priorities. Declaration public bool IsSystem { readonly get; } Property Value Type Description Boolean Name Returns the priority name. Declaration public string Name { readonly get; } Property Value Type Description String Value Returns the priority value. Declaration public int Value { readonly get; } Property Value Type Description Int32"
  },
  "neonkube/api/Neon.Kube.PrometheusClient.html": {
    "href": "neonkube/api/Neon.Kube.PrometheusClient.html",
    "title": "Class PrometheusClient | NeonKUBE documentation",
    "keywords": "Class PrometheusClient Client for interacting with the Prometheus API. Inheritance Object PrometheusClient Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class PrometheusClient Constructors PrometheusClient(String, String, String) Constructor. Declaration public PrometheusClient(string uri, string username = null, string password = null) Parameters Type Name Description String uri Specifies the Prometheus server URI String username Optionally specifies the user name. String password Optionally Specifies the password. Properties JsonClient Returns backing JsonClient . Declaration public JsonClient JsonClient { get; } Property Value Type Description JsonClient Methods QueryAsync(String, CancellationToken) Executes a Prometheus query. Declaration public async Task<PrometheusResponse<PrometheusVectorResult>> QueryAsync(string query, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String query Specifies the Prometheus query. CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task < PrometheusResponse < PrometheusVectorResult >> The PrometheusResponse<T> . QueryRangeAsync(String, DateTime, DateTime, TimeSpan, CancellationToken) Executes a date range Prometheus query. Declaration public async Task<PrometheusResponse<PrometheusMatrixResult>> QueryRangeAsync(string query, DateTime start, DateTime end, TimeSpan stepSize = default(TimeSpan), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String query Specifies the Prometheus query. DateTime start Specifies the starting time for the query. DateTime end Specifies the ending time for the query. TimeSpan stepSize Optionally specifies the query step size. This defaults to 15 seconds) . CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task < PrometheusResponse < PrometheusMatrixResult >> The PrometheusResponse<T> ."
  },
  "neonkube/api/Neon.Kube.PrometheusMatrixResult.html": {
    "href": "neonkube/api/Neon.Kube.PrometheusMatrixResult.html",
    "title": "Class PrometheusMatrixResult | NeonKUBE documentation",
    "keywords": "Class PrometheusMatrixResult Models a Prometheus matrix result. Inheritance Object PrometheusMatrixResult Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class PrometheusMatrixResult Constructors PrometheusMatrixResult() Constructor. Declaration public PrometheusMatrixResult() Properties Result The result. Declaration [JsonProperty(PropertyName = \"result\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<PrometheusMatrixValue> Result { get; set; } Property Value Type Description List < PrometheusMatrixValue > ResultType Specifies the result type of the response. Declaration [JsonProperty(PropertyName = \"resultType\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public PrometheusResultType ResultType { get; set; } Property Value Type Description PrometheusResultType"
  },
  "neonkube/api/Neon.Kube.PrometheusMatrixValue.html": {
    "href": "neonkube/api/Neon.Kube.PrometheusMatrixValue.html",
    "title": "Class PrometheusMatrixValue | NeonKUBE documentation",
    "keywords": "Class PrometheusMatrixValue Models a Prometheus matrix value. Inheritance Object PrometheusMatrixValue Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class PrometheusMatrixValue Constructors PrometheusMatrixValue() Constructor. Declaration public PrometheusMatrixValue() Properties Metric The metric metadata. Declaration [JsonProperty(PropertyName = \"metric\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Dictionary<string, string> Metric { get; set; } Property Value Type Description Dictionary < String , String > Values The values. Declaration [JsonProperty(PropertyName = \"values\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<PrometheusTimeSeriesValue> Values { get; set; } Property Value Type Description List < PrometheusTimeSeriesValue >"
  },
  "neonkube/api/Neon.Kube.PrometheusResponse-1.html": {
    "href": "neonkube/api/Neon.Kube.PrometheusResponse-1.html",
    "title": "Class PrometheusResponse<T> | NeonKUBE documentation",
    "keywords": "Class PrometheusResponse<T> Models the Prometheus HTTP API response. Inheritance Object PrometheusResponse<T> Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class PrometheusResponse<T> Type Parameters Name Description T Constructors PrometheusResponse() Constructor Declaration public PrometheusResponse() Properties Data Describes the error type. Declaration [JsonProperty(PropertyName = \"data\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public T Data { get; set; } Property Value Type Description T Error Describes the error. Declaration [JsonProperty(PropertyName = \"error\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Error { get; set; } Property Value Type Description String ErrorType Describes the error type. Declaration [JsonProperty(PropertyName = \"errorType\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string ErrorType { get; set; } Property Value Type Description String Status Specifies the status of the request. Declaration [JsonProperty(PropertyName = \"status\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.Include)] public PrometheusResponseStatus Status { get; set; } Property Value Type Description PrometheusResponseStatus Warnings Lists warnings. Declaration [JsonProperty(PropertyName = \"warnings\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> Warnings { get; set; } Property Value Type Description List < String >"
  },
  "neonkube/api/Neon.Kube.PrometheusResponseData-1.html": {
    "href": "neonkube/api/Neon.Kube.PrometheusResponseData-1.html",
    "title": "Class PrometheusResponseData<T> | NeonKUBE documentation",
    "keywords": "Class PrometheusResponseData<T> Models the Prometheus result data. Inheritance Object PrometheusResponseData<T> Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class PrometheusResponseData<T> Type Parameters Name Description T Constructors PrometheusResponseData() Constructor. Declaration public PrometheusResponseData() Properties Result The result. Declaration [JsonProperty(PropertyName = \"result\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public T Result { get; set; } Property Value Type Description T ResultType Specifies the result type of the response. Declaration [JsonProperty(PropertyName = \"resultType\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public PrometheusResultType ResultType { get; set; } Property Value Type Description PrometheusResultType"
  },
  "neonkube/api/Neon.Kube.PrometheusResponseStatus.html": {
    "href": "neonkube/api/Neon.Kube.PrometheusResponseStatus.html",
    "title": "Enum PrometheusResponseStatus | NeonKUBE documentation",
    "keywords": "Enum PrometheusResponseStatus Specifies response status from Prometheus HTTP API. Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax [JsonConverter(typeof(StringEnumConverter))] public enum PrometheusResponseStatus Fields Name Description Error Indicates that there was an error processing the request. Success Indicates that the request was processed successfully."
  },
  "neonkube/api/Neon.Kube.PrometheusResult.html": {
    "href": "neonkube/api/Neon.Kube.PrometheusResult.html",
    "title": "Class PrometheusResult | NeonKUBE documentation",
    "keywords": "Class PrometheusResult Models a Prometheus result. Inheritance Object PrometheusResult Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class PrometheusResult Constructors PrometheusResult() Constructor. Declaration public PrometheusResult() Properties Metric The result. Declaration [JsonProperty(PropertyName = \"metric\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public dynamic Metric { get; set; } Property Value Type Description Object"
  },
  "neonkube/api/Neon.Kube.PrometheusResultType.html": {
    "href": "neonkube/api/Neon.Kube.PrometheusResultType.html",
    "title": "Enum PrometheusResultType | NeonKUBE documentation",
    "keywords": "Enum PrometheusResultType Specifies the result type. Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax [JsonConverter(typeof(StringEnumConverter))] public enum PrometheusResultType Fields Name Description Matrix Scalar String Vector"
  },
  "neonkube/api/Neon.Kube.PrometheusTimeSeriesValue.html": {
    "href": "neonkube/api/Neon.Kube.PrometheusTimeSeriesValue.html",
    "title": "Struct PrometheusTimeSeriesValue | NeonKUBE documentation",
    "keywords": "Struct PrometheusTimeSeriesValue Models a prometheus time series value. Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax [JsonConverter(typeof(PrometheusTimeSeriesValueConverter))] public struct PrometheusTimeSeriesValue Constructors PrometheusTimeSeriesValue(Int32, String) Constructor. Declaration public PrometheusTimeSeriesValue(int time, string value) Parameters Type Name Description Int32 time String value Properties Time The Time. Declaration public int Time { readonly get; set; } Property Value Type Description Int32 Value The value. Declaration public string Value { readonly get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.PrometheusTimeSeriesValueConverter.html": {
    "href": "neonkube/api/Neon.Kube.PrometheusTimeSeriesValueConverter.html",
    "title": "Class PrometheusTimeSeriesValueConverter | NeonKUBE documentation",
    "keywords": "Class PrometheusTimeSeriesValueConverter A JSON converter for converting PrometheusTimeSeriesValue. Inheritance Object Newtonsoft.Json.JsonConverter PrometheusTimeSeriesValueConverter Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class PrometheusTimeSeriesValueConverter : JsonConverter Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description Type objectType Returns Type Description Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader Type objectType Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "neonkube/api/Neon.Kube.PrometheusVectorResult.html": {
    "href": "neonkube/api/Neon.Kube.PrometheusVectorResult.html",
    "title": "Class PrometheusVectorResult | NeonKUBE documentation",
    "keywords": "Class PrometheusVectorResult Models a Prometheus vector result. Inheritance Object PrometheusVectorResult Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class PrometheusVectorResult Constructors PrometheusVectorResult() Constructor. Declaration public PrometheusVectorResult() Properties Result The result. Declaration [JsonProperty(PropertyName = \"result\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<PrometheusVectorValue> Result { get; set; } Property Value Type Description List < PrometheusVectorValue > ResultType Specifies the result type of the response. Declaration [JsonProperty(PropertyName = \"resultType\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public PrometheusResultType ResultType { get; set; } Property Value Type Description PrometheusResultType"
  },
  "neonkube/api/Neon.Kube.PrometheusVectorValue.html": {
    "href": "neonkube/api/Neon.Kube.PrometheusVectorValue.html",
    "title": "Class PrometheusVectorValue | NeonKUBE documentation",
    "keywords": "Class PrometheusVectorValue Models a Prometheus vector value. Inheritance Object PrometheusVectorValue Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class PrometheusVectorValue Constructors PrometheusVectorValue() Constructor. Declaration public PrometheusVectorValue() Properties Metric The metric metadata. Declaration [JsonProperty(PropertyName = \"metric\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Dictionary<string, string> Metric { get; set; } Property Value Type Description Dictionary < String , String > Value The values. Declaration [JsonProperty(PropertyName = \"value\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public PrometheusTimeSeriesValue Value { get; set; } Property Value Type Description PrometheusTimeSeriesValue"
  },
  "neonkube/api/Neon.Kube.Proxy.ClusterProxy.html": {
    "href": "neonkube/api/Neon.Kube.Proxy.ClusterProxy.html",
    "title": "Class ClusterProxy | NeonKUBE documentation",
    "keywords": "Class ClusterProxy Used to manage a neonKUBE cluster. Inheritance Object ClusterProxy Namespace : Neon.Kube.Proxy Assembly : Neon.Kube.dll Syntax public class ClusterProxy : IDisposable Constructors ClusterProxy(ClusterDefinition, IHostingManagerFactory, Boolean, ClusterProxy.Operation, String, String, NodeProxyCreator, RunOptions) Constructs a cluster proxy from a cluster definition. Declaration public ClusterProxy(ClusterDefinition clusterDefinition, IHostingManagerFactory hostingManagerFactory, bool cloudMarketplace, ClusterProxy.Operation operation = ClusterProxy.Operation.LifeCycle, string nodeImageUri = null, string nodeImagePath = null, NodeProxyCreator nodeProxyCreator = null, RunOptions defaultRunOptions = RunOptions.None) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. IHostingManagerFactory hostingManagerFactory The hosting manager factory, Boolean cloudMarketplace For cloud environments, this specifies whether the cluster should be provisioned using a VM image from the public cloud marketplace when true or from the private NEONFORGE image gallery for testing when false . This is ignored for on-premise environments. note Only NEONFORGE maintainers will have permission to use the private image. ClusterProxy.Operation operation Optionally identifies the operations that will be performed using the proxy. This defaults to LifeCycle . String nodeImageUri Optionally passed as the URI to the (GZIP compressed) node image. String nodeImagePath Optionally passed as the local path to the (GZIP compressed) node image file. NodeProxyCreator nodeProxyCreator The application supplied function that creates a management proxy given the node name, public address or FQDN, private address, and the node definition. RunOptions defaultRunOptions Optionally specifies the RunOptions to be assigned to the DefaultRunOptions property for the nodes managed by the cluster proxy. This defaults to None . Remarks At least one of nodeImageUri or nodeImagePath must be passed for Neon.Kube.Proxy.ClusterProxy.GetHostingManager(Neon.Kube.Hosting.IHostingManagerFactory,System.Boolean,Neon.Kube.Proxy.ClusterProxy.Operation,System.String) to work. The nodeProxyCreator function will be called for each node in the cluster definition giving the application the chance to create the node proxy using the node's SSH credentials and also to specify logging. A default creator that doesn't initialize SSH credentials and logging is used if null is passed. ClusterProxy(KubeConfigContext, IHostingManagerFactory, Boolean, ClusterProxy.Operation, String, String, NodeProxyCreator, RunOptions) Constructs a cluster proxy from a KubeConfigContext . Declaration public ClusterProxy(KubeConfigContext context, IHostingManagerFactory hostingManagerFactory, bool cloudMarketplace, ClusterProxy.Operation operation = ClusterProxy.Operation.LifeCycle, string nodeImageUri = null, string nodeImagePath = null, NodeProxyCreator nodeProxyCreator = null, RunOptions defaultRunOptions = RunOptions.None) Parameters Type Name Description KubeConfigContext context The Kubernetes confug context. IHostingManagerFactory hostingManagerFactory The hosting manager factory, Boolean cloudMarketplace For cloud environments, this specifies whether the cluster should be provisioned using a VM image from the public cloud marketplace when true or from the private NEONFORGE image gallery for testing when false . This is ignored for on-premise environments. note Only NEONFORGE maintainers will have permission to use the private image. ClusterProxy.Operation operation Optionally identifies the operations that will be performed using the proxy. This defaults to LifeCycle . String nodeImageUri Optionally passed as the URI to the (GZIP compressed) node image. String nodeImagePath Optionally passed as the local path to the (GZIP compressed) node image file. NodeProxyCreator nodeProxyCreator The application supplied function that creates a management proxy given the node name, public address or FQDN, private address, and the node definition. RunOptions defaultRunOptions Optionally specifies the RunOptions to be assigned to the DefaultRunOptions property for the nodes managed by the cluster proxy. This defaults to None . Properties Capabilities Returns flags describing any optional capabilities supported by the cluster's hosting manager. Declaration public HostingCapabilities Capabilities { get; } Property Value Type Description HostingCapabilities ControlNodes Enumerates the cluster control-plane node proxies sorted in ascending order by name. Declaration public IEnumerable<NodeSshProxy<NodeDefinition>> ControlNodes { get; } Property Value Type Description IEnumerable < NodeSshProxy < NodeDefinition >> Definition Returns the cluster definition. Declaration public ClusterDefinition Definition { get; } Property Value Type Description ClusterDefinition FirstControlNode Returns the first cluster control-plane node as sorted by name. Declaration public NodeSshProxy<NodeDefinition> FirstControlNode { get; } Property Value Type Description NodeSshProxy < NodeDefinition > HostingManager The associated IHostingManager . Declaration public IHostingManager HostingManager { get; set; } Property Value Type Description IHostingManager Hosts Returns the list of node host proxies for hosting managers that need to manipulate host machines. Declaration public List<LinuxSshProxy> Hosts { get; } Property Value Type Description List < LinuxSshProxy > Remarks This is initialized by hosting manages such as XenServer and probably Hyper-V in the future so that status changes for host machines will be included in SetupController<NodeMetadata> UX status updates properly. Hosting managers should add any hosts to this list when the manager is constructed and then leave this list alone during provisioning. K8s Returns the k8s.IKubernetes client for the cluster. Declaration public IKubernetes K8s { get; } Property Value Type Description k8s.IKubernetes KubeContext Returns the cluster context. Declaration public KubeConfigContext KubeContext { get; set; } Property Value Type Description KubeConfigContext Name Returns the cluster name. Declaration public string Name { get; } Property Value Type Description String Nodes Returns a read-only list of cluster node proxies. Declaration public IReadOnlyList<NodeSshProxy<NodeDefinition>> Nodes { get; } Property Value Type Description IReadOnlyList < NodeSshProxy < NodeDefinition >> SecureRunOptions Specifies the RunOptions to use when executing commands that include secrets. This defaults to Redact for best security but may be changed to just None when debugging cluster setup. Declaration public RunOptions SecureRunOptions { get; set; } Property Value Type Description RunOptions Workers Enumerates the cluster worker node proxies sorted in ascending order by name. Declaration public IEnumerable<NodeSshProxy<NodeDefinition>> Workers { get; } Property Value Type Description IEnumerable < NodeSshProxy < NodeDefinition >> Methods AddContainerRegistryResourcesAsync() Adds custom V1NeonContainerRegistry resources defined in the cluster definition to the cluster. neon-node-agent will pick these up and regenerate the CRI-O configuration. Declaration public async Task AddContainerRegistryResourcesAsync() Returns Type Description Task The tracking Task . ClearNodeStatus() Clears the status for the all of the cluster nodes. Declaration public void ClearNodeStatus() DeleteAsync(Boolean) Removes an existing cluster by terminating any nodes and then removing node VMs and any related resources as well as the related local cluster login by default. The cluster does not need to be running. This method can optionally remove clusters or VMs potentially orphaned by interrupted unit tests as identified by a resource group or VM name prefix. note This operation may not be supported for all environments. Declaration public async Task DeleteAsync(bool deleteOrphans = false) Parameters Type Name Description Boolean deleteOrphans Optionally specifies that VMs or clusters with the same VM or resource group prefix will be tewrminated and removed. See the remarks for more information. Returns Type Description Task The tracking Task . Remarks The deleteOrphans parameter is typically enabled when running unit tests via the ClusterFixture to ensure that clusters and VMs orphaned by previous interrupted test runs are removed in addition to removing the cluster specified by the cluster definition. Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. Dispose() Releases all resources associated with the instance. Declaration public void Dispose() Dispose(Boolean) Releases all associated resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. ExecMinioCommandAsync(String, Boolean, IRetryPolicy, CancellationToken) Executes a command on a Minio node using the mc Minio Client. Declaration public async Task<ExecuteResponse> ExecMinioCommandAsync(string mcCommand, bool noSuccessCheck = false, IRetryPolicy retryPolicy = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String mcCommand The Minio Client command. Boolean noSuccessCheck Optionally disables the EnsureSuccess() check. IRetryPolicy retryPolicy Optionally specifies a IRetryPolicy . CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task < ExecuteResponse > The ExecuteResponse . ExecSystemDbCommandAsync(String, String, Boolean, IRetryPolicy, CancellationToken) Executes a PSQL command on one of the system database pods using the pgsql and returns the response. The database command is executed in the context of the NeonSystemDbAdminUser . Declaration public async Task<ExecuteResponse> ExecSystemDbCommandAsync(string database, string psqlCommand, bool noSuccessCheck = false, IRetryPolicy retryPolicy = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String database Identifies the target database. String psqlCommand The PSQL command text. Boolean noSuccessCheck Optionally disables the EnsureSuccess() check. IRetryPolicy retryPolicy Optionally specifies a IRetryPolicy . CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task < ExecuteResponse > The ExecuteResponse . FindNode(String) Looks for the NodeSshProxy<TMetadata> instance for a named node. Declaration public NodeSshProxy<NodeDefinition> FindNode(string nodeName) Parameters Type Name Description String nodeName The node name. Returns Type Description NodeSshProxy < NodeDefinition > The node proxy instance or null if the named node does not exist. GetClusterHealthAsync(TimeSpan) Returns the health status of a cluster. Declaration public async Task<ClusterHealth> GetClusterHealthAsync(TimeSpan timeout = default(TimeSpan)) Parameters Type Name Description TimeSpan timeout Optionally specifies the maximum time to wait for the result. This defaults to 15 seconds . Returns Type Description Task < ClusterHealth > The ClusterHealth . GetClusterInfoAsync() Returns information about a cluster. Declaration public async Task<ClusterInfo> GetClusterInfoAsync() Returns Type Description Task < ClusterInfo > The ClusterHealth . GetNode(String) Returns the NodeSshProxy<TMetadata> instance for a named node. Declaration public NodeSshProxy<NodeDefinition> GetNode(string nodeName) Parameters Type Name Description String nodeName The node name. Returns Type Description NodeSshProxy < NodeDefinition > The node definition. Exceptions Type Condition KeyNotFoundException Thrown if the name node is not present in the cluster. GetReachableControlNode(ReachableHostMode) Returns a control-plane node that is reachable because it answers a ping. Declaration public NodeSshProxy<NodeDefinition> GetReachableControlNode(ReachableHostMode failureMode = ReachableHostMode.ReturnFirst) Parameters Type Name Description ReachableHostMode failureMode Specifies what should happen when there are no reachable control-plane nodes. Returns Type Description NodeSshProxy < NodeDefinition > The reachable control-plane node or null . Exceptions Type Condition NeonKubeException Thrown if no control-plane nodes are reachable and failureMode is passed as Throw . GetReachableNode(Func<NodeSshProxy<NodeDefinition>, Boolean>, ReachableHostMode) Selects a cluster node from the set of nodes that match a predicate that is reachable via the network because it answers a ping. Declaration public NodeSshProxy<NodeDefinition> GetReachableNode(Func<NodeSshProxy<NodeDefinition>, bool> predicate, ReachableHostMode failureMode = ReachableHostMode.ReturnFirst) Parameters Type Name Description Func < NodeSshProxy < NodeDefinition >, Boolean > predicate Predicate used to select the candidate nodes. ReachableHostMode failureMode Specifies what should happen when there are no reachable nodes. Returns Type Description NodeSshProxy < NodeDefinition > The reachable node or null . Exceptions Type Condition NeonKubeException Thrown if no nodes matching the predicate are reachable and failureMode is passed as Throw . GetResourceAvailabilityAsync(Int64, Int64) Returns the availability of resources required to deploy a cluster. Declaration public async Task<HostingResourceAvailability> GetResourceAvailabilityAsync(long reserveMemory = 0L, long reserveDisk = 0L) Parameters Type Name Description Int64 reserveMemory Optionally specifies the amount of host memory (in bytes) to be reserved for host operations. Int64 reserveDisk Optionally specifies the amount of host disk disk (in bytes) to be reserved for host operations. Returns Type Description Task < HostingResourceAvailability > Details about whether cluster deployment can proceed. Remarks The optional reserveMemory and reserveDisk parameters can be used to specify memory and disk that are to be reserved for the host environment. Hosting manager implementations are free to ignore this when they don't really makse sense. This is currently used for Hyper-V based clusters running on a user workstation or laptop to ensure that deployed clusters don't adverserly impact the host machine too badly. These parameters don't really make sense for cloud or dedicated hypervisor hosting environments because those environemnts will still work well when all available resources are consumed. IsLockedAsync(CancellationToken) Determines whether the cluster is considered to be locked to prevent potentially distructive operations such as Pause , Remove , Reset , Resume , or Stop . This is used to help prevent impacting production clusters by accident. Declaration public async Task<bool?> IsLockedAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Optionally specifies the cancellation token. Returns Type Description Task < Nullable < Boolean >> true when the cluster is locked, false when it's unlocked or null when the lock status cannot be determined. Exceptions Type Condition InvalidOperationException Thrown then the proxy was created with the wrong constructor. LockAsync(CancellationToken) Locks the cluster by modifying the ClusterLock configmap in the NeonStatus namespace. Potentially distructive operations like Pause , Remove , Reset , Resume , or Stop are not allowed on locked clusters. Declaration public async Task LockAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Optionally specifies the cancellation token. Returns Type Description Task The tracking Task . Exceptions Type Condition InvalidOperationException Thrown then the proxy was created with the wrong constructor. LogLine(String) Writes a message to the logs associated with all cluster nodes. Declaration public void LogLine(string message = null) Parameters Type Name Description String message Optionally specifies the log message. ResetAsync(ClusterResetOptions, Action<String>) Resets the cluster to factory defaults by removing all non neon-* namespaces including default (which will be recreated to be empty) as well as restoring custom resources as required. Declaration public async Task ResetAsync(ClusterResetOptions options = null, Action<string> progress = null) Parameters Type Name Description ClusterResetOptions options Optionally specifies details about components to be reset. This defaults to resetting everything that makes sense. Action < String > progress Optionally specified a callback to be called with human readable progress messages. Returns Type Description Task The tracking Task . SetClusterInfo(ClusterInfo) Set information about a cluster. Declaration public async Task SetClusterInfo(ClusterInfo clusterInfo) Parameters Type Name Description ClusterInfo clusterInfo The information being set. Returns Type Description Task The tracking Task . StartAsync() Starts a cluster if it's not already running. note This operation may not be supported for all environments. Declaration public async Task StartAsync() Returns Type Description Task The tracking Task . Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. StopAsync(StopMode) Stops a cluster if it's running. note This operation may not be supported for all environments. Declaration public async Task StopAsync(StopMode stopMode = StopMode.Graceful) Parameters Type Name Description StopMode stopMode Optionally specifies how the cluster nodes are stopped. This defaults to Graceful . Returns Type Description Task The tracking Task . Exceptions Type Condition NotSupportedException Thrown if the hosting environment doesn't support this operation. UnlockAsync(CancellationToken) Unlocks the cluster by modifying the ClusterLock configmap in the NeonStatus namespace. Potentially distructive operations like Pause , Remove , Reset , Resume , or Stop are not allowed on locked clusters. Declaration public async Task UnlockAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Optionally specifies the cancellation token. Returns Type Description Task The tracking Task . Exceptions Type Condition InvalidOperationException Thrown then the proxy was created with the wrong constructor."
  },
  "neonkube/api/Neon.Kube.Proxy.ClusterProxy.Operation.html": {
    "href": "neonkube/api/Neon.Kube.Proxy.ClusterProxy.Operation.html",
    "title": "Enum ClusterProxy.Operation | NeonKUBE documentation",
    "keywords": "Enum ClusterProxy.Operation Enumerates the possible operations that can be performed with an IHostingManager managed by the ClusterProxy class. Namespace : Neon.Kube.Proxy Assembly : Neon.Kube.dll Syntax public enum Operation Fields Name Description LifeCycle Only cluster lifecycle operations like StartAsync() , StopAsync(StopMode) , amd DeleteAsync(Boolean) will be enabled. note These life cycle methods do not required a URI or file reference to a node image. Prepare A cluster will be prepared. Setup A cluster will be setup."
  },
  "neonkube/api/Neon.Kube.Proxy.ClusterResetOptions.html": {
    "href": "neonkube/api/Neon.Kube.Proxy.ClusterResetOptions.html",
    "title": "Class ClusterResetOptions | NeonKUBE documentation",
    "keywords": "Class ClusterResetOptions Specifies options for resetting an existing cluster. Inheritance Object ClusterResetOptions Namespace : Neon.Kube.Proxy Assembly : Neon.Kube.dll Syntax public class ClusterResetOptions Constructors ClusterResetOptions() Default constructor. Declaration public ClusterResetOptions() Properties KeepNamespaces Specifies namespaces to be excluded from those being removed during the reset operation. Normally, all namespaces beside the internal neonKUBE namespaces will be removed with the default being recreated as empty thereafter. note Pass a namespace as \"*\" to retain all non-standard namespaces. This defaults to an empty list. Declaration [JsonProperty(PropertyName = \"KeepNamespaces\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> KeepNamespaces { get; set; } Property Value Type Description List < String > ResetAuth Resets Dex/Glauth by removing any non-factory deployed users and other configuration. This defaults to true . Declaration [JsonProperty(PropertyName = \"ResetAuth\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool ResetAuth { get; set; } Property Value Type Description Boolean ResetCrio Resets the CRI-O runtime on each cluster node by removing any non-factory deployed container images. This also resets the container registry custom resources to match the original cluster definition. These configure how the CRI-O container runtime on all cluster nodes reference external container registries such as DockerHub, GitHub, Quay, etc. as well as private registries. This defaults to true . Declaration [JsonProperty(PropertyName = \"ResetCrio\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool ResetCrio { get; set; } Property Value Type Description Boolean ResetHarbor Enable resetting the Harbor to its original configuration. This defaults to true . Declaration [JsonProperty(PropertyName = \"ResetHarbor\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool ResetHarbor { get; set; } Property Value Type Description Boolean ResetMinio Resets Minio by removing any custom buckets. Note that existing buckets holding Harbor, Loki, or Mirmir information will remain unchanged when this is enabled. The ResetHarbor , ResetMonitoring , options control clearing of the related Minio data when enabled. This defaults to true . Declaration [JsonProperty(PropertyName = \"ResetMinio\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool ResetMinio { get; set; } Property Value Type Description Boolean ResetMonitoring Resets monitoring by clearing any recorded logs and metrics and restoring any Grafana dashboards and alerts to the factory defaults. This defaults to true . Declaration [JsonProperty(PropertyName = \"ResetMonitoring\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool ResetMonitoring { get; set; } Property Value Type Description Boolean StabilizeSeconds Specifies the number of seconds to wait for the cluster to stablize after performing the reset. This defaults to 30 seconds . Declaration [JsonProperty(PropertyName = \"StabilizeSeconds\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int StabilizeSeconds { get; set; } Property Value Type Description Int32"
  },
  "neonkube/api/Neon.Kube.Proxy.html": {
    "href": "neonkube/api/Neon.Kube.Proxy.html",
    "title": "Namespace Neon.Kube.Proxy | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Proxy Classes ClusterProxy Used to manage a neonKUBE cluster. ClusterResetOptions Specifies options for resetting an existing cluster. NodeSshProxy<TMetadata> Uses a SSH/SCP connection to provide access to Linux machines to access files, run commands, etc. note This is class is not intended to be a general purpose SSH wrapper at this time. It currently assumes that the remote side is running some variant of Linux and it makes some global changes including disabling SUDO password prompts for all users as well as creating some global directories. Interfaces INodeSshProxy Used to reference node proxy common properties. Enums ClusterProxy.Operation Enumerates the possible operations that can be performed with an IHostingManager managed by the ClusterProxy class. Delegates NodeProxyCreator Creates a NodeSshProxy<TMetadata> for the specified host and server name, configuring logging and the credentials as specified by the global command line options."
  },
  "neonkube/api/Neon.Kube.Proxy.INodeSshProxy.html": {
    "href": "neonkube/api/Neon.Kube.Proxy.INodeSshProxy.html",
    "title": "Interface INodeSshProxy | NeonKUBE documentation",
    "keywords": "Interface INodeSshProxy Used to reference node proxy common properties. Namespace : Neon.Kube.Proxy Assembly : Neon.Kube.dll Syntax public interface INodeSshProxy : ILinuxSshProxy, IDisposable Properties Role Returns the node role, one of the NodeRole identifying what the node does. This may also return null . Declaration string Role { get; set; } Property Value Type Description String Methods GetIdempotentState(String) Indicates whether an idempotent action has been completed. Declaration bool GetIdempotentState(string actionId) Parameters Type Name Description String actionId The action ID. Returns Type Description Boolean true when the action has already been completed. GetLog() Returns the current log for the node. Declaration NodeLog GetLog() Returns Type Description NodeLog A NodeLog . InvokeIdempotent(String, Action) Invokes a named action on the node if it has never been been performed on the node before. Declaration bool InvokeIdempotent(string actionId, Action action) Parameters Type Name Description String actionId The node-unique action ID. Action action The action to be performed. Returns Type Description Boolean true if the action was invoked. Remarks actionId must uniquely identify the action on the node. This may include letters, digits, dashes and periods as well as one or more forward slashes that can be used to organize idempotent status files into folders. This method tracks successful action completion by creating a file on the node at State /ACTION-ID . To ensure idempotency, this method first checks for the existence of this file and returns immediately without invoking the action if it is present. InvokeIdempotentAsync(String, Func<Task>) Invokes a named action asynchronously on the node if it has never been been performed on the node before. Declaration Task<bool> InvokeIdempotentAsync(string actionId, Func<Task> action) Parameters Type Name Description String actionId The node-unique action ID. Func < Task > action The asynchronous action to be performed. Returns Type Description Task < Boolean > true if the action was invoked. Remarks actionId must uniquely identify the action on the node. This may include letters, digits, dashes and periods as well as one or more forward slashes that can be used to organize idempotent status files into folders. This method tracks successful action completion by creating a file on the node at State /ACTION-ID . To ensure idempotency, this method first checks for the existence of this file and returns immediately without invoking the action if it is present. SetIdempotentState(String) Explicitly indicates that an idempotent action has been completed on the node. Declaration void SetIdempotentState(string actionId) Parameters Type Name Description String actionId The action ID. Extension Methods NodeSshProxyExtensions.NodeInstallHelmArchive(ILinuxSshProxy, ISetupController)"
  },
  "neonkube/api/Neon.Kube.Proxy.NodeProxyCreator.html": {
    "href": "neonkube/api/Neon.Kube.Proxy.NodeProxyCreator.html",
    "title": "Delegate NodeProxyCreator | NeonKUBE documentation",
    "keywords": "Delegate NodeProxyCreator Creates a NodeSshProxy<TMetadata> for the specified host and server name, configuring logging and the credentials as specified by the global command line options. Namespace : Neon.Kube.Proxy Assembly : Neon.Kube.dll Syntax public delegate NodeSshProxy<NodeDefinition> NodeProxyCreator(string name, IPAddress address); Parameters Type Name Description String name The node name. IPAddress address The node's private IP address. Returns Type Description NodeSshProxy < NodeDefinition > The NodeSshProxy<TMetadata> ."
  },
  "neonkube/api/Neon.Kube.Proxy.NodeSshProxy-1.html": {
    "href": "neonkube/api/Neon.Kube.Proxy.NodeSshProxy-1.html",
    "title": "Class NodeSshProxy<TMetadata> | NeonKUBE documentation",
    "keywords": "Class NodeSshProxy<TMetadata> Uses a SSH/SCP connection to provide access to Linux machines to access files, run commands, etc. note This is class is not intended to be a general purpose SSH wrapper at this time. It currently assumes that the remote side is running some variant of Linux and it makes some global changes including disabling SUDO password prompts for all users as well as creating some global directories. Inheritance Object LinuxSshProxy LinuxSshProxy <TMetadata> NodeSshProxy<TMetadata> Implements INodeSshProxy Namespace : Neon.Kube.Proxy Assembly : Neon.Kube.dll Syntax public class NodeSshProxy<TMetadata> : LinuxSshProxy<TMetadata>, INodeSshProxy, ILinuxSshProxy, IDisposable where TMetadata : class Type Parameters Name Description TMetadata Defines the metadata type the application wishes to associate with the server. You may specify object when no additional metadata is required. Remarks Construct an instance to connect to a specific cluster node. You may specify TMetadata to associate application specific information or state with the instance. This class includes methods to invoke Linux commands on the node, Call Dispose() or Disconnect() to close the connection. note You can use Clone() to make a copy of a proxy that can be used to perform parallel operations against the same machine. Constructors NodeSshProxy(String, IPAddress, SshCredentials, String, Int32, TextWriter) Constructs a LinuxSshProxy<TMetadata> . Declaration public NodeSshProxy(string name, IPAddress address, SshCredentials credentials, string role = null, int port = 22, TextWriter logWriter = null) Parameters Type Name Description String name The display name for the server. IPAddress address The private cluster IP address for the server. SshCredentials credentials The credentials to be used for establishing SSH connections. String role Optionally specifies one of the NodeRole values identifying what the node does. Int32 port Optionally overrides the standard SSH port (22). TextWriter logWriter The optional TextWriter where operation logs will be written. Exceptions Type Condition ArgumentNullException Thrown if name or if credentials is null . Properties Cluster Returns the associated ClusterProxy when there is one. Declaration public ClusterProxy Cluster { get; set; } Property Value Type Description ClusterProxy Exceptions Type Condition InvalidOperationException Thrown when there is no associated cluster proxy. ImageType Indicates the type of node image type. This is stored in the /etc/neonkube/image-type file. Declaration public KubeImageType ImageType { get; set; } Property Value Type Description KubeImageType ImageVersion Indicates the neonKUBE node image version. This is stored in the /etc/neonkube/image-version file. This can be used to ensure that the node image is compatible with the code configuring the cluster. This returns null when the /etc/neonkube/image-version file doesn't exist. Declaration public SemanticVersion ImageVersion { get; set; } Property Value Type Description SemanticVersion Exceptions Type Condition FormatException Thrown when the version file could not be parsed. NodeDefinition Returns the associated NodeDefinition metadata when present. Declaration public NodeDefinition NodeDefinition { get; } Property Value Type Description NodeDefinition Exceptions Type Condition InvalidOperationException Thrown when there is no associated node definition. Role Returns the node role, one of the NodeRole identifying what the node does. This may also return null . Declaration public string Role { get; set; } Property Value Type Description String Methods AllowSshPasswordLogin(Boolean) Controls whether SSH login using password authentication is enabled for the node. Declaration public void AllowSshPasswordLogin(bool enabled) Parameters Type Name Description Boolean enabled Pass true to enable login using a password, or false to disable. BaseBlacklistFloppy(ISetupController) Blacklists the Kernel floppy module so it will be disabled when the machine is rebooted. Declaration public void BaseBlacklistFloppy(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. BaseConfigureApt(ISetupController, Int32, Boolean) Configures the APT package manager. Declaration public void BaseConfigureApt(ISetupController controller, int packageManagerRetries = 5, bool allowPackageManagerIPv6 = false) Parameters Type Name Description ISetupController controller The setup controller. Int32 packageManagerRetries Optionally specifies the packager manager retries (defaults to 5 ). Boolean allowPackageManagerIPv6 Optionally prevent the package manager from using IPv6 (defaults to false . BaseConfigureBashEnvironment(ISetupController) Configures the Debian frontend terminal to non-interactive. Declaration public void BaseConfigureBashEnvironment(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. BaseConfigureDebianFrontend(ISetupController) Configures the Debian frontend terminal to non-interactive. Declaration public void BaseConfigureDebianFrontend(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. BaseConfigureDnsIPv4Preference(ISetupController) Ubuntu defaults DNS to prefer IPv6 lookups over IPv4 which can cause performance problems. This method reconfigures DNS to favor IPv4. Declaration public void BaseConfigureDnsIPv4Preference(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. BaseConfigureOpenSsh(ISetupController) Customizes the OpenSSH configuration on a Declaration public void BaseConfigureOpenSsh(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. BaseCreateKubeFolders(ISetupController) Create the node folders required by neoneKUBE. Declaration public void BaseCreateKubeFolders(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. BaseDisableCloudInit(ISetupController) Disables cloud-init . Declaration public void BaseDisableCloudInit(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. BaseDisableDhcp(ISetupController) Disables DHCP. Declaration public void BaseDisableDhcp(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. BaseDisableSwap(ISetupController) Disables the Linux memory swap file. Declaration public void BaseDisableSwap(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. BaseInitialize(ISetupController, Boolean, Boolean) Performs low-level initialization of a cluster node. Declaration public void BaseInitialize(ISetupController controller, bool upgradeLinux = false, bool patchLinux = true) Parameters Type Name Description ISetupController controller The setup controller. Boolean upgradeLinux Optionally upgrade the node's Linux distribution (defaults to false ). Boolean patchLinux Optionally apply any available Linux security patches (defaults to true ). BaseInstallGuestIntegrationServices(ISetupController) Installs hypervisor guest integration services. Declaration public void BaseInstallGuestIntegrationServices(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. BaseInstallNeonInit(ISetupController) Installs the neon-init service which is a poor man's cloud-init like service we use to configure the network and credentials for VMs hosted in non-cloud hypervisors. Declaration public void BaseInstallNeonInit(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. Remarks Install and configure the [neon-init] service. This is a simple script that is configured to run as a oneshot systemd service before networking is started. This is currently used to configure the node's static IP address configuration on first boot, so we don't need to rely on DHCP (which may not be available in some environments). [neon-init] is intended to run the first time a node is booted after being created from a template. It checks to see if a special ISO with a configuration script named [neon-init.sh] is inserted into the VMs DVD drive and when present, the script will be executed and the [/etc/neon-init/ready] file will be created to indicate that the service no longer needs to do this for subsequent reboots. note The script won't create the [/etc/neon-init] when the script ISO doesn't exist for debugging purposes. BaseInstallPackages(ISetupController) Installs the required base image packages. Declaration public void BaseInstallPackages(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. BaseInstallToolScripts(ISetupController) Installs the tool scripts, making them executable. note Any \".sh\" file extensions will be removed for ease-of-use. Declaration public void BaseInstallToolScripts(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. BasePatchLinux(ISetupController) Updates Linux by applying just the outstanding security updates. Declaration public void BasePatchLinux(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. BaseRemovePackages(ISetupController) Removes unneeded packages. Declaration public void BaseRemovePackages(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. BaseRemoveSnap(ISetupController) Removes any installed snaps as well as the entire snap infrastructure. Declaration public void BaseRemoveSnap(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. BaseUpgradeLinuxDistribution(ISetupController) Upgrades the Linux distribution on the node. Declaration public void BaseUpgradeLinuxDistribution(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. Clean(ISetupController) Cleans a node by removing unnecessary package manager metadata, cached DHCP information, journald logs... and then fills unreferenced file system blocks with zeros so the disk image will or trims the file system (when possible) so the image will compress better. Declaration public void Clean(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. Clone() Returns a clone of the SSH proxy. This can be useful for situations where you need to be able to perform multiple SSH/SCP operations against the same machine in parallel. note This does not clone any attached log writer. Declaration public NodeSshProxy<TMetadata> Clone() Returns Type Description NodeSshProxy <TMetadata> The cloned NodeSshProxy<TMetadata> . ConfigureEnvironmentVariables(ISetupController) Configures the global environment variables that describe the configuration of the server within the cluster. Declaration public void ConfigureEnvironmentVariables(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. ConfigureJournald(ISetupController) Configures journald . Declaration public void ConfigureJournald(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. ConfigureSshKey(ISetupController) Configures a node's host public SSH key during node provisioning. Declaration public void ConfigureSshKey(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. DisableSnap(ISetupController) Disables the snapd service. Declaration public void DisableSnap(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. GetControlPlaneFiles() Returns a dictionary of KubeFileDetails holding the control plane files required to provision a new control plane node in the cluster. This dictionary is keyed by the target file name node the node. Declaration public Dictionary<string, KubeFileDetails> GetControlPlaneFiles() Returns Type Description Dictionary < String , KubeFileDetails > The file dictionary. GetIdempotentState(String) Indicates whether an idempotent action has been completed. Declaration public bool GetIdempotentState(string actionId) Parameters Type Name Description String actionId The action ID. Returns Type Description Boolean true when the action has already been completed. GetLog() Returns the current log for the node. Declaration public NodeLog GetLog() Returns Type Description NodeLog A NodeLog . GetNtpSources() Returns the NTP time sources to be used by the node. Declaration public string GetNtpSources() Returns Type Description String The quoted and space separated list of IP address or DNS hostnames for the node's NTP time sources in priority order. Remarks The cluster will be configured such that the first control-plane node (by sorted name) will be the primary timesource for the cluster. All other control-plane and worker nodes will be configured to use the first control-plane node by default. Secondary control-plane nodes will be configured to use the external timesource next so any control-plane can automatically assume these duities. Worker nodes will be configured to use control-plane node in sorted order but will not be configured to use the external time sources to avoid having large clusters spam the sources. The nice thing about this is that the cluster will almost always be closely synchronized with the first control-plane with graceful fallback on node failures. Exceptions Type Condition InvalidOperationException Thrown when there is no associated cluster proxy. InstallHelmChartAsync(ISetupController, String, String, String, String, Dictionary<String, Object>, String, TimeSpan) Installs a prepositioned Helm chart from a control-plane node. Declaration public async Task InstallHelmChartAsync(ISetupController controller, string chartName, string releaseName = null, string namespace = \"default\", string prioritySpec = null, Dictionary<string, object> values = null, string progressMessage = null, TimeSpan timeout = default(TimeSpan)) Parameters Type Name Description ISetupController controller The setup controller. String chartName The name of the Helm chart. note Helm does not allow dashes (-) in chart names but to avoid problems with copy/pasting, we will automatically convert any dashes to underscores before installing the chart. This is also nice because this means that the chart name passed can be the same as the release name in the calling code. String releaseName Optionally specifies the component release name. String namespace Optionally specifies the namespace where Kubernetes namespace where the Helm chart should be installed. This defaults to default String prioritySpec Optionally specifies the Helm variable and priority class for any pods deployed by the chart. This needs to be specified as: PRIORITYCLASSNAME or VALUENAME=PRIORITYCLASSNAME , where VALUENAME optionally specifies the name of the Helm value and PRIORITYCLASSNAME is one of the priority class names defined by PriorityClass . note The priority class will saved as the priorityClassName Helm value when no value name is specified. Dictionary < String , Object > values Optionally specifies Helm chart values. String progressMessage Optionally specifies progress message. This defaults to releaseName . TimeSpan timeout Optionally specifies the timeout. This defaults to 300 seconds . Returns Type Description Task The tracking Task . Remarks neonKUBE images prepositions the Helm chart files embedded as resources in the Resources/Helm project folder to cluster node images as the /lib/neonkube/helm/charts.zip archive. This method unzips that file to the same folder (if it hasn't been unzipped already) and then installs the helm chart (if it hasn't already been installed). Exceptions Type Condition KeyNotFoundException Thrown if the priority class specified by prioritySpec is not defined by PriorityClass . InstallNFS(ISetupController) Installs NFS. Declaration public void InstallNFS(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. InstallProvisionedHelmChart(String, String, String, TimeSpan, List<KeyValuePair<String, Object>>) Installs one of the Helm charts that was pre-positioned on the node VM image. These can be fond in the Helm with a folder for each chart. note This command DOES NOT WAIT for the Helm chart to be completely installed and any target services or assets to be running because that does not appear to be reliable. You'll need to explicitly verify that deployment has completed when necessary. Declaration public void InstallProvisionedHelmChart(string chartName, string releaseName = null, string namespace = \"default\", TimeSpan timeout = default(TimeSpan), List<KeyValuePair<string, object>> values = null) Parameters Type Name Description String chartName The Helm chart folder name. String releaseName Optional component release name. This defaults to chartName . String namespace Optional namespace where Kubernetes namespace where the Helm chart should be installed. This defaults to \"default\" . TimeSpan timeout Optional timeout. This defaults to unlimited . List < KeyValuePair < String , Object >> values Optional Helm chart value overrides. InvokeIdempotent(String, Action) Invokes a named action on the node if it has never been been performed on the node before. Declaration public bool InvokeIdempotent(string actionId, Action action) Parameters Type Name Description String actionId The node-unique action ID. Action action The action to be performed. Returns Type Description Boolean true if the action was invoked. Remarks actionId must uniquely identify the action on the node. This may include letters, digits, dashes and periods as well as one or more forward slashes that can be used to organize idempotent status files into folders. This method tracks successful action completion by creating a file on the node at State /ACTION-ID . To ensure idempotency, this method first checks for the existence of this file and returns immediately without invoking the action if it is present. InvokeIdempotentAsync(String, Func<Task>) Invokes a named action asynchronously on the node if it has never been been performed on the node before. Declaration public async Task<bool> InvokeIdempotentAsync(string actionId, Func<Task> action) Parameters Type Name Description String actionId The node-unique action ID. Func < Task > action The asynchronous action to be performed. Returns Type Description Task < Boolean > true if the action was invoked. Remarks actionId must uniquely identify the action on the node. This may include letters, digits, dashes and periods as well as one or more forward slashes that can be used to organize idempotent status files into folders. This method tracks successful action completion by creating a file on the node at State /ACTION-ID . To ensure idempotency, this method first checks for the existence of this file and returns immediately without invoking the action if it is present. LoadImageAsync(NodeImageInfo) Method to load specific container image onto the the node. Declaration public async Task LoadImageAsync(NodeImageInfo image) Parameters Type Name Description NodeImageInfo image The image. Returns Type Description Task The tracking Task . Log(String) Declaration public override void Log(string text) Parameters Type Name Description String text Overrides LinuxSshProxy.Log(String) LogFlush() Declaration public override void LogFlush() Overrides LinuxSshProxy.LogFlush() LogLine(String) Declaration public override void LogLine(string text) Parameters Type Name Description String text Overrides LinuxSshProxy.LogLine(String) NodeDisableNeonInit(ISetupController) Disables the neon-init service during cluster setup because it is no longer necessary after the node first boots and its credentials and network settings have been configured. Declaration public void NodeDisableNeonInit(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. NodeInitialize(ISetupController) Performs low-level node initialization during cluster setup. Declaration public void NodeInitialize(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. NodeInstallCriO(ISetupController, ClusterManifest) Installs the CRI-O container runtime. Declaration public void NodeInstallCriO(ISetupController controller, ClusterManifest clusterManifest) Parameters Type Name Description ISetupController controller The setup controller. ClusterManifest clusterManifest The cluster manifest. NodeInstallHelm(ISetupController) Installs the Helm client. Declaration public void NodeInstallHelm(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. NodeInstallIPVS(ISetupController) Installs the necessary packages and configures setup for IPVS . Declaration public void NodeInstallIPVS(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. NodeInstallKubernetes(ISetupController) Installs the Kubernetes components: kubeadm , kubectl , and kublet . Declaration public void NodeInstallKubernetes(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. NodeInstallKustomize(ISetupController) Installs the Kustomize client. Declaration public void NodeInstallKustomize(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. NodeInstallPodman(ISetupController) Installs the podman CLI for managing CRI-O . Declaration public void NodeInstallPodman(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. NodeInstallTools(ISetupController) Installs the neonKUBE related tools to the Bin folder. Declaration public void NodeInstallTools(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. NodeLoadImagesAsync(ISetupController, Int32, Int32) Loads the docker images onto the node. This is used for debug mode only. Declaration public async Task NodeLoadImagesAsync(ISetupController controller, int downloadParallel = 5, int loadParallel = 2) Parameters Type Name Description ISetupController controller The setup controller. Int32 downloadParallel The optional limit for parallelism when downloading images from GitHub registry. Int32 loadParallel The optional limit for parallelism when loading images into the cluster. Returns Type Description Task PrepareNode(ISetupController) Initializes a near virgin server with the basic capabilities required for a cluster node. Declaration public void PrepareNode(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. RemoveSwapFile(ISetupController) Removes the Linux swap file if present. Declaration public void RemoveSwapFile(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. SetIdempotentState(String) Explicitly indicates that an idempotent action has been completed on the node. Declaration public void SetIdempotentState(string actionId) Parameters Type Name Description String actionId The action ID. SetupConfigureNtp(ISetupController) Configures NTP and also installs some tool scripts for managing this. Declaration public void SetupConfigureNtp(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. SetupKublet(ISetupController) Configures the kublet service. Declaration public void SetupKublet(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. Remarks note Kubelet is installed in NodeInstallKubernetes(ISetupController) when configuring the node image and is then configured for the cluster here. SetupNode(ISetupController, ClusterManifest) Performs common node configuration. Declaration public void SetupNode(ISetupController controller, ClusterManifest clusterManifest) Parameters Type Name Description ISetupController controller The setup controller. ClusterManifest clusterManifest The cluster manifest. SetupPackageProxy(ISetupController) Configures cluster package manager caching. Declaration public void SetupPackageProxy(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. UpdateLinux(ISetupController, Boolean) Upgrades the base Linux distribtion, rebooting the node when required. Declaration public void UpdateLinux(ISetupController controller, bool fullUpgrade) Parameters Type Name Description ISetupController controller The setup controller. Boolean fullUpgrade Pass true to perform a full distribution upgrade or false to just apply security patches. VerifyNodeOS(ISetupController) Ensures that the node operating system and version is supported for a neonKUBE cluster. This faults the node proxy on failure. Declaration public bool VerifyNodeOS(ISetupController controller = null) Parameters Type Name Description ISetupController controller Optional setup controller. Returns Type Description Boolean true if the operation system is supported. Implements INodeSshProxy Extension Methods NodeSshProxyExtensions.NodeInstallHelmArchive(ILinuxSshProxy, ISetupController)"
  },
  "neonkube/api/Neon.Kube.Resources.Calico.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Calico.html",
    "title": "Namespace Neon.Kube.Resources.Calico | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Resources.Calico Classes V1FelixConfiguration FelixConfiguration."
  },
  "neonkube/api/Neon.Kube.Resources.Calico.V1FelixConfiguration.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Calico.V1FelixConfiguration.html",
    "title": "Class V1FelixConfiguration | NeonKUBE documentation",
    "keywords": "Class V1FelixConfiguration FelixConfiguration. Inheritance Object V1FelixConfiguration Namespace : Neon.Kube.Resources.Calico Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"crd.projectcalico.org\", Kind = \"FelixConfiguration\", ApiVersion = \"v1\", PluralName = \"felixconfigurations\")] public class V1FelixConfiguration : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<object>, IValidate Constructors V1FelixConfiguration() Initializes a new instance of the FelixConfiguration class. Declaration public V1FelixConfiguration() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"crd.projectcalico.org\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"FelixConfiguration\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"felixconfigurations\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the FelixConfiguration. Declaration public dynamic Spec { get; set; } Property Value Type Description Object Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.AcmeChallengeSolver.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.AcmeChallengeSolver.html",
    "title": "Class AcmeChallengeSolver | NeonKUBE documentation",
    "keywords": "Class AcmeChallengeSolver The kubernetes spec for a cert-manager ClusterIssuer. Inheritance Object AcmeChallengeSolver Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class AcmeChallengeSolver Constructors AcmeChallengeSolver() Constructor. Declaration public AcmeChallengeSolver() Properties Dns01 Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered. Declaration [JsonProperty(PropertyName = \"dns01\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"dns01\", ApplyNamingConventions = false)] public AcmeChallengeSolverDns01 Dns01 { get; set; } Property Value Type Description AcmeChallengeSolverDns01 Selector Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the ‘default’ solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead. Declaration [JsonProperty(PropertyName = \"selector\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"selector\", ApplyNamingConventions = false)] public CertificateDnsNameSelector Selector { get; set; } Property Value Type Description CertificateDnsNameSelector Methods Validate() Declaration public void Validate()"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.AcmeChallengeSolverDns01.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.AcmeChallengeSolverDns01.html",
    "title": "Class AcmeChallengeSolverDns01 | NeonKUBE documentation",
    "keywords": "Class AcmeChallengeSolverDns01 Used to configure a DNS01 challenge provider to be used when solving DNS01 challenges. Only one DNS provider may be configured per solver. Inheritance Object AcmeChallengeSolverDns01 Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class AcmeChallengeSolverDns01 Constructors AcmeChallengeSolverDns01() Constructor. Declaration public AcmeChallengeSolverDns01() Properties CnameStrategy CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones. Declaration [JsonProperty(PropertyName = \"cnameStrategy\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"cnameStrategy\", ApplyNamingConventions = false)] public string CnameStrategy { get; set; } Property Value Type Description String Route53 Specifies configuration for AWS Route53 DNS01 provider. Declaration [JsonProperty(PropertyName = \"route53\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"route53\", ApplyNamingConventions = false)] public AcmeIssuerDns01ProviderRoute53 Route53 { get; set; } Property Value Type Description AcmeIssuerDns01ProviderRoute53 Webhook Specifies configuration for a webhook DNS01 provider, including where to POST ChallengePayload resources. Declaration [JsonProperty(PropertyName = \"webhook\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"webhook\", ApplyNamingConventions = false)] public AcmeIssuerDns01ProviderWebhook Webhook { get; set; } Property Value Type Description AcmeIssuerDns01ProviderWebhook Methods Validate() Declaration public void Validate()"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.AcmeExternalAccountBinding.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.AcmeExternalAccountBinding.html",
    "title": "Class AcmeExternalAccountBinding | NeonKUBE documentation",
    "keywords": "Class AcmeExternalAccountBinding Describes CertManager External Account Binding options. Inheritance Object AcmeExternalAccountBinding Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class AcmeExternalAccountBinding Constructors AcmeExternalAccountBinding() Default constructor. Declaration public AcmeExternalAccountBinding() Properties Key Specifies a Secret Key as a string. This is only used when setting the secret via the ClusterDefinition/>. Declaration [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] [JsonProperty(PropertyName = \"key\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"key\", ApplyNamingConventions = false)] public string Key { get; set; } Property Value Type Description String KeyId The ID of the CA key that the External Account is bound to. Declaration [JsonPropertyName(\"keyID\")] [JsonProperty(PropertyName = \"keyID\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"keyID\", ApplyNamingConventions = false)] public string KeyId { get; set; } Property Value Type Description String KeySecretRef Specifies a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The key is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret must be un-padded, base64 URL encoded data. Declaration [JsonProperty(PropertyName = \"keySecretRef\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public AcmeSecretKeySelector KeySecretRef { get; set; } Property Value Type Description AcmeSecretKeySelector Methods Validate() Declaration public void Validate()"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.AcmeIssuer.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.AcmeIssuer.html",
    "title": "Class AcmeIssuer | NeonKUBE documentation",
    "keywords": "Class AcmeIssuer The kubernetes spec for a cert-manager ClusterIssuer. Inheritance Object AcmeIssuer Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class AcmeIssuer Constructors AcmeIssuer() Constructor. Declaration public AcmeIssuer() Properties DisableAccountKeyGeneration Enables or disables generating a new ACME account key. If true, the Issuer resource will not request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false. Declaration [JsonProperty(PropertyName = \"disableAccountKeyGeneration\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"disableAccountKeyGeneration\", ApplyNamingConventions = false)] public bool? DisableAccountKeyGeneration { get; set; } Property Value Type Description Nullable < Boolean > Email Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered. Declaration [JsonProperty(PropertyName = \"email\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"email\", ApplyNamingConventions = false)] public string Email { get; set; } Property Value Type Description String EnableDurationFeature Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let’s Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false. Declaration [JsonProperty(PropertyName = \"enableDurationFeature\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"enableDurationFeature\", ApplyNamingConventions = false)] public bool? EnableDurationFeature { get; set; } Property Value Type Description Nullable < Boolean > ExternalAccountBinding ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account. Declaration [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] [JsonProperty(PropertyName = \"externalAccountBinding\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"externalAccountBinding\", ApplyNamingConventions = false)] public AcmeExternalAccountBinding ExternalAccountBinding { get; set; } Property Value Type Description AcmeExternalAccountBinding PreferredChain PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let’s Encrypt’s DST crosssign you would use: “DST Root CA X3” or “ISRG Root X1” for the newer Let’s Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer’s CN Declaration [JsonProperty(PropertyName = \"preferredChain\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"preferredChain\", ApplyNamingConventions = false)] public string PreferredChain { get; set; } Property Value Type Description String PrivateKey Specifies the private key. Declaration [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] [JsonProperty(PropertyName = \"privateKey\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"privateKey\", ApplyNamingConventions = false, ScalarStyle = ScalarStyle.Literal)] public string PrivateKey { get; set; } Property Value Type Description String PrivateKeySecretRef PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a key may be specified to select a specific entry within the named Secret resource. If key is not specified, a default of tls.key will be used. Declaration [JsonProperty(PropertyName = \"privateKeySecretRef\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public AcmeSecretKeySelector PrivateKeySecretRef { get; set; } Property Value Type Description AcmeSecretKeySelector Server Server is the URL used to access the ACME server’s ‘directory’ endpoint. For example, for Let’s Encrypt’s staging endpoint, you would use: “ https://acme-staging-v02.api.letsencrypt.org/directory” . Only ACME v2 endpoints (i.e. RFC 8555) are supported. Declaration [JsonProperty(PropertyName = \"server\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"server\", ApplyNamingConventions = false)] public string Server { get; set; } Property Value Type Description String SkipTlsVerify Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have their TLS certificate validated (i.e. insecure connections will be allowed). Only enable this option in development environments. The cert-manager system installed roots will be used to verify connections to the ACME server if this is false. Defaults to false. Declaration [JsonProperty(PropertyName = \"skipTLSVerify\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"skipTLSVerify\", ApplyNamingConventions = false)] public bool? SkipTlsVerify { get; set; } Property Value Type Description Nullable < Boolean > Solvers Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/ Declaration [JsonProperty(PropertyName = \"solvers\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"solvers\", ApplyNamingConventions = false)] public List<AcmeChallengeSolver> Solvers { get; set; } Property Value Type Description List < AcmeChallengeSolver > Methods Validate() Declaration public void Validate()"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.AcmeIssuerDns01ProviderRoute53.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.AcmeIssuerDns01ProviderRoute53.html",
    "title": "Class AcmeIssuerDns01ProviderRoute53 | NeonKUBE documentation",
    "keywords": "Class AcmeIssuerDns01ProviderRoute53 Defines the Route 53 configuration for AWS. Inheritance Object AcmeIssuerDns01ProviderRoute53 Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class AcmeIssuerDns01ProviderRoute53 Constructors AcmeIssuerDns01ProviderRoute53() Constructor. Declaration public AcmeIssuerDns01ProviderRoute53() Properties AccessKeyId The AccessKeyID is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials Declaration [JsonProperty(PropertyName = \"accessKeyID\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"accessKeyID\", ApplyNamingConventions = false)] public string AccessKeyId { get; set; } Property Value Type Description String HostedZoneId If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call. Declaration [JsonProperty(PropertyName = \"hostedZoneID\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"hostedZoneID\", ApplyNamingConventions = false)] public string HostedZoneId { get; set; } Property Value Type Description String Region Always set the region when using AccessKeyID and SecretAccessKey Declaration [JsonProperty(PropertyName = \"region\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"region\", ApplyNamingConventions = false)] public string Region { get; set; } Property Value Type Description String Role Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata Declaration [JsonProperty(PropertyName = \"role\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"role\", ApplyNamingConventions = false)] public string Role { get; set; } Property Value Type Description String SecretAccessKey The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials Declaration [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] [JsonProperty(PropertyName = \"secretAccessKey\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"secretAccessKey\", ApplyNamingConventions = false)] public string SecretAccessKey { get; set; } Property Value Type Description String SecretAccessKeySecretRef The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials Declaration [JsonProperty(PropertyName = \"secretAccessKeySecretRef\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public AcmeSecretKeySelector SecretAccessKeySecretRef { get; set; } Property Value Type Description AcmeSecretKeySelector Methods Validate() Declaration public void Validate()"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.AcmeIssuerDns01ProviderWebhook.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.AcmeIssuerDns01ProviderWebhook.html",
    "title": "Class AcmeIssuerDns01ProviderWebhook | NeonKUBE documentation",
    "keywords": "Class AcmeIssuerDns01ProviderWebhook Defines the Route 53 configuration for AWS. Inheritance Object AcmeIssuerDns01ProviderWebhook Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class AcmeIssuerDns01ProviderWebhook Constructors AcmeIssuerDns01ProviderWebhook() Constructor. Declaration public AcmeIssuerDns01ProviderWebhook() Properties Config Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation’s documentation. Declaration [JsonProperty(PropertyName = \"config\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"config\", ApplyNamingConventions = false)] public Dictionary<string, object> Config { get; set; } Property Value Type Description Dictionary < String , Object > GroupName The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation. Declaration [JsonProperty(PropertyName = \"groupName\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"groupName\", ApplyNamingConventions = false)] public string GroupName { get; set; } Property Value Type Description String SolverName The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. ‘neon-acme’. Declaration [JsonProperty(PropertyName = \"solverName\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"solverName\", ApplyNamingConventions = false)] public string SolverName { get; set; } Property Value Type Description String Methods Validate() Declaration public void Validate()"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.AcmeSecretKeySelector.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.AcmeSecretKeySelector.html",
    "title": "Class AcmeSecretKeySelector | NeonKUBE documentation",
    "keywords": "Class AcmeSecretKeySelector Describes CertManager Secret Key Selector. Inheritance Object AcmeSecretKeySelector Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class AcmeSecretKeySelector Constructors AcmeSecretKeySelector() Default constructor. Declaration public AcmeSecretKeySelector() Properties Key The key of the entry in the Secret resource’s data field to be used. Some instances of this field may be defaulted, in others it may be required. Declaration [JsonProperty(PropertyName = \"key\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"key\", ApplyNamingConventions = false)] public string Key { get; set; } Property Value Type Description String Name Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names Declaration [JsonProperty(PropertyName = \"name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String Methods Validate() Declaration public void Validate()"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.CertificateDnsNameSelector.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.CertificateDnsNameSelector.html",
    "title": "Class CertificateDnsNameSelector | NeonKUBE documentation",
    "keywords": "Class CertificateDnsNameSelector The kubernetes spec for a cert-manager ClusterIssuer. Inheritance Object CertificateDnsNameSelector Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class CertificateDnsNameSelector Constructors CertificateDnsNameSelector() Constructor. Declaration public CertificateDnsNameSelector() Properties DnsNames List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected. Declaration [JsonProperty(PropertyName = \"dnsNames\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"dnsNames\", ApplyNamingConventions = false)] public List<string> DnsNames { get; set; } Property Value Type Description List < String > DnsZones List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected. Declaration [JsonProperty(PropertyName = \"dnsZones\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"dnsZones\", ApplyNamingConventions = false)] public List<string> DnsZones { get; set; } Property Value Type Description List < String > MatchLabels A label selector that is used to refine the set of certificate’s that this challenge solver will apply to. Declaration [JsonProperty(PropertyName = \"matchLabels\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"matchLabels\", ApplyNamingConventions = false)] public V1LabelSelector MatchLabels { get; set; } Property Value Type Description k8s.Models.V1LabelSelector"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.ChallengeAction.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.ChallengeAction.html",
    "title": "Enum ChallengeAction | NeonKUBE documentation",
    "keywords": "Enum ChallengeAction ACME challenge action. Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(StringEnumConverter))] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum ChallengeAction Fields Name Description CleanUp The record will be cleaned up with the solving service. Present The record will be presented with the solving service. Unknown"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.ChallengePayload.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.ChallengePayload.html",
    "title": "Class ChallengePayload | NeonKUBE documentation",
    "keywords": "Class ChallengePayload Describes a request/response for presenting or cleaning up an ACME challenge resource Inheritance Object ChallengePayload Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class ChallengePayload Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Kind { get; set; } Property Value Type Description String Request Describes the attributes for the ACME solver request. Declaration [JsonProperty(PropertyName = \"request\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public ChallengeRequest Request { get; set; } Property Value Type Description ChallengeRequest Response Describes the attributes for the ACME solver response. Declaration [JsonProperty(PropertyName = \"response\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public ChallengeResponse Response { get; set; } Property Value Type Description ChallengeResponse"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.ChallengeRequest.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.ChallengeRequest.html",
    "title": "Class ChallengeRequest | NeonKUBE documentation",
    "keywords": "Class ChallengeRequest Inheritance Object ChallengeRequest Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class ChallengeRequest Properties Action Action is one of 'present' or 'cleanup'. If the action is 'present', the record will be presented with the solving service. If the action is 'cleanup', the record will be cleaned up with the solving service. Declaration [JsonProperty(PropertyName = \"action\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public ChallengeAction Action { get; set; } Property Value Type Description ChallengeAction AllowAmbientCredentials AllowAmbientCredentials advises webhook implementations that they can use 'ambient credentials' for authenticating with their respective DNS provider services. This field SHOULD be honoured by all DNS webhook implementations, but in certain instances where it does not make sense to honour this option, an implementation may ignore it. Declaration [JsonProperty(PropertyName = \"allowAmbientCredentials\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool AllowAmbientCredentials { get; set; } Property Value Type Description Boolean Config Config contains unstructured JSON configuration data that the webhook implementation can unmarshal in order to fetch secrets or configure connection details etc. Secret values should not be passed in this field, in favour of references to Kubernetes Secret resources that the webhook can fetch. Declaration [JsonProperty(PropertyName = \"config\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Dictionary<string, object> Config { get; set; } Property Value Type Description Dictionary < String , Object > DnsName DNSName is the name of the domain that is actually being validated, as requested by the user on the Certificate resource. This will be of the form 'example.com' from normal hostnames, and '*.example.com' for wildcards. Declaration [JsonProperty(PropertyName = \"dnsName\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string DnsName { get; set; } Property Value Type Description String Key Key is the key that should be presented. This key will already be signed by the account that owns the challenge. For DNS01, this is the key that should be set for the TXT record for ResolveFQDN. Declaration [JsonProperty(PropertyName = \"key\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Key { get; set; } Property Value Type Description String ResolvedFQDN ResolvedFQDN is the fully-qualified domain name that should be updated/presented after resolving all CNAMEs. This should be honoured when using the DNS01 solver type. This will be of the form '_acme-challenge.example.com.'. Declaration [JsonProperty(PropertyName = \"resolvedFQDN\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string ResolvedFQDN { get; set; } Property Value Type Description String ResolvedZone ResolvedZone is the zone encompassing the ResolvedFQDN. This is included as part of the ChallengeRequest so that webhook implementers do not need to implement their own SOA recursion logic. This indicates the zone that the provided FQDN is encompassed within, determined by performing SOA record queries for each part of the FQDN until an authoritative zone is found. This will be of the form 'example.com.'. Declaration [JsonProperty(PropertyName = \"resolvedZone\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string ResolvedZone { get; set; } Property Value Type Description String ResourceNamespace ResourceNamespace is the namespace containing resources that are referenced in the providers config. If this request is solving for an Issuer resource, this will be the namespace of the Issuer. If this request is solving for a ClusterIssuer resource, this will be the configured 'cluster resource namespace' Declaration [JsonProperty(PropertyName = \"resourceNamespace\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string ResourceNamespace { get; set; } Property Value Type Description String Type Type is the type of ACME challenge. Only dns-01 is currently supported. Declaration [JsonProperty(PropertyName = \"type\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Type { get; set; } Property Value Type Description String Uid UID is an identifier for the individual request/response. It allows us to distinguish instances of requests which are otherwise identical (parallel requests, requests when earlier requests did not modify etc) The UID is meant to track the round trip (request/response) between the KAS and the WebHook, not the user request. It is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging. Declaration [JsonProperty(PropertyName = \"uid\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Uid { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.ChallengeResponse.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.ChallengeResponse.html",
    "title": "Class ChallengeResponse | NeonKUBE documentation",
    "keywords": "Class ChallengeResponse Inheritance Object ChallengeResponse Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class ChallengeResponse Properties Success Indicates whether the request was successful. Declaration [JsonProperty(PropertyName = \"success\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool Success { get; set; } Property Value Type Description Boolean Uid UID is an identifier for the individual request/response. It allows us to distinguish instances of requests which are otherwise identical (parallel requests, requests when earlier requests did not modify etc) The UID is meant to track the round trip (request/response) between the KAS and the WebHook, not the user request. It is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging. Declaration [JsonProperty(PropertyName = \"uid\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Uid { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.ClusterIssuer.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.ClusterIssuer.html",
    "title": "Class ClusterIssuer | NeonKUBE documentation",
    "keywords": "Class ClusterIssuer A ClusterIssuer represents a certificate issuing authority which can be referenced as part of issuerRef fields. It is similar to an Issuer, however it is cluster-scoped and therefore can be referenced by resources that exist in any namespace, not just the same namespace as the referent. Inheritance Object ClusterIssuer Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"cert-manager.io\", Kind = \"ClusterIssuer\", ApiVersion = \"v1\", PluralName = \"clusterissuers\")] public class ClusterIssuer : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1IssuerSpec>, IValidate Constructors ClusterIssuer() Initializes a new instance of the ClusterIssuer class. Declaration public ClusterIssuer() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"cert-manager.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"ClusterIssuer\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"clusterissuers\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\")] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\")] public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration [JsonProperty(PropertyName = \"metadata\")] public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the ClusterIssuer. Declaration [JsonProperty(PropertyName = \"spec\")] public V1IssuerSpec Spec { get; set; } Property Value Type Description V1IssuerSpec Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.html",
    "title": "Namespace Neon.Kube.Resources.CertManager | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Resources.CertManager Classes AcmeChallengeSolver The kubernetes spec for a cert-manager ClusterIssuer. AcmeChallengeSolverDns01 Used to configure a DNS01 challenge provider to be used when solving DNS01 challenges. Only one DNS provider may be configured per solver. AcmeExternalAccountBinding Describes CertManager External Account Binding options. AcmeIssuer The kubernetes spec for a cert-manager ClusterIssuer. AcmeIssuerDns01ProviderRoute53 Defines the Route 53 configuration for AWS. AcmeIssuerDns01ProviderWebhook Defines the Route 53 configuration for AWS. AcmeSecretKeySelector Describes CertManager Secret Key Selector. CertificateDnsNameSelector The kubernetes spec for a cert-manager ClusterIssuer. ChallengePayload Describes a request/response for presenting or cleaning up an ACME challenge resource ChallengeRequest ChallengeResponse ClusterIssuer A ClusterIssuer represents a certificate issuing authority which can be referenced as part of issuerRef fields. It is similar to an Issuer, however it is cluster-scoped and therefore can be referenced by resources that exist in any namespace, not just the same namespace as the referent. IssuerRef A reference to the issuer for this certificate. If the kind field is not set, or set to Issuer , an Issuer resource with the given name in the same namespace as the Certificate will be used.If the kind field is set to ClusterIssuer , a ClusterIssuer with the provided name will be used.The name field in this stanza is required at all times. JKS Configures options for storing a JKS keystore in the spec.secretName Secret resource. Keystores Configures additional keystore output formats stored in the secretName Secret resource. PasswordSecretRef Configures additional keystore output formats stored in the secretName Secret resource. PKCS12 Configures options for storing a PKCS12 keystore in the spec.secretName Secret resource. PrivateKey Options to control private keys used for the Certificate. Subject Full X509 name specification ( https://golang.org/pkg/crypto/x509/pkix/#Name ). V1Certificate A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in spec.secretName . \\n The stored certificate will be renewed before it expires (as configured by spec.renewBefore ).\" V1CertificateRequest A CertificateRequest is used to request a signed certificate from one of the configured issuers. All fields within the CertificateRequest's spec are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its status.state field. A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used. V1CertificateSpec The kubernetes spec for a cert-manager certificate. V1CertificateStatus Status of the Certificate. This is set and managed automatically. V1IssuerSpec The kubernetes spec for a cert-manager Issuer. Enums ChallengeAction ACME challenge action. KeyAlgorithm The private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either RSA or ECDSA If algorithm is specified and size is not provided, key size of 256 will be used for ECDSA key algorithm and key size of 2048 will be used for RSA key algorithm. KeyEncoding The private key cryptography standards (PKCS) for this certificate's private key to be encoded in. RotationPolicy RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. X509Usages X509Usages controls how private keys should be regenerated when a re-issuance is being processed."
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.IssuerRef.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.IssuerRef.html",
    "title": "Class IssuerRef | NeonKUBE documentation",
    "keywords": "Class IssuerRef A reference to the issuer for this certificate. If the kind field is not set, or set to Issuer , an Issuer resource with the given name in the same namespace as the Certificate will be used.If the kind field is set to ClusterIssuer , a ClusterIssuer with the provided name will be used.The name field in this stanza is required at all times. Inheritance Object IssuerRef Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class IssuerRef Constructors IssuerRef() Initializes a new instance of the IssuerRef class. Declaration public IssuerRef() Properties Group Group of the resource being referred to. Declaration [JsonProperty(PropertyName = \"group\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Group { get; set; } Property Value Type Description String Kind Kind of the resource being referred to. Declaration [JsonProperty(PropertyName = \"kind\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Kind { get; set; } Property Value Type Description String Name Name of the resource being referred to. Declaration [JsonProperty(PropertyName = \"name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Name { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.JKS.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.JKS.html",
    "title": "Class JKS | NeonKUBE documentation",
    "keywords": "Class JKS Configures options for storing a JKS keystore in the spec.secretName Secret resource. Inheritance Object JKS Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class JKS Constructors JKS() Initializes a new instance of the JKS class. Declaration public JKS() Properties Create Configures options for storing a JKS keystore in the spec.secretName Secret resource. Declaration [JsonProperty(PropertyName = \"create\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool Create { get; set; } Property Value Type Description Boolean PasswordSecretRef A reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore. Declaration [JsonProperty(PropertyName = \"passwordSecretRef\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public PasswordSecretRef PasswordSecretRef { get; set; } Property Value Type Description PasswordSecretRef"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.KeyAlgorithm.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.KeyAlgorithm.html",
    "title": "Enum KeyAlgorithm | NeonKUBE documentation",
    "keywords": "Enum KeyAlgorithm The private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either RSA or ECDSA If algorithm is specified and size is not provided, key size of 256 will be used for ECDSA key algorithm and key size of 2048 will be used for RSA key algorithm. Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(StringEnumConverter))] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum KeyAlgorithm Fields Name Description ECDSA ECDSA#8 Ed25519 ECDSA#8 RSA RSA#1"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.KeyEncoding.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.KeyEncoding.html",
    "title": "Enum KeyEncoding | NeonKUBE documentation",
    "keywords": "Enum KeyEncoding The private key cryptography standards (PKCS) for this certificate's private key to be encoded in. Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(StringEnumConverter))] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum KeyEncoding Fields Name Description PKCS1 PKCS#1 PKCS8 PKCS#8"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.Keystores.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.Keystores.html",
    "title": "Class Keystores | NeonKUBE documentation",
    "keywords": "Class Keystores Configures additional keystore output formats stored in the secretName Secret resource. Inheritance Object Keystores Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class Keystores Constructors Keystores() Initializes a new instance of the Keystores class. Declaration public Keystores() Properties Jks Configures options for storing a JKS keystore in the spec.secretName Secret resource. Declaration [JsonProperty(PropertyName = \"jks\")] public string Jks { get; set; } Property Value Type Description String Pkcs12 Configures options for storing a PKCS12 keystore in the spec.secretName Secret resource. Declaration [JsonProperty(PropertyName = \"pkcs12\")] public string Pkcs12 { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.PasswordSecretRef.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.PasswordSecretRef.html",
    "title": "Class PasswordSecretRef | NeonKUBE documentation",
    "keywords": "Class PasswordSecretRef Configures additional keystore output formats stored in the secretName Secret resource. Inheritance Object PasswordSecretRef Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class PasswordSecretRef Constructors PasswordSecretRef() Initializes a new instance of the PasswordSecretRef class. Declaration public PasswordSecretRef() Properties Key The key of the entry in the Secret resource's data field to be used. Some instances of this field may be defaulted, in others it may be required. Declaration [JsonProperty(PropertyName = \"key\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Key { get; set; } Property Value Type Description String Name Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names Declaration [JsonProperty(PropertyName = \"name\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.Ignore)] public string Name { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.PKCS12.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.PKCS12.html",
    "title": "Class PKCS12 | NeonKUBE documentation",
    "keywords": "Class PKCS12 Configures options for storing a PKCS12 keystore in the spec.secretName Secret resource. Inheritance Object PKCS12 Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class PKCS12 Constructors PKCS12() Initializes a new instance of the PKCS12 class. Declaration public PKCS12() Properties Create Configures options for storing a PKCS12 keystore in the spec.secretName Secret resource. Declaration [JsonProperty(PropertyName = \"create\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool Create { get; set; } Property Value Type Description Boolean PasswordSecretRef A reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore. Declaration [JsonProperty(PropertyName = \"passwordSecretRef\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public PasswordSecretRef PasswordSecretRef { get; set; } Property Value Type Description PasswordSecretRef"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.PrivateKey.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.PrivateKey.html",
    "title": "Class PrivateKey | NeonKUBE documentation",
    "keywords": "Class PrivateKey Options to control private keys used for the Certificate. Inheritance Object PrivateKey Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class PrivateKey Constructors PrivateKey() Initializes a new instance of the PrivateKey class. Declaration public PrivateKey() Properties Algorithm The private key algorithm of the corresponding private key for this certificate. Declaration [JsonProperty(PropertyName = \"algorithm\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public KeyAlgorithm Algorithm { get; set; } Property Value Type Description KeyAlgorithm Encoding The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in. If provided, allowed values are PKCS1 and PKCS8 standing for PKCS#1 and PKCS#8, respectively. Defaults to PKCS1 if not specified. Declaration [JsonProperty(PropertyName = \"encoding\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public KeyEncoding Encoding { get; set; } Property Value Type Description KeyEncoding RotationPolicy RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. Default is 'Never' for backward compatibility. Declaration [JsonProperty(PropertyName = \"rotationPolicy\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public RotationPolicy RotationPolicy { get; set; } Property Value Type Description RotationPolicy Size The private key algorithm of the corresponding private key for this certificate. Declaration [JsonProperty(PropertyName = \"size\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int? Size { get; set; } Property Value Type Description Nullable < Int32 >"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.RotationPolicy.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.RotationPolicy.html",
    "title": "Enum RotationPolicy | NeonKUBE documentation",
    "keywords": "Enum RotationPolicy RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(StringEnumConverter))] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum RotationPolicy Fields Name Description Always A private key matching the specified requirements will be generated whenever a re-issuance occurs Never A private key will only be generated if one does not already exist in the target spec.secretName . If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention."
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.Subject.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.Subject.html",
    "title": "Class Subject | NeonKUBE documentation",
    "keywords": "Class Subject Full X509 name specification ( https://golang.org/pkg/crypto/x509/pkix/#Name ). Inheritance Object Subject Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class Subject Constructors Subject() Initializes a new instance of the Subject class. Declaration public Subject() Properties Countries Countries to be used on the Certificate. Declaration [JsonProperty(PropertyName = \"countries\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> Countries { get; set; } Property Value Type Description List < String > Localities Cities to be used on the Certificate. Declaration [JsonProperty(PropertyName = \"localities\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> Localities { get; set; } Property Value Type Description List < String > OrganizationalUnits Organizational Units to be used on the Certificate. Declaration [JsonProperty(PropertyName = \"organizationalUnits\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> OrganizationalUnits { get; set; } Property Value Type Description List < String > PostalCodes Postal codes to be used on the Certificate. Declaration [JsonProperty(PropertyName = \"postalCodes\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> PostalCodes { get; set; } Property Value Type Description List < String > Provinces State/Provinces to be used on the Certificate. Declaration [JsonProperty(PropertyName = \"provinces\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> Provinces { get; set; } Property Value Type Description List < String > SerialNumber Serial number to be used on the Certificate. Declaration [JsonProperty(PropertyName = \"serialNumber\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string SerialNumber { get; set; } Property Value Type Description String StreetAddresses Street addresses to be used on the Certificate. Declaration [JsonProperty(PropertyName = \"streetAddresses\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> StreetAddresses { get; set; } Property Value Type Description List < String >"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.V1Certificate.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.V1Certificate.html",
    "title": "Class V1Certificate | NeonKUBE documentation",
    "keywords": "Class V1Certificate A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in spec.secretName . \\n The stored certificate will be renewed before it expires (as configured by spec.renewBefore ).\" Inheritance Object V1Certificate Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"cert-manager.io\", Kind = \"Certificate\", ApiVersion = \"v1\", PluralName = \"certificates\")] public class V1Certificate : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1CertificateSpec>, IValidate Constructors V1Certificate() Initializes a new instance of the Certificate class. Declaration public V1Certificate() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"cert-manager.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"Certificate\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"certificates\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\")] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\")] public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration [JsonProperty(PropertyName = \"metadata\")] public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the Certificate. Declaration [JsonProperty(PropertyName = \"spec\")] public V1CertificateSpec Spec { get; set; } Property Value Type Description V1CertificateSpec Status Status of the Certificate. This is set and managed automatically. Declaration [JsonProperty(PropertyName = \"status\")] public V1CertificateStatus Status { get; set; } Property Value Type Description V1CertificateStatus Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.V1CertificateRequest.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.V1CertificateRequest.html",
    "title": "Class V1CertificateRequest | NeonKUBE documentation",
    "keywords": "Class V1CertificateRequest A CertificateRequest is used to request a signed certificate from one of the configured issuers. All fields within the CertificateRequest's spec are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its status.state field. A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used. Inheritance Object V1CertificateRequest Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"cert-manager.io\", Kind = \"CertificateRequest\", ApiVersion = \"v1alpha2\", PluralName = \"certificaterequests\")] public class V1CertificateRequest : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<object>, IValidate Constructors V1CertificateRequest() Initializes a new instance of the CertificateRequest class. Declaration public V1CertificateRequest() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1alpha2\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"cert-manager.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"CertificateRequest\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"certificaterequests\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\")] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\")] public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration [JsonProperty(PropertyName = \"metadata\")] public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the CertificateRequest. Declaration [JsonProperty(PropertyName = \"spec\")] [JsonConverter(typeof(JsonGenericConverter<dynamic>))] public dynamic Spec { get; set; } Property Value Type Description Object Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.V1CertificateSpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.V1CertificateSpec.html",
    "title": "Class V1CertificateSpec | NeonKUBE documentation",
    "keywords": "Class V1CertificateSpec The kubernetes spec for a cert-manager certificate. Inheritance Object V1CertificateSpec Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class V1CertificateSpec Constructors V1CertificateSpec() Constructor. Declaration public V1CertificateSpec() Properties CommonName CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4&apos ; Declaration [JsonProperty(PropertyName = \"commonName\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string CommonName { get; set; } Property Value Type Description String DnsNames A list of DNS subjectAltNames to be set on the Certificate. Declaration [JsonProperty(PropertyName = \"dnsNames\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> DnsNames { get; set; } Property Value Type Description List < String > Duration The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. Certificate will be renewed either 2/3 through its duration or renewBefore period before its expiry, whichever is later. Minimum accepted duration is 1 hour. Value must be in units accepted by GOLANG time.ParseDuration() : https://golang.org/pkg/time/#ParseDuration Declaration [JsonProperty(PropertyName = \"duration\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Duration { get; set; } Property Value Type Description String EmailAddresses A list of email subjectAltNames to be set on the Certificate. Declaration [JsonProperty(PropertyName = \"emailAddresses\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> EmailAddresses { get; set; } Property Value Type Description List < String > EncodeUsagesInRequest Controls whether key usages should be present in the CertificateRequest. Declaration [JsonProperty(PropertyName = \"encodeUsagesInRequest\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool? EncodeUsagesInRequest { get; set; } Property Value Type Description Nullable < Boolean > IpAddresses A list of IP address subjectAltNames to be set on the Certificate. Declaration [JsonProperty(PropertyName = \"ipAddresses\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> IpAddresses { get; set; } Property Value Type Description List < String > IsCA Whether this Certificate as valid for certificate signing. This will automatically add the cert sign usage to the list of usages . Declaration [JsonProperty(PropertyName = \"isCA\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool? IsCA { get; set; } Property Value Type Description Nullable < Boolean > IssuerRef A reference to the issuer for this certificate. Declaration [JsonProperty(PropertyName = \"issuerRef\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public IssuerRef IssuerRef { get; set; } Property Value Type Description IssuerRef KeySize The key bit size of the corresponding private key for this certificate. If keyAlgorithm is set to rsa , valid values are 2048 , 4096 or 8192 , and will default to 2048 if not specified. If keyAlgorithm is set to ecdsa , valid values are 256 , 384 or 521 , and will default to 256 if not specified. No other values are allowed. Declaration [JsonProperty(PropertyName = \"keySize\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int? KeySize { get; set; } Property Value Type Description Nullable < Int32 > Keystores Configures additional keystore output formats stored in the secretName Secret resource. Declaration [JsonProperty(PropertyName = \"keystores\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Keystores Keystores { get; set; } Property Value Type Description Keystores Organization A list of organizations to be used on the Certificate. Declaration [JsonProperty(PropertyName = \"organization\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> Organization { get; set; } Property Value Type Description List < String > PrivateKey Options to control private keys used for the Certificate. Declaration [JsonProperty(PropertyName = \"privateKey\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public PrivateKey PrivateKey { get; set; } Property Value Type Description PrivateKey RenewBefore How long before the currently issued certificate's expiry cert-manager should renew the certificate. The default is 2/3 of the issued certificate's duration. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration Declaration [JsonProperty(PropertyName = \"renewBefore\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string RenewBefore { get; set; } Property Value Type Description String RevisionHistoryLimit RevisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single CertificateRequest created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of 1 or greater. If unset ( nil ), revisions will not be garbage collected. Default value is nil . Declaration [JsonProperty(PropertyName = \"revisionHistoryLimit\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int? RevisionHistoryLimit { get; set; } Property Value Type Description Nullable < Int32 > SecretName The name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer. Declaration [JsonProperty(PropertyName = \"secretName\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string SecretName { get; set; } Property Value Type Description String Subject Full X509 name specification ( https://golang.org/pkg/crypto/x509/pkix/#Name ). Declaration [JsonProperty(PropertyName = \"subject\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Subject Subject { get; set; } Property Value Type Description Subject Uris A list of URI subjectAltNames to be set on the Certificate. Declaration [JsonProperty(PropertyName = \"uris\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> Uris { get; set; } Property Value Type Description List < String > Usages Usages is the set of x509 usages that are requested for the certificate. Declaration [JsonProperty(PropertyName = \"usages\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [JsonConverter(typeof(JsonCollectionItemConverter<X509Usages, JsonStringEnumMemberConverter>))] public IEnumerable<X509Usages> Usages { get; set; } Property Value Type Description IEnumerable < X509Usages >"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.V1CertificateStatus.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.V1CertificateStatus.html",
    "title": "Class V1CertificateStatus | NeonKUBE documentation",
    "keywords": "Class V1CertificateStatus Status of the Certificate. This is set and managed automatically. Inheritance Object V1CertificateStatus Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class V1CertificateStatus Constructors V1CertificateStatus() Constructor. Declaration public V1CertificateStatus() Properties Conditions List of status conditions to indicate the status of certificates.Known condition types are Ready and Issuing . Declaration [JsonProperty(PropertyName = \"conditions\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<V1Condition> Conditions { get; set; } Property Value Type Description List < k8s.Models.V1Condition > LastFailureTime The time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource.If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time. Declaration [JsonProperty(PropertyName = \"lastFailureTime\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public DateTime? LastFailureTime { get; set; } Property Value Type Description Nullable < DateTime > NextPrivateKeySecretName The name of the Secret resource containing the private key to be used for the next certificate iteration.The keymanager controller will automatically set this field if the Issuing condition is set to True . It will automatically unset this field when the Issuing condition is not set or False. Declaration [JsonProperty(PropertyName = \"nextPrivateKeySecretName\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string NextPrivateKeySecretName { get; set; } Property Value Type Description String NotAfter The expiration time of the certificate stored in the secret named by this resource in spec.secretName . Declaration [JsonProperty(PropertyName = \"notAfter\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public DateTime? NotAfter { get; set; } Property Value Type Description Nullable < DateTime > NotBefore The time after which the certificate stored in the secret named by this resource in spec.secretName is valid. Declaration [JsonProperty(PropertyName = \"notBefore\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public DateTime? NotBefore { get; set; } Property Value Type Description Nullable < DateTime > RenewalTime The time at which the certificate will be next renewed.If not set, no upcoming renewal is scheduled. Declaration [JsonProperty(PropertyName = \"renewalTime\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public DateTime? RenewalTime { get; set; } Property Value Type Description Nullable < DateTime > Revision Controls whether key usages should be present in the CertificateRequest. Declaration [JsonProperty(PropertyName = \"revision\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int? Revision { get; set; } Property Value Type Description Nullable < Int32 >"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.V1IssuerSpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.V1IssuerSpec.html",
    "title": "Class V1IssuerSpec | NeonKUBE documentation",
    "keywords": "Class V1IssuerSpec The kubernetes spec for a cert-manager Issuer. Inheritance Object V1IssuerSpec Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax public class V1IssuerSpec Constructors V1IssuerSpec() Constructor. Declaration public V1IssuerSpec() Properties Acme ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates. Declaration [JsonProperty(PropertyName = \"Acme\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public AcmeIssuer Acme { get; set; } Property Value Type Description AcmeIssuer Methods Validate() Declaration public void Validate()"
  },
  "neonkube/api/Neon.Kube.Resources.CertManager.X509Usages.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CertManager.X509Usages.html",
    "title": "Enum X509Usages | NeonKUBE documentation",
    "keywords": "Enum X509Usages X509Usages controls how private keys should be regenerated when a re-issuance is being processed. Namespace : Neon.Kube.Resources.CertManager Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(JsonStringEnumMemberConverter))] [JsonConverter(typeof(StringEnumConverter))] public enum X509Usages Fields Name Description Any Any CertSign Cert Sign ClientAuth Client Auth CodeSigning Code Signing ContentCommitment Content Commitment CrlSign Crl Sign DataEncipherment Data Encipherment DecipherOnly Decipher Only DigitalSignature Digital Signature EmailProtection Email Protection EncipherOnly Encipher Only IpsecEndSystem IPSEC End System IpsecTunnel IPSEC Tunnel IpsecUser IPSEC User. KeyAgreement Key Agreement KeyEncipherment Key Encipherment MicrosoftSgc Microsoft Sgc NetscapeSgc Netscape Sgc OcspSigning Ocsp Signing ServerAuth Server Auth Signing Signing SMIME S/MIME Timestamping Timestamping"
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.html",
    "title": "Namespace Neon.Kube.Resources.Cluster | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Resources.Cluster Classes TestStatus The node execute task status. V1NeonClusterOperator Specifies the neon-cluster-operator settings. V1NeonClusterOperator.OperatorSpec The node execute task specification. V1NeonClusterOperator.OperatorStatus The node execute task status. V1NeonClusterOperator.Updates The certificate update schedules. V1NeonClusterOperator.UpdateSpec The certificate update schedules. V1NeonContainerRegistry Describes an upstream container registry to be configured on each of the cluster nodes. V1NeonContainerRegistry.RegistrySpec The container registry specification. V1NeonDashboard Describes a Dashboard that will be accesible via the Neon Dashboard. V1NeonDashboard.NeonDashboardSpec The dashboard specification. V1NeonNodeTask Describes a task to be executed as a Bash script on a node by the neon-node-agent pod running on the target cluster node. note The node agent currently executes one node task at a time in no guaranteed order. V1NeonNodeTask.TaskSpec The node execute task specification. V1NeonNodeTask.TaskStatus The node execute task status. V1NeonSsoClient Specifies Neon SSO client settings. V1NeonSsoConnector Specifies Neon SSO client settings. V1NeonTestObject Used for unit testing Kubernetes clients. V1SsoClientSpec The SSO client specification. V1TestSpec The node execute task specification. Enums V1NeonNodeTask.Phase Enumerates the possible status of a V1NeonNodeTask ."
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.TestStatus.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.TestStatus.html",
    "title": "Class TestStatus | NeonKUBE documentation",
    "keywords": "Class TestStatus The node execute task status. Inheritance Object TestStatus Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax public class TestStatus Properties Timestamp Testing DateTime . Declaration public DateTime? Timestamp { get; set; } Property Value Type Description Nullable < DateTime >"
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonClusterOperator.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonClusterOperator.html",
    "title": "Class V1NeonClusterOperator | NeonKUBE documentation",
    "keywords": "Class V1NeonClusterOperator Specifies the neon-cluster-operator settings. Inheritance Object V1NeonClusterOperator Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"neonkube.io\", ApiVersion = \"v1alpha1\", Kind = \"NeonClusterOperator\", PluralName = \"neonclusteroperators\")] [EntityScope(EntityScope.Cluster)] public class V1NeonClusterOperator : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1NeonClusterOperator.OperatorSpec> Constructors V1NeonClusterOperator() Default constructor. Declaration public V1NeonClusterOperator() Fields KubeApiVersion Object API version. Declaration public const string KubeApiVersion = \"v1alpha1\" Field Value Type Description String KubeGroup Object API group. Declaration public const string KubeGroup = \"neonkube.io\" Field Value Type Description String KubeKind Object API kind. Declaration public const string KubeKind = \"NeonClusterOperator\" Field Value Type Description String KubePlural Object plural name. Declaration public const string KubePlural = \"neonclusteroperators\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec The spec. Declaration public V1NeonClusterOperator.OperatorSpec Spec { get; set; } Property Value Type Description V1NeonClusterOperator.OperatorSpec Status The status. Declaration public V1NeonClusterOperator.OperatorStatus Status { get; set; } Property Value Type Description V1NeonClusterOperator.OperatorStatus Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonClusterOperator.OperatorSpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonClusterOperator.OperatorSpec.html",
    "title": "Class V1NeonClusterOperator.OperatorSpec | NeonKUBE documentation",
    "keywords": "Class V1NeonClusterOperator.OperatorSpec The node execute task specification. Inheritance Object V1NeonClusterOperator.OperatorSpec Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax public class OperatorSpec Properties Message A test string. Declaration public string Message { get; set; } Property Value Type Description String Updates The cron schedule for updating node certificates. Declaration public V1NeonClusterOperator.Updates Updates { get; set; } Property Value Type Description V1NeonClusterOperator.Updates"
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonClusterOperator.OperatorStatus.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonClusterOperator.OperatorStatus.html",
    "title": "Class V1NeonClusterOperator.OperatorStatus | NeonKUBE documentation",
    "keywords": "Class V1NeonClusterOperator.OperatorStatus The node execute task status. Inheritance Object V1NeonClusterOperator.OperatorStatus Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax public class OperatorStatus Properties Timestamp Testing DateTime . Declaration public DateTime? Timestamp { get; set; } Property Value Type Description Nullable < DateTime >"
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonClusterOperator.Updates.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonClusterOperator.Updates.html",
    "title": "Class V1NeonClusterOperator.Updates | NeonKUBE documentation",
    "keywords": "Class V1NeonClusterOperator.Updates The certificate update schedules. Inheritance Object V1NeonClusterOperator.Updates Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax public class Updates Properties ContainerImages Update spec for container images. Declaration public V1NeonClusterOperator.UpdateSpec ContainerImages { get; set; } Property Value Type Description V1NeonClusterOperator.UpdateSpec ControlPlaneCertificates Control plane certificate update spec. Declaration public V1NeonClusterOperator.UpdateSpec ControlPlaneCertificates { get; set; } Property Value Type Description V1NeonClusterOperator.UpdateSpec NeonDesktopCertificate When the Neon Desktop certificate should be updated. Declaration public V1NeonClusterOperator.UpdateSpec NeonDesktopCertificate { get; set; } Property Value Type Description V1NeonClusterOperator.UpdateSpec NodeCaCertificates Node CA certificate update spec. Declaration public V1NeonClusterOperator.UpdateSpec NodeCaCertificates { get; set; } Property Value Type Description V1NeonClusterOperator.UpdateSpec SecurityPatches Update spec for security spec. Declaration public V1NeonClusterOperator.UpdateSpec SecurityPatches { get; set; } Property Value Type Description V1NeonClusterOperator.UpdateSpec Telemetry Update spec for telemetry. Declaration public V1NeonClusterOperator.UpdateSpec Telemetry { get; set; } Property Value Type Description V1NeonClusterOperator.UpdateSpec"
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonClusterOperator.UpdateSpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonClusterOperator.UpdateSpec.html",
    "title": "Class V1NeonClusterOperator.UpdateSpec | NeonKUBE documentation",
    "keywords": "Class V1NeonClusterOperator.UpdateSpec The certificate update schedules. Inheritance Object V1NeonClusterOperator.UpdateSpec Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax public class UpdateSpec Properties Enabled Specifies whether this update is enabled. Declaration public bool Enabled { get; set; } Property Value Type Description Boolean Schedule The update schedule. This is a represented as a cron expression. Cron expressions are made up of seven sub-expressions that describe the details of the schedule. The sub expressions are: Seconds Minutes Hours Day-of-Month Month Day-of-Week Year (optional) An example of a complete cron expression is 0 0 15 ? * MON which means every monday at 3pm. Declaration public string Schedule { get; set; } Property Value Type Description String Remarks For the full documentation see: https://www.quartz-scheduler.net/documentation/quartz-3.x/tutorial/crontriggers.html#cron-expressions"
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonContainerRegistry.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonContainerRegistry.html",
    "title": "Class V1NeonContainerRegistry | NeonKUBE documentation",
    "keywords": "Class V1NeonContainerRegistry Describes an upstream container registry to be configured on each of the cluster nodes. Inheritance Object V1NeonContainerRegistry Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"neonkube.io\", ApiVersion = \"v1alpha1\", Kind = \"NeonContainerRegistry\", PluralName = \"neoncontainerregistries\")] [EntityScope(EntityScope.Cluster)] public class V1NeonContainerRegistry : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1NeonContainerRegistry.RegistrySpec> Remarks The neon-node-agent pods running as a daemonset on all cluster nodes monitor the V1NeonContainerRegistry resources in the neon-system namespace. Constructors V1NeonContainerRegistry() Default constructor. Declaration public V1NeonContainerRegistry() Fields KubeApiVersion Object API version. Declaration public const string KubeApiVersion = \"v1alpha1\" Field Value Type Description String KubeGroup Object API group. Declaration public const string KubeGroup = \"neonkube.io\" Field Value Type Description String KubeKind Object API kind. Declaration public const string KubeKind = \"NeonContainerRegistry\" Field Value Type Description String KubePlural Object plural name. Declaration public const string KubePlural = \"neoncontainerregistries\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec The spec. Declaration public V1NeonContainerRegistry.RegistrySpec Spec { get; set; } Property Value Type Description V1NeonContainerRegistry.RegistrySpec Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonContainerRegistry.RegistrySpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonContainerRegistry.RegistrySpec.html",
    "title": "Class V1NeonContainerRegistry.RegistrySpec | NeonKUBE documentation",
    "keywords": "Class V1NeonContainerRegistry.RegistrySpec The container registry specification. Inheritance Object V1NeonContainerRegistry.RegistrySpec Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax public class RegistrySpec Properties Blocked Indicates that access to the registry is to be blocked. This defaults to false . Declaration public bool Blocked { get; set; } Property Value Type Description Boolean Insecure Indicates that the registry may be accessed via HTTP. This defaults to false . Declaration public bool Insecure { get; set; } Property Value Type Description Boolean Location Optionally enables registry redirection. When specified, this indicates that images specified to be pulled from Prefix will actually be pulled from Location instead. This is a nice way to be able to reuse manifests and Helm charts such that they pull images from an alternate registry without modification. This defaults to null . Declaration [RegularExpression(\"^(\\\\*\\\\.)?([a-zA-Z0-9-_]+\\\\.)*([a-zA-Z0-9-_]+)(/[a-zA-Z0-9-\\\\._~\\\\[\\\\]@\\\\!&'\\\\(\\\\)\\\\*+,;%=\\\\$]+)*$\")] public string Location { get; set; } Property Value Type Description String Password Optionally specifies the password to be used to authenticate against the upstream registry. Declaration public string Password { get; set; } Property Value Type Description String Prefix The target registry's hostname and optional path. This is required. note The prefix may include a leading \"*\" wildcard character for subdomain matching. Declaration [Required] [RegularExpression(\"^(\\\\*.)?^(\\\\*\\\\.)?([a-zA-Z0-9-_]+\\\\.)*([a-zA-Z0-9-_]+)(/[a-zA-Z0-9-\\\\._~\\\\[\\\\]@\\\\!&'\\\\(\\\\)\\\\*+,;%=\\\\$]+)*$\")] public string Prefix { get; set; } Property Value Type Description String SearchOrder Optionally indicates that the registry will be searched for image pulls that don't specify a registry host/prefix. This is often used to specify Docker Hub docker.io as the default prefix since many tutotials and Helm charts assume this default due to the popularity of Docker. Specify a non-negative number here to enable this. Registries will be added to the search list in ascending order by SearchOrder and when two registries have the same order value, in ascending order by Prefix (lowercase). Declaration public int SearchOrder { get; set; } Property Value Type Description Int32 Username Optionally specifies the username to be used to authenticate against the upstream registry. Declaration public string Username { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonDashboard.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonDashboard.html",
    "title": "Class V1NeonDashboard | NeonKUBE documentation",
    "keywords": "Class V1NeonDashboard Describes a Dashboard that will be accesible via the Neon Dashboard. Inheritance Object V1NeonDashboard Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"neonkube.io\", ApiVersion = \"v1alpha1\", Kind = \"NeonDashboard\", PluralName = \"neondashboards\")] [EntityScope(EntityScope.Cluster)] public class V1NeonDashboard : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1NeonDashboard.NeonDashboardSpec> Constructors V1NeonDashboard() Default constructor. Declaration public V1NeonDashboard() Fields KubeApiVersion Object API version. Declaration public const string KubeApiVersion = \"v1alpha1\" Field Value Type Description String KubeGroup Object API group. Declaration public const string KubeGroup = \"neonkube.io\" Field Value Type Description String KubeKind Object API kind. Declaration public const string KubeKind = \"NeonDashboard\" Field Value Type Description String KubePlural Object plural name. Declaration public const string KubePlural = \"neondashboards\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec The spec. Declaration public V1NeonDashboard.NeonDashboardSpec Spec { get; set; } Property Value Type Description V1NeonDashboard.NeonDashboardSpec Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonDashboard.NeonDashboardSpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonDashboard.NeonDashboardSpec.html",
    "title": "Class V1NeonDashboard.NeonDashboardSpec | NeonKUBE documentation",
    "keywords": "Class V1NeonDashboard.NeonDashboardSpec The dashboard specification. Inheritance Object V1NeonDashboard.NeonDashboardSpec Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax public class NeonDashboardSpec Properties DisplayName The display name. This is what will show up in the Neon Dashboard. Declaration public string DisplayName { get; set; } Property Value Type Description String DisplayOrder Optionally indicates that the order in which the dashboard will be displayed. Declaration public int DisplayOrder { get; set; } Property Value Type Description Int32 Enabled Optionally indicates whether the dashboard is enabled or disabled. Declaration public bool Enabled { get; set; } Property Value Type Description Boolean Url The target dashboard's Url. This is required. Declaration [Required] [RegularExpression(\"https?:\\\\/\\\\/(www\\\\.)?[-a-zA-Z0-9@:%._\\\\+~#=]{1,256}\\\\.[a-zA-Z0-9()]{1,6}\\\\b([-a-zA-Z0-9()@:%_\\\\+.~#?&//=]*)\")] public string Url { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonNodeTask.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonNodeTask.html",
    "title": "Class V1NeonNodeTask | NeonKUBE documentation",
    "keywords": "Class V1NeonNodeTask Describes a task to be executed as a Bash script on a node by the neon-node-agent pod running on the target cluster node. note The node agent currently executes one node task at a time in no guaranteed order. Inheritance Object V1NeonNodeTask Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"neonkube.io\", ApiVersion = \"v1alpha1\", Kind = \"NeonNodeTask\", PluralName = \"neonnodetasks\")] [EntityScope(EntityScope.Cluster)] public class V1NeonNodeTask : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1NeonNodeTask.TaskSpec> Remarks neonKUBE clusters deploy the neon-node-agent as a daemonset such that this is running on every node in the cluster. This runs as a privileged pod and has full access to the host node's file system, network, and processes and is typically used for low-level node maintainance activities. NODETASK SCRIPTS Node tasks are simply Bash scripts executed on the node by the neon-node-agent daemon running on the node. These scripts will be written to the node's file system like: /var/run/neonkube/node-agent/nodetasks/GUID/task.sh where GUID is a base-36 encoded GUID generated and assigned to the task by the agent. neon-node-agent adds some variable assignments to the beginning of the deployed script before executing it: $NODE_ROOT Identifies where the host node's file system is mounted to the neon-node-agent container. Since the script is executing in the context of the container, your script will need to use this to reference files and directories on the host node. This currently returns /mnt/host but you should always use this variable instead of hardcoding the path. note This does not include a terminating \"/\" $SCRIPT_DIR Set to the directory where the script is executing (like /var/run/neonkube/node-agent/nodetasks/GUID . Your scripts should generally store any temporary files here so they will be removed automaticaly by the node agent. note This does not include a terminating \"/\" LIFECYCLE Here is the description of a NodeTask lifecycle: neon-cluster-operator or other entity determines that a script needs to be run on a specific node and creates a V1NeonNodeTask specifiying the name of the target node as well as the Bash script to be executed. neon-node-agent is running as a daemonset on all cluster nodes and each instance is watching for node tasks assigned to its node. When a neon-node-agent sees a pending V1NeonNodeTask assigned to the node it's managing, the agent will assign its unique ID to the task status, set the StartTimestamp to the current time and change the state to Running . The agent will assign a new UUID to the task and save this in the node task status. This UUID will be used to name the script file persisted to the host and will also be used to identify the The agent will then execute the script on the node, persisting the process ID to the node task status along with the command line used to execute the script. When the script finishes, the agent will capture its exit code and standard output and error streams as text. The command execution time will be limited by TimeoutSeconds . When the command completes without timing out, the agent will set its state to Success , set FinishTimestamp to the current time and ExitCode , Output and Error to the command results. When the command execution timesout, the agent will kill the process and set the node task state to Timeout and set FinishTimestamp to the time when the timeout was detected. neon-node-agents also look for running tasks that are assigned to its node but include a AgentId that doesn't match the current agent's ID. This can happen when the previous agent pod started executing the command and then was terminated before the command completed. The agent will attempt to locate the running pod by its command line and process ID and terminate when it exists and then set the state to Orphaned and FinishTimestamp to the current time. Finally, neon-node-agent periodically looks for Bash scripts that don't have corresponding node tasks and will delete these so they don't accumulate. This means the a task's script will typically be deleted shortly after the task retention period has been exceeded. neon-cluster-operator also monitors these tasks. It will remove tasks assigned to nodes that don't exist. Constructors V1NeonNodeTask() Default constructor. Declaration public V1NeonNodeTask() Fields KubeApiVersion Object API version. Declaration public const string KubeApiVersion = \"v1alpha1\" Field Value Type Description String KubeGroup Object API group. Declaration public const string KubeGroup = \"neonkube.io\" Field Value Type Description String KubeKind Object API kind. Declaration public const string KubeKind = \"NeonNodeTask\" Field Value Type Description String KubePlural Object plural name. Declaration public const string KubePlural = \"neonnodetasks\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec The spec. Declaration public V1NeonNodeTask.TaskSpec Spec { get; set; } Property Value Type Description V1NeonNodeTask.TaskSpec Status The spec. Declaration public V1NeonNodeTask.TaskStatus Status { get; set; } Property Value Type Description V1NeonNodeTask.TaskStatus Methods Validate() Verifies that the resource properties are valid. Declaration public void Validate() Exceptions Type Condition CustomResourceException Thrown when the resource is not valid. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonNodeTask.Phase.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonNodeTask.Phase.html",
    "title": "Enum V1NeonNodeTask.Phase | NeonKUBE documentation",
    "keywords": "Enum V1NeonNodeTask.Phase Enumerates the possible status of a V1NeonNodeTask . Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax public enum Phase Fields Name Description Failed The task executed but failed with a non-zero exit code. New The task has been newly submitted. neon-node-agent will set this to Pending when it sees the task for the first time. Orphaned The task started executing on one neon-node-agent pod which crashed or was otherwise terminated and a newly scheduled pod detected this sutuation. Pending The task is waiting to be executed by the neon-node-agent . Running The task is currently running. Success The task executed successfully with a zero exit code. Tardy The task did not execute before its StartBeforeTimestamp property. Timeout The task timed out while executing."
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonNodeTask.TaskSpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonNodeTask.TaskSpec.html",
    "title": "Class V1NeonNodeTask.TaskSpec | NeonKUBE documentation",
    "keywords": "Class V1NeonNodeTask.TaskSpec The node execute task specification. Inheritance Object V1NeonNodeTask.TaskSpec Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax public class TaskSpec Properties BashScript Specifies the Bash script to be executed on the target node. Declaration [Required] public string BashScript { get; set; } Property Value Type Description String CaptureOutput Controls whether the command output is to be captured. This defaults to true . note V1NeonNodeTask is designed to capture command output as UTF-8 or ASCII text. Binary output or other text encodings are not supported. You should set this to false for commands with unsupported output or when the command output may include secrets. Declaration [Required] public bool CaptureOutput { get; set; } Property Value Type Description Boolean Node Identifies the target node where the command will be executed. Declaration [Required] public string Node { get; set; } Property Value Type Description String RetentionSeconds Specifies the maximum time in seconds to retain the task after it has been ended, for any reason. neon-cluster-operator will add this to FinishTimestamp to determine when it should delete the task. This defaults to 10 minutes . Declaration [Required] public int RetentionSeconds { get; set; } Property Value Type Description Int32 StartAfterTimestamp Optionally specifies that the task should be started after a specific time. This is intended to make it easier for operators to schedule tasks across the cluster nodes while reducing the chance that all of the tasks will execute at the same time. note This property only guarentees that the task will be started after the specified time, not at that time. Task execution may happen some minutes afterwards. Declaration [JsonConverter(typeof(JsonNullableDateTimeConverter))] public DateTime? StartAfterTimestamp { get; set; } Property Value Type Description Nullable < DateTime > StartBeforeTimestamp Optionally specifies the time after which the task should not be executed. This is useful for ensuring that tasks don't accumulate for some reason and then perhaps, execute all at once. Declaration [JsonConverter(typeof(JsonNullableDateTimeConverter))] public DateTime? StartBeforeTimestamp { get; set; } Property Value Type Description Nullable < DateTime > TimeoutSeconds Specifies the maximum time the command will be allowed to execute in seconds. Defaults to 5 minutes . Declaration [Required] public int TimeoutSeconds { get; set; } Property Value Type Description Int32 Methods Validate() Verifies that the specification properties are valid. Declaration public void Validate() Exceptions Type Condition CustomResourceException Thrown when the resource is not valid."
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonNodeTask.TaskStatus.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonNodeTask.TaskStatus.html",
    "title": "Class V1NeonNodeTask.TaskStatus | NeonKUBE documentation",
    "keywords": "Class V1NeonNodeTask.TaskStatus The node execute task status. Inheritance Object V1NeonNodeTask.TaskStatus Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax public class TaskStatus Properties AgentId The globally unique ID of the neon-node-agent instance that executed the command. This is used to detect tasks that started executing but didn't finish before node agent crashed or was otherwise terminated, providing a way for the next node-agent to clean things up. Declaration public string AgentId { get; set; } Property Value Type Description String CommandLine The command line invoked for the task. This is used for detecting orphaned tasks. Declaration public string CommandLine { get; set; } Property Value Type Description String Error The text written to standard error by the command. Declaration public string Error { get; set; } Property Value Type Description String ExitCode The exit code returned by the command. Declaration public int ExitCode { get; set; } Property Value Type Description Int32 FinishTimestamp Indicates when the task finished executing. Declaration [JsonConverter(typeof(JsonNullableDateTimeConverter))] public DateTime? FinishTimestamp { get; set; } Property Value Type Description Nullable < DateTime > Output The text written to standard output by the command. Declaration public string Output { get; set; } Property Value Type Description String Phase Indicates the current task phase. This defaults to New . Declaration [JsonConverter(typeof(JsonStringEnumMemberConverter))] public V1NeonNodeTask.Phase Phase { get; set; } Property Value Type Description V1NeonNodeTask.Phase ProcessId Set to the ID of the task process while its running. Declaration public int? ProcessId { get; set; } Property Value Type Description Nullable < Int32 > RunId Set to a UUID identifying the task execution. This will be used to name the Bash script when persisted to the host node as well as to help identify the process when it's running. Declaration public string RunId { get; set; } Property Value Type Description String RuntimeSeconds Set to the task execution time. Declaration public int RuntimeSeconds { get; set; } Property Value Type Description Int32 StartTimestamp Indicates when the task started executing. Declaration [JsonConverter(typeof(JsonNullableDateTimeConverter))] public DateTime? StartTimestamp { get; set; } Property Value Type Description Nullable < DateTime > Methods Validate() Verifies that the status properties are valid. Declaration public void Validate() Exceptions Type Condition CustomResourceException Thrown when the resource is not valid."
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonSsoClient.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonSsoClient.html",
    "title": "Class V1NeonSsoClient | NeonKUBE documentation",
    "keywords": "Class V1NeonSsoClient Specifies Neon SSO client settings. Inheritance Object V1NeonSsoClient Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"neonkube.io\", ApiVersion = \"v1alpha1\", Kind = \"NeonSsoClient\", PluralName = \"neonssoclients\")] [EntityScope(EntityScope.Cluster)] public class V1NeonSsoClient : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1SsoClientSpec> Constructors V1NeonSsoClient() Default constructor. Declaration public V1NeonSsoClient() Fields KubeApiVersion Object API version. Declaration public const string KubeApiVersion = \"v1alpha1\" Field Value Type Description String KubeGroup Object API group. Declaration public const string KubeGroup = \"neonkube.io\" Field Value Type Description String KubeKind Object API kind. Declaration public const string KubeKind = \"NeonSsoClient\" Field Value Type Description String KubePlural Object plural name. Declaration public const string KubePlural = \"neonssoclients\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec The spec. Declaration public V1SsoClientSpec Spec { get; set; } Property Value Type Description V1SsoClientSpec Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonSsoConnector.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonSsoConnector.html",
    "title": "Class V1NeonSsoConnector | NeonKUBE documentation",
    "keywords": "Class V1NeonSsoConnector Specifies Neon SSO client settings. Inheritance Object V1NeonSsoConnector Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"neonkube.io\", ApiVersion = \"v1alpha1\", Kind = \"NeonSsoConnector\", PluralName = \"neonssoconnectors\")] [EntityScope(EntityScope.Cluster)] public class V1NeonSsoConnector : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<IV1DexConnector> Constructors V1NeonSsoConnector() Default constructor. Declaration public V1NeonSsoConnector() Fields KubeApiVersion Object API version. Declaration public const string KubeApiVersion = \"v1alpha1\" Field Value Type Description String KubeGroup Object API group. Declaration public const string KubeGroup = \"neonkube.io\" Field Value Type Description String KubeKind Object API kind. Declaration public const string KubeKind = \"NeonSsoConnector\" Field Value Type Description String KubePlural Object plural name. Declaration public const string KubePlural = \"neonssoconnectors\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec The spec. Declaration [JsonConverter(typeof(DexConnectorJsonConverter))] public IV1DexConnector Spec { get; set; } Property Value Type Description IV1DexConnector Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonTestObject.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1NeonTestObject.html",
    "title": "Class V1NeonTestObject | NeonKUBE documentation",
    "keywords": "Class V1NeonTestObject Used for unit testing Kubernetes clients. Inheritance Object V1NeonTestObject Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"neonkube.io\", ApiVersion = \"v1alpha1\", Kind = \"NeonTestObject\", PluralName = \"neontestobjects\")] [EntityScope(EntityScope.Cluster)] public class V1NeonTestObject : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1TestSpec>, IValidate Constructors V1NeonTestObject() Default constructor. Declaration public V1NeonTestObject() Fields KubeApiVersion Object API version. Declaration public const string KubeApiVersion = \"v1alpha1\" Field Value Type Description String KubeGroup Object API group. Declaration public const string KubeGroup = \"neonkube.io\" Field Value Type Description String KubeKind Object API kind. Declaration public const string KubeKind = \"NeonTestObject\" Field Value Type Description String KubePlural Object plural name. Declaration public const string KubePlural = \"neontestobjects\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec The spec. Declaration public V1TestSpec Spec { get; set; } Property Value Type Description V1TestSpec Status The spec. Declaration public TestStatus Status { get; set; } Property Value Type Description TestStatus Methods Validate() Declaration public void Validate() Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1SsoClientSpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1SsoClientSpec.html",
    "title": "Class V1SsoClientSpec | NeonKUBE documentation",
    "keywords": "Class V1SsoClientSpec The SSO client specification. Inheritance Object V1SsoClientSpec Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax public class V1SsoClientSpec Properties Id The client ID used to identify the client. Declaration public string Id { get; set; } Property Value Type Description String LogoUrl Logo used when displaying this client to the end user. Declaration public string LogoUrl { get; set; } Property Value Type Description String Name Name used when displaying this client to the end user. Declaration public string Name { get; set; } Property Value Type Description String Public Public clients must use either use a redirectURL 127.0.0.1:X or \"urn:ietf:wg:oauth:2.0:oob\" Declaration public bool Public { get; set; } Property Value Type Description Boolean RedirectUris A registered set of redirect URIs. When redirecting from dex to the client, the URI requested to redirect to MUST match one of these values, unless the client is \"public\". Declaration public List<string> RedirectUris { get; set; } Property Value Type Description List < String > Secret The client Secret used to identify the client. Declaration public string Secret { get; set; } Property Value Type Description String TrustedPeers TrustedPeers are a list of peers which can issue tokens on this client's behalf using the dynamic \"oauth2:server:client_id:(client_id)\" scope. If a peer makes such a request, this client's ID will appear as the ID Token's audience. Clients inherently trust themselves. Declaration public List<string> TrustedPeers { get; set; } Property Value Type Description List < String >"
  },
  "neonkube/api/Neon.Kube.Resources.Cluster.V1TestSpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Cluster.V1TestSpec.html",
    "title": "Class V1TestSpec | NeonKUBE documentation",
    "keywords": "Class V1TestSpec The node execute task specification. Inheritance Object V1TestSpec Namespace : Neon.Kube.Resources.Cluster Assembly : Neon.Kube.Resources.dll Syntax public class V1TestSpec Properties Message A test string. Declaration public string Message { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.CustomResourceException.html": {
    "href": "neonkube/api/Neon.Kube.Resources.CustomResourceException.html",
    "title": "Class CustomResourceException | NeonKUBE documentation",
    "keywords": "Class CustomResourceException Thrown for an invalid custom resource. Inheritance Object Exception CustomResourceException Namespace : Neon.Kube.Resources Assembly : Neon.Kube.Resources.dll Syntax public class CustomResourceException : Exception, ISerializable Constructors CustomResourceException() Default constructor. Declaration public CustomResourceException() CustomResourceException(String, Exception) Constructs and instance with a message and an optional inner exception. Declaration public CustomResourceException(string message, Exception innerException = null) Parameters Type Name Description String message The message. Exception innerException The optional inner exception."
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexConfig.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexConfig.html",
    "title": "Class DexConfig | NeonKUBE documentation",
    "keywords": "Class DexConfig Dex configuration model. Inheritance Object DexConfig Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexConfig Constructors DexConfig() Constructor. Declaration public DexConfig() Properties Connectors The storage configuration determines where dex stores its state. Supported options include SQL flavors and Kubernetes third party resources. See the documentation ( https://dexidp.io/docs/storage/ ) for further information. Declaration [JsonProperty(PropertyName = \"Connectors\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"connectors\", ApplyNamingConventions = false)] public List<IV1DexConnector> Connectors { get; set; } Property Value Type Description List < IV1DexConnector > EnablePasswordDb Let dex keep a list of passwords which can be used to login to dex. Declaration [JsonProperty(PropertyName = \"EnablePasswordDb\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"enablePasswordDb\", ApplyNamingConventions = false)] public bool? EnablePasswordDb { get; set; } Property Value Type Description Nullable < Boolean > Grpc This block to enable the gRPC API. This values MUST be different from the HTTP endpoints. Declaration [JsonProperty(PropertyName = \"Grpc\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"grpc\", ApplyNamingConventions = false)] public DexGrpcConfig Grpc { get; set; } Property Value Type Description DexGrpcConfig Issuer The base path of dex and the external name of the OpenID Connect service. This is the canonical URL that all clients MUST use to refer to dex. If a path is provided, dex's HTTP service will listen at a non-root URL. Declaration [JsonProperty(PropertyName = \"Issuer\", Required = Required.Always)] [YamlMember(Alias = \"issuer\", ApplyNamingConventions = false)] public string Issuer { get; set; } Property Value Type Description String Logger Options for controlling the logger. Declaration [JsonProperty(PropertyName = \"Logger\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"logger\", ApplyNamingConventions = false)] public DexLogConfig Logger { get; set; } Property Value Type Description DexLogConfig Oauth2 Options for Oauth2 related settings. Declaration [JsonProperty(PropertyName = \"Oauth2\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"oauth2\", ApplyNamingConventions = false)] public DexOauth2Config Oauth2 { get; set; } Property Value Type Description DexOauth2Config StaticPasswords A static list of passwords to login the end user. By identifying here, dex won't look in its underlying storage for passwords. note If this option isn't chosen users may be added through the gRPC API. Declaration [JsonProperty(PropertyName = \"StaticPasswords\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"staticPasswords\", ApplyNamingConventions = false)] public List<DexStaticUser> StaticPasswords { get; set; } Property Value Type Description List < DexStaticUser > Storage The storage configuration determines where dex stores its state. Supported options include SQL flavors and Kubernetes third party resources. See the documentation ( https://dexidp.io/docs/storage/ ) for further information. Declaration [JsonProperty(PropertyName = \"Storage\", Required = Required.Always)] [YamlMember(Alias = \"storage\", ApplyNamingConventions = false)] public DexStorage Storage { get; set; } Property Value Type Description DexStorage Telemetry Configuration for telemetry. Declaration [JsonProperty(PropertyName = \"Telemetry\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"telemetry\", ApplyNamingConventions = false)] public DexTelemetryConfig Telemetry { get; set; } Property Value Type Description DexTelemetryConfig Web Configuration for the http server. Declaration [JsonProperty(PropertyName = \"Web\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"web\", ApplyNamingConventions = false)] public DexWebConfig Web { get; set; } Property Value Type Description DexWebConfig"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexConnector.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexConnector.html",
    "title": "Class DexConnector | NeonKUBE documentation",
    "keywords": "Class DexConnector Configuration for OIDC connectors. Inheritance Object DexConnector Implements IV1DexConnector Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(DexConnectorJsonConverter))] public class DexConnector : IV1DexConnector Constructors DexConnector() Constructor. Declaration public DexConnector() Properties Config Placeholder. Declaration public object Config { get; set; } Property Value Type Description Object Id Declaration public string Id { get; set; } Property Value Type Description String Name Declaration public string Name { get; set; } Property Value Type Description String Type Declaration [JsonConverter(typeof(JsonStringEnumMemberConverter))] public DexConnectorType Type { get; set; } Property Value Type Description DexConnectorType Implements IV1DexConnector"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexConnector-1.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexConnector-1.html",
    "title": "Class DexConnector<T> | NeonKUBE documentation",
    "keywords": "Class DexConnector<T> Configuration for OIDC connectors. Inheritance Object DexConnector<T> Implements IDexConnector <T> IV1DexConnector Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax [JsonSchemaAbstract] [JsonConverter(typeof(DexConnectorJsonConverter))] public class DexConnector<T> : IDexConnector<T>, IV1DexConnector where T : class Type Parameters Name Description T Constructors DexConnector() Constructor. Declaration public DexConnector() Properties Config Connector specific config. information. Declaration [JsonProperty(PropertyName = \"Config\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"config\", ApplyNamingConventions = false)] [JsonSchemaExtensionData(\"x-kubernetes-preserve-unknown-fields\", true)] public T Config { get; set; } Property Value Type Description T Id Declaration public string Id { get; set; } Property Value Type Description String Name Declaration public string Name { get; set; } Property Value Type Description String Type Declaration [JsonConverter(typeof(JsonStringEnumMemberConverter))] public DexConnectorType Type { get; set; } Property Value Type Description DexConnectorType Explicit Interface Implementations IV1DexConnector.Config Declaration object IV1DexConnector.Config { get; set; } Returns Type Description Object Implements IDexConnector<T> IV1DexConnector"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexConnectorConverter.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexConnectorConverter.html",
    "title": "Class DexConnectorConverter | NeonKUBE documentation",
    "keywords": "Class DexConnectorConverter Converter for Dex connectors. Inheritance Object Newtonsoft.Json.JsonConverter DexConnectorConverter Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexConnectorConverter : JsonConverter Methods CanConvert(Type) Returns whether the connectio can be converted. Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description Type objectType Returns Type Description Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Reads the json. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader Type objectType Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Writes json. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexConnectorType.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexConnectorType.html",
    "title": "Enum DexConnectorType | NeonKUBE documentation",
    "keywords": "Enum DexConnectorType Enumerates Dex storage types. Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(StringEnumConverter))] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum DexConnectorType Fields Name Description Ldap LDAP Oidc OIDC"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexExpiryConfig.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexExpiryConfig.html",
    "title": "Class DexExpiryConfig | NeonKUBE documentation",
    "keywords": "Class DexExpiryConfig Configuration for token expiration. Inheritance Object DexExpiryConfig Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexExpiryConfig Constructors DexExpiryConfig() Constructor. Declaration public DexExpiryConfig() Properties DeviceRequests Device request expiration timeout. Declaration [JsonProperty(PropertyName = \"DeviceRequests\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"deviceRequests\", ApplyNamingConventions = false)] public string DeviceRequests { get; set; } Property Value Type Description String IdTokens ID Token expiration timeout. Declaration [JsonProperty(PropertyName = \"IdTokens\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"idTokens\", ApplyNamingConventions = false)] public string IdTokens { get; set; } Property Value Type Description String RefreshTokens Refresh token config. Declaration [JsonProperty(PropertyName = \"RefreshTokens\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"refreshTokens\", ApplyNamingConventions = false)] public DexRefreshTokenConfig RefreshTokens { get; set; } Property Value Type Description DexRefreshTokenConfig SigningKeys Signing keys expiration timeout. Declaration [JsonProperty(PropertyName = \"SigningKeys\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"signingKeys\", ApplyNamingConventions = false)] public string SigningKeys { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexFrontendConfig.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexFrontendConfig.html",
    "title": "Class DexFrontendConfig | NeonKUBE documentation",
    "keywords": "Class DexFrontendConfig Configuration for the Dex Frontend. Inheritance Object DexFrontendConfig Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexFrontendConfig Constructors DexFrontendConfig() Constructor. Declaration public DexFrontendConfig() Properties Dir Directory. information. Declaration [JsonProperty(PropertyName = \"Dir\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"dir\", ApplyNamingConventions = false)] public string Dir { get; set; } Property Value Type Description String Issuer Issuer name. Declaration [JsonProperty(PropertyName = \"Issuer\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"issuer\", ApplyNamingConventions = false)] public string Issuer { get; set; } Property Value Type Description String LogoUrl Logo url ref. Declaration [JsonProperty(PropertyName = \"LogoUrl\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"logoUrl\", ApplyNamingConventions = false)] public string LogoUrl { get; set; } Property Value Type Description String Theme Dex theme information. Declaration [JsonProperty(PropertyName = \"Theme\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"theme\", ApplyNamingConventions = false)] public string Theme { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexGrpcConfig.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexGrpcConfig.html",
    "title": "Class DexGrpcConfig | NeonKUBE documentation",
    "keywords": "Class DexGrpcConfig Configuration GRPC endpoint. Inheritance Object DexGrpcConfig Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexGrpcConfig Constructors DexGrpcConfig() Constructor. Declaration public DexGrpcConfig() Properties Addr Http Endpoint. Declaration [JsonProperty(PropertyName = \"Addr\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"addr\", ApplyNamingConventions = false)] public string Addr { get; set; } Property Value Type Description String TlsCert Reference to TLS certificate file. information. Declaration [JsonProperty(PropertyName = \"TlsCert\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"tlsCert\", ApplyNamingConventions = false)] public string TlsCert { get; set; } Property Value Type Description String TlsClientCA Reference to TLS client CA file. Declaration [JsonProperty(PropertyName = \"TlsClientCA\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"tlsClientCA\", ApplyNamingConventions = false)] public string TlsClientCA { get; set; } Property Value Type Description String TlsKey Reference to TLS certificate key file. information. Declaration [JsonProperty(PropertyName = \"TlsKey\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"tlsKey\", ApplyNamingConventions = false)] public string TlsKey { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexLdapConfig.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexLdapConfig.html",
    "title": "Class DexLdapConfig | NeonKUBE documentation",
    "keywords": "Class DexLdapConfig Configuration for backend connectors. Inheritance Object DexLdapConfig Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexLdapConfig Constructors DexLdapConfig() Constructor. Declaration public DexLdapConfig() Properties BindDN Bind DN information. Declaration [JsonProperty(PropertyName = \"BindDN\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"bindDN\", ApplyNamingConventions = false)] public string BindDN { get; set; } Property Value Type Description String BindPW Bind Password. information. Declaration [JsonProperty(PropertyName = \"BindPW\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"bindPW\", ApplyNamingConventions = false)] public string BindPW { get; set; } Property Value Type Description String GroupSearch Group search config. information. Declaration [JsonProperty(PropertyName = \"GroupSearch\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"groupSearch\", ApplyNamingConventions = false)] public DexLdapSearch GroupSearch { get; set; } Property Value Type Description DexLdapSearch Host Ldap Host. Declaration [JsonProperty(PropertyName = \"Host\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"host\", ApplyNamingConventions = false)] public string Host { get; set; } Property Value Type Description String InsecureNoSSL Whether to use SSL. Declaration [JsonProperty(PropertyName = \"InsecureNoSSL\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"insecureNoSSL\", ApplyNamingConventions = false)] public bool? InsecureNoSSL { get; set; } Property Value Type Description Nullable < Boolean > InsecureSkipVerify Whether to use skip verification for insecure requests. Declaration [JsonProperty(PropertyName = \"InsecureSkipVerify\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"insecureSkipVerify\", ApplyNamingConventions = false)] public bool? InsecureSkipVerify { get; set; } Property Value Type Description Nullable < Boolean > RootCA Root CA reference. information. Declaration [JsonProperty(PropertyName = \"RootCA\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"rootCA\", ApplyNamingConventions = false)] public string RootCA { get; set; } Property Value Type Description String UsernamePrompt Username prompt. information. Declaration [JsonProperty(PropertyName = \"UsernamePrompt\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"usernamePrompt\", ApplyNamingConventions = false)] public string UsernamePrompt { get; set; } Property Value Type Description String UserSearch User search config. information. Declaration [JsonProperty(PropertyName = \"UserSearch\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"userSearch\", ApplyNamingConventions = false)] public DexLdapSearch UserSearch { get; set; } Property Value Type Description DexLdapSearch"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexLdapSearch.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexLdapSearch.html",
    "title": "Class DexLdapSearch | NeonKUBE documentation",
    "keywords": "Class DexLdapSearch Configuration for backend connectors. Inheritance Object DexLdapSearch Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexLdapSearch Constructors DexLdapSearch() Constructor. Declaration public DexLdapSearch() Properties BaseDN Base search DN Declaration [JsonProperty(PropertyName = \"BaseDN\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"baseDN\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string BaseDN { get; set; } Property Value Type Description String EmailAttr The Email attribute name on the LDAP server. Declaration [JsonProperty(PropertyName = \"EmailAttr\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"emailAttr\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string EmailAttr { get; set; } Property Value Type Description String Filter User search filter Declaration [JsonProperty(PropertyName = \"Filter\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"filter\", SerializeAs = typeof(int), ScalarStyle = ScalarStyle.DoubleQuoted, ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string Filter { get; set; } Property Value Type Description String IdAttr The ID attribute name on the LDAP server. Declaration [JsonProperty(PropertyName = \"IdAttr\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"idAttr\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string IdAttr { get; set; } Property Value Type Description String NameAttr The name attribute name on the LDAP server. Declaration [JsonProperty(PropertyName = \"NameAttr\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"nameAttr\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string NameAttr { get; set; } Property Value Type Description String UserMatchers User matching settings. Declaration [JsonProperty(PropertyName = \"UserMatchers\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"userMatchers\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public List<DexUserMatcher> UserMatchers { get; set; } Property Value Type Description List < DexUserMatcher > Username The username attribute name on the LDAP server. Declaration [JsonProperty(PropertyName = \"Username\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"username\", ApplyNamingConventions = false, DefaultValuesHandling = DefaultValuesHandling.OmitNull)] public string Username { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexLogConfig.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexLogConfig.html",
    "title": "Class DexLogConfig | NeonKUBE documentation",
    "keywords": "Class DexLogConfig Dex Logging configuration. Inheritance Object DexLogConfig Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexLogConfig Constructors DexLogConfig() Constructor. Declaration public DexLogConfig() Properties Format Logformat. Valid options are text or json. Declaration [JsonProperty(PropertyName = \"Format\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"format\", ApplyNamingConventions = false)] public string Format { get; set; } Property Value Type Description String Level Log Level. Declaration [JsonProperty(PropertyName = \"Level\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"level\", ApplyNamingConventions = false)] public string Level { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexOauth2Config.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexOauth2Config.html",
    "title": "Class DexOauth2Config | NeonKUBE documentation",
    "keywords": "Class DexOauth2Config Dex Oauth2 configuration model. Inheritance Object DexOauth2Config Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexOauth2Config Constructors DexOauth2Config() Constructor. Declaration public DexOauth2Config() Properties AlwaysShowLoginScreen If only one authentication method is enabled, the default behavior is to go directly to it. For connected IdPs, this redirects the browser away from application to upstream provider such as the Google login page Declaration [JsonProperty(PropertyName = \"AlwaysShowLoginScreen\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"alwaysShowLoginScreen\", ApplyNamingConventions = false)] public bool? AlwaysShowLoginScreen { get; set; } Property Value Type Description Nullable < Boolean > PasswordConnector Optionally use a specific connector for password grants. Declaration [JsonProperty(PropertyName = \"PasswordConnector\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"passwordConnector\", ApplyNamingConventions = false)] public string PasswordConnector { get; set; } Property Value Type Description String ResponseTypes use [\"code\", \"token\", \"id_token\"] to enable implicit flow for web-only clients. Declaration [JsonProperty(PropertyName = \"ResponseTypes\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"responseTypes\", ApplyNamingConventions = false)] [JsonConverter(typeof(JsonCollectionItemConverter<Oauth2ResponseType, JsonStringEnumMemberConverter>))] public IEnumerable<Oauth2ResponseType> ResponseTypes { get; set; } Property Value Type Description IEnumerable < Oauth2ResponseType > SkipApprovalScreen By default, Dex will ask for approval to share data with application (approval for sharing data from connected IdP to Dex is separate process on IdP) Declaration [JsonProperty(PropertyName = \"SkipApprovalScreen\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"skipApprovalScreen\", ApplyNamingConventions = false)] public bool? SkipApprovalScreen { get; set; } Property Value Type Description Nullable < Boolean >"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexOidcClaimMapping.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexOidcClaimMapping.html",
    "title": "Class DexOidcClaimMapping | NeonKUBE documentation",
    "keywords": "Class DexOidcClaimMapping Configuration for backend connectors. Inheritance Object DexOidcClaimMapping Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexOidcClaimMapping Constructors DexOidcClaimMapping() Constructor. Declaration public DexOidcClaimMapping() Properties EmailKey Configurable key which contains the email claims. Declaration [JsonProperty(PropertyName = \"EmailKey\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"email\", ApplyNamingConventions = false)] public string EmailKey { get; set; } Property Value Type Description String GroupsKey Configurable key which contains the groups claims. Declaration [JsonProperty(PropertyName = \"GroupsKey\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"groups\", ApplyNamingConventions = false)] public string GroupsKey { get; set; } Property Value Type Description String PreferredUsernameKey Configurable key which contains the preferred username claims. Declaration [JsonProperty(PropertyName = \"PreferredUsernameKey\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"preferred_username\", ApplyNamingConventions = false)] public string PreferredUsernameKey { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexOidcConfig.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexOidcConfig.html",
    "title": "Class DexOidcConfig | NeonKUBE documentation",
    "keywords": "Class DexOidcConfig Configuration for backend connectors. Inheritance Object DexOidcConfig Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexOidcConfig Constructors DexOidcConfig() Constructor. Declaration public DexOidcConfig() Properties AcrValues AcrValues (Authentication Context Class Reference Values) that specifies the Authentication Context Class Values within the Authentication Request that the Authorization Server is being requested to use for processing requests from this Client, with the values appearing in order of preference. Declaration [JsonProperty(PropertyName = \"AcrValues\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"acrValues\", ApplyNamingConventions = false)] public List<string> AcrValues { get; set; } Property Value Type Description List < String > BasicAuthUnsupported Causes client_secret to be passed as POST parameters instead of basic auth. This is specifically \"NOT RECOMMENDED\" by the OAuth2 RFC, but some providers require it. https://tools.ietf.org/html/rfc6749#section-2.3.1 Declaration [JsonProperty(PropertyName = \"BasicAuthUnsupported\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"basicAuthUnsupported\", ApplyNamingConventions = false)] public bool? BasicAuthUnsupported { get; set; } Property Value Type Description Nullable < Boolean > ClaimMapping The claim mapping overrides. Declaration [JsonProperty(PropertyName = \"ClaimMapping\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"claimMapping\", ApplyNamingConventions = false)] public DexOidcClaimMapping ClaimMapping { get; set; } Property Value Type Description DexOidcClaimMapping ClientId OIDC client ID. Declaration [JsonProperty(PropertyName = \"ClientId\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"clientId\", ApplyNamingConventions = false)] public string ClientId { get; set; } Property Value Type Description String ClientSecret OIDC client Secret. Declaration [JsonProperty(PropertyName = \"ClientSecret\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"clientSecret\", ApplyNamingConventions = false)] public string ClientSecret { get; set; } Property Value Type Description String GetUserInfo GetUserInfo uses the userinfo endpoint to get additional claims for the token. This is especially useful where upstreams return \"thin\" id tokens Declaration [JsonProperty(PropertyName = \"GetUserInfo\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"getUserInfo\", ApplyNamingConventions = false)] public bool GetUserInfo { get; set; } Property Value Type Description Boolean InsecureEnableGroups InsecureEnableGroups enables groups claims. This is disabled by default until https://github.com/dexidp/dex/issues/1065 is resolved. Declaration [JsonProperty(PropertyName = \"InsecureEnableGroups\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"insecureEnableGroups\", ApplyNamingConventions = false)] public bool InsecureEnableGroups { get; set; } Property Value Type Description Boolean InsecureSkipEmailVerified Override the value of email_verifed to true in the returned claims. Declaration [JsonProperty(PropertyName = \"InsecureSkipEmailVerified\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"insecureSkipEmailVerified\", ApplyNamingConventions = false)] public bool InsecureSkipEmailVerified { get; set; } Property Value Type Description Boolean InsecureSkipVerify Disable certificate verification. Declaration [JsonProperty(PropertyName = \"InsecureSkipVerify\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"insecureSkipVerify\", ApplyNamingConventions = false)] public bool InsecureSkipVerify { get; set; } Property Value Type Description Boolean Issuer OIDC Issuer. Declaration [JsonProperty(PropertyName = \"Issuer\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"issuer\", ApplyNamingConventions = false)] public string Issuer { get; set; } Property Value Type Description String OverrideClaimMapping OverrideClaimMapping will be used to override the options defined in claimMappings. i.e. if there are 'email' and preferred_email claims available, by default Dex will always use the email claim independent of the ClaimMapping.EmailKey. This setting allows you to override the default behavior of Dex and enforce the mappings defined in claimMapping . Declaration [JsonProperty(PropertyName = \"OverrideClaimMapping\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"overrideClaimMapping\", ApplyNamingConventions = false)] public bool OverrideClaimMapping { get; set; } Property Value Type Description Boolean PromptType PromptType will be used for the prompt parameter (when offline_access, by default prompt=consent). Declaration [JsonProperty(PropertyName = \"PromptType\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"promptType\", ApplyNamingConventions = false)] public string PromptType { get; set; } Property Value Type Description String RedirectURI The OIDC Redirect URL. Declaration [JsonProperty(PropertyName = \"RedirectURI\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"redirectURI\", ApplyNamingConventions = false)] public string RedirectURI { get; set; } Property Value Type Description String RootCAs OIDC Scopes. Declaration [JsonProperty(PropertyName = \"RootCAs\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"rootCAs\", ApplyNamingConventions = false)] public List<string> RootCAs { get; set; } Property Value Type Description List < String > Scopes OIDC Scopes. Declaration [JsonProperty(PropertyName = \"Scopes\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"scopes\", ApplyNamingConventions = false)] public List<string> Scopes { get; set; } Property Value Type Description List < String > UserIDKey Spoecifies the User ID key. Declaration [JsonProperty(PropertyName = \"UserIDKey\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"userIDKey\", ApplyNamingConventions = false)] public string UserIDKey { get; set; } Property Value Type Description String UserNameKey Spoecifies the User ID key. Declaration [JsonProperty(PropertyName = \"UserNameKey\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"userNameKey\", ApplyNamingConventions = false)] public string UserNameKey { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexRefreshTokenConfig.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexRefreshTokenConfig.html",
    "title": "Class DexRefreshTokenConfig | NeonKUBE documentation",
    "keywords": "Class DexRefreshTokenConfig Configuration for the HTTP endpoints. Inheritance Object DexRefreshTokenConfig Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexRefreshTokenConfig Constructors DexRefreshTokenConfig() Constructor. Declaration public DexRefreshTokenConfig() Properties AbsoluteLifetime Absolute refresh token lifetime. Declaration [JsonProperty(PropertyName = \"AbsoluteLifetime\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"absoluteLifetime\", ApplyNamingConventions = false)] public string AbsoluteLifetime { get; set; } Property Value Type Description String ReuseInterval Token reuse interval. Declaration [JsonProperty(PropertyName = \"ReuseInterval\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"reuseInterval\", ApplyNamingConventions = false)] public string ReuseInterval { get; set; } Property Value Type Description String ValidIfNotUsedFor Duration token valid if not used. Declaration [JsonProperty(PropertyName = \"ValidIfNotUsedFor\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"validIfNotUsedFor\", ApplyNamingConventions = false)] public string ValidIfNotUsedFor { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexStaticUser.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexStaticUser.html",
    "title": "Class DexStaticUser | NeonKUBE documentation",
    "keywords": "Class DexStaticUser Configuration for backend connectors. Inheritance Object DexStaticUser Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexStaticUser Constructors DexStaticUser() Constructor. Declaration public DexStaticUser() Properties Email Client ID Declaration [JsonProperty(PropertyName = \"Email\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"email\", ApplyNamingConventions = false)] public string Email { get; set; } Property Value Type Description String Hash bcrypt hash of the string \"password\": $(echo password | htpasswd -BinC 10 admin | cut -d: -f2) Declaration [JsonProperty(PropertyName = \"Hash\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"hash\", ApplyNamingConventions = false)] public string Hash { get; set; } Property Value Type Description String UserId Client secret. information. Declaration [JsonProperty(PropertyName = \"UserId\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"userId\", ApplyNamingConventions = false)] public string UserId { get; set; } Property Value Type Description String Username Client name. information. Declaration [JsonProperty(PropertyName = \"Username\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"username\", ApplyNamingConventions = false)] public string Username { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexStorage.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexStorage.html",
    "title": "Class DexStorage | NeonKUBE documentation",
    "keywords": "Class DexStorage Dex configuration model. Inheritance Object DexStorage Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexStorage Constructors DexStorage() Constructor. Declaration public DexStorage() Properties Config Config See the documentation ( https://dexidp.io/docs/storage/ ) for further information. Declaration [JsonProperty(PropertyName = \"Config\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"config\", ApplyNamingConventions = false)] public Dictionary<string, object> Config { get; set; } Property Value Type Description Dictionary < String , Object > Type Supported options include SQL flavors and Kubernetes third party resources. Declaration [JsonProperty(PropertyName = \"Type\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"type\", ApplyNamingConventions = false)] [JsonConverter(typeof(StringEnumConverter))] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public DexStorageType Type { get; set; } Property Value Type Description DexStorageType"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexStorageType.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexStorageType.html",
    "title": "Enum DexStorageType | NeonKUBE documentation",
    "keywords": "Enum DexStorageType Enumerates Dex storage types. Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(StringEnumConverter))] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum DexStorageType Fields Name Description ETCD ETCD Kubernetes Kubernetes Mysql MySQL Postgres PostgreSQL PUT PUT Sqlite3 SQLite 3"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexTelemetryConfig.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexTelemetryConfig.html",
    "title": "Class DexTelemetryConfig | NeonKUBE documentation",
    "keywords": "Class DexTelemetryConfig Configuration Telemetry. Inheritance Object DexTelemetryConfig Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexTelemetryConfig Constructors DexTelemetryConfig() Constructor. Declaration public DexTelemetryConfig() Properties Http HTTP endpoint for telemetry. Declaration [JsonProperty(PropertyName = \"Http\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"http\", ApplyNamingConventions = false)] public string Http { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexUserMatcher.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexUserMatcher.html",
    "title": "Class DexUserMatcher | NeonKUBE documentation",
    "keywords": "Class DexUserMatcher Dex User Matcher. Inheritance Object DexUserMatcher Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexUserMatcher Constructors DexUserMatcher() Constructor. Declaration public DexUserMatcher() Properties GroupAttr Group Attribute Declaration [JsonProperty(PropertyName = \"GroupAttr\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"groupAttr\", ApplyNamingConventions = false)] public string GroupAttr { get; set; } Property Value Type Description String UserAttr User Attribute Declaration [JsonProperty(PropertyName = \"UserAttr\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"userAttr\", ApplyNamingConventions = false)] public string UserAttr { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.DexWebConfig.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.DexWebConfig.html",
    "title": "Class DexWebConfig | NeonKUBE documentation",
    "keywords": "Class DexWebConfig Configuration for the http server. Inheritance Object DexWebConfig Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public class DexWebConfig Constructors DexWebConfig() Constructor. Declaration public DexWebConfig() Properties Frontend Configuration for dex appearance. information. Declaration [JsonProperty(PropertyName = \"Frontend\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"frontend\", ApplyNamingConventions = false)] public DexFrontendConfig Frontend { get; set; } Property Value Type Description DexFrontendConfig Http Http Endpoint. Declaration [JsonProperty(PropertyName = \"Http\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"http\", ApplyNamingConventions = false)] public string Http { get; set; } Property Value Type Description String Https Https Endpoint. Declaration [JsonProperty(PropertyName = \"Https\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"https\", ApplyNamingConventions = false)] public string Https { get; set; } Property Value Type Description String TlsCert Reference to TLS certificate file. information. Declaration [JsonProperty(PropertyName = \"TlsCert\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"tlsCert\", ApplyNamingConventions = false)] public string TlsCert { get; set; } Property Value Type Description String TlsKey Reference to TLS certificate key file. information. Declaration [JsonProperty(PropertyName = \"TlsKey\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"tlsKey\", ApplyNamingConventions = false)] public string TlsKey { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.html",
    "title": "Namespace Neon.Kube.Resources.Dex | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Resources.Dex Classes DexConfig Dex configuration model. DexConnector Configuration for OIDC connectors. DexConnector<T> Configuration for OIDC connectors. DexConnectorConverter Converter for Dex connectors. DexExpiryConfig Configuration for token expiration. DexFrontendConfig Configuration for the Dex Frontend. DexGrpcConfig Configuration GRPC endpoint. DexLdapConfig Configuration for backend connectors. DexLdapSearch Configuration for backend connectors. DexLogConfig Dex Logging configuration. DexOauth2Config Dex Oauth2 configuration model. DexOidcClaimMapping Configuration for backend connectors. DexOidcConfig Configuration for backend connectors. DexRefreshTokenConfig Configuration for the HTTP endpoints. DexStaticUser Configuration for backend connectors. DexStorage Dex configuration model. DexTelemetryConfig Configuration Telemetry. DexUserMatcher Dex User Matcher. DexWebConfig Configuration for the http server. Interfaces IDexConnector<T> Configuration for backend connectors. IDexConnectorConfig Configuration for backend connectors. IV1DexConnector Configuration for backend connectors. Enums DexConnectorType Enumerates Dex storage types. DexStorageType Enumerates Dex storage types. Oauth2ResponseType Enumerates Oauth 2 response types."
  },
  "neonkube/api/Neon.Kube.Resources.Dex.IDexConnector-1.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.IDexConnector-1.html",
    "title": "Interface IDexConnector<T> | NeonKUBE documentation",
    "keywords": "Interface IDexConnector<T> Configuration for backend connectors. Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(DexConnectorConverter))] [JsonConverter(typeof(DexConnectorJsonConverter))] public interface IDexConnector<T> : IV1DexConnector where T : class Type Parameters Name Description T Properties Config Connector config. information. Declaration [JsonProperty(PropertyName = \"Config\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"config\", ApplyNamingConventions = false)] [JsonSchemaExtensionData(\"x-kubernetes-preserve-unknown-fields\", true)] T Config { get; set; } Property Value Type Description T Id Connector ID Declaration [JsonProperty(PropertyName = \"Id\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"id\", ApplyNamingConventions = false)] string Id { get; set; } Property Value Type Description String Name Connector name. information. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] string Name { get; set; } Property Value Type Description String Type Connector Type. information. Declaration [JsonProperty(PropertyName = \"Type\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"type\", ApplyNamingConventions = false)] [JsonConverter(typeof(JsonStringEnumMemberConverter))] DexConnectorType Type { get; set; } Property Value Type Description DexConnectorType"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.IDexConnectorConfig.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.IDexConnectorConfig.html",
    "title": "Interface IDexConnectorConfig | NeonKUBE documentation",
    "keywords": "Interface IDexConnectorConfig Configuration for backend connectors. Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax public interface IDexConnectorConfig"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.IV1DexConnector.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.IV1DexConnector.html",
    "title": "Interface IV1DexConnector | NeonKUBE documentation",
    "keywords": "Interface IV1DexConnector Configuration for backend connectors. Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(DexConnectorConverter))] [JsonConverter(typeof(DexConnectorJsonConverter))] public interface IV1DexConnector Properties Config Connector config. information. Declaration [JsonSchemaExtensionData(\"x-kubernetes-preserve-unknown-fields\", true)] object Config { get; set; } Property Value Type Description Object Id Connector ID Declaration [JsonProperty(PropertyName = \"Id\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"id\", ApplyNamingConventions = false)] string Id { get; set; } Property Value Type Description String Name Connector name. information. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] string Name { get; set; } Property Value Type Description String Type Connector Type. information. Declaration [JsonProperty(PropertyName = \"Type\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"type\", ApplyNamingConventions = false)] [JsonConverter(typeof(JsonStringEnumMemberConverter))] DexConnectorType Type { get; set; } Property Value Type Description DexConnectorType"
  },
  "neonkube/api/Neon.Kube.Resources.Dex.Oauth2ResponseType.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Dex.Oauth2ResponseType.html",
    "title": "Enum Oauth2ResponseType | NeonKUBE documentation",
    "keywords": "Enum Oauth2ResponseType Enumerates Oauth 2 response types. Namespace : Neon.Kube.Resources.Dex Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(StringEnumConverter))] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum Oauth2ResponseType Fields Name Description Code Code response. IdToken Id Token response. Token Token response"
  },
  "neonkube/api/Neon.Kube.Resources.EntityScope.html": {
    "href": "neonkube/api/Neon.Kube.Resources.EntityScope.html",
    "title": "Enum EntityScope | NeonKUBE documentation",
    "keywords": "Enum EntityScope Defines the scope of a kubernetes resource. Namespace : Neon.Kube.Resources Assembly : Neon.Kube.Resources.dll Syntax public enum EntityScope Fields Name Description Cluster The resource is cluster wide. Namespaced The resource is Namespaced."
  },
  "neonkube/api/Neon.Kube.Resources.EntityScopeAttribute.html": {
    "href": "neonkube/api/Neon.Kube.Resources.EntityScopeAttribute.html",
    "title": "Class EntityScopeAttribute | NeonKUBE documentation",
    "keywords": "Class EntityScopeAttribute Indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are Cluster and Namespaced . Inheritance Object Attribute EntityScopeAttribute Namespace : Neon.Kube.Resources Assembly : Neon.Kube.Resources.dll Syntax [AttributeUsage(AttributeTargets.Class, Inherited = false)] public sealed class EntityScopeAttribute : Attribute Constructors EntityScopeAttribute(EntityScope) Constructor. Declaration public EntityScopeAttribute(EntityScope scope = EntityScope.Namespaced) Parameters Type Name Description EntityScope scope Properties Scope The EntityScope . Declaration public EntityScope Scope { get; } Property Value Type Description EntityScope"
  },
  "neonkube/api/Neon.Kube.Resources.ExternalDns.DnsEndpoint.html": {
    "href": "neonkube/api/Neon.Kube.Resources.ExternalDns.DnsEndpoint.html",
    "title": "Class DnsEndpoint | NeonKUBE documentation",
    "keywords": "Class DnsEndpoint Endpoint is a high-level way of a connection between a service and an IP. Inheritance Object DnsEndpoint Namespace : Neon.Kube.Resources.ExternalDns Assembly : Neon.Kube.Resources.dll Syntax public class DnsEndpoint Constructors DnsEndpoint() Constructor. Declaration public DnsEndpoint() Properties DnsName The hostname of the DNS record. Declaration public string DnsName { get; set; } Property Value Type Description String Labels Labels defined for the Endpoint. Declaration public Dictionary<string, string> Labels { get; set; } Property Value Type Description Dictionary < String , String > ProviderSpecific Stores provider specific config. Declaration public Dictionary<string, object> ProviderSpecific { get; set; } Property Value Type Description Dictionary < String , Object > RecordTTL TTL for the record. Declaration public int RecordTTL { get; set; } Property Value Type Description Int32 RecordType The RecordType Declaration [JsonConverter(typeof(JsonStringEnumMemberConverter))] public DnsRecordType RecordType { get; set; } Property Value Type Description DnsRecordType SetIdentifier Identifier to distinguish multiple records with the same name and type(e.g.Route53 records with routing policies other than 'simple') Declaration public string SetIdentifier { get; set; } Property Value Type Description String Targets The targets the DNS record points to. Declaration public List<string> Targets { get; set; } Property Value Type Description List < String >"
  },
  "neonkube/api/Neon.Kube.Resources.ExternalDns.DnsRecordType.html": {
    "href": "neonkube/api/Neon.Kube.Resources.ExternalDns.DnsRecordType.html",
    "title": "Enum DnsRecordType | NeonKUBE documentation",
    "keywords": "Enum DnsRecordType Enumerates the possible Block Device types. Namespace : Neon.Kube.Resources.ExternalDns Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum DnsRecordType Fields Name Description A A. AAAA AAAA. CNAME CNAME. MX MX. NS NS. OPT OPT. PTR PTR. SOA SOA. SRV SRV. TXT TXT. WKS WKS."
  },
  "neonkube/api/Neon.Kube.Resources.ExternalDns.ExternalDnsEndpoint.html": {
    "href": "neonkube/api/Neon.Kube.Resources.ExternalDns.ExternalDnsEndpoint.html",
    "title": "Class ExternalDnsEndpoint | NeonKUBE documentation",
    "keywords": "Class ExternalDnsEndpoint ExternalDnsEndpoint. Inheritance Object ExternalDnsEndpoint Namespace : Neon.Kube.Resources.ExternalDns Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"externaldns.k8s.io\", Kind = \"DNSEndpoint\", ApiVersion = \"v1alpha1\", PluralName = \"dnsendpoints\")] public class ExternalDnsEndpoint : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1DnsEndpointSpec>, IValidate Constructors ExternalDnsEndpoint() Initializes a new instance of the ExternalDnsEndpoint class. Declaration public ExternalDnsEndpoint() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1alpha1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"externaldns.k8s.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"DNSEndpoint\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"dnsendpoints\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\")] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\")] public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration [JsonProperty(PropertyName = \"metadata\")] public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the ExternalDnsEndpoint. Declaration [JsonProperty(PropertyName = \"spec\")] public V1DnsEndpointSpec Spec { get; set; } Property Value Type Description V1DnsEndpointSpec Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.ExternalDns.html": {
    "href": "neonkube/api/Neon.Kube.Resources.ExternalDns.html",
    "title": "Namespace Neon.Kube.Resources.ExternalDns | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Resources.ExternalDns Classes DnsEndpoint Endpoint is a high-level way of a connection between a service and an IP. ExternalDnsEndpoint ExternalDnsEndpoint. V1DnsEndpointSpec The Endpoint Spec. Enums DnsRecordType Enumerates the possible Block Device types."
  },
  "neonkube/api/Neon.Kube.Resources.ExternalDns.V1DnsEndpointSpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.ExternalDns.V1DnsEndpointSpec.html",
    "title": "Class V1DnsEndpointSpec | NeonKUBE documentation",
    "keywords": "Class V1DnsEndpointSpec The Endpoint Spec. Inheritance Object V1DnsEndpointSpec Namespace : Neon.Kube.Resources.ExternalDns Assembly : Neon.Kube.Resources.dll Syntax public class V1DnsEndpointSpec Constructors V1DnsEndpointSpec() Constructor. Declaration public V1DnsEndpointSpec() Properties Endpoints The list of DnsEndpoint . Declaration public List<DnsEndpoint> Endpoints { get; set; } Property Value Type Description List < DnsEndpoint >"
  },
  "neonkube/api/Neon.Kube.Resources.GRafana.html": {
    "href": "neonkube/api/Neon.Kube.Resources.GRafana.html",
    "title": "Namespace Neon.Kube.Resources.GRafana | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Resources.GRafana Classes V1Grafana Grafana."
  },
  "neonkube/api/Neon.Kube.Resources.GRafana.V1Grafana.html": {
    "href": "neonkube/api/Neon.Kube.Resources.GRafana.V1Grafana.html",
    "title": "Class V1Grafana | NeonKUBE documentation",
    "keywords": "Class V1Grafana Grafana. Inheritance Object V1Grafana Namespace : Neon.Kube.Resources.GRafana Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"integreatly.org\", Kind = \"Grafana\", ApiVersion = \"v1alpha1\", PluralName = \"grafanas\")] public class V1Grafana : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<object>, IValidate Constructors V1Grafana() Initializes a new instance of the Grafana class. Declaration public V1Grafana() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1alpha1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"integreatly.org\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"Grafana\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"grafanas\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\")] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\")] public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration [JsonProperty(PropertyName = \"metadata\")] public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of Grafana. Declaration [JsonProperty(PropertyName = \"spec\")] [JsonConverter(typeof(JsonGenericConverter<dynamic>))] public dynamic Spec { get; set; } Property Value Type Description Object Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Harbor.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Harbor.html",
    "title": "Namespace Neon.Kube.Resources.Harbor | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Resources.Harbor Classes V1HarborCluster HarborCluster. V1HarborConfiguration HarborConfiguration. V1HarborNotaryServer HarborNotaryServer. V1HarborNotarySigner HarborNotarySigner."
  },
  "neonkube/api/Neon.Kube.Resources.Harbor.V1HarborCluster.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Harbor.V1HarborCluster.html",
    "title": "Class V1HarborCluster | NeonKUBE documentation",
    "keywords": "Class V1HarborCluster HarborCluster. Inheritance Object V1HarborCluster Namespace : Neon.Kube.Resources.Harbor Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"goharbor.io\", Kind = \"HarborCluster\", ApiVersion = \"v1alpha3\", PluralName = \"harborclusters\")] public class V1HarborCluster : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<object>, IValidate Constructors V1HarborCluster() Initializes a new instance of the HarborCluster class. Declaration public V1HarborCluster() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1alpha3\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"goharbor.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"HarborCluster\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"harborclusters\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\")] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\")] public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration [JsonProperty(PropertyName = \"metadata\")] public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the HarborCluster. Declaration [JsonProperty(PropertyName = \"spec\")] [JsonConverter(typeof(JsonGenericConverter<dynamic>))] public dynamic Spec { get; set; } Property Value Type Description Object Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Harbor.V1HarborConfiguration.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Harbor.V1HarborConfiguration.html",
    "title": "Class V1HarborConfiguration | NeonKUBE documentation",
    "keywords": "Class V1HarborConfiguration HarborConfiguration. Inheritance Object V1HarborConfiguration Namespace : Neon.Kube.Resources.Harbor Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"goharbor.io\", Kind = \"HarborConfiguration\", ApiVersion = \"v1beta1\", PluralName = \"harborconfigurations\")] public class V1HarborConfiguration : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<object>, IValidate Constructors V1HarborConfiguration() Initializes a new instance of the HarborConfiguration class. Declaration public V1HarborConfiguration() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1beta1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"goharbor.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"HarborConfiguration\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"harborconfigurations\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\")] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\")] public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration [JsonProperty(PropertyName = \"metadata\")] public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the HarborConfiguration. Declaration [JsonProperty(PropertyName = \"spec\")] [JsonConverter(typeof(JsonGenericConverter<dynamic>))] public dynamic Spec { get; set; } Property Value Type Description Object Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Harbor.V1HarborNotaryServer.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Harbor.V1HarborNotaryServer.html",
    "title": "Class V1HarborNotaryServer | NeonKUBE documentation",
    "keywords": "Class V1HarborNotaryServer HarborNotaryServer. Inheritance Object V1HarborNotaryServer Namespace : Neon.Kube.Resources.Harbor Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"goharbor.io\", Kind = \"NotaryServer\", ApiVersion = \"v1beta1\", PluralName = \"notaryservers\")] public class V1HarborNotaryServer : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<object>, IValidate Constructors V1HarborNotaryServer() Initializes a new instance of the HarborNotaryServer class. Declaration public V1HarborNotaryServer() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1beta1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"goharbor.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"NotaryServer\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"notaryservers\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\")] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\")] public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration [JsonProperty(PropertyName = \"metadata\")] public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the HarborNotaryServer. Declaration [JsonProperty(PropertyName = \"spec\")] [JsonConverter(typeof(JsonGenericConverter<dynamic>))] public dynamic Spec { get; set; } Property Value Type Description Object Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Harbor.V1HarborNotarySigner.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Harbor.V1HarborNotarySigner.html",
    "title": "Class V1HarborNotarySigner | NeonKUBE documentation",
    "keywords": "Class V1HarborNotarySigner HarborNotarySigner. Inheritance Object V1HarborNotarySigner Namespace : Neon.Kube.Resources.Harbor Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"goharbor.io\", Kind = \"NotarySigner\", ApiVersion = \"v1beta1\", PluralName = \"notarysigners\")] public class V1HarborNotarySigner : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<object>, IValidate Constructors V1HarborNotarySigner() Initializes a new instance of the HarborNotarySigner class. Declaration public V1HarborNotarySigner() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1beta1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"goharbor.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"NotarySigner\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"notarysigners\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\")] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\")] public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration [JsonProperty(PropertyName = \"metadata\")] public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the HarborNotarySigner. Declaration [JsonProperty(PropertyName = \"spec\")] [JsonConverter(typeof(JsonGenericConverter<dynamic>))] public dynamic Spec { get; set; } Property Value Type Description Object Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.html": {
    "href": "neonkube/api/Neon.Kube.Resources.html",
    "title": "Namespace Neon.Kube.Resources | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Resources Classes CustomResourceException Thrown for an invalid custom resource. EntityScopeAttribute Indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are Cluster and Namespaced . Enums EntityScope Defines the scope of a kubernetes resource."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.Abort.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.Abort.html",
    "title": "Class Abort | NeonKUBE documentation",
    "keywords": "Class Abort Abort specification is used to prematurely abort a request with a pre-specified error code. The following example will return an HTTP 400 error code for 1 out of every 1000 requests to the “ratings” service “v1”. Inheritance Object Abort Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class Abort : IValidate Constructors Abort() Initializes a new instance of the HTTPFaultInjection.Abort class. Declaration public Abort() Properties HTTPStatus HTTP status code to use to abort the Http request. Declaration [JsonProperty(PropertyName = \"httpStatus\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int HTTPStatus { get; set; } Property Value Type Description Int32 Percentage Percentage of requests to be aborted with the error code provided. Declaration [JsonProperty(PropertyName = \"percentage\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Percent Percentage { get; set; } Property Value Type Description Percent Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.CorsPolicy.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.CorsPolicy.html",
    "title": "Class CorsPolicy | NeonKUBE documentation",
    "keywords": "Class CorsPolicy Describes the Cross-Origin Resource Sharing (CORS) policy, for a given service. Refer to CORS for further details about cross origin resource sharing. For example, the following rule restricts cross origin requests to those originating from example.com domain using HTTP POST/GET, and sets the Access-Control-Allow-Credentials header to false. In addition, it only exposes X-Foo-bar header and sets an expiry period of 1 day.Describes the CorsPolicy VirtualService. Inheritance Object CorsPolicy Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class CorsPolicy : IValidate Constructors CorsPolicy() Initializes a new instance of the CorsPolicy class. Declaration public CorsPolicy() Properties AllowCredentials Indicates whether the caller is allowed to send the actual request (not the preflight) using credentials. Translates to Access-Control-Allow-Credentials header. Declaration [JsonProperty(PropertyName = \"allowCredentials\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool? AllowCredentials { get; set; } Property Value Type Description Nullable < Boolean > AllowHeaders List of HTTP headers that can be used when requesting the resource. Serialized to Access-Control-Allow-Headers header. Declaration [JsonProperty(PropertyName = \"allowHeaders\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> AllowHeaders { get; set; } Property Value Type Description List < String > AllowMethods List of HTTP methods allowed to access the resource. The content will be serialized into the Access-Control-Allow-Methods header. Declaration [JsonProperty(PropertyName = \"allowMethods\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public List<HTTPMethod> AllowMethods { get; set; } Property Value Type Description List < HTTPMethod > AllowOrigins String patterns that match allowed origins. An origin is allowed if any of the string matchers match. If a match is found, then the outgoing Access-Control-Allow-Origin would be set to the origin as provided by the client. Declaration [JsonProperty(PropertyName = \"allowOrigins\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<StringMatch> AllowOrigins { get; set; } Property Value Type Description List < StringMatch > ExposeHeaders A list of HTTP headers that the browsers are allowed to access. Serialized into Access-Control-Expose-Headers header. Declaration [JsonProperty(PropertyName = \"exposeHeaders\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> ExposeHeaders { get; set; } Property Value Type Description List < String > MaxAge Specifies how long the results of a preflight request can be cached. Translates to the Access-Control-Max-Age header. Declaration [JsonProperty(PropertyName = \"maxAge\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string MaxAge { get; set; } Property Value Type Description String Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.Delay.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.Delay.html",
    "title": "Class Delay | NeonKUBE documentation",
    "keywords": "Class Delay Delay specification is used to inject latency into the request forwarding path. The following example will introduce a 5 second delay in 1 out of every 1000 requests to the “v1” version of the “reviews” service from all pods with label env: prod Inheritance Object Delay Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class Delay : IValidate Constructors Delay() Initializes a new instance of the HTTPFaultInjection.Delay class. Declaration public Delay() Properties FixedDelay Add a fixed delay before forwarding the request. Format: 1h/1m/1s/1ms. MUST be >=1ms. Declaration [JsonProperty(PropertyName = \"fixedDelay\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string FixedDelay { get; set; } Property Value Type Description String Percent Percentage of requests on which the delay will be injected (0-100). Use of integer percent value is deprecated. Use the double percentage field instead. Declaration [JsonProperty(PropertyName = \"percent\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int? Percent { get; set; } Property Value Type Description Nullable < Int32 > Percentage Add a fixed delay before forwarding the request. Format: 1h/1m/1s/1ms. MUST be >=1ms. Declaration [JsonProperty(PropertyName = \"percentage\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Percent Percentage { get; set; } Property Value Type Description Percent Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.Delegate.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.Delegate.html",
    "title": "Class Delegate | NeonKUBE documentation",
    "keywords": "Class Delegate Describes the delegate VirtualService. Inheritance Object Delegate Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class Delegate : IValidate Constructors Delegate() Initializes a new instance of the Delegate class. Declaration public Delegate() Properties Name Name specifies the name of the delegate VirtualService. Declaration [JsonProperty(PropertyName = \"name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Name { get; set; } Property Value Type Description String Namespace Namespace specifies the namespace where the delegate VirtualService resides. By default, it is same to the root’s. Declaration [JsonProperty(PropertyName = \"namespace\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Namespace { get; set; } Property Value Type Description String Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.Destination.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.Destination.html",
    "title": "Class Destination | NeonKUBE documentation",
    "keywords": "Class Destination Destination indicates the network addressable service to which the request/connection will be sent after processing a routing rule. The destination.host should unambiguously refer to a service in the service registry. Istio’s service registry is composed of all the services found in the platform’s service registry (e.g., Kubernetes services, Consul services), as well as services declared through the ServiceEntry resource. Note for Kubernetes users: When short names are used(e.g. “reviews” instead of “reviews.default.svc.cluster.local”), Istio will interpret the short name based on the namespace of the rule, not the service.A rule in the “default” namespace containing a host “reviews will be interpreted as “reviews.default.svc.cluster.local”, irrespective of the actual namespace associated with the reviews service.To avoid potential misconfigurations, it is recommended to always use fully qualified domain names over short names. The following Kubernetes example routes all traffic by default to pods of the reviews service with label “version: v1” (i.e., subset v1), and some to subset v2, in a Kubernetes environment. Inheritance Object Destination Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class Destination : IValidate Constructors Destination() Initializes a new instance of the Destination class. Declaration public Destination() Properties Host The name of a service from the service registry. Service names are looked up from the platform’s service registry (e.g., Kubernetes services, Consul services, etc.) and from the hosts declared by ServiceEntry. Traffic forwarded to destinations that are not found in either of the two, will be dropped. Note for Kubernetes users: When short names are used (e.g. “reviews” instead of “reviews.default.svc.cluster.local”), Istio will interpret the short name based on the namespace of the rule, not the service. A rule in the “default” namespace containing a host “reviews will be interpreted as “reviews.default.svc.cluster.local”, irrespective of the actual namespace associated with the reviews service. To avoid potential misconfiguration, it is recommended to always use fully qualified domain names over short names. Declaration [JsonProperty(PropertyName = \"host\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Host { get; set; } Property Value Type Description String Port Specifies the port on the host that is being addressed. If a service exposes only a single port it is not required to explicitly select the port. Declaration [JsonProperty(PropertyName = \"port\", Required = Required.Always)] public PortSelector Port { get; set; } Property Value Type Description PortSelector Subset The name of a subset within the service. Applicable only to services within the mesh. The subset must be defined in a corresponding DestinationRule. Declaration [JsonProperty(PropertyName = \"subset\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Subset { get; set; } Property Value Type Description String Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.HeaderOperations.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.HeaderOperations.html",
    "title": "Class HeaderOperations | NeonKUBE documentation",
    "keywords": "Class HeaderOperations HeaderOperations Describes the header manipulations to apply. Inheritance Object HeaderOperations Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class HeaderOperations : IValidate Constructors HeaderOperations() Initializes a new instance of the HeaderOperations class. Declaration public HeaderOperations() Properties Add Append the given values to the headers specified by keys (will create a comma-separated list of values). Declaration [JsonProperty(PropertyName = \"add\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Dictionary<string, string> Add { get; set; } Property Value Type Description Dictionary < String , String > Remove Remove a the specified headers. Declaration [JsonProperty(PropertyName = \"remove\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> Remove { get; set; } Property Value Type Description List < String > Set Overwrite the headers specified by key with the given values. Declaration [JsonProperty(PropertyName = \"set\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Dictionary<string, string> Set { get; set; } Property Value Type Description Dictionary < String , String > Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.Headers.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.Headers.html",
    "title": "Class Headers | NeonKUBE documentation",
    "keywords": "Class Headers Message headers can be manipulated when Envoy forwards requests to, or responses from, a destination service. Header manipulation rules can be specified for a specific route destination or for all destinations. The following VirtualService adds a test header with the value true to requests that are routed to any reviews service destination. It also removes the foo response header, but only from responses coming from the v1 subset (version) of the reviews service. Inheritance Object Headers Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class Headers : IValidate Constructors Headers() Initializes a new instance of the Headers class. Declaration public Headers() Properties Request Header manipulation rules to apply before forwarding a request to the destination service Declaration [JsonProperty(PropertyName = \"request\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public HeaderOperations Request { get; set; } Property Value Type Description HeaderOperations Response Header manipulation rules to apply before returning a response to the caller Declaration [JsonProperty(PropertyName = \"response\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public HeaderOperations Response { get; set; } Property Value Type Description HeaderOperations Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.html",
    "title": "Namespace Neon.Kube.Resources.Istio | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Resources.Istio Classes Abort Abort specification is used to prematurely abort a request with a pre-specified error code. The following example will return an HTTP 400 error code for 1 out of every 1000 requests to the “ratings” service “v1”. CorsPolicy Describes the Cross-Origin Resource Sharing (CORS) policy, for a given service. Refer to CORS for further details about cross origin resource sharing. For example, the following rule restricts cross origin requests to those originating from example.com domain using HTTP POST/GET, and sets the Access-Control-Allow-Credentials header to false. In addition, it only exposes X-Foo-bar header and sets an expiry period of 1 day.Describes the CorsPolicy VirtualService. Delay Delay specification is used to inject latency into the request forwarding path. The following example will introduce a 5 second delay in 1 out of every 1000 requests to the “v1” version of the “reviews” service from all pods with label env: prod Delegate Describes the delegate VirtualService. Destination Destination indicates the network addressable service to which the request/connection will be sent after processing a routing rule. The destination.host should unambiguously refer to a service in the service registry. Istio’s service registry is composed of all the services found in the platform’s service registry (e.g., Kubernetes services, Consul services), as well as services declared through the ServiceEntry resource. Note for Kubernetes users: When short names are used(e.g. “reviews” instead of “reviews.default.svc.cluster.local”), Istio will interpret the short name based on the namespace of the rule, not the service.A rule in the “default” namespace containing a host “reviews will be interpreted as “reviews.default.svc.cluster.local”, irrespective of the actual namespace associated with the reviews service.To avoid potential misconfigurations, it is recommended to always use fully qualified domain names over short names. The following Kubernetes example routes all traffic by default to pods of the reviews service with label “version: v1” (i.e., subset v1), and some to subset v2, in a Kubernetes environment. HeaderOperations HeaderOperations Describes the header manipulations to apply. Headers Message headers can be manipulated when Envoy forwards requests to, or responses from, a destination service. Header manipulation rules can be specified for a specific route destination or for all destinations. The following VirtualService adds a test header with the value true to requests that are routed to any reviews service destination. It also removes the foo response header, but only from responses coming from the v1 subset (version) of the reviews service. HTTPFaultInjection HTTPFaultInjection can be used to specify one or more faults to inject while forwarding HTTP requests to the destination specified in a route. Fault specification is part of a VirtualService rule. Faults include aborting the Http request from downstream service, and/or delaying proxying of requests. A fault rule MUST HAVE delay or abort or both. HTTPMatchRequest HttpMatchRequest specifies a set of criterion to be met in order for the rule to be applied to the HTTP request. For example, the following restricts the rule to match only requests where the URL path starts with /ratings/v2/ and the request contains a custom end-user header with value jason. HTTPRedirect HTTPRedirect can be used to send a 301 redirect response to the caller, where the Authority/Host and the URI in the response can be swapped with the specified values. For example, the following rule redirects requests for /v1/getProductRatings API on the ratings service to /v1/bookRatings provided by the bookratings service. HTTPRetry Describes the retry policy to use when a HTTP request fails. For example, the following rule sets the maximum number of retries to 3 when calling ratings:v1 service, with a 2s timeout per retry attempt. HTTPRewrite HTTPRewrite can be used to rewrite specific parts of a HTTP request before forwarding the request to the destination. Rewrite primitive can be used only with HTTPRouteDestination. The following example demonstrates how to rewrite the URL prefix for api call (/ratings) to ratings service before making the actual API call. HTTPRoute Describes the properties of a specific HTTPRoute of a service. HTTPRouteDestination Each routing rule is associated with one or more service versions (see glossary in beginning of document). Weights associated with the version determine the proportion of traffic it receives. For example, the following rule will route 25% of traffic for the “reviews” service to instances with the “v2” tag and the remaining traffic (i.e., 75%) to “v1”. L4MatchAttributes L4 connection match attributes. Note that L4 connection matching support is incomplete. Percent Percent specifies the number of a port to be used for matching or selection for final routing. Port Describes the properties of a specific port of a service. PortSelector PortSelector specifies the number of a port to be used for matching or selection for final routing. RouteDestination L4 routing rule weighted destination. Server Describes the properties of the proxy on a given load balancer port. ServerTLSSettings ServiceEntry ServiceEntry enables adding additional entries into Istio’s internal service registry. StringMatch Describes how to match a given string in HTTP headers. Match is case-sensitive. TCPRoute Describes match conditions and actions for routing TCP traffic. The following routing rule forwards traffic arriving at port 27017 for mongo.prod.svc.cluster.local to another Mongo server on port 5555. TLSMatchAttributes TLS connection match attributes. TLSRoute Describes match conditions and actions for routing unterminated TLS traffic (TLS/HTTPS) The following routing rule forwards unterminated TLS traffic arriving at port 443 of gateway called “mygateway” to internal services in the mesh based on the SNI value. Tracing Describes tracing configuration. TracingProvider Descrribes a tracing provider. UInt32Value Wrapper message for uint32. The JSON representation for UInt32Value is JSON number. V1Gateway V1GatewaySpec Describes a load balancer operating at the edge of the mesh receiving incoming or outgoing HTTP/TCP connections. V1ServiceEntrySpec ServiceEntry enables adding additional entries into Istio’s internal service registry. V1Telemetry CRD that controls Istio tracing. V1TelemetrySpec Describes a Telemetry spec. V1VirtualServiceSpec Describes a load balancer operating at the edge of the mesh receiving incoming or outgoing HTTP/TCP connections. VirtualService WorkloadEntry Enables specifying the properties of a single non-Kubernetes workload such a VM or a bare metal services that can be referred to by service entries. WorkloadSelector WorkloadSelector specifies the criteria used to determine if the Gateway, Sidecar, EnvoyFilter, or ServiceEntry configuration can be applied to a proxy. The matching criteria includes the metadata associated with a proxy, workload instance info such as labels attached to the pod/VM, or any other info that the proxy provides to Istio during the initial handshake. If multiple conditions are specified, all conditions need to match in order for the workload instance to be selected. Currently, only label based selection mechanism is supported. Enums HTTPMethod Enumerates HTTP method types. Location Location specifies whether the service is part of Istio mesh or outside the mesh. Location determines the behavior of several features, such as service-to-service mTLS authentication, policy enforcement, etc. When communicating with services outside the mesh, Istio’s mTLS authentication is disabled, and policy enforcement is performed on the client-side as opposed to server-side. PortProtocol The protocol exposed on the port. Resolution Resolution determines how the proxy will resolve the IP addresses of the network endpoints associated with the service, so that it can route to one of them. The resolution mode specified here has no impact on how the application resolves the IP address associated with the service. The application may still have to use DNS to resolve the service to an IP so that the outbound traffic can be captured by the Proxy. Alternatively, for HTTP services, the application could directly communicate with the proxy (e.g., by setting HTTP_PROXY) to talk to these services. TLSMode TLS modes enforced by the proxy. TLSProtocol TLSProtocol controls how private keys should be regenerated when a re-issuance is being processed."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.HTTPFaultInjection.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.HTTPFaultInjection.html",
    "title": "Class HTTPFaultInjection | NeonKUBE documentation",
    "keywords": "Class HTTPFaultInjection HTTPFaultInjection can be used to specify one or more faults to inject while forwarding HTTP requests to the destination specified in a route. Fault specification is part of a VirtualService rule. Faults include aborting the Http request from downstream service, and/or delaying proxying of requests. A fault rule MUST HAVE delay or abort or both. Inheritance Object HTTPFaultInjection Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class HTTPFaultInjection : IValidate Remarks Note: Delay and abort faults are independent of one another, even if both are specified simultaneously. Constructors HTTPFaultInjection() Initializes a new instance of the HTTPFaultInjection class. Declaration public HTTPFaultInjection() Properties Abort Abort Http request attempts and return error codes back to downstream service, giving the impression that the upstream service is faulty. Declaration [JsonProperty(PropertyName = \"abort\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Abort Abort { get; set; } Property Value Type Description Abort Delay Delay requests before forwarding, emulating various failures such as network issues, overloaded upstream service, etc. Declaration [JsonProperty(PropertyName = \"delay\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Delay Delay { get; set; } Property Value Type Description Delay Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.HTTPMatchRequest.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.HTTPMatchRequest.html",
    "title": "Class HTTPMatchRequest | NeonKUBE documentation",
    "keywords": "Class HTTPMatchRequest HttpMatchRequest specifies a set of criterion to be met in order for the rule to be applied to the HTTP request. For example, the following restricts the rule to match only requests where the URL path starts with /ratings/v2/ and the request contains a custom end-user header with value jason. Inheritance Object HTTPMatchRequest Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class HTTPMatchRequest : IValidate Constructors HTTPMatchRequest() Initializes a new instance of the HTTPMatchRequest class. Declaration public HTTPMatchRequest() Properties Authority URI Authority values are case-sensitive and formatted as follows: exact: \"value\" for exact string match prefix: \"value\" for prefix-based match regex: \"value\" for RE2 style regex-based match( https://github.com/google/re2/wiki/Syntax ). Declaration [JsonProperty(PropertyName = \"authority\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public StringMatch Authority { get; set; } Property Value Type Description StringMatch Remarks Note: Case-insensitive matching could be enabled via the ignore_uri_case flag. Gateways Names of gateways where the rule should be applied. Gateway names in the top-level gateways field of the VirtualService (if any) are overridden. The gateway match is independent of sourceLabels. Declaration [JsonProperty(PropertyName = \"gateways\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> Gateways { get; set; } Property Value Type Description List < String > Headers The header keys must be lowercase and use hyphen as the separator, e.g. x-request-id. exact: \"value\" for exact string match prefix: \"value\" for prefix-based match regex: \"value\" for RE2 style regex-based match( https://github.com/google/re2/wiki/Syntax ). If the value is empty and only the name of header is specfied, presence of the header is checked. Note: The keys uri, scheme, method, and authority will be ignored. Declaration [JsonProperty(PropertyName = \"headers\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Dictionary<string, StringMatch> Headers { get; set; } Property Value Type Description Dictionary < String , StringMatch > Remarks Note: Case-insensitive matching could be enabled via the ignore_uri_case flag. IgnoreUriCase Flag to specify whether the URI matching should be case-insensitive. Declaration [JsonProperty(PropertyName = \"ignoreUriCase\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool? IgnoreUriCase { get; set; } Property Value Type Description Nullable < Boolean > Remarks Note: The case will be ignored only in the case of exact and prefix URI matches. Method HTTP Method values are case-sensitive and formatted as follows: exact: \"value\" for exact string match prefix: \"value\" for prefix-based match regex: \"value\" for RE2 style regex-based match( https://github.com/google/re2/wiki/Syntax ). Declaration [JsonProperty(PropertyName = \"method\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public StringMatch Method { get; set; } Property Value Type Description StringMatch Remarks Note: Case-insensitive matching could be enabled via the ignore_uri_case flag. Name The name assigned to a match. The match’s name will be concatenated with the parent route’s name and will be logged in the access logs for requests matching this route. Declaration [JsonProperty(PropertyName = \"name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Name { get; set; } Property Value Type Description String Port Specifies the ports on the host that is being addressed. Many services only expose a single port or label ports with the protocols they support, in these cases it is not required to explicitly select the port. Declaration [JsonProperty(PropertyName = \"port\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int? Port { get; set; } Property Value Type Description Nullable < Int32 > QueryParameters Query parameters for matching. Ex: - For a query parameter like “?key=true”, the map key would be “key” and the string match could be defined as exact: \"true\". - For a query parameter like “?key”, the map key would be “key” and the string match could be defined as exact: \"\". - For a query parameter like “?key=123”, the map key would be “key” and the string match could be defined as regex: \"\\d+$\". Note that this configuration will only match values like “123” but not “a123” or “123a”. Declaration [JsonProperty(PropertyName = \"queryParams\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Dictionary<string, StringMatch> QueryParameters { get; set; } Property Value Type Description Dictionary < String , StringMatch > Remarks Note: prefix matching is currently not supported. Scheme URI Scheme values are case-sensitive and formatted as follows: exact: \"value\" for exact string match prefix: \"value\" for prefix-based match regex: \"value\" for RE2 style regex-based match( https://github.com/google/re2/wiki/Syntax ). Declaration [JsonProperty(PropertyName = \"scheme\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public StringMatch Scheme { get; set; } Property Value Type Description StringMatch Remarks Note: Case-insensitive matching could be enabled via the ignore_uri_case flag. SourceLabels One or more labels that constrain the applicability of a rule to source (client) workloads with the given labels. If the VirtualService has a list of gateways specified in the top-level gateways field, it must include the reserved gateway mesh for this field to be applicable. Declaration [JsonProperty(PropertyName = \"sourceLabels\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Dictionary<string, string> SourceLabels { get; set; } Property Value Type Description Dictionary < String , String > SourceNamespace Source namespace constraining the applicability of a rule to workloads in that namespace. If the VirtualService has a list of gateways specified in the top-level gateways field, it must include the reserved gateway mesh for this field to be applicable. Declaration [JsonProperty(PropertyName = \"sourceNamespace\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string SourceNamespace { get; set; } Property Value Type Description String Remarks Note: Case-insensitive matching could be enabled via the ignore_uri_case flag. Uri URI to match values are case-sensitive and formatted as follows: exact: \"value\" for exact string match prefix: \"value\" for prefix-based match regex: \"value\" for RE2 style regex-based match( https://github.com/google/re2/wiki/Syntax ). Declaration [JsonProperty(PropertyName = \"uri\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public StringMatch Uri { get; set; } Property Value Type Description StringMatch Remarks Note: Case-insensitive matching could be enabled via the ignore_uri_case flag. WithoutHeaders withoutHeader has the same syntax with the header, but has opposite meaning. If a header is matched with a matching rule among withoutHeader, the traffic becomes not matched one. Declaration [JsonProperty(PropertyName = \"withoutHeaders\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Dictionary<string, StringMatch> WithoutHeaders { get; set; } Property Value Type Description Dictionary < String , StringMatch > Remarks Note: Case-insensitive matching could be enabled via the ignore_uri_case flag. Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.HTTPMethod.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.HTTPMethod.html",
    "title": "Enum HTTPMethod | NeonKUBE documentation",
    "keywords": "Enum HTTPMethod Enumerates HTTP method types. Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(StringEnumConverter))] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum HTTPMethod Fields Name Description CONNECT CONNECT DELETE DELETE GET GET HEAD HEAD OPTIONS OPTIONS PATCH PATCH POST POST PUT PUT TRACE TRACE"
  },
  "neonkube/api/Neon.Kube.Resources.Istio.HTTPRedirect.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.HTTPRedirect.html",
    "title": "Class HTTPRedirect | NeonKUBE documentation",
    "keywords": "Class HTTPRedirect HTTPRedirect can be used to send a 301 redirect response to the caller, where the Authority/Host and the URI in the response can be swapped with the specified values. For example, the following rule redirects requests for /v1/getProductRatings API on the ratings service to /v1/bookRatings provided by the bookratings service. Inheritance Object HTTPRedirect Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class HTTPRedirect : IValidate Constructors HTTPRedirect() Initializes a new instance of the HTTPRedirect class. Declaration public HTTPRedirect() Properties Authority On a redirect, overwrite the Authority/Host portion of the URL with this value. Declaration [JsonProperty(PropertyName = \"authority\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Authority { get; set; } Property Value Type Description String RedirectCode On a redirect, Specifies the HTTP status code to use in the redirect response. The default response code is MOVED_PERMANENTLY (301). Declaration [JsonProperty(PropertyName = \"redirectCode\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int? RedirectCode { get; set; } Property Value Type Description Nullable < Int32 > Uri On a redirect, overwrite the Path portion of the URL with this value. Note that the entire path will be replaced, irrespective of the request URI being matched as an exact path or prefix. Declaration [JsonProperty(PropertyName = \"uri\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Uri { get; set; } Property Value Type Description String Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.HTTPRetry.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.HTTPRetry.html",
    "title": "Class HTTPRetry | NeonKUBE documentation",
    "keywords": "Class HTTPRetry Describes the retry policy to use when a HTTP request fails. For example, the following rule sets the maximum number of retries to 3 when calling ratings:v1 service, with a 2s timeout per retry attempt. Inheritance Object HTTPRetry Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class HTTPRetry : IValidate Constructors HTTPRetry() Initializes a new instance of the HTTPRetry class. Declaration public HTTPRetry() Properties Attempts > Number of retries to be allowed for a given request. The interval between retries will be determined automatically (25ms+). When request timeout of the HTTP route or per_try_timeout is configured, the actual number of retries attempted also depends on the specified request timeout and per_try_timeout values. Declaration [JsonProperty(PropertyName = \"attempts\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int? Attempts { get; set; } Property Value Type Description Nullable < Int32 > PerTryTimeout Timeout per attempt for a given request, including the initial call and any retries. Format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is same value as request timeout of the HTTP route, which means no timeout. Declaration [JsonProperty(PropertyName = \"perTryTimeout\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string PerTryTimeout { get; set; } Property Value Type Description String retryOn Specifies the conditions under which retry takes place. One or more policies can be specified using a ‘,’ delimited list. See the retry policies and gRPC retry policies for more details. Declaration [JsonProperty(PropertyName = \"retryOn\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string retryOn { get; set; } Property Value Type Description String RetryRemoteLocalities Flag to specify whether the retries should retry to other localities. See the retry plugin configuration for more details. Declaration [JsonProperty(PropertyName = \"retryRemoteLocalities\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool? RetryRemoteLocalities { get; set; } Property Value Type Description Nullable < Boolean > Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.HTTPRewrite.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.HTTPRewrite.html",
    "title": "Class HTTPRewrite | NeonKUBE documentation",
    "keywords": "Class HTTPRewrite HTTPRewrite can be used to rewrite specific parts of a HTTP request before forwarding the request to the destination. Rewrite primitive can be used only with HTTPRouteDestination. The following example demonstrates how to rewrite the URL prefix for api call (/ratings) to ratings service before making the actual API call. Inheritance Object HTTPRewrite Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class HTTPRewrite : IValidate Constructors HTTPRewrite() Initializes a new instance of the HTTPRewrite class. Declaration public HTTPRewrite() Properties Authority Rewrite the Authority/Host header with this value. Declaration [JsonProperty(PropertyName = \"authority\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Authority { get; set; } Property Value Type Description String Uri Rewrite the path (or the prefix) portion of the URI with this value. If the original URI was matched based on prefix, the value provided in this field will replace the corresponding matched prefix. Declaration [JsonProperty(PropertyName = \"uri\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Uri { get; set; } Property Value Type Description String Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.HTTPRoute.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.HTTPRoute.html",
    "title": "Class HTTPRoute | NeonKUBE documentation",
    "keywords": "Class HTTPRoute Describes the properties of a specific HTTPRoute of a service. Inheritance Object HTTPRoute Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class HTTPRoute : IValidate Constructors HTTPRoute() Initializes a new instance of the HTTPRoute class. Declaration public HTTPRoute() Properties CorsPolicy Cross-Origin Resource Sharing policy (CORS). Refer to CORS for further details about cross origin resource sharing. Declaration [JsonProperty(PropertyName = \"corsPolicy\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public CorsPolicy CorsPolicy { get; set; } Property Value Type Description CorsPolicy Delegate Delegate is used to specify the particular VirtualService which can be used to define delegate HTTPRoute. It can be set only when Route and Redirect are empty, and the route rules of the delegate VirtualService will be merged with that in the current one. Declaration [JsonProperty(PropertyName = \"delegate\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Delegate Delegate { get; set; } Property Value Type Description Delegate Remarks Only one level delegation is supported. The delegate’s HTTPMatchRequest must be a strict subset of the root’s, otherwise there is a conflict and the HTTPRoute will not take effect. Fault Fault injection policy to apply on HTTP traffic at the client side. Note that timeouts or retries will not be enabled when faults are enabled on the client side. Declaration [JsonProperty(PropertyName = \"fault\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public HTTPFaultInjection Fault { get; set; } Property Value Type Description HTTPFaultInjection Headers Header manipulation rules Declaration [JsonProperty(PropertyName = \"headers\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Headers Headers { get; set; } Property Value Type Description Headers Match Match conditions to be satisfied for the rule to be activated. All conditions inside a single match block have AND semantics, while the list of match blocks have OR semantics. The rule is matched if any one of the match blocks succeed. Declaration [JsonProperty(PropertyName = \"match\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<HTTPMatchRequest> Match { get; set; } Property Value Type Description List < HTTPMatchRequest > Mirror Mirror HTTP traffic to a another destination in addition to forwarding the requests to the intended destination. Mirrored traffic is on a best effort basis where the sidecar/gateway will not wait for the mirrored cluster to respond before returning the response from the original destination. Statistics will be generated for the mirrored destination. Declaration [JsonProperty(PropertyName = \"mirror\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Destination Mirror { get; set; } Property Value Type Description Destination MirrorPercent Percentage of the traffic to be mirrored by the mirror field. Use of integer mirror_percent value is deprecated. Use the double mirror_percentage field instead Declaration [JsonProperty(PropertyName = \"mirrorPercent\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public UInt32Value MirrorPercent { get; set; } Property Value Type Description UInt32Value MirrorPercentage Percentage of the traffic to be mirrored by the mirror field. If this field is absent, all the traffic (100%) will be mirrored. Declaration [JsonProperty(PropertyName = \"mirrorPercentage\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Percent MirrorPercentage { get; set; } Property Value Type Description Percent Remarks Max value is 100. Name The name assigned to the route for debugging purposes. The route’s name will be concatenated with the match’s name and will be logged in the access logs for requests matching this route/match. Declaration [JsonProperty(PropertyName = \"name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Name { get; set; } Property Value Type Description String Redirect A HTTP rule can either redirect or forward (default) traffic. If traffic passthrough option is specified in the rule, route/redirect will be ignored. The redirect primitive can be used to send a HTTP 301 redirect to a different URI or Authority. Declaration [JsonProperty(PropertyName = \"redirect\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public HTTPRedirect Redirect { get; set; } Property Value Type Description HTTPRedirect Retries Retry policy for HTTP requests. Declaration [JsonProperty(PropertyName = \"retries\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public HTTPRetry Retries { get; set; } Property Value Type Description HTTPRetry Rewrite Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with Redirect primitive. Rewrite will be performed before forwarding. Declaration [JsonProperty(PropertyName = \"rewrite\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public HTTPRewrite Rewrite { get; set; } Property Value Type Description HTTPRewrite Route A HTTP rule can either redirect or forward (default) traffic. The forwarding target can be one of several versions of a service (see glossary in beginning of document). Weights associated with the service version determine the proportion of traffic it receives. Declaration [JsonProperty(PropertyName = \"route\", Required = Required.Always)] public List<HTTPRouteDestination> Route { get; set; } Property Value Type Description List < HTTPRouteDestination > Timeout Timeout for HTTP requests, default is disabled. Declaration [JsonProperty(PropertyName = \"timeout\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Timeout { get; set; } Property Value Type Description String Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.HTTPRouteDestination.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.HTTPRouteDestination.html",
    "title": "Class HTTPRouteDestination | NeonKUBE documentation",
    "keywords": "Class HTTPRouteDestination Each routing rule is associated with one or more service versions (see glossary in beginning of document). Weights associated with the version determine the proportion of traffic it receives. For example, the following rule will route 25% of traffic for the “reviews” service to instances with the “v2” tag and the remaining traffic (i.e., 75%) to “v1”. Inheritance Object HTTPRouteDestination Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class HTTPRouteDestination : IValidate Constructors HTTPRouteDestination() Initializes a new instance of the HTTPRouteDestination class. Declaration public HTTPRouteDestination() Properties Destination Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to. Declaration [JsonProperty(PropertyName = \"destination\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Destination Destination { get; set; } Property Value Type Description Destination Headers Header manipulation rules Declaration [JsonProperty(PropertyName = \"headers\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Headers Headers { get; set; } Property Value Type Description Headers weight The proportion of traffic to be forwarded to the service version. (0-100). Sum of weights across destinations SHOULD BE == 100. If there is only one destination in a rule, the weight value is assumed to be 100. Declaration [JsonProperty(PropertyName = \"weight\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int? weight { get; set; } Property Value Type Description Nullable < Int32 > Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.L4MatchAttributes.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.L4MatchAttributes.html",
    "title": "Class L4MatchAttributes | NeonKUBE documentation",
    "keywords": "Class L4MatchAttributes L4 connection match attributes. Note that L4 connection matching support is incomplete. Inheritance Object L4MatchAttributes Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class L4MatchAttributes : IValidate Constructors L4MatchAttributes() Initializes a new instance of the L4MatchAttributes class. Declaration public L4MatchAttributes() Properties DestinationSubnets IPv4 or IPv6 ip addresses of destination with optional subnet. E.g., a.b.c.d/xx form or just a.b.c.d. Declaration [JsonProperty(PropertyName = \"destinationSubnets\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> DestinationSubnets { get; set; } Property Value Type Description List < String > Gateways Names of gateways where the rule should be applied. Gateway names in the top-level gateways field of the VirtualService (if any) are overridden. The gateway match is independent of sourceLabels. Declaration [JsonProperty(PropertyName = \"gateways\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> Gateways { get; set; } Property Value Type Description List < String > Port Specifies the port on the host that is being addressed. Many services only expose a single port or label ports with the protocols they support, in these cases it is not required to explicitly select the port. Declaration [JsonProperty(PropertyName = \"port\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int? Port { get; set; } Property Value Type Description Nullable < Int32 > SourceLabels One or more labels that constrain the applicability of a rule to workloads with the given labels. If the VirtualService has a list of gateways specified in the top-level gateways field, it should include the reserved gateway mesh in order for this field to be applicable. Declaration [JsonProperty(PropertyName = \"sourceLabels\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Dictionary<string, string> SourceLabels { get; set; } Property Value Type Description Dictionary < String , String > SourceNamespace Source namespace constraining the applicability of a rule to workloads in that namespace. If the VirtualService has a list of gateways specified in the top-level gateways field, it must include the reserved gateway mesh for this field to be applicable. Declaration [JsonProperty(PropertyName = \"sourceNamespace\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string SourceNamespace { get; set; } Property Value Type Description String Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.Location.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.Location.html",
    "title": "Enum Location | NeonKUBE documentation",
    "keywords": "Enum Location Location specifies whether the service is part of Istio mesh or outside the mesh. Location determines the behavior of several features, such as service-to-service mTLS authentication, policy enforcement, etc. When communicating with services outside the mesh, Istio’s mTLS authentication is disabled, and policy enforcement is performed on the client-side as opposed to server-side. Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(StringEnumConverter))] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum Location Fields Name Description MeshExternal Signifies that the service is external to the mesh. Typically used to indicate external services consumed through APIs. MeshInternal Signifies that the service is part of the mesh. Typically used to indicate services added explicitly as part of expanding the service mesh to include unmanaged infrastructure (e.g., VMs added to a Kubernetes based service mesh)."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.Percent.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.Percent.html",
    "title": "Class Percent | NeonKUBE documentation",
    "keywords": "Class Percent Percent specifies the number of a port to be used for matching or selection for final routing. Inheritance Object Percent Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class Percent : IValidate Constructors Percent() Initializes a new instance of the Percent class. Declaration public Percent() Properties Value A percentage in the range of [0.0, 100.0]. Declaration [JsonProperty(PropertyName = \"value\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public double? Value { get; set; } Property Value Type Description Nullable < Double > Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.Port.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.Port.html",
    "title": "Class Port | NeonKUBE documentation",
    "keywords": "Class Port Describes the properties of a specific port of a service. Inheritance Object Port Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class Port : IValidate Constructors Port() Initializes a new instance of the Port class. Declaration public Port() Properties Name Label assigned to the port. Declaration [JsonProperty(PropertyName = \"name\", Required = Required.Always)] public string Name { get; set; } Property Value Type Description String Number A valid non-negative integer port number. Declaration [JsonProperty(PropertyName = \"number\", Required = Required.Always)] public int Number { get; set; } Property Value Type Description Int32 Protocol The protocol exposed on the port. Declaration [JsonProperty(PropertyName = \"protocol\", Required = Required.Always)] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public PortProtocol Protocol { get; set; } Property Value Type Description PortProtocol TargetPort The port number on the endpoint where the traffic will be received. Applicable only when used with ServiceEntries. Declaration [JsonProperty(PropertyName = \"targetPort\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int? TargetPort { get; set; } Property Value Type Description Nullable < Int32 > Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.PortProtocol.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.PortProtocol.html",
    "title": "Enum PortProtocol | NeonKUBE documentation",
    "keywords": "Enum PortProtocol The protocol exposed on the port. Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(StringEnumConverter))] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum PortProtocol Fields Name Description GRPC GRPC HTTP HTTP HTTP2 HTTP2 HTTPS HTTPS MONGO MONGO TCP TCP TLS TLS"
  },
  "neonkube/api/Neon.Kube.Resources.Istio.PortSelector.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.PortSelector.html",
    "title": "Class PortSelector | NeonKUBE documentation",
    "keywords": "Class PortSelector PortSelector specifies the number of a port to be used for matching or selection for final routing. Inheritance Object PortSelector Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class PortSelector : IValidate Constructors PortSelector() Initializes a new instance of the PortSelector class. Declaration public PortSelector() Properties Number Valid port number. Declaration [JsonProperty(PropertyName = \"number\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int? Number { get; set; } Property Value Type Description Nullable < Int32 > Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.Resolution.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.Resolution.html",
    "title": "Enum Resolution | NeonKUBE documentation",
    "keywords": "Enum Resolution Resolution determines how the proxy will resolve the IP addresses of the network endpoints associated with the service, so that it can route to one of them. The resolution mode specified here has no impact on how the application resolves the IP address associated with the service. The application may still have to use DNS to resolve the service to an IP so that the outbound traffic can be captured by the Proxy. Alternatively, for HTTP services, the application could directly communicate with the proxy (e.g., by setting HTTP_PROXY) to talk to these services. Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(StringEnumConverter))] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum Resolution Fields Name Description Dns Attempt to resolve the IP address by querying the ambient DNS, asynchronously. If no endpoints are specified, the proxy will resolve the DNS address specified in the hosts field, if wildcards are not used. If endpoints are specified, the DNS addresses specified in the endpoints will be resolved to determine the destination IP address. DNS resolution cannot be used with Unix domain socket endpoints. DnsRoundRobin Attempt to resolve the IP address by querying the ambient DNS, asynchronously. Unlike DNS, DNSROUNDROBIN only uses the first IP address returned when a new connection needs to be initiated without relying on complete results of DNS resolution and connections made to hosts will be retained even if DNS records change frequently eliminating draining connection pools and connection cycling. This is best suited for large web scale services that must be accessed via DNS. The proxy will resolve the DNS address specified in the hosts field, if wildcards are not used. DNS resolution cannot be used with Unix domain socket endpoints. None Assume that incoming connections have already been resolved (to a specific destination IP address). Such connections are typically routed via the proxy using mechanisms such as IP table REDIRECT/ eBPF. After performing any routing related transformations, the proxy will forward the connection to the IP address to which the connection was bound. Static Use the static IP addresses specified in endpoints (see below) as the backing instances associated with the service."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.RouteDestination.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.RouteDestination.html",
    "title": "Class RouteDestination | NeonKUBE documentation",
    "keywords": "Class RouteDestination L4 routing rule weighted destination. Inheritance Object RouteDestination Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class RouteDestination : IValidate Constructors RouteDestination() Initializes a new instance of the RouteDestination class. Declaration public RouteDestination() Properties Destination Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to. Declaration [JsonProperty(PropertyName = \"destination\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Destination Destination { get; set; } Property Value Type Description Destination weight The proportion of traffic to be forwarded to the service version. If there is only one destination in a rule, all traffic will be routed to it irrespective of the weight. Declaration [JsonProperty(PropertyName = \"weight\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int? weight { get; set; } Property Value Type Description Nullable < Int32 > Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.Server.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.Server.html",
    "title": "Class Server | NeonKUBE documentation",
    "keywords": "Class Server Describes the properties of the proxy on a given load balancer port. Inheritance Object Server Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class Server Constructors Server() Initializes a new instance of the Server class. Declaration public Server() Properties Bind The ip or the Unix domain socket to which the listener should be bound to. Format: x.x.x.x or unix:///path/to/uds or unix://@foobar (Linux abstract namespace). When using Unix domain sockets, the port number should be 0. This can be used to restrict the reachability of this server to be gateway internal only. This is typically used when a gateway needs to communicate to another mesh service e.g. publishing metrics. In such case, the server created with the specified bind will not be available to external gateway clients. Declaration [JsonProperty(PropertyName = \"bind\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Bind { get; set; } Property Value Type Description String Hosts One or more hosts exposed by this gateway. While typically applicable to HTTP services, it can also be used for TCP services using TLS with SNI. A host is specified as a dnsName with an optional namespace/ prefix. The dnsName should be specified using FQDN format, optionally including a wildcard character in the left-most component (e.g., prod/ .example.com). Set the dnsName to * to select all VirtualService hosts from the specified namespace (e.g.,prod/ ). The namespace can be set to * or ., representing any or the current namespace, respectively. For example, */foo.example.com selects the service from any available namespace while ./foo.example.com only selects the service from the namespace of the sidecar. The default, if no namespace/ is specified, is */, that is, select services from any namespace. Any associated DestinationRule in the selected namespace will also be used. A VirtualService must be bound to the gateway and must have one or more hosts that match the hosts specified in a server. The match could be an exact match or a suffix match with the server’s hosts. For example, if the server’s hosts specifies *.example.com, a VirtualService with hosts dev.example.com or prod.example.com will match. However, a VirtualService with host example.com or newexample.com will not match. NOTE: Only virtual services exported to the gateway’s namespace (e.g., exportTo value of *) can be referenced. Private configurations (e.g., exportTo set to .) will not be available. Refer to the exportTo setting in VirtualService, DestinationRule, and ServiceEntry configurations for details. Declaration [JsonProperty(PropertyName = \"hosts\", Required = Required.Always)] public List<string> Hosts { get; set; } Property Value Type Description List < String > Name An optional name of the server, when set must be unique across all servers. This will be used for variety of purposes like prefixing stats generated with this name etc. Declaration [JsonProperty(PropertyName = \"name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Name { get; set; } Property Value Type Description String Port The Port on which the proxy should listen for incoming connections. Declaration [JsonProperty(PropertyName = \"port\", Required = Required.Always)] public Port Port { get; set; } Property Value Type Description Port TLS Set of TLS related options that govern the server’s behavior. Use these options to control if all http requests should be redirected to https, and the TLS modes to use. Declaration [JsonProperty(PropertyName = \"tls\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public ServerTLSSettings TLS { get; set; } Property Value Type Description ServerTLSSettings"
  },
  "neonkube/api/Neon.Kube.Resources.Istio.ServerTLSSettings.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.ServerTLSSettings.html",
    "title": "Class ServerTLSSettings | NeonKUBE documentation",
    "keywords": "Class ServerTLSSettings Inheritance Object ServerTLSSettings Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class ServerTLSSettings : IValidate Constructors ServerTLSSettings() Initializes a new instance of the ServerTLSSettings class. Declaration public ServerTLSSettings() Properties CaCertificates The path to a file containing certificate authority certificates to use in verifying a presented client side certificate. Declaration [JsonProperty(PropertyName = \"caCertificates\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string CaCertificates { get; set; } Property Value Type Description String Remarks REQUIRED if Mode is Mutual . CipherSuites If specified, only support the specified cipher list. Otherwise default to the default cipher list supported by Envoy. Declaration [JsonProperty(PropertyName = \"cipherSuites\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> CipherSuites { get; set; } Property Value Type Description List < String > CredentialName For gateways running on Kubernetes, the name of the secret that holds the TLS certs including the CA certificates. Applicable only on Kubernetes. The secret (of type generic) should contain the following keys and values: key: privateKey and cert: serverCert . For mutual TLS, cacert: CACertificate can be provided in the same secret or a separate secret named secret-cacert . Secret of type TLS for server certificates along with ca.crt key for CA certificates is also supported. Only one of server certificates and CA certificate or credentialName can be specified. Declaration [JsonProperty(PropertyName = \"credentialName\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string CredentialName { get; set; } Property Value Type Description String HttpsRedirect If set to true, the load balancer will send a 301 redirect for all http connections, asking the clients to use HTTPS. Declaration [JsonProperty(PropertyName = \"httpsRedirect\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public bool? HttpsRedirect { get; set; } Property Value Type Description Nullable < Boolean > MaxProtocolVersion Minimum TLS protocol version. Declaration [JsonProperty(PropertyName = \"maxProtocolVersion\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public TLSProtocol? MaxProtocolVersion { get; set; } Property Value Type Description Nullable < TLSProtocol > MinProtocolVersion Minimum TLS protocol version. Declaration [JsonProperty(PropertyName = \"minProtocolVersion\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public TLSProtocol? MinProtocolVersion { get; set; } Property Value Type Description Nullable < TLSProtocol > Mode Indicates whether connections to this port should be secured using TLS. The value of this field determines how TLS is enforced. Declaration [JsonProperty(PropertyName = \"mode\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public TLSMode? Mode { get; set; } Property Value Type Description Nullable < TLSMode > PrivateKey The path to the file holding the server’s private key. Declaration [JsonProperty(PropertyName = \"privateKey\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string PrivateKey { get; set; } Property Value Type Description String Remarks REQUIRED if Mode is Simple or Mutual . ServerCertificate The path to the file holding the server-side TLS certificate to use. Declaration [JsonProperty(PropertyName = \"serverCertificate\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string ServerCertificate { get; set; } Property Value Type Description String Remarks REQUIRED if Mode is Simple or Mutual . SubjectAltNames A list of alternate names to verify the subject identity in the certificate presented by the client. Declaration [JsonProperty(PropertyName = \"subjectAltNames\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> SubjectAltNames { get; set; } Property Value Type Description List < String > VerifyCertificateHash An optional list of hex-encoded SHA-256 hashes of the authorized client certificates. Both simple and colon separated formats are acceptable. Note: When both verifycertificatehash and verifycertificatespki are specified, a hash matching either value will result in the certificate being accepted. Declaration [JsonProperty(PropertyName = \"verifyCertificateHash\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> VerifyCertificateHash { get; set; } Property Value Type Description List < String > VerifyCertificateSpki An optional list of base64-encoded SHA-256 hashes of the SKPIs of authorized client certificates. Note: When both verifycertificatehash and verifycertificatespki are specified, a hash matching either value will result in the certificate being accepted. Declaration [JsonProperty(PropertyName = \"verifyCertificateSpki\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> VerifyCertificateSpki { get; set; } Property Value Type Description List < String > Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.ServiceEntry.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.ServiceEntry.html",
    "title": "Class ServiceEntry | NeonKUBE documentation",
    "keywords": "Class ServiceEntry ServiceEntry enables adding additional entries into Istio’s internal service registry. Inheritance Object ServiceEntry Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"networking.istio.io\", Kind = \"ServiceEntry\", ApiVersion = \"v1beta1\", PluralName = \"serviceentrys\")] public class ServiceEntry : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1ServiceEntrySpec>, IValidate Constructors ServiceEntry() Initializes a new instance of the ServiceEntry class. Declaration public ServiceEntry() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1beta1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"networking.istio.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"ServiceEntry\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"serviceentrys\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\")] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\")] public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration [JsonProperty(PropertyName = \"metadata\")] public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the ServiceEntry. Declaration [JsonProperty(PropertyName = \"spec\")] public V1ServiceEntrySpec Spec { get; set; } Property Value Type Description V1ServiceEntrySpec Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Istio.StringMatch.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.StringMatch.html",
    "title": "Class StringMatch | NeonKUBE documentation",
    "keywords": "Class StringMatch Describes how to match a given string in HTTP headers. Match is case-sensitive. Inheritance Object StringMatch Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class StringMatch : IValidate Constructors StringMatch() Initializes a new instance of the StringMatch class. Declaration public StringMatch() Properties Exact exact string match Declaration [JsonProperty(PropertyName = \"exact\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Exact { get; set; } Property Value Type Description String Prefix prefix-based match Declaration [JsonProperty(PropertyName = \"prefix\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Prefix { get; set; } Property Value Type Description String Regex RE2 style regex-based match ( https://github.com/google/re2/wiki/Syntax ). Declaration [JsonProperty(PropertyName = \"regex\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Regex { get; set; } Property Value Type Description String Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.TCPRoute.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.TCPRoute.html",
    "title": "Class TCPRoute | NeonKUBE documentation",
    "keywords": "Class TCPRoute Describes match conditions and actions for routing TCP traffic. The following routing rule forwards traffic arriving at port 27017 for mongo.prod.svc.cluster.local to another Mongo server on port 5555. Inheritance Object TCPRoute Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class TCPRoute : IValidate Constructors TCPRoute() Initializes a new instance of the TCPRoute class. Declaration public TCPRoute() Properties Match Match conditions to be satisfied for the rule to be activated. All conditions inside a single match block have AND semantics, while the list of match blocks have OR semantics. The rule is matched if any one of the match blocks succeed. Declaration [JsonProperty(PropertyName = \"match\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<L4MatchAttributes> Match { get; set; } Property Value Type Description List < L4MatchAttributes > Route The destination to which the connection should be forwarded to. Declaration [JsonProperty(PropertyName = \"route\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<RouteDestination> Route { get; set; } Property Value Type Description List < RouteDestination > Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.TLSMatchAttributes.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.TLSMatchAttributes.html",
    "title": "Class TLSMatchAttributes | NeonKUBE documentation",
    "keywords": "Class TLSMatchAttributes TLS connection match attributes. Inheritance Object TLSMatchAttributes Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class TLSMatchAttributes : IValidate Constructors TLSMatchAttributes() Initializes a new instance of the TLSMatchAttributes class. Declaration public TLSMatchAttributes() Properties DestinationSubnets IPv4 or IPv6 ip addresses of destination with optional subnet. E.g., a.b.c.d/xx form or just a.b.c.d. Declaration [JsonProperty(PropertyName = \"destinationSubnets\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> DestinationSubnets { get; set; } Property Value Type Description List < String > Gateways Names of gateways where the rule should be applied. Gateway names in the top-level gateways field of the VirtualService (if any) are overridden. The gateway match is independent of sourceLabels. Declaration [JsonProperty(PropertyName = \"gateways\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> Gateways { get; set; } Property Value Type Description List < String > Port Specifies the port on the host that is being addressed. Many services only expose a single port or label ports with the protocols they support, in these cases it is not required to explicitly select the port. Declaration [JsonProperty(PropertyName = \"port\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int? Port { get; set; } Property Value Type Description Nullable < Int32 > SniHosts SNI (server name indicator) to match on. Wildcard prefixes can be used in the SNI value, e.g., *.com will match foo.example.com as well as example.com. An SNI value must be a subset (i.e., fall within the domain) of the corresponding virtual serivce’s hosts. Declaration [JsonProperty(PropertyName = \"sniHosts\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> SniHosts { get; set; } Property Value Type Description List < String > SourceLabels One or more labels that constrain the applicability of a rule to workloads with the given labels. If the VirtualService has a list of gateways specified in the top-level gateways field, it should include the reserved gateway mesh in order for this field to be applicable. Declaration [JsonProperty(PropertyName = \"sourceLabels\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Dictionary<string, string> SourceLabels { get; set; } Property Value Type Description Dictionary < String , String > SourceNamespace Source namespace constraining the applicability of a rule to workloads in that namespace. If the VirtualService has a list of gateways specified in the top-level gateways field, it must include the reserved gateway mesh for this field to be applicable. Declaration [JsonProperty(PropertyName = \"sourceNamespace\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string SourceNamespace { get; set; } Property Value Type Description String Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.TLSMode.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.TLSMode.html",
    "title": "Enum TLSMode | NeonKUBE documentation",
    "keywords": "Enum TLSMode TLS modes enforced by the proxy. Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(StringEnumConverter))] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum TLSMode Fields Name Description AutoPassthrough Similar to the passthrough mode, except servers with this TLS mode do not require an associated VirtualService to map from the SNI value to service in the registry. The destination details such as the service/subset/port are encoded in the SNI value. The proxy will forward to the upstream (Envoy) cluster (a group of endpoints) specified by the SNI value. This server is typically used to provide connectivity between services in disparate L3 networks that otherwise do not have direct connectivity between their respective endpoints. Use of this mode assumes that both the source and the destination are using Istio mTLS to secure traffic. In order for this mode to be enabled, the gateway deployment must be configured with the ISTIO_META_ROUTER_MODE=sni-dnat environment variable. IstioMutual Secure connections from the downstream using mutual TLS by presenting server certificates for authentication. Compared to Mutual mode, this mode uses certificates, representing gateway workload identity, generated automatically by Istio for mTLS authentication. When this mode is used, all other fields in TLSOptions should be empty. Mutual Secure connections to the downstream using mutual TLS by presenting server certificates for authentication. Passthrough The SNI string presented by the client will be used as the match criterion in a VirtualService TLS route to determine the destination service from the service registry. Simple Secure connections with standard TLS semantics."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.TLSProtocol.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.TLSProtocol.html",
    "title": "Enum TLSProtocol | NeonKUBE documentation",
    "keywords": "Enum TLSProtocol TLSProtocol controls how private keys should be regenerated when a re-issuance is being processed. Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(StringEnumConverter))] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum TLSProtocol Fields Name Description Always A private key matching the specified requirements will be generated whenever a re-issuance occurs Never A private key will only be generated if one does not already exist in the target spec.secretName . If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.TLSRoute.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.TLSRoute.html",
    "title": "Class TLSRoute | NeonKUBE documentation",
    "keywords": "Class TLSRoute Describes match conditions and actions for routing unterminated TLS traffic (TLS/HTTPS) The following routing rule forwards unterminated TLS traffic arriving at port 443 of gateway called “mygateway” to internal services in the mesh based on the SNI value. Inheritance Object TLSRoute Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class TLSRoute : IValidate Constructors TLSRoute() Initializes a new instance of the TLSRoute class. Declaration public TLSRoute() Properties Match Match conditions to be satisfied for the rule to be activated. All conditions inside a single match block have AND semantics, while the list of match blocks have OR semantics. The rule is matched if any one of the match blocks succeed. Declaration [JsonProperty(PropertyName = \"match\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<TLSMatchAttributes> Match { get; set; } Property Value Type Description List < TLSMatchAttributes > Route The protocol exposed on the TLSRoute. Declaration [JsonProperty(PropertyName = \"route\", Required = Required.Always)] public List<RouteDestination> Route { get; set; } Property Value Type Description List < RouteDestination > Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.Tracing.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.Tracing.html",
    "title": "Class Tracing | NeonKUBE documentation",
    "keywords": "Class Tracing Describes tracing configuration. Inheritance Object Tracing Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class Tracing : IValidate Constructors Tracing() Initializes a new instance of the Tracing class. Declaration public Tracing() Properties Providers The tracing providers. Declaration [JsonProperty(PropertyName = \"Providers\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<TracingProvider> Providers { get; set; } Property Value Type Description List < TracingProvider > RandomSamplingPercentage The sampling percentage. Declaration [JsonProperty(PropertyName = \"RandomSamplingPercentage\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public double RandomSamplingPercentage { get; set; } Property Value Type Description Double Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.TracingProvider.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.TracingProvider.html",
    "title": "Class TracingProvider | NeonKUBE documentation",
    "keywords": "Class TracingProvider Descrribes a tracing provider. Inheritance Object TracingProvider Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class TracingProvider : IValidate Constructors TracingProvider() Initializes a new instance of the TracingProvider class. Declaration public TracingProvider() Properties Name The Tracing provider name. Declaration [JsonProperty(PropertyName = \"name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Name { get; set; } Property Value Type Description String Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.UInt32Value.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.UInt32Value.html",
    "title": "Class UInt32Value | NeonKUBE documentation",
    "keywords": "Class UInt32Value Wrapper message for uint32. The JSON representation for UInt32Value is JSON number. Inheritance Object UInt32Value Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class UInt32Value : IValidate Constructors UInt32Value() Initializes a new instance of the UInt32Value class. Declaration public UInt32Value() Properties Value The uint32 value. Declaration [JsonProperty(PropertyName = \"value\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int? Value { get; set; } Property Value Type Description Nullable < Int32 > Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails."
  },
  "neonkube/api/Neon.Kube.Resources.Istio.V1Gateway.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.V1Gateway.html",
    "title": "Class V1Gateway | NeonKUBE documentation",
    "keywords": "Class V1Gateway Inheritance Object V1Gateway Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"networking.istio.io\", Kind = \"Gateway\", ApiVersion = \"v1beta1\", PluralName = \"gateways\")] public class V1Gateway : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1GatewaySpec>, IValidate Constructors V1Gateway() Initializes a new instance of the Gateway class. Declaration public V1Gateway() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1beta1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"networking.istio.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"Gateway\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"gateways\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\")] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\")] public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration [JsonProperty(PropertyName = \"metadata\")] public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the Gateway. Declaration [JsonProperty(PropertyName = \"spec\")] public V1GatewaySpec Spec { get; set; } Property Value Type Description V1GatewaySpec Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Istio.V1GatewaySpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.V1GatewaySpec.html",
    "title": "Class V1GatewaySpec | NeonKUBE documentation",
    "keywords": "Class V1GatewaySpec Describes a load balancer operating at the edge of the mesh receiving incoming or outgoing HTTP/TCP connections. Inheritance Object V1GatewaySpec Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class V1GatewaySpec Constructors V1GatewaySpec() Constructor. Declaration public V1GatewaySpec() Properties Selector One or more labels that indicate a specific set of pods/VMs on which this gateway configuration should be applied. By default workloads are searched across all namespaces based on label selectors. This implies that a gateway resource in the namespace “foo” can select pods in the namespace “bar” based on labels. This behavior can be controlled via the PILOT_SCOPE_GATEWAY_TO_NAMESPACE environment variable in istiod. If this variable is set to true, the scope of label search is restricted to the configuration namespace in which the the resource is present. In other words, the Gateway resource must reside in the same namespace as the gateway workload instance. If selector is nil, the Gateway will be applied to all workloads. Declaration [JsonProperty(PropertyName = \"selector\", Required = Required.Always)] public Dictionary<string, string> Selector { get; set; } Property Value Type Description Dictionary < String , String > Servers Describes the properties of the proxy on a given load balancer port. Declaration [JsonProperty(PropertyName = \"servers\", Required = Required.Always)] public List<Server> Servers { get; set; } Property Value Type Description List < Server >"
  },
  "neonkube/api/Neon.Kube.Resources.Istio.V1ServiceEntrySpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.V1ServiceEntrySpec.html",
    "title": "Class V1ServiceEntrySpec | NeonKUBE documentation",
    "keywords": "Class V1ServiceEntrySpec ServiceEntry enables adding additional entries into Istio’s internal service registry. Inheritance Object V1ServiceEntrySpec Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class V1ServiceEntrySpec Constructors V1ServiceEntrySpec() Constructor. Declaration public V1ServiceEntrySpec() Properties Addresses The virtual IP addresses associated with the service. Could be CIDR prefix. For HTTP traffic, generated route configurations will include http route domains for both the addresses and hosts field values and the destination will be identified based on the HTTP Host/Authority header. If one or more IP addresses are specified, the incoming traffic will be identified as belonging to this service if the destination IP matches the IP/CIDRs specified in the addresses field. If the Addresses field is empty, traffic will be identified solely based on the destination port. In such scenarios, the port on which the service is being accessed must not be shared by any other service in the mesh. In other words, the sidecar will behave as a simple TCP proxy, forwarding incoming traffic on a specified port to the specified destination endpoint IP/host. Unix domain socket addresses are not supported in this field. Declaration [JsonProperty(PropertyName = \"addresses\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> Addresses { get; set; } Property Value Type Description List < String > Endpoints One or more endpoints associated with the service. Only one of endpoints or workloadSelector can be specified. Declaration [JsonProperty(PropertyName = \"endpoints\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<WorkloadEntry> Endpoints { get; set; } Property Value Type Description List < WorkloadEntry > ExportTo A list of namespaces to which this service is exported. Exporting a service allows it to be used by sidecars, gateways and virtual services defined in other namespaces. This feature provides a mechanism for service owners and mesh administrators to control the visibility of services across namespace boundaries. If no namespaces are specified then the service is exported to all namespaces by default. The value “.” is reserved and defines an export to the same namespace that the service is declared in. Similarly the value “*” is reserved and defines an export to all namespaces. For a Kubernetes Service, the equivalent effect can be achieved by setting the annotation “networking.istio.io/exportTo” to a comma-separated list of namespace names. Declaration [JsonProperty(PropertyName = \"exportTo\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> ExportTo { get; set; } Property Value Type Description List < String > Hosts The destination hosts. Declaration [JsonProperty(PropertyName = \"hosts\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> Hosts { get; set; } Property Value Type Description List < String > Remarks The hosts associated with the ServiceEntry. Could be a DNS name with wildcard prefix. The hosts field is used to select matching hosts in VirtualServices and DestinationRules. For HTTP traffic the HTTP Host/Authority header will be matched against the hosts field. For HTTPs or TLS traffic containing Server Name Indication(SNI), the SNI value will be matched against the hosts field. note When resolution is set to type DNS and no endpoints are specified, the host field will be used as the DNS name of the endpoint to route traffic to. note If the hostname matches with the name of a service from another service registry such as Kubernetes that also supplies its own set of endpoints, the ServiceEntry will be treated as a decorator of the existing Kubernetes service. Properties in the service entry will be added to the Kubernetes service if applicable. Currently, only the following additional properties will be considered by istiod: subjectAltNames: In addition to verifying the SANs of the service accounts associated with the pods of the service, the SANs specified here will also be verified. Location Specify whether the service should be considered external to the mesh or part of the mesh. Declaration [JsonProperty(PropertyName = \"location\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public Location? Location { get; set; } Property Value Type Description Nullable < Location > Ports The ports associated with the external service. If the Endpoints are Unix domain socket addresses, there must be exactly one port. Declaration [JsonProperty(PropertyName = \"ports\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<Port> Ports { get; set; } Property Value Type Description List < Port > Resolution Service discovery mode for the hosts. Care must be taken when setting the resolution mode to NONE for a TCP port without accompanying IP addresses. In such cases, traffic to any IP on said port will be allowed (i.e. 0.0.0.0:PORT). Declaration [JsonProperty(PropertyName = \"resolution\", Required = Required.Always, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public Resolution Resolution { get; set; } Property Value Type Description Resolution SubjectAltNames If specified, the proxy will verify that the server certificate’s subject alternate name matches one of the specified values. note When using the workloadEntry with workloadSelectors, the service account specified in the workloadEntry will also be used to derive the additional subject alternate names that should be verified. Declaration [JsonProperty(PropertyName = \"subjectAltNames\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> SubjectAltNames { get; set; } Property Value Type Description List < String > WorkloadSelector Applicable only for MESH_INTERNAL services. Only one of endpoints or workloadSelector can be specified. Selects one or more Kubernetes pods or VM workloads (specified using WorkloadEntry) based on their labels. The WorkloadEntry object representing the VMs should be defined in the same namespace as the ServiceEntry. Declaration [JsonProperty(PropertyName = \"workloadSelector\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public WorkloadSelector WorkloadSelector { get; set; } Property Value Type Description WorkloadSelector"
  },
  "neonkube/api/Neon.Kube.Resources.Istio.V1Telemetry.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.V1Telemetry.html",
    "title": "Class V1Telemetry | NeonKUBE documentation",
    "keywords": "Class V1Telemetry CRD that controls Istio tracing. Inheritance Object V1Telemetry Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"telemetry.istio.io\", Kind = \"Telemetry\", ApiVersion = \"v1alpha1\", PluralName = \"telemetries\")] public class V1Telemetry : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1TelemetrySpec>, IValidate Constructors V1Telemetry() Initializes a new instance of the Telemetry class. Declaration public V1Telemetry() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1alpha1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"telemetry.istio.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"Telemetry\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"telemetries\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\")] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\")] public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration [JsonProperty(PropertyName = \"metadata\")] public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the Telemetry. Declaration [JsonProperty(PropertyName = \"spec\")] public V1TelemetrySpec Spec { get; set; } Property Value Type Description V1TelemetrySpec Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Istio.V1TelemetrySpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.V1TelemetrySpec.html",
    "title": "Class V1TelemetrySpec | NeonKUBE documentation",
    "keywords": "Class V1TelemetrySpec Describes a Telemetry spec. Inheritance Object V1TelemetrySpec Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class V1TelemetrySpec Constructors V1TelemetrySpec() Constructor. Declaration public V1TelemetrySpec() Properties Tracing The tracing config. Declaration [JsonProperty(PropertyName = \"tracing\", Required = Required.Default)] public List<Tracing> Tracing { get; set; } Property Value Type Description List < Tracing >"
  },
  "neonkube/api/Neon.Kube.Resources.Istio.V1VirtualServiceSpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.V1VirtualServiceSpec.html",
    "title": "Class V1VirtualServiceSpec | NeonKUBE documentation",
    "keywords": "Class V1VirtualServiceSpec Describes a load balancer operating at the edge of the mesh receiving incoming or outgoing HTTP/TCP connections. Inheritance Object V1VirtualServiceSpec Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class V1VirtualServiceSpec Constructors V1VirtualServiceSpec() Constructor. Declaration public V1VirtualServiceSpec() Properties ExportTo A list of namespaces to which this virtual service is exported. Exporting a virtual service allows it to be used by sidecars and gateways defined in other namespaces. This feature provides a mechanism for service owners and mesh administrators to control the visibility of virtual services across namespace boundaries. If no namespaces are specified then the virtual service is exported to all namespaces by default. The value “.” is reserved and defines an export to the same namespace that the virtual service is declared in. Similarly the value “*” is reserved and defines an export to all namespaces. Declaration [JsonProperty(PropertyName = \"exportTo\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> ExportTo { get; set; } Property Value Type Description List < String > Gateways The names of gateways and sidecars that should apply these routes. Gateways in other namespaces may be referred to by <gateway namespace>/<gateway name>; specifying a gateway with no namespace qualifier is the same as specifying the VirtualService’s namespace. A single VirtualService is used for sidecars inside the mesh as well as for one or more gateways. The selection condition imposed by this field can be overridden using the source field in the match conditions of protocol-specific routes. The reserved word mesh is used to imply all the sidecars in the mesh. When this field is omitted, the default gateway (mesh) will be used, which would apply the rule to all sidecars in the mesh. If a list of gateway names is provided, the rules will apply only to the gateways. To apply the rules to both gateways and sidecars, specify mesh as one of the gateway names. Declaration [JsonProperty(PropertyName = \"gateways\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> Gateways { get; set; } Property Value Type Description List < String > Hosts The destination hosts. Declaration [JsonProperty(PropertyName = \"hosts\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<string> Hosts { get; set; } Property Value Type Description List < String > Remarks The destination hosts to which traffic is being sent. Could be a DNS name with wildcard prefix or an IP address. Depending on the platform, short-names can also be used instead of a FQDN (i.e. has no dots in the name). In such a scenario, the FQDN of the host would be derived based on the underlying platform. A single VirtualService can be used to describe all the traffic properties of the corresponding hosts, including those for multiple HTTP and TCP ports. Alternatively, the traffic properties of a host can be defined using more than one VirtualService, with certain caveats. Refer to the Operations Guide for details. Note for Kubernetes users: When short names are used(e.g. “reviews” instead of “reviews.default.svc.cluster.local”), Istio will interpret the short name based on the namespace of the rule, not the service.A rule in the “default” namespace containing a host “reviews” will be interpreted as “reviews.default.svc.cluster.local”, irrespective of the actual namespace associated with the reviews service.To avoid potential misconfigurations, it is recommended to always use fully qualified domain names over short names. The hosts field applies to both HTTP and TCP services.Service inside the mesh, i.e., those found in the service registry, must always be referred to using their alphanumeric names.IP addresses are allowed only for services defined via the Gateway. note This must be empty for a delegate VirtualService. Http An ordered list of route rules for HTTP traffic. HTTP routes will be applied to platform service ports named ‘http-’/‘http2-’/‘grpc-*’, gateway ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service entry ports using HTTP/HTTP2/GRPC protocols. The first rule matching an incoming request is used. Declaration [JsonProperty(PropertyName = \"http\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<HTTPRoute> Http { get; set; } Property Value Type Description List < HTTPRoute > TCP An ordered list of route rules for opaque TCP traffic. TCP routes will be applied to any port that is not a HTTP or TLS port. The first rule matching an incoming request is used. Declaration [JsonProperty(PropertyName = \"tcp\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<TCPRoute> TCP { get; set; } Property Value Type Description List < TCPRoute > TLS An ordered list of route rule for non-terminated TLS and HTTPS traffic. Routing is typically performed using the SNI value presented by the ClientHello message. TLS routes will be applied to platform service ports named https- , tls- , unterminated gateway ports using HTTPS/TLS protocols (i.e. with passthrough TLS mode) and service entry ports using HTTPS/TLS protocols. The first rule matching an incoming request is used. note Traffic https- or tls- ports without associated virtual service will be treated as opaque TCP traffic. Declaration [JsonProperty(PropertyName = \"tls\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public List<TLSRoute> TLS { get; set; } Property Value Type Description List < TLSRoute >"
  },
  "neonkube/api/Neon.Kube.Resources.Istio.VirtualService.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.VirtualService.html",
    "title": "Class VirtualService | NeonKUBE documentation",
    "keywords": "Class VirtualService Inheritance Object VirtualService Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"networking.istio.io\", Kind = \"VirtualService\", ApiVersion = \"v1beta1\", PluralName = \"virtualservices\")] public class VirtualService : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1VirtualServiceSpec>, IValidate Constructors VirtualService() Initializes a new instance of the VirtualService class. Declaration public VirtualService() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1beta1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"networking.istio.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"VirtualService\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"virtualservices\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\")] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\")] public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration [JsonProperty(PropertyName = \"metadata\")] public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the VirtualService. Declaration [JsonProperty(PropertyName = \"spec\")] public V1VirtualServiceSpec Spec { get; set; } Property Value Type Description V1VirtualServiceSpec Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Istio.WorkloadEntry.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.WorkloadEntry.html",
    "title": "Class WorkloadEntry | NeonKUBE documentation",
    "keywords": "Class WorkloadEntry Enables specifying the properties of a single non-Kubernetes workload such a VM or a bare metal services that can be referred to by service entries. Inheritance Object WorkloadEntry Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class WorkloadEntry Constructors WorkloadEntry() Initializes a new instance of the WorkloadEntry class. Declaration public WorkloadEntry() Properties Address Address associated with the network endpoint without the port. Domain names can be used if and only if the resolution is set to DNS, and must be fully-qualified without wildcards. Use the form unix:///absolute/path/to/socket for Unix domain socket endpoints. Declaration [JsonProperty(PropertyName = \"address\", Required = Required.Always)] public string Address { get; set; } Property Value Type Description String Labels One or more labels associated with the endpoint. Declaration [JsonProperty(PropertyName = \"labels\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Dictionary<string, string> Labels { get; set; } Property Value Type Description Dictionary < String , String > Locality The locality associated with the endpoint. A locality corresponds to a failure domain (e.g., country/region/zone). Arbitrary failure domain hierarchies can be represented by separating each encapsulating failure domain by /. For example, the locality of an an endpoint in US, in US-East-1 region, within availability zone az-1, in data center rack r11 can be represented as us/us-east-1/az-1/r11. Istio will configure the sidecar to route to endpoints within the same locality as the sidecar. If none of the endpoints in the locality are available, endpoints parent locality (but within the same network ID) will be chosen. For example, if there are two endpoints in same network (networkID “n1”), say e1 with locality us/us-east-1/az-1/r11 and e2 with locality us/us-east-1/az-2/r12, a sidecar from us/us-east-1/az-1/r11 locality will prefer e1 from the same locality over e2 from a different locality. Endpoint e2 could be the IP associated with a gateway (that bridges networks n1 and n2), or the IP associated with a standard service endpoint. Declaration [JsonProperty(PropertyName = \"locality\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Locality { get; set; } Property Value Type Description String Network Network enables Istio to group endpoints resident in the same L3 domain/network. All endpoints in the same network are assumed to be directly reachable from one another. When endpoints in different networks cannot reach each other directly, an Istio Gateway can be used to establish connectivity (usually using the AUTO_PASSTHROUGH mode in a Gateway Server). This is an advanced configuration used typically for spanning an Istio mesh over multiple clusters. Declaration [JsonProperty(PropertyName = \"network\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string Network { get; set; } Property Value Type Description String Ports Set of ports associated with the endpoint. If the port map is specified, it must be a map of servicePortName to this endpoint’s port, such that traffic to the service port will be forwarded to the endpoint port that maps to the service’s portName. If omitted, and the targetPort is specified as part of the service’s port specification, traffic to the service port will be forwarded to one of the endpoints on the specified targetPort. If both the targetPort and endpoint’s port map are not specified, traffic to a service port will be forwarded to one of the endpoints on the same port. note Do not use for unix:// addresses. note endpoint port map takes precedence over targetPort. Declaration [JsonProperty(PropertyName = \"ports\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public Dictionary<string, int> Ports { get; set; } Property Value Type Description Dictionary < String , Int32 > ServiceAccount The service account associated with the workload if a sidecar is present in the workload. The service account must be present in the same namespace as the configuration ( WorkloadEntry or a ServiceEntry) Declaration [JsonProperty(PropertyName = \"serviceAccount\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public string ServiceAccount { get; set; } Property Value Type Description String weight The load balancing weight associated with the endpoint. Endpoints with higher weights will receive proportionally higher traffic. Declaration [JsonProperty(PropertyName = \"weight\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public int? weight { get; set; } Property Value Type Description Nullable < Int32 >"
  },
  "neonkube/api/Neon.Kube.Resources.Istio.WorkloadSelector.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Istio.WorkloadSelector.html",
    "title": "Class WorkloadSelector | NeonKUBE documentation",
    "keywords": "Class WorkloadSelector WorkloadSelector specifies the criteria used to determine if the Gateway, Sidecar, EnvoyFilter, or ServiceEntry configuration can be applied to a proxy. The matching criteria includes the metadata associated with a proxy, workload instance info such as labels attached to the pod/VM, or any other info that the proxy provides to Istio during the initial handshake. If multiple conditions are specified, all conditions need to match in order for the workload instance to be selected. Currently, only label based selection mechanism is supported. Inheritance Object WorkloadSelector Namespace : Neon.Kube.Resources.Istio Assembly : Neon.Kube.Resources.dll Syntax public class WorkloadSelector Constructors WorkloadSelector() Initializes a new instance of the WorkloadSelector class. Declaration public WorkloadSelector() Properties Labels Address associated with the network endpoint without the port. Domain names can be used if and only if the resolution is set to DNS, and must be fully-qualified without wildcards. Use the form unix:///absolute/path/to/socket for Unix domain socket endpoints. Declaration [JsonProperty(PropertyName = \"labels\", Required = Required.Always)] public Dictionary<string, string> Labels { get; set; } Property Value Type Description Dictionary < String , String >"
  },
  "neonkube/api/Neon.Kube.Resources.JsonConverters.DexConnectorJsonConverter.html": {
    "href": "neonkube/api/Neon.Kube.Resources.JsonConverters.DexConnectorJsonConverter.html",
    "title": "Class DexConnectorJsonConverter | NeonKUBE documentation",
    "keywords": "Class DexConnectorJsonConverter Converter for Dex connectors. Inheritance Object JsonConverter JsonConverter < IV1DexConnector > DexConnectorJsonConverter Namespace : Neon.Kube.Resources.JsonConverters Assembly : Neon.Kube.Resources.dll Syntax public class DexConnectorJsonConverter : JsonConverter<IV1DexConnector> Methods CanConvert(Type) Returns whether the connectio can be converted. Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description Type objectType Returns Type Description Boolean Overrides System.Text.Json.Serialization.JsonConverter<Neon.Kube.Resources.Dex.IV1DexConnector>.CanConvert(System.Type) Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override IV1DexConnector Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns Type Description IV1DexConnector Overrides System.Text.Json.Serialization.JsonConverter<Neon.Kube.Resources.Dex.IV1DexConnector>.Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions) Write(Utf8JsonWriter, IV1DexConnector, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, IV1DexConnector value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer IV1DexConnector value JsonSerializerOptions options Overrides System.Text.Json.Serialization.JsonConverter<Neon.Kube.Resources.Dex.IV1DexConnector>.Write(System.Text.Json.Utf8JsonWriter, Neon.Kube.Resources.Dex.IV1DexConnector, System.Text.Json.JsonSerializerOptions)"
  },
  "neonkube/api/Neon.Kube.Resources.JsonConverters.html": {
    "href": "neonkube/api/Neon.Kube.Resources.JsonConverters.html",
    "title": "Namespace Neon.Kube.Resources.JsonConverters | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Resources.JsonConverters Classes DexConnectorJsonConverter Converter for Dex connectors. JsonCollectionItemConverter<TDatatype, TConverterType> Json collection converter. JsonV1ResourceConverter System.Text.Json : Converts k8s.Models.V1ResourceRequirements ."
  },
  "neonkube/api/Neon.Kube.Resources.JsonConverters.JsonCollectionItemConverter-2.html": {
    "href": "neonkube/api/Neon.Kube.Resources.JsonConverters.JsonCollectionItemConverter-2.html",
    "title": "Class JsonCollectionItemConverter<TDatatype, TConverterType> | NeonKUBE documentation",
    "keywords": "Class JsonCollectionItemConverter<TDatatype, TConverterType> Json collection converter. Inheritance Object JsonConverter JsonConverter < IEnumerable <TDatatype>> JsonCollectionItemConverter<TDatatype, TConverterType> Namespace : Neon.Kube.Resources.JsonConverters Assembly : Neon.Kube.Resources.dll Syntax public class JsonCollectionItemConverter<TDatatype, TConverterType> : JsonConverter<IEnumerable<TDatatype>> where TConverterType : JsonConverter Type Parameters Name Description TDatatype Type of item to convert. TConverterType Converter to use for individual items. Methods CanConvert(Type) Returns whether the connectio can be converted. Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description Type objectType Returns Type Description Boolean Overrides System.Text.Json.Serialization.JsonConverter<System.Collections.Generic.IEnumerable<TDatatype>>.CanConvert(System.Type) Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads a json string and deserializes it into an object. Declaration public override IEnumerable<TDatatype> Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Json reader. Type typeToConvert Type to convert. JsonSerializerOptions options Serializer options. Returns Type Description IEnumerable <TDatatype> Created object. Overrides System.Text.Json.Serialization.JsonConverter<System.Collections.Generic.IEnumerable<TDatatype>>.Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions) Write(Utf8JsonWriter, IEnumerable<TDatatype>, JsonSerializerOptions) Writes a json string. Declaration public override void Write(Utf8JsonWriter writer, IEnumerable<TDatatype> value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer Json writer. IEnumerable <TDatatype> value Value to write. JsonSerializerOptions options Serializer options. Overrides System.Text.Json.Serialization.JsonConverter<System.Collections.Generic.IEnumerable<TDatatype>>.Write(System.Text.Json.Utf8JsonWriter, System.Collections.Generic.IEnumerable<TDatatype>, System.Text.Json.JsonSerializerOptions)"
  },
  "neonkube/api/Neon.Kube.Resources.JsonConverters.JsonV1ResourceConverter.html": {
    "href": "neonkube/api/Neon.Kube.Resources.JsonConverters.JsonV1ResourceConverter.html",
    "title": "Class JsonV1ResourceConverter | NeonKUBE documentation",
    "keywords": "Class JsonV1ResourceConverter System.Text.Json : Converts k8s.Models.V1ResourceRequirements . Inheritance Object JsonConverter JsonConverter < k8s.Models.V1ResourceRequirements > JsonV1ResourceConverter Namespace : Neon.Kube.Resources.JsonConverters Assembly : Neon.Kube.Resources.dll Syntax public class JsonV1ResourceConverter : JsonConverter<V1ResourceRequirements> Methods CanConvert(Type) Declaration public override bool CanConvert(Type typeToConvert) Parameters Type Name Description Type typeToConvert Returns Type Description Boolean Overrides System.Text.Json.Serialization.JsonConverter<k8s.Models.V1ResourceRequirements>.CanConvert(System.Type) Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override V1ResourceRequirements Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns Type Description k8s.Models.V1ResourceRequirements Overrides System.Text.Json.Serialization.JsonConverter<k8s.Models.V1ResourceRequirements>.Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions) Write(Utf8JsonWriter, V1ResourceRequirements, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, V1ResourceRequirements value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer k8s.Models.V1ResourceRequirements value JsonSerializerOptions options Overrides System.Text.Json.Serialization.JsonConverter<k8s.Models.V1ResourceRequirements>.Write(System.Text.Json.Utf8JsonWriter, k8s.Models.V1ResourceRequirements, System.Text.Json.JsonSerializerOptions)"
  },
  "neonkube/api/Neon.Kube.Resources.Kiali.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Kiali.html",
    "title": "Namespace Neon.Kube.Resources.Kiali | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Resources.Kiali Classes V1Kiali Kiali enables adding additional entries into Istio’s internal service registry."
  },
  "neonkube/api/Neon.Kube.Resources.Kiali.V1Kiali.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Kiali.V1Kiali.html",
    "title": "Class V1Kiali | NeonKUBE documentation",
    "keywords": "Class V1Kiali Kiali enables adding additional entries into Istio’s internal service registry. Inheritance Object V1Kiali Namespace : Neon.Kube.Resources.Kiali Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"kiali.io\", Kind = \"Kiali\", ApiVersion = \"v1alpha1\", PluralName = \"kialis\")] public class V1Kiali : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<object>, IValidate Constructors V1Kiali() Initializes a new instance of the Kiali class. Declaration public V1Kiali() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1alpha1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"kiali.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"Kiali\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"kialis\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\")] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\")] public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration [JsonProperty(PropertyName = \"metadata\")] public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the Kiali. Declaration [JsonProperty(PropertyName = \"spec\")] [JsonConverter(typeof(JsonGenericConverter<dynamic>))] public dynamic Spec { get; set; } Property Value Type Description Object Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Minio.BucketQuota.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Minio.BucketQuota.html",
    "title": "Class BucketQuota | NeonKUBE documentation",
    "keywords": "Class BucketQuota Specifies bucket quota. Inheritance Object BucketQuota Namespace : Neon.Kube.Resources.Minio Assembly : Neon.Kube.Resources.dll Syntax public class BucketQuota Properties Hard Sets a maximum limit to the bucket storage size. The MinIO server rejects any incoming PUT request whose contents would exceed the bucket’s configured quota. Declaration public bool Hard { get; set; } Property Value Type Description Boolean Limit The quota limit. Declaration public string Limit { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.Minio.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Minio.html",
    "title": "Namespace Neon.Kube.Resources.Minio | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Resources.Minio Classes BucketQuota Specifies bucket quota. RetentionSpec Imposes rules to prevent object deletion for a period of time. V1MinioBucket Used for unit testing Kubernetes clients. V1MinioBucket.V1MinioBucketSpec The node execute task specification. V1MinioBucket.V1MinioBucketStatus The minio bucket status. V1MinioTenant Tenant. Enums RetentionMode The bucket retention mode. VersioningMode The bucket versioning mode."
  },
  "neonkube/api/Neon.Kube.Resources.Minio.RetentionMode.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Minio.RetentionMode.html",
    "title": "Enum RetentionMode | NeonKUBE documentation",
    "keywords": "Enum RetentionMode The bucket retention mode. Namespace : Neon.Kube.Resources.Minio Assembly : Neon.Kube.Resources.dll Syntax public enum RetentionMode Fields Name Description Compliance Compliance Governance Governance"
  },
  "neonkube/api/Neon.Kube.Resources.Minio.RetentionSpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Minio.RetentionSpec.html",
    "title": "Class RetentionSpec | NeonKUBE documentation",
    "keywords": "Class RetentionSpec Imposes rules to prevent object deletion for a period of time. Inheritance Object RetentionSpec Namespace : Neon.Kube.Resources.Minio Assembly : Neon.Kube.Resources.dll Syntax public class RetentionSpec Properties Mode The RetentionMode . Declaration public RetentionMode Mode { get; set; } Property Value Type Description RetentionMode Validity The retention period in days. Declaration public long Validity { get; set; } Property Value Type Description Int64"
  },
  "neonkube/api/Neon.Kube.Resources.Minio.V1MinioBucket.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Minio.V1MinioBucket.html",
    "title": "Class V1MinioBucket | NeonKUBE documentation",
    "keywords": "Class V1MinioBucket Used for unit testing Kubernetes clients. Inheritance Object V1MinioBucket Namespace : Neon.Kube.Resources.Minio Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"minio.neonkube.io\", ApiVersion = \"v1alpha1\", Kind = \"MinioBucket\", PluralName = \"miniobuckets\")] [EntityScope(EntityScope.Namespaced)] public class V1MinioBucket : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1MinioBucket.V1MinioBucketSpec> Constructors V1MinioBucket() Default constructor. Declaration public V1MinioBucket() Fields KubeApiVersion Object API version. Declaration public const string KubeApiVersion = \"v1alpha1\" Field Value Type Description String KubeGroup Object API group. Declaration public const string KubeGroup = \"minio.neonkube.io\" Field Value Type Description String KubeKind Object API kind. Declaration public const string KubeKind = \"MinioBucket\" Field Value Type Description String KubePlural Object plural name. Declaration public const string KubePlural = \"miniobuckets\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec The spec. Declaration public V1MinioBucket.V1MinioBucketSpec Spec { get; set; } Property Value Type Description V1MinioBucket.V1MinioBucketSpec Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Minio.V1MinioBucket.V1MinioBucketSpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Minio.V1MinioBucket.V1MinioBucketSpec.html",
    "title": "Class V1MinioBucket.V1MinioBucketSpec | NeonKUBE documentation",
    "keywords": "Class V1MinioBucket.V1MinioBucketSpec The node execute task specification. Inheritance Object V1MinioBucket.V1MinioBucketSpec Namespace : Neon.Kube.Resources.Minio Assembly : Neon.Kube.Resources.dll Syntax public class V1MinioBucketSpec Properties ObjectLocking Prevents objects from being deleted. Required to support retention and legal hold. Can only be enabled at bucket creation. Declaration public bool ObjectLocking { get; set; } Property Value Type Description Boolean Quota Optionally limits the amount of data in the bucket. Declaration public BucketQuota Quota { get; set; } Property Value Type Description BucketQuota Region The bucket Region. Declaration public string Region { get; set; } Property Value Type Description String Tenant The Minio tenant where the bucket should be created. Declaration public string Tenant { get; set; } Property Value Type Description String Versioning Allows to keep multiple versions of the same object under the same key. Declaration public VersioningMode Versioning { get; set; } Property Value Type Description VersioningMode"
  },
  "neonkube/api/Neon.Kube.Resources.Minio.V1MinioBucket.V1MinioBucketStatus.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Minio.V1MinioBucket.V1MinioBucketStatus.html",
    "title": "Class V1MinioBucket.V1MinioBucketStatus | NeonKUBE documentation",
    "keywords": "Class V1MinioBucket.V1MinioBucketStatus The minio bucket status. Inheritance Object V1MinioBucket.V1MinioBucketStatus Namespace : Neon.Kube.Resources.Minio Assembly : Neon.Kube.Resources.dll Syntax public class V1MinioBucketStatus Properties Timestamp DateTime . Declaration public DateTime? Timestamp { get; set; } Property Value Type Description Nullable < DateTime >"
  },
  "neonkube/api/Neon.Kube.Resources.Minio.V1MinioTenant.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Minio.V1MinioTenant.html",
    "title": "Class V1MinioTenant | NeonKUBE documentation",
    "keywords": "Class V1MinioTenant Tenant. Inheritance Object V1MinioTenant Namespace : Neon.Kube.Resources.Minio Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"minio.min.io\", Kind = \"Tenant\", ApiVersion = \"v1\", PluralName = \"tenants\")] public class V1MinioTenant : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<object>, IValidate Constructors V1MinioTenant() Initializes a new instance of the Tenant class. Declaration public V1MinioTenant() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"minio.min.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"Tenant\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"tenants\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\")] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\")] public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration [JsonProperty(PropertyName = \"metadata\")] public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the Tenant. Declaration [JsonProperty(PropertyName = \"spec\")] public dynamic Spec { get; set; } Property Value Type Description Object Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Minio.VersioningMode.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Minio.VersioningMode.html",
    "title": "Enum VersioningMode | NeonKUBE documentation",
    "keywords": "Enum VersioningMode The bucket versioning mode. Namespace : Neon.Kube.Resources.Minio Assembly : Neon.Kube.Resources.dll Syntax public enum VersioningMode Fields Name Description Enabled Enabled Off Off Suspended Suspended"
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.BlockDeviceCapacity.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.BlockDeviceCapacity.html",
    "title": "Class BlockDeviceCapacity | NeonKUBE documentation",
    "keywords": "Class BlockDeviceCapacity Describes an OpenEBS block device capacity. Inheritance Object BlockDeviceCapacity Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax public class BlockDeviceCapacity Constructors BlockDeviceCapacity() Initializes a new instance of the BlockDeviceCapacity class. Declaration public BlockDeviceCapacity() Properties LogicalSectorSize The logical sector size. Declaration public long? LogicalSectorSize { get; set; } Property Value Type Description Nullable < Int64 > PhysicalSectorSize The physical sector size. Declaration public long? PhysicalSectorSize { get; set; } Property Value Type Description Nullable < Int64 > Storage The storage size. Declaration public long? Storage { get; set; } Property Value Type Description Nullable < Int64 >"
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.BlockDeviceDetails.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.BlockDeviceDetails.html",
    "title": "Class BlockDeviceDetails | NeonKUBE documentation",
    "keywords": "Class BlockDeviceDetails OpenEBS block device details. Inheritance Object BlockDeviceDetails Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax public class BlockDeviceDetails Constructors BlockDeviceDetails() Initializes a new instance of the BlockDeviceDetails class. Declaration public BlockDeviceDetails() Properties Compliance Declaration public string Compliance { get; set; } Property Value Type Description String DeviceType The device type. Declaration [JsonConverter(typeof(JsonStringEnumMemberConverter))] public BlockDeviceType? DeviceType { get; set; } Property Value Type Description Nullable < BlockDeviceType > DriveType The drive type. Declaration [JsonConverter(typeof(JsonStringEnumMemberConverter))] public DriveType? DriveType { get; set; } Property Value Type Description Nullable < DriveType > FirmwareRevision The Firmware revision. Declaration public string FirmwareRevision { get; set; } Property Value Type Description String HardwareSectorSize The hardware sector size. Declaration public long? HardwareSectorSize { get; set; } Property Value Type Description Nullable < Int64 > LogicalBlockSize The logical block size. Declaration public long? LogicalBlockSize { get; set; } Property Value Type Description Nullable < Int64 > Model The disk model. Declaration public string Model { get; set; } Property Value Type Description String PhysicalBlockSize The physical block size. Declaration public long? PhysicalBlockSize { get; set; } Property Value Type Description Nullable < Int64 > Serial The drive serial number. Declaration public string Serial { get; set; } Property Value Type Description String Vendor The drive vendor. Declaration public string Vendor { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.BlockDeviceDevLink.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.BlockDeviceDevLink.html",
    "title": "Class BlockDeviceDevLink | NeonKUBE documentation",
    "keywords": "Class BlockDeviceDevLink OpenEBS block device links. Inheritance Object BlockDeviceDevLink Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax public class BlockDeviceDevLink Constructors BlockDeviceDevLink() Initializes a new instance of the BlockDeviceDevLink class. Declaration public BlockDeviceDevLink() Properties Kind The DevLinkType . Devices are listed by ID or by path. Declaration [JsonConverter(typeof(JsonStringEnumMemberConverter))] public DevLinkType Kind { get; set; } Property Value Type Description DevLinkType Links List of device links. Declaration public List<string> Links { get; set; } Property Value Type Description List < String >"
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.BlockDeviceType.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.BlockDeviceType.html",
    "title": "Enum BlockDeviceType | NeonKUBE documentation",
    "keywords": "Enum BlockDeviceType Enumerates the possible Block Device types. Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum BlockDeviceType Fields Name Description Disk Disk. Loop Loop. LVM LVM. Partition Partition. Raid Raid. Sparse Sparse."
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.DataRaidGroupTypes.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.DataRaidGroupTypes.html",
    "title": "Class DataRaidGroupTypes | NeonKUBE documentation",
    "keywords": "Class DataRaidGroupTypes Data Raid Group Types. Inheritance Object DataRaidGroupTypes Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax public static class DataRaidGroupTypes Fields Mirror mirror Declaration public const string Mirror = \"mirror\" Field Value Type Description String Stripe stripe Declaration public const string Stripe = \"stripe\" Field Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.DevLinkType.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.DevLinkType.html",
    "title": "Enum DevLinkType | NeonKUBE documentation",
    "keywords": "Enum DevLinkType Enumerates the possible device link types. Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum DevLinkType Fields Name Description ById Device links listed by ID. ByPath Device links listed by path."
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.DriveType.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.DriveType.html",
    "title": "Enum DriveType | NeonKUBE documentation",
    "keywords": "Enum DriveType Enumerates the possible Drive types. Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax [JsonConverter(typeof(JsonStringEnumMemberConverter))] public enum DriveType Fields Name Description HDD HDD. SSD SSD."
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.FileSystemInfo.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.FileSystemInfo.html",
    "title": "Class FileSystemInfo | NeonKUBE documentation",
    "keywords": "Class FileSystemInfo File system information. Inheritance Object FileSystemInfo Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax public class FileSystemInfo Constructors FileSystemInfo() Initializes a new instance of the FileSystemInfo class. Declaration public FileSystemInfo() Properties FsType The filesystem type. Declaration public string FsType { get; set; } Property Value Type Description String MountPoint The mount point. Declaration public string MountPoint { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.html",
    "title": "Namespace Neon.Kube.Resources.OpenEBS | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Resources.OpenEBS Classes BlockDeviceCapacity Describes an OpenEBS block device capacity. BlockDeviceDetails OpenEBS block device details. BlockDeviceDevLink OpenEBS block device links. DataRaidGroupTypes Data Raid Group Types. FileSystemInfo File system information. V1CStorBlockDevice Describes an OpenEBS cStor block device. V1CStorBlockDeviceList OpenEBS cStor block devices. V1CStorBlockDeviceRef OpenEBS block device reference. V1CStorBlockDeviceSpec The kubernetes spec for the block device. V1CStorDataRaidGroup OpenEBS RAID group. V1CStorPoolCluster OpenEBS cStor pool cluster. V1CStorPoolClusterList OpenEBS cStor pool cluster list. V1CStorPoolClusterSpec The kubernetes spec for the pool cluster. V1CStorPoolConfig OpenEBS cStor pool configuration. V1CStorPoolSpec OpenEBS cStor pool specification. Enums BlockDeviceType Enumerates the possible Block Device types. DevLinkType Enumerates the possible device link types. DriveType Enumerates the possible Drive types."
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorBlockDevice.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorBlockDevice.html",
    "title": "Class V1CStorBlockDevice | NeonKUBE documentation",
    "keywords": "Class V1CStorBlockDevice Describes an OpenEBS cStor block device. Inheritance Object V1CStorBlockDevice Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"openebs.io\", Kind = \"BlockDevice\", ApiVersion = \"v1alpha1\", PluralName = \"blockdevices\")] public class V1CStorBlockDevice : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1CStorBlockDeviceSpec>, IValidate Constructors V1CStorBlockDevice() Initializes a new instance of the V1CStorBlockDevice class. Declaration public V1CStorBlockDevice() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1alpha1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"openebs.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"BlockDevice\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"blockdevices\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the Block device. Declaration public V1CStorBlockDeviceSpec Spec { get; set; } Property Value Type Description V1CStorBlockDeviceSpec Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorBlockDeviceList.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorBlockDeviceList.html",
    "title": "Class V1CStorBlockDeviceList | NeonKUBE documentation",
    "keywords": "Class V1CStorBlockDeviceList OpenEBS cStor block devices. Inheritance Object V1CStorBlockDeviceList Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"openebs.io\", Kind = \"BlockDeviceList\", ApiVersion = \"v1alpha1\", PluralName = \"blockdevices\")] public class V1CStorBlockDeviceList : IKubernetesObject<V1ListMeta>, IKubernetesObject, IMetadata<V1ListMeta>, IItems<V1CStorBlockDevice>, IValidate Constructors V1CStorBlockDeviceList() Initializes a new instance of the V1CStorBlockDeviceList class. Declaration public V1CStorBlockDeviceList() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1alpha1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"openebs.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"BlockDeviceList\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"blockdevices\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration public string ApiVersion { get; set; } Property Value Type Description String Items Gets or sets items is the list of cStor block devices. Declaration public IList<V1CStorBlockDevice> Items { get; set; } Property Value Type Description IList < V1CStorBlockDevice > Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard list metadata. Declaration public V1ListMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ListMeta Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorBlockDeviceRef.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorBlockDeviceRef.html",
    "title": "Class V1CStorBlockDeviceRef | NeonKUBE documentation",
    "keywords": "Class V1CStorBlockDeviceRef OpenEBS block device reference. Inheritance Object V1CStorBlockDeviceRef Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax public class V1CStorBlockDeviceRef Constructors V1CStorBlockDeviceRef() Initializes a new instance of the V1CStorBlockDeviceRef class. Declaration public V1CStorBlockDeviceRef() Properties BlockDeviceName The name of the block device. Declaration public string BlockDeviceName { get; set; } Property Value Type Description String capacity The capacity of block device. Declaration public BlockDeviceCapacity capacity { get; set; } Property Value Type Description BlockDeviceCapacity DevLink The dev link for the block device. Declaration public string DevLink { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorBlockDeviceSpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorBlockDeviceSpec.html",
    "title": "Class V1CStorBlockDeviceSpec | NeonKUBE documentation",
    "keywords": "Class V1CStorBlockDeviceSpec The kubernetes spec for the block device. Inheritance Object V1CStorBlockDeviceSpec Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax public class V1CStorBlockDeviceSpec Constructors V1CStorBlockDeviceSpec() Constructor. Declaration public V1CStorBlockDeviceSpec() Properties Capacity The capacity of the block device. Declaration public BlockDeviceCapacity Capacity { get; set; } Property Value Type Description BlockDeviceCapacity Details Details about the block device. Declaration public BlockDeviceDetails Details { get; set; } Property Value Type Description BlockDeviceDetails DevLinks List of device links. Declaration public List<BlockDeviceDevLink> DevLinks { get; set; } Property Value Type Description List < BlockDeviceDevLink > FileSystem Filesystem information about the block device. Declaration public FileSystemInfo FileSystem { get; set; } Property Value Type Description FileSystemInfo NodeAttributes Attributes related to the node where the block device is mounted. Declaration public Dictionary<string, string> NodeAttributes { get; set; } Property Value Type Description Dictionary < String , String > Partitioned Whether the block device is partitioned. (Yes/No) Declaration public string Partitioned { get; set; } Property Value Type Description String Path The path. Declaration public string Path { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorDataRaidGroup.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorDataRaidGroup.html",
    "title": "Class V1CStorDataRaidGroup | NeonKUBE documentation",
    "keywords": "Class V1CStorDataRaidGroup OpenEBS RAID group. Inheritance Object V1CStorDataRaidGroup Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax public class V1CStorDataRaidGroup Constructors V1CStorDataRaidGroup() Initializes a new instance of the V1CStorDataRaidGroup class. Declaration public V1CStorDataRaidGroup() Properties BlockDevices The list of block devices. Declaration public List<V1CStorBlockDeviceRef> BlockDevices { get; set; } Property Value Type Description List < V1CStorBlockDeviceRef >"
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorPoolCluster.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorPoolCluster.html",
    "title": "Class V1CStorPoolCluster | NeonKUBE documentation",
    "keywords": "Class V1CStorPoolCluster OpenEBS cStor pool cluster. Inheritance Object V1CStorPoolCluster Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"cstor.openebs.io\", Kind = \"CStorPoolCluster\", ApiVersion = \"v1\", PluralName = \"cstorpoolclusters\")] public class V1CStorPoolCluster : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1CStorPoolClusterSpec>, IValidate Constructors V1CStorPoolCluster() Initializes a new instance of the V1CStorPoolCluster class. Declaration public V1CStorPoolCluster() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"cstor.openebs.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"CStorPoolCluster\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"cstorpoolclusters\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the Block device. Declaration public V1CStorPoolClusterSpec Spec { get; set; } Property Value Type Description V1CStorPoolClusterSpec Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorPoolClusterList.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorPoolClusterList.html",
    "title": "Class V1CStorPoolClusterList | NeonKUBE documentation",
    "keywords": "Class V1CStorPoolClusterList OpenEBS cStor pool cluster list. Inheritance Object V1CStorPoolClusterList Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"openebs.io\", Kind = \"PoolClusterList\", ApiVersion = \"v1alpha1\", PluralName = \"poolclusters\")] public class V1CStorPoolClusterList : IKubernetesObject<V1ListMeta>, IKubernetesObject, IMetadata<V1ListMeta>, IItems<V1CStorPoolCluster>, IValidate Constructors V1CStorPoolClusterList() Initializes a new instance of the V1CStorPoolClusterList class. Declaration public V1CStorPoolClusterList() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1alpha1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"openebs.io\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"PoolClusterList\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"poolclusters\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration public string ApiVersion { get; set; } Property Value Type Description String Items Gets or sets items is the list of cStor block devices. Declaration public IList<V1CStorPoolCluster> Items { get; set; } Property Value Type Description IList < V1CStorPoolCluster > Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard list metadata. Declaration public V1ListMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ListMeta Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorPoolClusterSpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorPoolClusterSpec.html",
    "title": "Class V1CStorPoolClusterSpec | NeonKUBE documentation",
    "keywords": "Class V1CStorPoolClusterSpec The kubernetes spec for the pool cluster. Inheritance Object V1CStorPoolClusterSpec Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax public class V1CStorPoolClusterSpec Constructors V1CStorPoolClusterSpec() Constructor. Declaration public V1CStorPoolClusterSpec() Properties AuxResources Compute resources for the cstor sidecar containers. Declaration [JsonConverter(typeof(JsonV1ResourceConverter))] public V1ResourceRequirements AuxResources { get; set; } Property Value Type Description k8s.Models.V1ResourceRequirements Pools The list of pools in the cluster. Declaration public List<V1CStorPoolSpec> Pools { get; set; } Property Value Type Description List < V1CStorPoolSpec > Resources Compute resources for the cstor pool containers. Declaration [JsonConverter(typeof(JsonV1ResourceConverter))] public V1ResourceRequirements Resources { get; set; } Property Value Type Description k8s.Models.V1ResourceRequirements"
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorPoolConfig.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorPoolConfig.html",
    "title": "Class V1CStorPoolConfig | NeonKUBE documentation",
    "keywords": "Class V1CStorPoolConfig OpenEBS cStor pool configuration. Inheritance Object V1CStorPoolConfig Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax public class V1CStorPoolConfig Constructors V1CStorPoolConfig() Initializes a new instance of the V1CStorPoolConfig class. Declaration public V1CStorPoolConfig() Properties DataRaidGroupType The raid type. Declaration [JsonPropertyName(\"dataRaidGroupType\")] public string DataRaidGroupType { get; set; } Property Value Type Description String Tolerations Tolerations to be applied to the CStor Pool pods. Declaration public List<V1Toleration> Tolerations { get; set; } Property Value Type Description List < k8s.Models.V1Toleration >"
  },
  "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorPoolSpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.OpenEBS.V1CStorPoolSpec.html",
    "title": "Class V1CStorPoolSpec | NeonKUBE documentation",
    "keywords": "Class V1CStorPoolSpec OpenEBS cStor pool specification. Inheritance Object V1CStorPoolSpec Namespace : Neon.Kube.Resources.OpenEBS Assembly : Neon.Kube.Resources.dll Syntax public class V1CStorPoolSpec Constructors V1CStorPoolSpec() Initializes a new instance of the V1CStorPoolSpec class. Declaration public V1CStorPoolSpec() Properties DataRaidGroups Identifies the associated block devices. Declaration public List<V1CStorDataRaidGroup> DataRaidGroups { get; set; } Property Value Type Description List < V1CStorDataRaidGroup > NodeSelector Selector identifying the nodes holding the targeted cStor block devices. Declaration public Dictionary<string, string> NodeSelector { get; set; } Property Value Type Description Dictionary < String , String > PoolConfig Specifies the pool configuration. Declaration public V1CStorPoolConfig PoolConfig { get; set; } Property Value Type Description V1CStorPoolConfig"
  },
  "neonkube/api/Neon.Kube.Resources.Prometheus.Endpoint.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Prometheus.Endpoint.html",
    "title": "Class Endpoint | NeonKUBE documentation",
    "keywords": "Class Endpoint Endpoint defines a scrapeable endpoint serving Prometheus metrics. Inheritance Object Endpoint Namespace : Neon.Kube.Resources.Prometheus Assembly : Neon.Kube.Resources.dll Syntax public class Endpoint Constructors Endpoint() Constructor. Declaration public Endpoint() Properties Interval Interval at which metrics should be scraped If not specified Prometheus' global scrape interval is used. Declaration public string Interval { get; set; } Property Value Type Description String Params Optional HTTP URL parameters Declaration public string Params { get; set; } Property Value Type Description String Path HTTP path to scrape for metrics. Declaration public string Path { get; set; } Property Value Type Description String Port Name of the service port this endpoint refers to. Mutually exclusive with targetPort. Declaration public string Port { get; set; } Property Value Type Description String Scheme HTTP scheme to use for scraping. Declaration public string Scheme { get; set; } Property Value Type Description String ScrapeTimeout Timeout after which the scrape is ended If not specified, the Prometheus global scrape timeout is used unless it is less than Interval in which the latter is used. Declaration public string ScrapeTimeout { get; set; } Property Value Type Description String TargetPort Name or number of the target port of the Pod behind the Service, the port must be specified with container port property. Mutually exclusive with port. Declaration public int TargetPort { get; set; } Property Value Type Description Int32"
  },
  "neonkube/api/Neon.Kube.Resources.Prometheus.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Prometheus.html",
    "title": "Namespace Neon.Kube.Resources.Prometheus | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Resources.Prometheus Classes Endpoint Endpoint defines a scrapeable endpoint serving Prometheus metrics. NamespaceSelector NamespaceSelector is a selector for selecting either all namespaces or a list of namespaces. If any is true, it takes precedence over matchNames. If matchNames is empty and any is false, it means that the objects are selected from the current namespace. V1ServiceMonitor ServiceMonitor. V1ServiceMonitorSpec ServiceMonitorSpec contains specification parameters for a ServiceMonitor."
  },
  "neonkube/api/Neon.Kube.Resources.Prometheus.NamespaceSelector.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Prometheus.NamespaceSelector.html",
    "title": "Class NamespaceSelector | NeonKUBE documentation",
    "keywords": "Class NamespaceSelector NamespaceSelector is a selector for selecting either all namespaces or a list of namespaces. If any is true, it takes precedence over matchNames. If matchNames is empty and any is false, it means that the objects are selected from the current namespace. Inheritance Object NamespaceSelector Namespace : Neon.Kube.Resources.Prometheus Assembly : Neon.Kube.Resources.dll Syntax public class NamespaceSelector Constructors NamespaceSelector() Constructor. Declaration public NamespaceSelector() Properties Any Boolean describing whether all namespaces are selected in contrast to a list restricting them. Declaration public bool Any { get; set; } Property Value Type Description Boolean MatchNames List of namespace names to select from. Declaration public List<string> MatchNames { get; set; } Property Value Type Description List < String >"
  },
  "neonkube/api/Neon.Kube.Resources.Prometheus.V1ServiceMonitor.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Prometheus.V1ServiceMonitor.html",
    "title": "Class V1ServiceMonitor | NeonKUBE documentation",
    "keywords": "Class V1ServiceMonitor ServiceMonitor. Inheritance Object V1ServiceMonitor Namespace : Neon.Kube.Resources.Prometheus Assembly : Neon.Kube.Resources.dll Syntax [KubernetesEntity(Group = \"monitoring.coreos.com\", Kind = \"ServiceMonitor\", ApiVersion = \"v1\", PluralName = \"servicemonitors\")] public class V1ServiceMonitor : IKubernetesObject<V1ObjectMeta>, IKubernetesObject, IMetadata<V1ObjectMeta>, ISpec<V1ServiceMonitorSpec>, IValidate Constructors V1ServiceMonitor() Initializes a new instance of the ServiceMonitor class. Declaration public V1ServiceMonitor() Fields KubeApiVersion The API version this Kubernetes type belongs to. Declaration public const string KubeApiVersion = \"v1\" Field Value Type Description String KubeGroup The Group this Kubernetes type belongs to. Declaration public const string KubeGroup = \"monitoring.coreos.com\" Field Value Type Description String KubeKind The Kubernetes named schema this object is based on. Declaration public const string KubeKind = \"ServiceMonitor\" Field Value Type Description String KubePlural The plural name of the entity. Declaration public const string KubePlural = \"servicemonitors\" Field Value Type Description String Properties ApiVersion Gets or sets APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources Declaration [JsonProperty(PropertyName = \"apiVersion\")] public string ApiVersion { get; set; } Property Value Type Description String Kind Gets or sets kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds Declaration [JsonProperty(PropertyName = \"kind\")] public string Kind { get; set; } Property Value Type Description String Metadata Gets or sets standard object metadata. Declaration [JsonProperty(PropertyName = \"metadata\")] public V1ObjectMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ObjectMeta Spec Gets or sets specification of the desired behavior of the ServiceMonitor. Declaration [JsonProperty(PropertyName = \"spec\")] [JsonConverter(typeof(JsonGenericConverter<dynamic>))] public V1ServiceMonitorSpec Spec { get; set; } Property Value Type Description V1ServiceMonitorSpec Methods Validate() Validate the object. Declaration public virtual void Validate() Exceptions Type Condition ValidationException Thrown if validation fails. Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.Resources.Prometheus.V1ServiceMonitorSpec.html": {
    "href": "neonkube/api/Neon.Kube.Resources.Prometheus.V1ServiceMonitorSpec.html",
    "title": "Class V1ServiceMonitorSpec | NeonKUBE documentation",
    "keywords": "Class V1ServiceMonitorSpec ServiceMonitorSpec contains specification parameters for a ServiceMonitor. Inheritance Object V1ServiceMonitorSpec Namespace : Neon.Kube.Resources.Prometheus Assembly : Neon.Kube.Resources.dll Syntax public class V1ServiceMonitorSpec Constructors V1ServiceMonitorSpec() Constructor. Declaration public V1ServiceMonitorSpec() Properties Endpoints A list of Endpoint allowed as part of this ServiceMonitor. Declaration public List<Endpoint> Endpoints { get; set; } Property Value Type Description List < Endpoint > JobLabel Chooses the label of the Kubernetes Endpoints. Its value will be used for the job-label's value of the created metrics. Default fallback value: the name of the respective Kubernetes Endpoint. Declaration public string JobLabel { get; set; } Property Value Type Description String LabelLimit Per-scrape limit on number of labels that will be accepted for a sample. note Only valid in Prometheus versions 2.27.0 and newer. Declaration public int LabelLimit { get; set; } Property Value Type Description Int32 LabelNameLengthLimit Per-scrape limit on length of labels name that will be accepted for a sample. note Only valid in Prometheus versions 2.27.0 and newer. Declaration public int LabelNameLengthLimit { get; set; } Property Value Type Description Int32 LabelValueLengthLimit Per-scrape limit on length of labels value that will be accepted for a sample. note Only valid in Prometheus versions 2.27.0 and newer. Declaration public int LabelValueLengthLimit { get; set; } Property Value Type Description Int32 NamespaceSelector NamespaceSelector to select which namespaces the Kubernetes Endpoints objects are discovered from. Declaration public NamespaceSelector NamespaceSelector { get; set; } Property Value Type Description NamespaceSelector PodTargetLabels PodTargetLabels transfers labels on the Kubernetes Pod onto the created metrics. Declaration public List<string> PodTargetLabels { get; set; } Property Value Type Description List < String > SampleLimit SampleLimit defines per-scrape limit on number of scraped samples that will be accepted. Declaration public int SampleLimit { get; set; } Property Value Type Description Int32 Selector k8s.Models.V1LabelSelector to select Endpoints objects. Declaration public V1LabelSelector Selector { get; set; } Property Value Type Description k8s.Models.V1LabelSelector TargetLabels TargetLabels transfers labels from the Kubernetes Service onto the created metrics. Declaration public List<string> TargetLabels { get; set; } Property Value Type Description List < String > TargetLimit TargetLimit defines a limit on the number of scraped targets that will be accepted. Declaration public int TargetLimit { get; set; } Property Value Type Description Int32"
  },
  "neonkube/api/Neon.Kube.Setup.DesktopServiceProxy.html": {
    "href": "neonkube/api/Neon.Kube.Setup.DesktopServiceProxy.html",
    "title": "Class DesktopServiceProxy | NeonKUBE documentation",
    "keywords": "Class DesktopServiceProxy Used to proxy non-HyperV operations to the Neon Desktop service or execute them directly when the current process is running with elevated privileges. Inheritance Object DesktopServiceProxy Namespace : Neon.Kube.Setup Assembly : Neon.Kube.Setup.dll Syntax public sealed class DesktopServiceProxy : IDisposable Constructors DesktopServiceProxy(GrpcChannel) Alternate constructor the associated an open gRPC channel with the instance. Declaration public DesktopServiceProxy(GrpcChannel channel) Parameters Type Name Description Grpc.Net.Client.GrpcChannel channel The open gRPC channel. DesktopServiceProxy(Nullable<Boolean>, String) Constructor. Declaration public DesktopServiceProxy(bool? isAdminOverride = null, string socketPath = null) Parameters Type Name Description Nullable < Boolean > isAdminOverride Optionally overrides detection of elevated permissions enabled for the current process. This is used for testing. String socketPath Optionally overrides the default desktop service unix socket path. This is used for testing purposes. This defaults to WinDesktopServiceSocketPath where neon-desktop and neon-cli expect it to be. Methods Dispose() Declaration public void Dispose() GetWindowsOptionalFeaturesAsync() Returns the status of optional Windows features. Declaration public async Task<Dictionary<string, WindowsFeatureStatus>> GetWindowsOptionalFeaturesAsync() Returns Type Description Task < Dictionary < String , WindowsFeatureStatus >> A Dictionary<TKey,TValue> mapping feature names to WindowsFeatureStatus \"/> instances. ListLocalHostsSections() Lists the names of the local host sections. Declaration public IEnumerable<LocalHostSection> ListLocalHostsSections() Returns Type Description IEnumerable < LocalHostSection > The section names converted to uppercase. ModifyLocalHosts(String, Dictionary<String, IPAddress>) Used to modify the $/etc/hosts file used by the DNS resolver for testing, debugging and possibly other purposes. note WARNING: Modifying the hosts file will impact all processes on the system, not just the current process. Declaration public void ModifyLocalHosts(string section, Dictionary<string, IPAddress> hostEntries = null) Parameters Type Name Description String section Specifies the string to use to delimit the host names section. This is required and must be a non-empty string consisting of up to 63 non-control ASCII characters. Section names are case sensitive. Dictionary < String , IPAddress > hostEntries A dictionary mapping the hostnames to an IP address or null . Remarks note This method requires elevated administrative privileges. This method adds or removes a temporary section of host entry definitions delimited by special comment lines. When hostEntries is non-null and non-empty, the section will be added or updated. Otherwise, the section will be removed. You can remove all host sections by passing both hostEntries and section as null ."
  },
  "neonkube/api/Neon.Kube.Setup.html": {
    "href": "neonkube/api/Neon.Kube.Setup.html",
    "title": "Namespace Neon.Kube.Setup | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Setup Classes DesktopServiceProxy Used to proxy non-HyperV operations to the Neon Desktop service or execute them directly when the current process is running with elevated privileges. KubeSetup Implements cluster setup operations. PrepareClusterOptions Optionally used to specify options for CreateClusterPrepareController(ClusterDefinition, Boolean, PrepareClusterOptions) . SetupClusterOptions Optionally used to specify options for CreateClusterSetupController(ClusterDefinition, Boolean, SetupClusterOptions) . SetupClusterStatus Describes the current state of cluster setup. SetupConsoleWriter Used internally to update .NET console window without flickering. SetupController<NodeMetadata> Manages a cluster setup operation consisting of a series of setup steps while displaying status to the Console . SetupNodeStatus Describes the current state of a node during cluster setup. SetupProgressMessage Holds setup progress message details. SetupStepDetails Holds information about an executing setup step. This is the argument passed when the StepStarted event is raised. SetupStepStatus Holds state information about a setup step. Structs NodeLog Holds the setup related log for a specific cluster node. Interfaces ISetupController Describes some common methods exposed by all SetupController<NodeMetadata> implementations. ISetupControllerStep Interface implemented by internal Neon.Kube.Setup.SetupController`1.Step implementations. Enums SetupDisposition Enumerates the final disposition of a SetupController<NodeMetadata> run. SetupStepState Enumerates possible status codes for a cluster setup step. Delegates SetupProgressDelegate Used for raising the ProgressEvent . SetupStatusChangedDelegate Used for raising the StatusChangedEvent ."
  },
  "neonkube/api/Neon.Kube.Setup.ISetupController.html": {
    "href": "neonkube/api/Neon.Kube.Setup.ISetupController.html",
    "title": "Interface ISetupController | NeonKUBE documentation",
    "keywords": "Interface ISetupController Describes some common methods exposed by all SetupController<NodeMetadata> implementations. Inherited Members IObjectDictionary.Get<TValue>(String) IObjectDictionary.Get<TValue>(String, TValue) IObjectDictionary.TryGetValue<TValue>(String, TValue) Namespace : Neon.Kube.Setup Assembly : Neon.Kube.dll Syntax public interface ISetupController : IObjectDictionary, IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IEnumerable Properties CancellationToken Returns the CancellationToken that will be signalled when setup is cancelled. Declaration CancellationToken CancellationToken { get; } Property Value Type Description CancellationToken ConsoleWriter Returns the console updater used internally to write the setup status to the Console without flickering. This will be null for non-console applications. Declaration SetupConsoleWriter ConsoleWriter { get; } Property Value Type Description SetupConsoleWriter CurrentStepNumber Returns the current step number or -1 for quiet steps or when setup hasn't started yet. Declaration int CurrentStepNumber { get; } Property Value Type Description Int32 DisablePendingTasks This controls whether AddPendingTaskAsync(String, Task, String, String, INodeSshProxy) actually holds pending tasks to be awaited by a future step (the default) or whether the AddPendingTaskAsync(String, Task, String, String, INodeSshProxy) awaits the task itself. This is useful for debugging because executing a bunch of tasks in parallel is likely to mess with the node and global logs since those are not really structured to handle parallel operations at this time. Declaration bool DisablePendingTasks { get; set; } Property Value Type Description Boolean GlobalStatus Returns any status for the overall setup operation. Declaration string GlobalStatus { get; } Property Value Type Description String HasNodeSteps Returns true if the controller has an nodes with setup steps. Declaration bool HasNodeSteps { get; } Property Value Type Description Boolean IsCancelPending Indicates that setup is being cancelled. Declaration bool IsCancelPending { get; } Property Value Type Description Boolean IsFaulted Indicates whether cluster setup is faulted due to a global problem or when any node is faulted. Declaration bool IsFaulted { get; } Property Value Type Description Boolean LastProgressError Returns the last error message logged by LogProgressError(String) . Declaration string LastProgressError { get; } Property Value Type Description String LogBeginMarker Optionally specifies the line written as the first line of log files. Declaration string LogBeginMarker { get; set; } Property Value Type Description String LogEndMarker Optionally specifies the line written as the last line of log files when the operation succeeded. Declaration string LogEndMarker { get; set; } Property Value Type Description String LogFailedMarker Optionally specifies the line written as the last line of log files when the operation failed. Declaration string LogFailedMarker { get; set; } Property Value Type Description String MaxDisplayedSteps Specifies the maximum number of setup steps to be displayed. This defaults to 5 . You can set 0 to allow an unlimited number of steps may be displayed. Declaration int MaxDisplayedSteps { get; set; } Property Value Type Description Int32 MaxParallel The maximum number of nodes that will execute setup steps in parallel. This defaults to effectively unconstrained. Declaration int MaxParallel { get; set; } Property Value Type Description Int32 NodeMetadataType Returns the SetupController<NodeMetadata> 's node metadata type. Declaration Type NodeMetadataType { get; } Property Value Type Description Type OperationTitle Specifies the operation title. Declaration string OperationTitle { get; } Property Value Type Description String ShowNodeStatus Specifies whether that node status will be displayed. This defaults to true . Declaration bool ShowNodeStatus { get; set; } Property Value Type Description Boolean ShowRuntime Optionally displays the elapsed time for each step as well as the overall operation when setup completes (or fails). Declaration bool ShowRuntime { get; set; } Property Value Type Description Boolean ShowStatus Specifies whether the class should print setup status to the console. This defaults to false . Declaration bool ShowStatus { get; set; } Property Value Type Description Boolean StepCount Returns the number of setup steps. Declaration int StepCount { get; } Property Value Type Description Int32 Methods AddDisposable(IDisposable) Adds an IDisposable instance to the controller so that they can be properly disposed when RunAsync(Int32) exits. Declaration void AddDisposable(IDisposable disposable) Parameters Type Name Description IDisposable disposable AddPendingTaskAsync(String, Task, String, String, INodeSshProxy) Adds a pending task to a group of related tasks, creating the group when necessary. This is used as an aid to parallelizing setup operations to improve cluster setup times. note If DisablePendingTasks is true , then this method will await the task immediately, creating any empty group if necessary. This is useful for debugging because executing a bunch of tasks in parallel is likely to mess with the node and global logs since those are not really structured to handle parallel operations at this time. Declaration Task AddPendingTaskAsync(string groupName, Task task, string verb, string message, INodeSshProxy node = null) Parameters Type Name Description String groupName The task group name. Task task The pending task. String verb The progress verb. String message The progress message. INodeSshProxy node Optionally specifies the node where the operation is happening. The operation will be considered to be cluster global when this is null . Returns Type Description Task The tracking Task . Exceptions Type Condition InvalidOperationException Thrown if WaitForPendingTasksAsync(String) has already been called for this group. Cancel() Attempts to cancel the setup operation. This will cause IsCancelPending to return true and calls to ThrowIfCancelled() to throw a OperationCanceledException . Declaration void Cancel() GetHostLogs() Returns setup related log information for any host proxies. Declaration IEnumerable<NodeLog> GetHostLogs() Returns Type Description IEnumerable < NodeLog > An the NodeLog values. GetHostStatus() Returns the status for any VM host machines being managed by executing subcontroller steps. Declaration IEnumerable<SetupNodeStatus> GetHostStatus() Returns Type Description IEnumerable < SetupNodeStatus > The status information for any host nodes. GetNodeLogs() Returns setup related log information for each of the nodes. Declaration IEnumerable<NodeLog> GetNodeLogs() Returns Type Description IEnumerable < NodeLog > An the NodeLog values. GetNodeStatus() Returns the status for any nodes being managed by the controller. Declaration IEnumerable<SetupNodeStatus> GetNodeStatus() Returns Type Description IEnumerable < SetupNodeStatus > The status information for any nodes. GetPendingGroups() Returns the names of any pending task groups that have not been awaited via WaitForPendingTasksAsync(String) . This can be used by setup implementations to verify that all pending tasks have completed. Declaration List<string> GetPendingGroups() Returns Type Description List < String > The list of pending task group names. GetStepNodeNames(Object) Returns a HashSet<T> with the names of the cluster nodes participating in the internal node step passed. This step is available as InternalStep . Declaration HashSet<string> GetStepNodeNames(object internalStep) Parameters Type Name Description Object internalStep The internal node step. Returns Type Description HashSet < String > The set of names affected by the setup sstep. GetStepStatus() Returns the status for all of the setup steps in order of execution. Declaration IEnumerable<SetupStepStatus> GetStepStatus() Returns Type Description IEnumerable < SetupStepStatus > The step status items. LogGlobal(String) Writes a line to the global cluster log file. This is used to log information that pertains to a global operation rather than a specific node. note This does not raise the ProgressEvent . Declaration void LogGlobal(string message = null) Parameters Type Name Description String message Optionally specifies the message to be logged. LogGlobalError(String) Writes an error line to the global cluster log file. This is used to log errors that pertain to a global operation rather than a specific node. note This does not raise the ProgressEvent . Declaration void LogGlobalError(string message = null) Parameters Type Name Description String message Optionally specifies the message to be logged. LogGlobalException(Exception) Writes information about an exception to the global cluster log file. note This does not raise the ProgressEvent . Declaration void LogGlobalException(Exception e) Parameters Type Name Description Exception e The exception. LogProgress(ILinuxSshProxy, String) Logs a progress message for a specific node. This sets the status text for the node. Declaration void LogProgress(ILinuxSshProxy node, string message) Parameters Type Name Description ILinuxSshProxy node Identifies the node String message The message. LogProgress(ILinuxSshProxy, String, String) Logs a progress for a specific node with a verb and message. This will be formatted like VERB MESSAGE . Declaration void LogProgress(ILinuxSshProxy node, string verb, string message) Parameters Type Name Description ILinuxSshProxy node Identifies the node String verb The message verb. String message The message. LogProgress(String) Logs a progress message. Declaration void LogProgress(string message) Parameters Type Name Description String message The message. LogProgress(String, String) Logs a progress message with a verb. This will be formatted like VERB: MESSAGE . Declaration void LogProgress(string verb, string message) Parameters Type Name Description String verb The message verb. String message The message. LogProgressError(ILinuxSshProxy, String) Logs an error message for a specific node. note Setup will terminate after any step that reports an error via this method. Declaration void LogProgressError(ILinuxSshProxy node, string message) Parameters Type Name Description ILinuxSshProxy node Identifies the node String message The message. LogProgressError(String) Logs an error message. note Setup will terminate after any step that reports an error via this method. Declaration void LogProgressError(string message) Parameters Type Name Description String message The message. RunAsync(Int32) Performs the setup operation steps in the in the order they were added to the controller. Declaration Task<SetupDisposition> RunAsync(int maxStackSize = 256000) Parameters Type Name Description Int32 maxStackSize Optionally specifies the maximum stack size, in bytes, to be used by the threads created by this method, or 0 to use the default maximum stack size specified in the header for the executable. Important for partially trusted code, maxStackSize is ignored if it is greater than the default stack size. No exception is thrown in this case. This defaults to 250 KiB to reduce the memory footprint when deploying large clusters. Returns Type Description Task < SetupDisposition > The final disposition of the setup run. SetGlobalStepStatus(String) Sets the operation status text. Declaration void SetGlobalStepStatus(string status = null) Parameters Type Name Description String status The optional operation status text. ThrowIfCancelled() Throws a OperationCanceledException after Cancel() has been called. Declaration void ThrowIfCancelled() WaitForPendingTasksAsync(String) Waits for the pending tasks in a group to complete. Declaration Task WaitForPendingTasksAsync(string groupName) Parameters Type Name Description String groupName The task group name. Returns Type Description Task The tracking Task . Exceptions Type Condition InvalidOperationException Thrown if WaitForPendingTasksAsync(String) has already been called for this group. KeyNotFoundException Thrown when there's no group named groupName . Events Finished Optional event which is raised when the setup operation completes. The sender argument will be passed as the ISetupController instance and the Exception argument will be null when the setup operation completed successfully or an exception detailing the failure. This presents a good opportunity for setup controller users to capture additional information about failed operations, etc. in common code. note Setup controller implementions are not required to set this. Declaration event EventHandler<Exception> Finished Event Type Type Description EventHandler < Exception > ProgressEvent Raised when individual progress/error messages are logged during base image setup where where only limited status needs to be displayed or logged. note This event is not raised during normal cluster prepare or setup because the node image will have already gone through the base preparation. This will be raised though when setting up using debug mode . note This event will be raised on the same thread that logged the progress, typically the thread executing the step and that you MUST NOT modify any event parameters. Declaration event SetupProgressDelegate ProgressEvent Event Type Type Description SetupProgressDelegate StatusChangedEvent Raised periodically when the overall status changes during cluster setup. note This event will be raised on a background thread and that you MUST NOT modify any event parameters. Declaration event SetupStatusChangedDelegate StatusChangedEvent Event Type Type Description SetupStatusChangedDelegate StepStarted Raised when the next setup step is started. Declaration event EventHandler<SetupStepDetails> StepStarted Event Type Type Description EventHandler < SetupStepDetails >"
  },
  "neonkube/api/Neon.Kube.Setup.ISetupControllerStep.html": {
    "href": "neonkube/api/Neon.Kube.Setup.ISetupControllerStep.html",
    "title": "Interface ISetupControllerStep | NeonKUBE documentation",
    "keywords": "Interface ISetupControllerStep Interface implemented by internal Neon.Kube.Setup.SetupController`1.Step implementations. Namespace : Neon.Kube.Setup Assembly : Neon.Kube.dll Syntax public interface ISetupControllerStep Properties IsGlobalStep Returns true for global (non-node) steps or false for node related steps. Declaration bool IsGlobalStep { get; } Property Value Type Description Boolean RunTime Returns the elapsed time executing the step. Declaration TimeSpan RunTime { get; set; } Property Value Type Description TimeSpan"
  },
  "neonkube/api/Neon.Kube.Setup.KubeSetup.html": {
    "href": "neonkube/api/Neon.Kube.Setup.KubeSetup.html",
    "title": "Class KubeSetup | NeonKUBE documentation",
    "keywords": "Class KubeSetup Implements cluster setup operations. Inheritance Object KubeSetup Namespace : Neon.Kube.Setup Assembly : Neon.Kube.Setup.dll Syntax public static class KubeSetup Properties ClusterManifest Returns the ClusterManifest for the current neonKUBE build. This is generated by the internal neon-image prepare node ... tool command which prepares node images. This manifest describes the container images that will be provisioned into clusters. Declaration public static ClusterManifest ClusterManifest { get; } Property Value Type Description ClusterManifest Resources Returns the IStaticDirectory for the assembly's resources. Declaration public static IStaticDirectory Resources { get; } Property Value Type Description IStaticDirectory Methods CalculateResourceRequirements(ISetupController) Executed very early during cluster setup to determine service/pod requests and limits as a KubeClusterAdvice instance that will then be made available to the subquent setup steps as the ClusterAdvice property value. This gives cluster setup a chance to holistically examine the services as well as the resources available to the entire cluster to configure these values. Declaration public static void CalculateResourceRequirements(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. ConfigureControlPlaneTaintsAsync(ISetupController, NodeSshProxy<NodeDefinition>) Configures pods to be schedule on control-plane nodes when enabled. Declaration public static async Task ConfigureControlPlaneTaintsAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . ConfigureKubelet(ISetupController, IEnumerable<NodeSshProxy<NodeDefinition>>) Configures the Kubernetes feature gates specified by the FeatureGates dictionary. It does this by editing the API server's static pod manifest located at /etc/kubernetes/manifests/kube-apiserver.yaml on the control-plane nodes as required. This also tweaks the --service-account-issuer option. Declaration public static void ConfigureKubelet(ISetupController controller, IEnumerable<NodeSshProxy<NodeDefinition>> controlNodes) Parameters Type Name Description ISetupController controller The setup controller. IEnumerable < NodeSshProxy < NodeDefinition >> controlNodes The target control-plane nodes. ConfigureKubernetes(ISetupController, NodeSshProxy<NodeDefinition>) Basic Kubernetes cluster initialization. Declaration public static void ConfigureKubernetes(ISetupController controller, NodeSshProxy<NodeDefinition> firstControlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > firstControlNode The first control-plane node in the cluster where the operation will be performed. ConfigureMetadataAsync(ISetupController, NodeSshProxy<NodeDefinition>) Uploads cluster related metadata to cluster nodes to /etc/neonkube/metadata Declaration public static async Task ConfigureMetadataAsync(ISetupController controller, NodeSshProxy<NodeDefinition> node) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > node The target cluster node. Returns Type Description Task The tracking Task . ConfigurePriorityClassesAsync(ISetupController, NodeSshProxy<NodeDefinition>) Adds the neonKUBE standard priority classes to the cluster. Declaration public static async Task ConfigurePriorityClassesAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . ConfigureWorkstation(ISetupController, NodeSshProxy<NodeDefinition>) Configures the local workstation. Declaration public static void ConfigureWorkstation(ISetupController controller, NodeSshProxy<NodeDefinition> firstControlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > firstControlNode The first control-plane node in the cluster where the operation will be performed. ConnectCluster(ISetupController) Connects to a Kubernetes cluster if it already exists. This sets the K8sClient property in the setup controller state when Kubernetes is running and a connection has not already been established. note The K8sClient will not be set when Kubernetes has not been started, so Get<TValue>(String) calls for this property will fail when the cluster has not been connected yet, which will be useful for debugging setup steps that require a connection but this hasn't happened yet. Declaration public static void ConnectCluster(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. CreateClusterPrepareController(ClusterDefinition, Boolean, PrepareClusterOptions) Constructs the ISetupController to be used for preparing a cluster. Declaration public static ISetupController CreateClusterPrepareController(ClusterDefinition clusterDefinition, bool cloudMarketplace, PrepareClusterOptions options) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Boolean cloudMarketplace For cloud environments, this specifies whether the cluster should be provisioned using a VM image from the public cloud marketplace when true or from the private NEONFORGE image gallery for testing when false . This is ignored for on-premise environments. note Only NEONFORGE maintainers will have permission to use the private image. PrepareClusterOptions options Specifies the cluster prepare options. Returns Type Description ISetupController The ISetupController . Exceptions Type Condition NeonKubeException Thrown when there's a problem. CreateClusterSetupController(ClusterDefinition, Boolean, SetupClusterOptions) Constructs the ISetupController to be used for setting up a cluster. Declaration public static ISetupController CreateClusterSetupController(ClusterDefinition clusterDefinition, bool cloudMarketplace, SetupClusterOptions options) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition. Boolean cloudMarketplace For cloud environments, this specifies whether the cluster should be provisioned using a VM image from the public cloud marketplace when true or from the private NEONFORGE image gallery for testing when false . This is ignored for on-premise environments. note Only NEONFORGE maintainers will have permission to use the private image. SetupClusterOptions options Specifies the cluster setup options. Returns Type Description ISetupController The ISetupController . Exceptions Type Condition NeonKubeException Thrown when there's a problem. CreateCstorStorageClass(ISetupController, NodeSshProxy<NodeDefinition>, String, String, Int32, Boolean) Creates an OpenEBS cStor Kubernetes Storage Class. Declaration public static async Task CreateCstorStorageClass(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode, string name, string cstorPoolCluster = \"cspc-stripe\", int replicaCount = 3, bool isDefault = false) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. String name The new k8s.Models.V1StorageClass name. String cstorPoolCluster Specifies the cStor pool name. Int32 replicaCount Specifies the data replication factor. Boolean isDefault Specifies whether this should be the default storage class. Returns Type Description Task The tracking Task . CreateHostPathStorageClass(ISetupController, NodeSshProxy<NodeDefinition>, String, Boolean) Creates a Kubernetes Storage Class. Declaration public static async Task CreateHostPathStorageClass(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode, string name, bool isDefault = false) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. String name The new k8s.Models.V1StorageClass name. Boolean isDefault Specifies whether this should be the default storage class. Returns Type Description Task The tracking Task . CreateJivaStorageClass(ISetupController, NodeSshProxy<NodeDefinition>, String, Int32, String, Boolean) Creates a Kubernetes Storage Class. Declaration public static async Task CreateJivaStorageClass(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode, string name, int replicaCount = 3, string storagePool = \"default\", bool isDefault = false) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. String name The new k8s.Models.V1StorageClass name. Int32 replicaCount Specifies the data replication factor. String storagePool Specifies the OpenEBS storage pool. Boolean isDefault Optionally indicates that this is the default storage class. Returns Type Description Task The tracking Task . CreateNamespaceAsync(ISetupController, NodeSshProxy<NodeDefinition>, String, Boolean) Creates a Kubernetes namespace. Declaration public static async Task CreateNamespaceAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode, string name, bool istioInjectionEnabled = true) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. String name The new Namespace name. Boolean istioInjectionEnabled Whether Istio sidecar injection should be enabled. Returns Type Description Task The tracking Task . CreateNamespacesAsync(ISetupController, NodeSshProxy<NodeDefinition>) Creates the required namespaces. Declaration public static async Task<List<Task>> CreateNamespacesAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task < List < Task >> The tracking Task . CreateNeonDashboardAsync(ISetupController, NodeSshProxy<NodeDefinition>, String, String, String, Boolean, Int32) Creates a V1NeonDashboard idempotently. Declaration public static async Task CreateNeonDashboardAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode, string name, string url, string displayName = null, bool enabled = true, int displayOrder = 2147483647) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. String name The new bucket name. String url The dashboard URL String displayName The Dashboard display name. Boolean enabled Optionally specify whether the dashboard is enabled. Int32 displayOrder Optionally specify the display order. Returns Type Description Task The tracking Task . CreateRootUserAsync(ISetupController, NodeSshProxy<NodeDefinition>) Configures the root Kubernetes user. Declaration public static async Task CreateRootUserAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . CreateStorageClass(ISetupController, NodeSshProxy<NodeDefinition>, String, Int32, Boolean) Creates the approperiate OpenEBS Kubernetes Storage Class for the cluster. Declaration public static async Task CreateStorageClass(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode, string name, int replicaCount = 3, bool isDefault = false) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. String name The new k8s.Models.V1StorageClass name. Int32 replicaCount Specifies the data replication factor. Boolean isDefault Specifies whether this should be the default storage class. Returns Type Description Task The tracking Task . GenerateKubernetesClusterConfig(ISetupController, NodeSshProxy<NodeDefinition>) Method to generate Kubernetes cluster configuration. Declaration public static string GenerateKubernetesClusterConfig(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description String The tracking Task . GetBuiltInClusterDefinition(HostingEnvironment, String) Returns the cluster definition required to prepare a neonDESKTOP built-in cluster for a specific hosting environment. Declaration public static ClusterDefinition GetBuiltInClusterDefinition(HostingEnvironment hostEnvironment, string deploymentPrefix = null) Parameters Type Name Description HostingEnvironment hostEnvironment Specifies the target environment. String deploymentPrefix Optionally specifies a deployment prefix string to be set as Prefix in the cluster definition returned. This can be used by ClusterFixture and custom tools to help isolated temporary cluster assets from production clusters. Returns Type Description ClusterDefinition The cluster definition. GetK8sClient(ISetupController) Returns the k8s.IKubernetes client persisted in the controller passed. Declaration public static IKubernetes GetK8sClient(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. Returns Type Description k8s.IKubernetes The k8s.Kubernetes client. Exceptions Type Condition InvalidOperationException Thrown when there is no persisted Kubernetes client, indicating that ConnectCluster(ISetupController) has not been called yet. GetSystemDatabaseConnectionStringAsync(ISetupController) Returns the Postgres connection string for the default database for the cluster's NeonSystemDb deployment. Declaration public static async Task<string> GetSystemDatabaseConnectionStringAsync(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. Returns Type Description Task < String > The connection string. GetTaintsAsync(ISetupController, String, String) Gets a list of taints that are currently applied to all nodes matching the given node label/value pair. Declaration public static async Task<List<V1Taint>> GetTaintsAsync(ISetupController controller, string labelKey, string labelValue) Parameters Type Name Description ISetupController controller The setup controller. String labelKey The target nodes label key. String labelValue The target nodes label value. Returns Type Description Task < List < k8s.Models.V1Taint >> The taint list. InstallCalicoCniAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs the Calico CNI. Declaration public static async Task InstallCalicoCniAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallCertManagerAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs Cert Manager. Declaration public static async Task InstallCertManagerAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallClusterOperatorAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs neon-cluster-operator . Declaration public static async Task InstallClusterOperatorAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallContainerRegistryResourcesAsync(ISetupController, NodeSshProxy<NodeDefinition>) Adds custom V1NeonContainerRegistry resources defined in the cluster definition to the cluster. neon-node-agent will pick these up and regenerate the CRI-O configuration. Declaration public static async Task InstallContainerRegistryResourcesAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . Remarks note This must be called after InstallClusterOperatorAsync(ISetupController, NodeSshProxy<NodeDefinition>) because that's where the cluster CRDs get installed. InstallCrdsAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs CRDs used later on in setup by various helm charts. Declaration public static async Task InstallCrdsAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallDexAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs Dex. Declaration public static async Task InstallDexAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallGlauthAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs Glauth. Declaration public static async Task InstallGlauthAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallGrafanaAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs Grafana to the monitoring namespace. Declaration public static async Task InstallGrafanaAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallHarborAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs a harbor container registry and required components. Declaration public static async Task InstallHarborAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallIstioAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs Istio. Declaration public static async Task InstallIstioAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallKubeDashboardAsync(ISetupController, NodeSshProxy<NodeDefinition>) Configures the root Kubernetes user. Declaration public static async Task InstallKubeDashboardAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallKubeStateMetricsAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs Kube State Metrics to the monitoring namespace. Declaration public static async Task InstallKubeStateMetricsAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallLokiAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs Loki to the monitoring namespace. Declaration public static async Task InstallLokiAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallMemcachedAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs Memcached to the neon-system namespace. Declaration public static async Task InstallMemcachedAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallMetricsServerAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs the Kubernetes Metrics Server service. Declaration public static async Task InstallMetricsServerAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallMimirAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs Mimir to the monitoring namespace. Declaration public static async Task InstallMimirAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallMinioAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs a Minio cluster to the monitoring namespace. Declaration public static async Task InstallMinioAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallMonitoringAsync(ISetupController) Installs an Neon Monitoring to the monitoring namespace. Declaration public static async Task InstallMonitoringAsync(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. Returns Type Description Task The tracking Task . InstallNeonCloudTokenAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs tokens needed to authenticate with NeonCLOUD services. Declaration public static async Task InstallNeonCloudTokenAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallNeonDashboardAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs neon-dashboard . Declaration public static async Task InstallNeonDashboardAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallNeonSsoProxyAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs Neon SSO Session Proxy. Declaration public static async Task InstallNeonSsoProxyAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallNodeAgentAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs neon-node-agent . Declaration public static async Task InstallNodeAgentAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallNodeProblemDetectorAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs the Node Problem Detector. Declaration public static async Task InstallNodeProblemDetectorAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallOauth2ProxyAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs Oauth2-proxy. Declaration public static async Task InstallOauth2ProxyAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallOpenEbsAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs OpenEBS. Declaration public static async Task InstallOpenEbsAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallPrometheusAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs The Grafana Agent to the monitoring namespace. Declaration public static async Task InstallPrometheusAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallRedisAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs a harbor container registry and required components. Declaration public static async Task InstallRedisAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallReloaderAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs Reloader to the Neon system nnamespace. Declaration public static async Task InstallReloaderAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallSsoAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs Keycloak. Declaration public static async Task InstallSsoAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallSystemDbAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs a Citus-postgres database used by neon-system services. Declaration public static async Task InstallSystemDbAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . InstallTempoAsync(ISetupController, NodeSshProxy<NodeDefinition>) Installs Tempo to the monitoring namespace. Declaration public static async Task InstallTempoAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . KubeSetupAsync(ISetupController, NodeSshProxy<NodeDefinition>) Some initial kubernetes configuration. Declaration public static async Task KubeSetupAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . LabelNodesAsync(ISetupController, NodeSshProxy<NodeDefinition>) Adds the Kubernetes node labels. Declaration public static async Task LabelNodesAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The first control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . SetupClusterAsync(ISetupController, Int32) Initializes the cluster on the first manager, joins the remaining control-plane nodes and workers to the cluster and then performs the rest of cluster setup. Declaration public static async Task SetupClusterAsync(ISetupController controller, int maxParallel = 10) Parameters Type Name Description ISetupController controller The setup controller. Int32 maxParallel The maximum number of operations on separate nodes to be performed in parallel. This defaults to Neon.Kube.Setup.KubeSetup.defaultMaxParallelNodes . Returns Type Description Task The tracking Task . SetupEtcdHaProxy(ISetupController, NodeSshProxy<NodeDefinition>) Configures a local HAProxy container that makes the Kubernetes etcd cluster highly available. Declaration public static void SetupEtcdHaProxy(ISetupController controller, NodeSshProxy<NodeDefinition> node) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > node The node where the operation will be performed. TaintNodesAsync(ISetupController) Adds the node taints. Declaration public static async Task TaintNodesAsync(ISetupController controller) Parameters Type Name Description ISetupController controller The setup controller. Returns Type Description Task The tracking Task . ToSiString(Nullable<Decimal>) Converts a decimal into a nice byte units string. Declaration public static string ToSiString(decimal? value) Parameters Type Name Description Nullable < Decimal > value The input value (or null ). Returns Type Description String The formatted output (or null ). ToSiString(Nullable<Double>) Converts a double value into a nice byte units string. Declaration public static string ToSiString(double? value) Parameters Type Name Description Nullable < Double > value The input value (or null ). Returns Type Description String The formatted output (or null ). WaitForPrometheusAsync(ISetupController, NodeSshProxy<NodeDefinition>) Waits for Prometheus to be fully ready. Declaration public static async Task WaitForPrometheusAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . WriteClusterConfigMapsAsync(ISetupController, NodeSshProxy<NodeDefinition>) Writes the ClusterHealth and ClusterLock config maps to the NeonStatus namespace. Declaration public static async Task WriteClusterConfigMapsAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task . WriteClusterInfoAsync(ISetupController, NodeSshProxy<NodeDefinition>) Writes the ClusterInfo config map to the NeonStatus namespace. Declaration public static async Task WriteClusterInfoAsync(ISetupController controller, NodeSshProxy<NodeDefinition> controlNode) Parameters Type Name Description ISetupController controller The setup controller. NodeSshProxy < NodeDefinition > controlNode The control-plane node where the operation will be performed. Returns Type Description Task The tracking Task ."
  },
  "neonkube/api/Neon.Kube.Setup.NodeLog.html": {
    "href": "neonkube/api/Neon.Kube.Setup.NodeLog.html",
    "title": "Struct NodeLog | NeonKUBE documentation",
    "keywords": "Struct NodeLog Holds the setup related log for a specific cluster node. Namespace : Neon.Kube.Setup Assembly : Neon.Kube.dll Syntax public struct NodeLog Constructors NodeLog(String, String) Constructor. Declaration public NodeLog(string nodeName, string logText) Parameters Type Name Description String nodeName The node name. String logText The log text. Properties LogText Returns the node's log text. Declaration public string LogText { readonly get; } Property Value Type Description String NodeName Returns the node name. Declaration public string NodeName { readonly get; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Setup.PrepareClusterOptions.html": {
    "href": "neonkube/api/Neon.Kube.Setup.PrepareClusterOptions.html",
    "title": "Class PrepareClusterOptions | NeonKUBE documentation",
    "keywords": "Class PrepareClusterOptions Optionally used to specify options for CreateClusterPrepareController(ClusterDefinition, Boolean, PrepareClusterOptions) . Inheritance Object PrepareClusterOptions Namespace : Neon.Kube.Setup Assembly : Neon.Kube.Setup.dll Syntax public class PrepareClusterOptions Constructors PrepareClusterOptions() Constructor. Declaration public PrepareClusterOptions() Properties BaseImageName Optionally specifies the base image name to use for debug mode. Declaration public string BaseImageName { get; set; } Property Value Type Description String DebugMode Optionally indicates that the cluster will be prepared in debug mode. Declaration public bool DebugMode { get; set; } Property Value Type Description Boolean DesktopImage Optionally indicates that we're building a ready-to-go neon desktop image. Declaration public bool DesktopImage { get; set; } Property Value Type Description Boolean DesktopReadyToGo Optionally indicates that we're setting up a neon-desktop built-in cluster from a completely prebuilt desktop image. In this case, the controller returned will fully deploy the cluster (so no setup controller needs to be created and run afterwards). Declaration public bool DesktopReadyToGo { get; set; } Property Value Type Description Boolean DisableConsoleOutput Optionally disables status output to the console. This is typically enabled for cluster being provisioned by non-console applications. Declaration public bool DisableConsoleOutput { get; set; } Property Value Type Description Boolean MaxParallel Optionally specifies the maximum number of node operations to be performed in parallel. This defaults to 0 which means that we'll use MaxParallel . Declaration public int MaxParallel { get; set; } Property Value Type Description Int32 NodeImagePath Optionally specifies the node image path. note One of NodeImageUri or NodeImagePath must be specified for on-premise hypervisor based environments. These are ignored for cloud hosting. Declaration public string NodeImagePath { get; set; } Property Value Type Description String NodeImageUri Optionally specifies the node image URI. Declaration public string NodeImageUri { get; set; } Property Value Type Description String PackageCacheEndpoints Optionally specifies the IP endpoints for the APT package caches to be used by the cluster, overriding the cluster definition settings. This is useful when package caches are already deployed in an environment. note Package cache servers are deployed to the control-plane nodes by default. Declaration public IEnumerable<IPEndPoint> PackageCacheEndpoints { get; set; } Property Value Type Description IEnumerable < IPEndPoint > RemoveExisting Optionally remove any existing cluster with the same name in the target environment. Declaration public bool RemoveExisting { get; set; } Property Value Type Description Boolean Unredacted Optionally indicates that sensitive information won't be redacted from the setup logs (typically used when debugging). Declaration public bool Unredacted { get; set; } Property Value Type Description Boolean"
  },
  "neonkube/api/Neon.Kube.Setup.SetupClusterOptions.html": {
    "href": "neonkube/api/Neon.Kube.Setup.SetupClusterOptions.html",
    "title": "Class SetupClusterOptions | NeonKUBE documentation",
    "keywords": "Class SetupClusterOptions Optionally used to specify options for CreateClusterSetupController(ClusterDefinition, Boolean, SetupClusterOptions) . Inheritance Object SetupClusterOptions Namespace : Neon.Kube.Setup Assembly : Neon.Kube.Setup.dll Syntax public class SetupClusterOptions Constructors SetupClusterOptions() Constructor. Declaration public SetupClusterOptions() Properties DebugMode Optionally indicates that the cluster will be prepared in debug mode. Declaration public bool DebugMode { get; set; } Property Value Type Description Boolean DisableConsoleOutput Optionally disables status output to the console. This is typically enabled for non-console applications. Declaration public bool DisableConsoleOutput { get; set; } Property Value Type Description Boolean MaxParallel Optionally specifies the maximum number of node operations to be performed in parallel. This defaults to 0 which means that we'll use MaxParallel . Declaration public int MaxParallel { get; set; } Property Value Type Description Int32 NeonCloudHeadendUri Optionally overrides the neonCLOUD headend service URI. This defaults to HeadendUri . Declaration public string NeonCloudHeadendUri { get; set; } Property Value Type Description String Unredacted Optionally indicates that sensitive information won't be redacted from the setup logs (typically used when debugging). Declaration public bool Unredacted { get; set; } Property Value Type Description Boolean UploadCharts Optionally specifies that the current Helm charts should be uploaded to replace the charts in the base image. note This will be treated as true when DebugMode > is passed as true . Declaration public bool UploadCharts { get; set; } Property Value Type Description Boolean"
  },
  "neonkube/api/Neon.Kube.Setup.SetupClusterStatus.html": {
    "href": "neonkube/api/Neon.Kube.Setup.SetupClusterStatus.html",
    "title": "Class SetupClusterStatus | NeonKUBE documentation",
    "keywords": "Class SetupClusterStatus Describes the current state of cluster setup. Inheritance Object NotifyPropertyChanged SetupClusterStatus Inherited Members NotifyPropertyChanged.RaisePropertyChanged(String) NotifyPropertyChanged.PropertyChanged Namespace : Neon.Kube.Setup Assembly : Neon.Kube.dll Syntax public class SetupClusterStatus : NotifyPropertyChanged, INotifyPropertyChanged Properties CurrentStep Returns the currently executing step status (or null ). Declaration public SetupStepStatus CurrentStep { get; set; } Property Value Type Description SetupStepStatus GlobalStatus Returns any status for the overall setup operation. Declaration public string GlobalStatus { get; set; } Property Value Type Description String Hosts Returns the current status for any cluster hosts. Declaration public List<SetupNodeStatus> Hosts { get; } Property Value Type Description List < SetupNodeStatus > IsFaulted Indicates whether cluster setup has failed. Declaration public bool IsFaulted { get; set; } Property Value Type Description Boolean Nodes Returns the current status for the cluster nodes. Declaration public List<SetupNodeStatus> Nodes { get; } Property Value Type Description List < SetupNodeStatus > Steps Returns information about the setup steps in order of execution. Declaration public List<SetupStepStatus> Steps { get; } Property Value Type Description List < SetupStepStatus > Methods Clone() Returns a deep(ish) clone of the instance. Declaration public SetupClusterStatus Clone() Returns Type Description SetupClusterStatus The clone. UpdateFrom(SetupClusterStatus) Copies the properties from the source status to this instance, raising INotifyPropertyChanged related events as required. Declaration public void UpdateFrom(SetupClusterStatus source) Parameters Type Name Description SetupClusterStatus source The source instance. WriteToConsole(Int32, Boolean, Boolean) Displays the current operation status on the Console . Declaration public void WriteToConsole(int maxDisplayedSteps = 5, bool showNodeStatus = true, bool showRuntime = true) Parameters Type Name Description Int32 maxDisplayedSteps The maximum number of steps to be displayed. This defaults to 5 . Boolean showNodeStatus Controls whether individual node status is displayed. This defaults to true . Boolean showRuntime Controls whether step runtime is displayed after all steps have completed. This defaults to true ."
  },
  "neonkube/api/Neon.Kube.Setup.SetupConsoleWriter.html": {
    "href": "neonkube/api/Neon.Kube.Setup.SetupConsoleWriter.html",
    "title": "Class SetupConsoleWriter | NeonKUBE documentation",
    "keywords": "Class SetupConsoleWriter Used internally to update .NET console window without flickering. Inheritance Object SetupConsoleWriter Namespace : Neon.Kube.Setup Assembly : Neon.Kube.dll Syntax public class SetupConsoleWriter Constructors SetupConsoleWriter(Boolean) Constructor. Declaration public SetupConsoleWriter(bool disabled = false) Parameters Type Name Description Boolean disabled Optionally specifies that the console should be disabled. This defaults to false . Methods Stop() Disables Update(String) from writing any more updates to the console and restores the console for normal write operations. Declaration public void Stop() Update(String) Writes the text passed to the Console without flickering. Declaration public void Update(string text) Parameters Type Name Description String text The text to be written."
  },
  "neonkube/api/Neon.Kube.Setup.SetupController-1.html": {
    "href": "neonkube/api/Neon.Kube.Setup.SetupController-1.html",
    "title": "Class SetupController<NodeMetadata> | NeonKUBE documentation",
    "keywords": "Class SetupController<NodeMetadata> Manages a cluster setup operation consisting of a series of setup steps while displaying status to the Console . Inheritance Object Dictionary < String , Object > ObjectDictionary SetupController<NodeMetadata> Implements ISetupController IObjectDictionary Inherited Members ObjectDictionary.Get<TValue>(String) ObjectDictionary.Get<TValue>(String, TValue) ObjectDictionary.TryGetValue<TValue>(String, TValue) Namespace : Neon.Kube.Setup Assembly : Neon.Kube.dll Syntax public class SetupController<NodeMetadata> : ObjectDictionary, IReadOnlyDictionary<string, object>, IReadOnlyCollection<KeyValuePair<string, object>>, IDictionary, ICollection, IDeserializationCallback, ISerializable, ISetupController, IObjectDictionary, IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IEnumerable where NodeMetadata : class Type Parameters Name Description NodeMetadata Specifies the node metadata type. Remarks This class inherits from ObjectDictionary which can be used to maintain state that can be accessed by the setup step actions. This dictionary is keyed by case-sensitive strings and can store and retrieve objects with differing types. Constructors SetupController(String, IEnumerable<NodeSshProxy<NodeMetadata>>, String, Boolean) Constructor. Declaration public SetupController(string operationTitle, IEnumerable<NodeSshProxy<NodeMetadata>> nodes, string logFolder, bool disableConsoleOutput = false) Parameters Type Name Description String operationTitle Summarizes the high-level operation being performed. IEnumerable < NodeSshProxy <NodeMetadata>> nodes The node proxies for the cluster nodes being manipulated. String logFolder Specifies the path to the log folder. Boolean disableConsoleOutput Optionally disables status output to the console. This is typically enabled for non-console applications. SetupController(String[], IEnumerable<NodeSshProxy<NodeMetadata>>, String, Boolean) Constructor. Declaration public SetupController(string[] operationTitle, IEnumerable<NodeSshProxy<NodeMetadata>> nodes, string logFolder, bool disableConsoleOutput = false) Parameters Type Name Description String [] operationTitle Summarizes the high-level operation being performed. IEnumerable < NodeSshProxy <NodeMetadata>> nodes The node proxies for the cluster nodes being manipulated. String logFolder Specifies the path to the log folder. Boolean disableConsoleOutput Optionally disables status output to the console. This is typically enabled for non-console applications. Properties CancellationToken Returns the CancellationToken that will be signalled when setup is cancelled. Declaration public CancellationToken CancellationToken { get; } Property Value Type Description CancellationToken ConsoleWriter Returns the console updater used internally to write the setup status to the Console without flickering. This will be null for non-console applications. Declaration public SetupConsoleWriter ConsoleWriter { get; } Property Value Type Description SetupConsoleWriter CurrentStepNumber Returns the current step number or -1 for quiet steps or when setup hasn't started yet. Declaration public int CurrentStepNumber { get; } Property Value Type Description Int32 DisablePendingTasks This controls whether AddPendingTaskAsync(String, Task, String, String, INodeSshProxy) actually holds pending tasks to be awaited by a future step (the default) or whether the AddPendingTaskAsync(String, Task, String, String, INodeSshProxy) awaits the task itself. This is useful for debugging because executing a bunch of tasks in parallel is likely to mess with the node and global logs since those are not really structured to handle parallel operations at this time. Declaration public bool DisablePendingTasks { get; set; } Property Value Type Description Boolean GlobalStatus Returns any status for the overall setup operation. Declaration public string GlobalStatus { get; } Property Value Type Description String HasNodeSteps Returns true if the controller has an nodes with setup steps. Declaration public bool HasNodeSteps { get; } Property Value Type Description Boolean IsCancelPending Indicates that setup is being cancelled. Declaration public bool IsCancelPending { get; } Property Value Type Description Boolean IsFaulted Indicates whether cluster setup is faulted due to a global problem or when any node is faulted. Declaration public bool IsFaulted { get; } Property Value Type Description Boolean LastProgressError Returns the last error message logged by LogProgressError(String) . Declaration public string LastProgressError { get; } Property Value Type Description String LogBeginMarker Optionally specifies the line written as the first line of log files. Declaration public string LogBeginMarker { get; set; } Property Value Type Description String LogEndMarker Optionally specifies the line written as the last line of log files when the operation succeeded. Declaration public string LogEndMarker { get; set; } Property Value Type Description String LogFailedMarker Optionally specifies the line written as the last line of log files when the operation failed. Declaration public string LogFailedMarker { get; set; } Property Value Type Description String MaxDisplayedSteps Specifies the maximum number of setup steps to be displayed. This defaults to 5 . You can set 0 to allow an unlimited number of steps may be displayed. Declaration public int MaxDisplayedSteps { get; set; } Property Value Type Description Int32 MaxParallel The maximum number of nodes that will execute setup steps in parallel. This defaults to effectively unconstrained. Declaration public int MaxParallel { get; set; } Property Value Type Description Int32 NodeMetadataType Returns the SetupController<NodeMetadata> 's node metadata type. Declaration public Type NodeMetadataType { get; } Property Value Type Description Type OperationTitle Specifies the operation title. Declaration public string OperationTitle { get; } Property Value Type Description String ShowNodeStatus Specifies whether that node status will be displayed. This defaults to true . Declaration public bool ShowNodeStatus { get; set; } Property Value Type Description Boolean ShowRuntime Optionally displays the elapsed time for each step as well as the overall operation when setup completes (or fails). Declaration public bool ShowRuntime { get; set; } Property Value Type Description Boolean ShowStatus Specifies whether the class should print setup status to the console. This defaults to false . Declaration public bool ShowStatus { get; set; } Property Value Type Description Boolean StepCount Returns the number of setup steps. Declaration public int StepCount { get; } Property Value Type Description Int32 Methods AddCheckForIpConflcits(String) Adds a global step that scans for existing machines that conflict with any of the IP addressess assigned to the cluster. This is used by some hosting managers to ensure that we're not conficting with and exising cluster or other assets deployed on the LAN. Declaration public object AddCheckForIpConflcits(string stepLabel = \"scan for IP address conflicts\") Parameters Type Name Description String stepLabel Optionally specifies the step label. Returns Type Description Object INTERNAL USE ONLY: The new internal step as an Object . AddControllerStep<ServerMetadata>(SetupController<ServerMetadata>) Adds the steps from a subcontroller to the current controller. Declaration public void AddControllerStep<ServerMetadata>(SetupController<ServerMetadata> subController) where ServerMetadata : class Parameters Type Name Description SetupController <ServerMetadata> subController The subcontroller. Type Parameters Name Description ServerMetadata Specifies the type of the subcontroller's node metadata. Remarks This is useful for situations where an operation requires interactions with machines that are not cluster nodes. Currently, we're using this for connecting to XenServers to provision cluster nodes there before moving on to preparing the cluster nodes and configuring the cluster. note This method copies the state from this controller (the parent) to the subcontroller before executing the first subcontroller step. note Subcontroller steps may only be added to the parent level. You may not nest these any deeper than that. AddDelayStep(String, TimeSpan, String, Func<ISetupController, NodeSshProxy<NodeMetadata>, Boolean>, Boolean, Int32) Adds a synchronous global step that waits for a specified period of time. Declaration public object AddDelayStep(string stepLabel, TimeSpan delay, string status = null, Func<ISetupController, NodeSshProxy<NodeMetadata>, bool> nodePredicate = null, bool quiet = false, int position = -1) Parameters Type Name Description String stepLabel Specifies the step label. TimeSpan delay The amount of time to wait. String status The optional node status. Func < ISetupController , NodeSshProxy <NodeMetadata>, Boolean > nodePredicate Optional predicate used to select the nodes that participate in the step or null to select all nodes. Boolean quiet Optionally specifies that the step is not to be reported in the progress. Int32 position The optional zero-based index of the position where the step is to be inserted into the step list. Returns Type Description Object INTERNAL USE ONLY: The new internal step as an Object . AddDisposable(IDisposable) Adds an IDisposable instance to the controller so that they can be properly disposed when RunAsync(Int32) exits. Declaration public void AddDisposable(IDisposable disposable) Parameters Type Name Description IDisposable disposable AddGlobalStep(String, Action<ISetupController>, Boolean, ISetupController, Int32) Adds a synchronous global configuration step. Declaration public object AddGlobalStep(string stepLabel, Action<ISetupController> action, bool quiet = false, ISetupController subController = null, int position = -1) Parameters Type Name Description String stepLabel Specifies the step label. Action < ISetupController > action The synchronous global action to be performed. Boolean quiet Optionally specifies that the step is not to be reported in the progress. ISetupController subController Optionally specifies the related subcontroller. Int32 position The optional zero-based index of the position where the step is to be inserted into the step list. Returns Type Description Object INTERNAL USE ONLY: The new internal step as an Object . AddGlobalStep(String, Func<ISetupController, Task>, Boolean, ISetupController, Int32) Adds an asynchronous global configuration step. Declaration public object AddGlobalStep(string stepLabel, Func<ISetupController, Task> action, bool quiet = false, ISetupController subController = null, int position = -1) Parameters Type Name Description String stepLabel Specifies the step label. Func < ISetupController , Task > action The asynchronous global action to be performed. Boolean quiet Optionally specifies that the step is not to be reported in the progress. ISetupController subController Optionally specifies the related subcontroller. Int32 position The optional zero-based index of the position where the step is to be inserted into the step list. Returns Type Description Object INTERNAL USE ONLY: The new internal step as an Object . AddNodeStep(String, Action<ISetupController, NodeSshProxy<NodeMetadata>>, Func<ISetupController, NodeSshProxy<NodeMetadata>, Boolean>, Boolean, Boolean, Int32, Int32) Appends a synchronous node configuration step. Declaration public object AddNodeStep(string stepLabel, Action<ISetupController, NodeSshProxy<NodeMetadata>> nodeAction, Func<ISetupController, NodeSshProxy<NodeMetadata>, bool> nodePredicate = null, bool quiet = false, bool noParallelLimit = false, int position = -1, int parallelLimit = 0) Parameters Type Name Description String stepLabel Specifies the step label. Action < ISetupController , NodeSshProxy <NodeMetadata>> nodeAction The action to be performed on each node. Two parameters will be passed to this action: the node's NodeSshProxy<TMetadata> and a TimeSpan indicating the amount of time the action should wait before performing the operation, if the operation hasn't already been performed. Func < ISetupController , NodeSshProxy <NodeMetadata>, Boolean > nodePredicate Optional predicate used to select the nodes that participate in the step or null to select all nodes. Boolean quiet Optionally specifies that the step is not to be reported in the progress. Boolean noParallelLimit Optionally ignores the global MaxParallel limit for the new step when greater. Int32 position Optionally specifies the zero-based index of the position where the step is to be inserted into the step list. Int32 parallelLimit Optionally specifies the maximum number of operations to be performed in parallel for this step, overriding the controller default. Returns Type Description Object INTERNAL USE ONLY: The new internal step as an Object . Exceptions Type Condition InvalidOperationException Thrown when RunAsync(Int32) has been called to start execution. AddNodeStep(String, Func<ISetupController, NodeSshProxy<NodeMetadata>, Task>, Func<ISetupController, NodeSshProxy<NodeMetadata>, Boolean>, Boolean, Boolean, Int32, Int32) Appends an asynchronous node configuration step. Declaration public object AddNodeStep(string stepLabel, Func<ISetupController, NodeSshProxy<NodeMetadata>, Task> nodeAction, Func<ISetupController, NodeSshProxy<NodeMetadata>, bool> nodePredicate = null, bool quiet = false, bool noParallelLimit = false, int position = -1, int parallelLimit = 0) Parameters Type Name Description String stepLabel Specifies the step label. Func < ISetupController , NodeSshProxy <NodeMetadata>, Task > nodeAction The action to be performed on each node. Two parameters will be passed to this action: the node's NodeSshProxy<TMetadata> and a TimeSpan indicating the amount of time the action should wait before performing the operation, if the operation hasn't already been performed. Func < ISetupController , NodeSshProxy <NodeMetadata>, Boolean > nodePredicate Optional predicate used to select the nodes that participate in the step or null to select all nodes. Boolean quiet Optionally specifies that the step is not to be reported in the progress. Boolean noParallelLimit Optionally ignores the global MaxParallel limit for the new step when greater. Int32 position Optionally specifies the zero-based index of the position where the step is to be inserted into the step list. Int32 parallelLimit Optionally specifies the maximum number of operations to be performed in parallel for this step, overriding the controller default. Returns Type Description Object INTERNAL USE ONLY: The new internal step as an Object . AddPendingTaskAsync(String, Task, String, String, INodeSshProxy) Adds a pending task to a group of related tasks, creating the group when necessary. This is used as an aid to parallelizing setup operations to improve cluster setup times. note If DisablePendingTasks is true , then this method will await the task immediately, creating any empty group if necessary. This is useful for debugging because executing a bunch of tasks in parallel is likely to mess with the node and global logs since those are not really structured to handle parallel operations at this time. Declaration public async Task AddPendingTaskAsync(string groupName, Task task, string verb, string message, INodeSshProxy node = null) Parameters Type Name Description String groupName The task group name. Task task The pending task. String verb The progress verb. String message The progress message. INodeSshProxy node Optionally specifies the node where the operation is happening. The operation will be considered to be cluster global when this is null . Returns Type Description Task The tracking Task . Exceptions Type Condition InvalidOperationException Thrown if WaitForPendingTasksAsync(String) has already been called for this group. AddWaitUntilOnlineStep(String, String, Func<ISetupController, NodeSshProxy<NodeMetadata>, Boolean>, Boolean, Nullable<TimeSpan>, Int32) Adds a synchronous global step that waits for all nodes to be online. Declaration public object AddWaitUntilOnlineStep(string stepLabel = \"connect\", string status = null, Func<ISetupController, NodeSshProxy<NodeMetadata>, bool> nodePredicate = null, bool quiet = false, TimeSpan? timeout = null, int position = -1) Parameters Type Name Description String stepLabel Optionally specifies the step label. String status The optional node status. Func < ISetupController , NodeSshProxy <NodeMetadata>, Boolean > nodePredicate Optional predicate used to select the nodes that participate in the step or null to select all nodes. Boolean quiet Optionally specifies that the step is not to be reported in the progress. Nullable < TimeSpan > timeout Optionally specifies the maximum time to wait (defaults to 10 minutes ). Int32 position The optional zero-based index of the position where the step is to be inserted into the step list. Returns Type Description Object INTERNAL USE ONLY: The new internal step as an Object . Cancel() Attempts to cancel the setup operation. This will cause IsCancelPending to return true and calls to ThrowIfCancelled() to throw a OperationCanceledException . Declaration public void Cancel() GetHostLogs() Returns setup related log information for any host proxies. Declaration public IEnumerable<NodeLog> GetHostLogs() Returns Type Description IEnumerable < NodeLog > An the NodeLog values. GetHostStatus() Returns the status for any VM host machines being managed by executing subcontroller steps. Declaration public IEnumerable<SetupNodeStatus> GetHostStatus() Returns Type Description IEnumerable < SetupNodeStatus > The status information for any host nodes. GetNodeLogs() Returns setup related log information for each of the nodes. Declaration public IEnumerable<NodeLog> GetNodeLogs() Returns Type Description IEnumerable < NodeLog > An the NodeLog values. GetNodeStatus() Returns the status for any nodes being managed by the controller. Declaration public IEnumerable<SetupNodeStatus> GetNodeStatus() Returns Type Description IEnumerable < SetupNodeStatus > The status information for any nodes. GetPendingGroups() Returns the names of any pending task groups that have not been awaited via WaitForPendingTasksAsync(String) . This can be used by setup implementations to verify that all pending tasks have completed. Declaration public List<string> GetPendingGroups() Returns Type Description List < String > The list of pending task group names. GetStepNodeNames(Object) Returns a HashSet<T> with the names of the cluster nodes participating in the internal node step passed. This step is available as InternalStep . Declaration public HashSet<string> GetStepNodeNames(object internalStep) Parameters Type Name Description Object internalStep The internal node step. Returns Type Description HashSet < String > The set of names affected by the setup sstep. GetStepStatus() Returns the status for all of the setup steps in order of execution. Declaration public IEnumerable<SetupStepStatus> GetStepStatus() Returns Type Description IEnumerable < SetupStepStatus > The step status items. LogGlobal(String) Writes a line to the global cluster log file. This is used to log information that pertains to a global operation rather than a specific node. note This does not raise the ProgressEvent . Declaration public void LogGlobal(string message = null) Parameters Type Name Description String message Optionally specifies the message to be logged. LogGlobalError(String) Writes an error line to the global cluster log file. This is used to log errors that pertain to a global operation rather than a specific node. note This does not raise the ProgressEvent . Declaration public void LogGlobalError(string message = null) Parameters Type Name Description String message Optionally specifies the message to be logged. LogGlobalException(Exception) Writes information about an exception to the global cluster log file. note This does not raise the ProgressEvent . Declaration public void LogGlobalException(Exception e) Parameters Type Name Description Exception e The exception. LogProgress(ILinuxSshProxy, String) Logs a progress message for a specific node. This sets the status text for the node. Declaration public void LogProgress(ILinuxSshProxy node, string message) Parameters Type Name Description ILinuxSshProxy node Identifies the node String message The message. LogProgress(ILinuxSshProxy, String, String) Logs a progress for a specific node with a verb and message. This will be formatted like VERB MESSAGE . Declaration public void LogProgress(ILinuxSshProxy node, string verb, string message) Parameters Type Name Description ILinuxSshProxy node Identifies the node String verb The message verb. String message The message. LogProgress(String) Logs a progress message. Declaration public void LogProgress(string message) Parameters Type Name Description String message The message. LogProgress(String, String) Logs a progress message with a verb. This will be formatted like VERB: MESSAGE . Declaration public void LogProgress(string verb, string message) Parameters Type Name Description String verb The message verb. String message The message. LogProgressError(ILinuxSshProxy, String) Logs an error message for a specific node. note Setup will terminate after any step that reports an error via this method. Declaration public void LogProgressError(ILinuxSshProxy node, string message) Parameters Type Name Description ILinuxSshProxy node Identifies the node String message The message. LogProgressError(String) Logs an error message. note Setup will terminate after any step that reports an error via this method. Declaration public void LogProgressError(string message) Parameters Type Name Description String message The message. RunAsync(Int32) Performs the setup operation steps in the in the order they were added to the controller. Declaration public Task<SetupDisposition> RunAsync(int maxStackSize = 256000) Parameters Type Name Description Int32 maxStackSize Optionally specifies the maximum stack size, in bytes, to be used by the threads created by this method, or 0 to use the default maximum stack size specified in the header for the executable. Important for partially trusted code, maxStackSize is ignored if it is greater than the default stack size. No exception is thrown in this case. This defaults to 250 KiB to reduce the memory footprint when deploying large clusters. Returns Type Description Task < SetupDisposition > The final disposition of the setup run. SetDefaultRunOptions(RunOptions) Sets the DefaultRunOptions property for all nodes managed by the controller. Declaration public void SetDefaultRunOptions(RunOptions options) Parameters Type Name Description RunOptions options The options to be set. SetGlobalStepStatus(String) Sets the operation status text. Declaration public void SetGlobalStepStatus(string status = null) Parameters Type Name Description String status The optional operation status text. SetHosts(IEnumerable<INodeSshProxy>) Optionally called by hosting managers to associate any virtual machine host proxies that are participating in the setup operation with the controller. These are used to write fault details to the global cluster log after the operation completes. note This must be called before the controller starts. Declaration public void SetHosts(IEnumerable<INodeSshProxy> hosts) Parameters Type Name Description IEnumerable < INodeSshProxy > hosts The hosts being assoicated. ThrowIfCancelled() Throws a OperationCanceledException after Cancel() has been called. Declaration public void ThrowIfCancelled() ThrowOnError() Throws an exception if any of the operation steps did not complete successfully. Declaration public void ThrowOnError() WaitForPendingTasksAsync(String) Waits for the pending tasks in a group to complete. Declaration public async Task WaitForPendingTasksAsync(string groupName) Parameters Type Name Description String groupName The task group name. Returns Type Description Task The tracking Task . Exceptions Type Condition InvalidOperationException Thrown if WaitForPendingTasksAsync(String) has already been called for this group. KeyNotFoundException Thrown when there's no group named groupName . Events Finished Optional event which is raised when the setup operation completes. The sender argument will be passed as the ISetupController instance and the Exception argument will be null when the setup operation completed successfully or an exception detailing the failure. This presents a good opportunity for setup controller users to capture additional information about failed operations, etc. in common code. note Setup controller implementions are not required to set this. Declaration public event EventHandler<Exception> Finished Event Type Type Description EventHandler < Exception > ProgressEvent Raised when individual progress/error messages are logged during base image setup where where only limited status needs to be displayed or logged. note This event is not raised during normal cluster prepare or setup because the node image will have already gone through the base preparation. This will be raised though when setting up using debug mode . note This event will be raised on the same thread that logged the progress, typically the thread executing the step and that you MUST NOT modify any event parameters. Declaration public event SetupProgressDelegate ProgressEvent Event Type Type Description SetupProgressDelegate StatusChangedEvent Raised periodically when the overall status changes during cluster setup. note This event will be raised on a background thread and that you MUST NOT modify any event parameters. Declaration public event SetupStatusChangedDelegate StatusChangedEvent Event Type Type Description SetupStatusChangedDelegate StepStarted Raised when the next setup step is started. Declaration public event EventHandler<SetupStepDetails> StepStarted Event Type Type Description EventHandler < SetupStepDetails > Implements ISetupController IObjectDictionary"
  },
  "neonkube/api/Neon.Kube.Setup.SetupDisposition.html": {
    "href": "neonkube/api/Neon.Kube.Setup.SetupDisposition.html",
    "title": "Enum SetupDisposition | NeonKUBE documentation",
    "keywords": "Enum SetupDisposition Enumerates the final disposition of a SetupController<NodeMetadata> run. Namespace : Neon.Kube.Setup Assembly : Neon.Kube.dll Syntax public enum SetupDisposition Fields Name Description Cancelled The setup run was cancelled. Failed The setup run failed. NotExecuted The setup run has not been executed. Succeeded The setup run completed successfully."
  },
  "neonkube/api/Neon.Kube.Setup.SetupNodeStatus.html": {
    "href": "neonkube/api/Neon.Kube.Setup.SetupNodeStatus.html",
    "title": "Class SetupNodeStatus | NeonKUBE documentation",
    "keywords": "Class SetupNodeStatus Describes the current state of a node during cluster setup. Inheritance Object NotifyPropertyChanged SetupNodeStatus Inherited Members NotifyPropertyChanged.RaisePropertyChanged(String) NotifyPropertyChanged.PropertyChanged Namespace : Neon.Kube.Setup Assembly : Neon.Kube.dll Syntax public class SetupNodeStatus : NotifyPropertyChanged, INotifyPropertyChanged Constructors SetupNodeStatus() Default constructor used by Clone() as well as for UX design mode. Declaration public SetupNodeStatus() SetupNodeStatus(LinuxSshProxy, Object) Constructor. Declaration public SetupNodeStatus(LinuxSshProxy nodeOrHost, object metadata) Parameters Type Name Description LinuxSshProxy nodeOrHost The source node or vm host. Object metadata The node metadata or null . Properties Metadata The node metadata as an object. The actual type can be determined by examining NodeMetadataType . Declaration [JsonIgnore] public object Metadata { get; set; } Property Value Type Description Object Name The node name. Declaration public string Name { get; set; } Property Value Type Description String Role The node role. This will be one of the NodeRole values. Declaration public string Role { get; set; } Property Value Type Description String Status The node status string. Declaration public string Status { get; set; } Property Value Type Description String StepState Indicates the setup step state for the node. Declaration public SetupStepState StepState { get; set; } Property Value Type Description SetupStepState Methods Clone() Returns a clone of the instance. Declaration public SetupNodeStatus Clone() Returns Type Description SetupNodeStatus The clone. UpdateFrom(SetupNodeStatus) Copies the properties from the source status to this instance, raising INotifyPropertyChanged related events as required. Declaration public void UpdateFrom(SetupNodeStatus source) Parameters Type Name Description SetupNodeStatus source The source instance."
  },
  "neonkube/api/Neon.Kube.Setup.SetupProgressDelegate.html": {
    "href": "neonkube/api/Neon.Kube.Setup.SetupProgressDelegate.html",
    "title": "Delegate SetupProgressDelegate | NeonKUBE documentation",
    "keywords": "Delegate SetupProgressDelegate Used for raising the ProgressEvent . Namespace : Neon.Kube.Setup Assembly : Neon.Kube.dll Syntax public delegate void SetupProgressDelegate(SetupProgressMessage message); Parameters Type Name Description SetupProgressMessage message The status message."
  },
  "neonkube/api/Neon.Kube.Setup.SetupProgressMessage.html": {
    "href": "neonkube/api/Neon.Kube.Setup.SetupProgressMessage.html",
    "title": "Class SetupProgressMessage | NeonKUBE documentation",
    "keywords": "Class SetupProgressMessage Holds setup progress message details. Inheritance Object SetupProgressMessage Namespace : Neon.Kube.Setup Assembly : Neon.Kube.dll Syntax public class SetupProgressMessage Properties CancelPending Indicates whether the setup controller has been signalled to cancel the entire operation. Declaration public bool CancelPending { get; set; } Property Value Type Description Boolean IsError Indicates whether the message describes an error. Declaration public bool IsError { get; set; } Property Value Type Description Boolean Node Returns the node associated with this message, if any. Declaration public object Node { get; set; } Property Value Type Description Object Text Returns the message text. Declaration public string Text { get; set; } Property Value Type Description String Verb Returns the verb associated with this message, if any. Declaration public string Verb { get; set; } Property Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Setup.SetupStatusChangedDelegate.html": {
    "href": "neonkube/api/Neon.Kube.Setup.SetupStatusChangedDelegate.html",
    "title": "Delegate SetupStatusChangedDelegate | NeonKUBE documentation",
    "keywords": "Delegate SetupStatusChangedDelegate Used for raising the StatusChangedEvent . Namespace : Neon.Kube.Setup Assembly : Neon.Kube.dll Syntax public delegate void SetupStatusChangedDelegate(SetupClusterStatus status); Parameters Type Name Description SetupClusterStatus status The new status."
  },
  "neonkube/api/Neon.Kube.Setup.SetupStepDetails.html": {
    "href": "neonkube/api/Neon.Kube.Setup.SetupStepDetails.html",
    "title": "Class SetupStepDetails | NeonKUBE documentation",
    "keywords": "Class SetupStepDetails Holds information about an executing setup step. This is the argument passed when the StepStarted event is raised. Inheritance Object SetupStepDetails Namespace : Neon.Kube.Setup Assembly : Neon.Kube.dll Syntax public class SetupStepDetails Constructors SetupStepDetails(Int32, String) Constructor. Declaration public SetupStepDetails(int number, string label) Parameters Type Name Description Int32 number The step number. String label The step label. Properties Label Returns the step label. Declaration public string Label { get; } Property Value Type Description String Number Returns the step number. Declaration public int Number { get; } Property Value Type Description Int32"
  },
  "neonkube/api/Neon.Kube.Setup.SetupStepState.html": {
    "href": "neonkube/api/Neon.Kube.Setup.SetupStepState.html",
    "title": "Enum SetupStepState | NeonKUBE documentation",
    "keywords": "Enum SetupStepState Enumerates possible status codes for a cluster setup step. Namespace : Neon.Kube.Setup Assembly : Neon.Kube.dll Syntax public enum SetupStepState Fields Name Description Cancelled The step was cancelled. Done The step has completed successfully. Failed The step failed. NotInvolved Used to indicate that a node is not involved with a setup step. Pending The step is awaiting execution. Running The step is running."
  },
  "neonkube/api/Neon.Kube.Setup.SetupStepStatus.html": {
    "href": "neonkube/api/Neon.Kube.Setup.SetupStepStatus.html",
    "title": "Class SetupStepStatus | NeonKUBE documentation",
    "keywords": "Class SetupStepStatus Holds state information about a setup step. Inheritance Object NotifyPropertyChanged SetupStepStatus Inherited Members NotifyPropertyChanged.RaisePropertyChanged(String) NotifyPropertyChanged.PropertyChanged Namespace : Neon.Kube.Setup Assembly : Neon.Kube.dll Syntax public class SetupStepStatus : NotifyPropertyChanged, INotifyPropertyChanged Constructors SetupStepStatus(Int32, String, SetupStepState, ISetupControllerStep, TimeSpan) Constructor. Declaration public SetupStepStatus(int stepNumber, string stepLabel, SetupStepState stepState, ISetupControllerStep internalStep, TimeSpan runTime = default(TimeSpan)) Parameters Type Name Description Int32 stepNumber The step number or zero for quiet steps. String stepLabel The setup step label. SetupStepState stepState The current status for the step. ISetupControllerStep internalStep Specifies the internal setup controller step. TimeSpan runTime Optionally specifies the runtime for completed steps or Zero when the step hasn't completed execution. Properties InternalStep Returns the internal SetupController<NodeMetadata> step. Declaration [JsonIgnore] public ISetupControllerStep InternalStep { get; set; } Property Value Type Description ISetupControllerStep IsGlobalStep Returns true for global steps, false for node steps. Declaration public bool IsGlobalStep { get; } Property Value Type Description Boolean IsQuiet Returns true for steps that where progress not intended to be reported to the user. Declaration public bool IsQuiet { get; set; } Property Value Type Description Boolean Label Returns the step label. Declaration public string Label { get; set; } Property Value Type Description String Number Returns the step number. Declaration public int Number { get; set; } Property Value Type Description Int32 Runtime Returns how long the step has been executing for the current step or the total runtime for when the step has completed or failed. Declaration public TimeSpan Runtime { get; set; } Property Value Type Description TimeSpan State Returns the current step state. Declaration public SetupStepState State { get; set; } Property Value Type Description SetupStepState Methods Clone() Returns a clone of a source (not cloned) instance. Declaration public SetupStepStatus Clone() Returns Type Description SetupStepStatus The clone. UpdateFrom(SetupStepStatus) Copies the properties from the source status to this instance, raising INotifyPropertyChanged related events as require. Declaration public void UpdateFrom(SetupStepStatus source) Parameters Type Name Description SetupStepStatus source The source instance."
  },
  "neonkube/api/Neon.Kube.TypeSafeConfigMap-1.html": {
    "href": "neonkube/api/Neon.Kube.TypeSafeConfigMap-1.html",
    "title": "Class TypeSafeConfigMap<TConfig> | NeonKUBE documentation",
    "keywords": "Class TypeSafeConfigMap<TConfig> Wraps a Kubernetes k8s.Models.V1ConfigMap to support strongly typed configurations. This is persisted using a string dictionary where the configuration is persisted as JSON using the \"data\" key. note This is typically used for persisting state to the cluster rather than for setting configuration for pods. Inheritance Object TypeSafeConfigMap<TConfig> Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class TypeSafeConfigMap<TConfig> where TConfig : class, new() Type Parameters Name Description TConfig Specifies the configuration type. Remarks To create a configmap, use the TypeSafeConfigMap(String, String, TConfig) constructor, specifying the configmap's Kubernetes name and namespace as well as an instance of the typesafe config; your typed config will be available as the Config property. Configure your config as required and then call IKubernetes.CreateNamespacedConfigMapAsync() , passing ConfigMap as the request body (this holds the k8s.Models.V1ConfigMap ). To read an existing configmap, call IKubernetes.CoreV1.ReadNamespacedConfigMapAsync to retrieve the Kubernetes configmap and then call the static From(V1ConfigMap) method to wrap the result into a TypeSafeConfigMap<TConfig> where your typesafe values can be accessed via the Config property. To update an existing config, call IKubernetes.CoreV1.ReadNamespacedConfigMapAsync to retrieve it, modify it via the Config property and then call IKubernetes.CoreV1.ReplaceNamespacedConfigMapAsync() passing ConfigMap . Constructors TypeSafeConfigMap(V1ConfigMap) Constructs an instance from an existing k8s.Models.V1ConfigMap . Declaration public TypeSafeConfigMap(V1ConfigMap configMap) Parameters Type Name Description k8s.Models.V1ConfigMap configMap The config map name as it will be persisted to Kubernetes. TypeSafeConfigMap(String, String, TConfig) Constructs an instance with the specified name and TConfig value. Declaration public TypeSafeConfigMap(string name, string namespace, TConfig config = null) Parameters Type Name Description String name Specifies the configmap name. String namespace specifies the namespace. TConfig config Optionally specifies the initial config value. A default instance will be created when this is null . Properties Config Returns the current TConfig value. Declaration public TConfig Config { get; set; } Property Value Type Description TConfig Exceptions Type Condition ArgumentNullException Thrown when the value being set is null . ConfigMap Returns the associated k8s.Models.V1ConfigMap . Declaration public V1ConfigMap ConfigMap { get; } Property Value Type Description k8s.Models.V1ConfigMap Methods From(V1ConfigMap) Constructs an instance by parsing a k8s.Models.V1ConfigMap . Declaration public static TypeSafeConfigMap<TConfig> From(V1ConfigMap configMap) Parameters Type Name Description k8s.Models.V1ConfigMap configMap The source config map. Returns Type Description TypeSafeConfigMap <TConfig> The parsed configuration Update() Updates the configmap by persisting any changes to Config back to the Kubernetes configmap's \"data\" key. Declaration public void Update()"
  },
  "neonkube/api/Neon.Kube.V1CustomObjectList-1.html": {
    "href": "neonkube/api/Neon.Kube.V1CustomObjectList-1.html",
    "title": "Class V1CustomObjectList<T> | NeonKUBE documentation",
    "keywords": "Class V1CustomObjectList<T> Holds a list of generic custom object instances returned by the API server. Inheritance Object V1CustomObjectList<T> Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class V1CustomObjectList<T> : IKubernetesObject<V1ListMeta>, IKubernetesObject, IMetadata<V1ListMeta>, IItems<T>, IValidate where T : IKubernetesObject<V1ObjectMeta> Type Parameters Name Description T The custom object type. Properties ApiVersion Declaration public string ApiVersion { get; set; } Property Value Type Description String Items Declaration public IList<T> Items { get; set; } Property Value Type Description IList <T> Kind Declaration public string Kind { get; set; } Property Value Type Description String Metadata Declaration public V1ListMeta Metadata { get; set; } Property Value Type Description k8s.Models.V1ListMeta Methods Validate() Declaration public void Validate() Extension Methods KubernetesExtensions.SetMetadata(IKubernetesObject)"
  },
  "neonkube/api/Neon.Kube.VersionException.html": {
    "href": "neonkube/api/Neon.Kube.VersionException.html",
    "title": "Class VersionException | NeonKUBE documentation",
    "keywords": "Class VersionException Indicates a client or other version incompatiblity. Inheritance Object Exception VersionException Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class VersionException : Exception, ISerializable Constructors VersionException() Default constructor. Declaration public VersionException() VersionException(String, Exception) Constructs and instance with a message and an optional inner exception. Declaration public VersionException(string message, Exception innerException = null) Parameters Type Name Description String message The message. Exception innerException The optional inner exception."
  },
  "neonkube/api/Neon.Kube.Watcher-1.html": {
    "href": "neonkube/api/Neon.Kube.Watcher-1.html",
    "title": "Class Watcher<T> | NeonKUBE documentation",
    "keywords": "Class Watcher<T> A generic Kubernetes watcher. Inheritance Object Watcher<T> Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public sealed class Watcher<T> : IDisposable where T : IKubernetesObject<V1ObjectMeta>, new() Type Parameters Name Description T Specifies the Kubernetes entity type being watched. Constructors Watcher(IKubernetes, ILogger) Constructor. Declaration public Watcher(IKubernetes k8s, ILogger logger = null) Parameters Type Name Description k8s.IKubernetes k8s The Kubernetes clien. ILogger logger Optionally specifies the logger to use. Methods Dispose() Declaration public void Dispose() WatchAsync(Func<WatchEvent<T>, Task>, String, String, String, String, String, Nullable<Int32>, CancellationToken) A generic Watcher to watch Kubernetes resources, and respond with a custom (async) callback method. Declaration public async Task WatchAsync(Func<WatchEvent<T>, Task> actionAsync, string namespaceParameter = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, string resourceVersionMatch = null, int? timeoutSeconds = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Func < WatchEvent <T>, Task > actionAsync The async action called as watch events are received. String namespaceParameter That target Kubernetes namespace. String fieldSelector The optional field selector String labelSelector The optional label selector String resourceVersion The start resource version. String resourceVersionMatch The optional resourceVersionMatch setting. Nullable < Int32 > timeoutSeconds Optional timeout override. CancellationToken cancellationToken Optionally specifies a cancellation token. Returns Type Description Task The tracking Task ."
  },
  "neonkube/api/Neon.Kube.WatchEvent-1.html": {
    "href": "neonkube/api/Neon.Kube.WatchEvent-1.html",
    "title": "Class WatchEvent<T> | NeonKUBE documentation",
    "keywords": "Class WatchEvent<T> A kubernetes watch event. Inheritance Object WatchEvent<T> Namespace : Neon.Kube Assembly : Neon.Kube.dll Syntax public class WatchEvent<T> Type Parameters Name Description T Specifies the Kubernetes entity type being watched. Properties Attempt The number of attempts for reconciling the resource. Declaration public int Attempt { get; set; } Property Value Type Description Int32 Type The k8s.WatchEventType Declaration public WatchEventType Type { get; set; } Property Value Type Description k8s.WatchEventType Value The watch event value. Declaration public T Value { get; } Property Value Type Description T"
  },
  "neonkube/api/Neon.Kube.Xunit.ClusterFactAttribute.html": {
    "href": "neonkube/api/Neon.Kube.Xunit.ClusterFactAttribute.html",
    "title": "Class ClusterFactAttribute | NeonKUBE documentation",
    "keywords": "Class ClusterFactAttribute Used for marking test cases that access or provision neonKUBE clusters by extending Xunit.FactAttribute and skipping these tests when they cannot or should not be executed on the current machine. This works by looking for the presence of the NEON_CLUSTER_TESTING environment variable. This attribute will run the test case when this variable exists otherwise the test case will be skipped. Inheritance Object Attribute Xunit.FactAttribute ClusterFactAttribute Namespace : Neon.Kube.Xunit Assembly : Neon.Kube.Xunit.dll Syntax public class ClusterFactAttribute : FactAttribute Constructors ClusterFactAttribute() Constructor. Declaration public ClusterFactAttribute()"
  },
  "neonkube/api/Neon.Kube.Xunit.ClusterFixture.html": {
    "href": "neonkube/api/Neon.Kube.Xunit.ClusterFixture.html",
    "title": "Class ClusterFixture | NeonKUBE documentation",
    "keywords": "Class ClusterFixture Fixture for testing against neonKUBE clusters. This can execute against an existing cluster or it can manage the lifecycle of a new cluster during test runs. note The NEON_CLUSTER_TESTING environment variable must be defined on the current machine to enable this feature. Inheritance Object TestFixture ClusterFixture Implements ITestFixture Inherited Members TestFixture.CheckDisposed() TestFixture.CheckWithinAction() TestFixture.Start(Action) TestFixture.Dispose() TestFixture.Reset() TestFixture.OnRestart() TestFixture.IsDisposed TestFixture.InAction TestFixture.IsRunning TestFixture.State Namespace : Neon.Kube.Xunit Assembly : Neon.Kube.Xunit.dll Syntax public class ClusterFixture : TestFixture, ITestFixture, IDisposable Remarks note IMPORTANT: The base Neon TestFixture implementation DOES NOT support parallel test execution. You need to explicitly disable parallel execution in all test assemblies that rely on these test fixtures by adding a C# file named AssemblyInfo.cs with: [assembly: CollectionBehavior(DisableTestParallelization = true, MaxParallelThreads = 1)] and then define your test classes like: public class MyTests : IClassFixture<ClusterFixture> { private const string clusterDefinitionYaml = @\"name: test datacenter: test purpose: test isLocked: false # $lt;-- test clusters need to be unlocked timeSources: - pool.ntp.org kubernetes: allowPodsOnControlPlane: true hosting: environment: hyperv hyperv: useInternalSwitch: true vm: namePrefix: \"test\" cores: 4 memory: 12 GiB osDisk: 64 GiB network: premiseSubnet: 100.64.0.0/24 gateway: 100.64.0.1 nodes: master: role: control-plane address: 100.64.0.2 \"; private ClusterFixture foxture; public MyTests(ClusterFixture fixture) { this.fixture = foxture; var status = fixture.StartAsync(clusterDefinitionYaml); switch (status) { case TestFixtureStatus.Disabled: return; case TestFixtureStatus.Started: // The fixture ensures that the cluster is reset when // [Start()] is called the first time for a // fixture instance. break; case TestFixtureStatus.AlreadyRunning: // Reset the cluster between test method calls. fixture.ResetCluster(); break; } } [Collection(TestCollection.NonParallel)] [CollectionDefinition(TestCollection.NonParallel, DisableParallelization = true)] [ClusterFact] public void Test() { // Implement your test here. Note that [fixture.Cluster] returns a [clusterProxy] // that can be used to manage the cluster and [fixture.K8s] returns an // [IKubernetes] client connected to the cluster with root privileges. } } This fixture can be used to run tests against an existing neonKUBE cluster as well as a new clusters deployed by the fixture. The idea here is that you'll have your unit test class inherit from Xunit.IClassFixture`1 , passing ClusterFixture as the type parameter and then implementing a test class constructor that has a ClusterFixture parameter that will receive an instance of the fixture and use that to initialize the test cluster using StartWithClusterDefinition(ClusterDefinition, ClusterFixtureOptions) or one it its overrides. StartWithClusterDefinition(ClusterDefinition, ClusterFixtureOptions) handles the deployment of the test cluster when it doesn't already exist as well as the removal of any previous cluster, depending on the parameters passed. You'll be calling this in your test class constructor. This method accepts a cluster definition in various forms and returns Disabled when cluster unit testing is disabled on the current machine, Started the first time one of these methods have been called on the fixture instance or AlreadyRunning when StartedAsync() has already been called on the fixture. Your test class typically use this value to decide whether to reset the cluster and or whether additional cluster configuration is required (e.g. deploying test applications). Alternatively, you can use the StartWithCurrentCluster(ClusterFixtureOptions) method to run tests against the current cluster. note The current cluster must be unlocked and running. It's up to you to call ResetCluster() within your test class constructor when you wish to reset the cluster state between test method executions. Alternatively, you could design your tests such that each method runs in its own namespace to improve test performance while still providing some isolation across test cases. MANAGING YOUR TEST CLUSTER You're tests will need to be able to deploy applications and otherwise to the test cluster and otherwise manage your test cluster. The K8s property returns a k8s.IKubernetes client for the cluster and the Cluster property returns a ClusterProxy that provides some higher level functionality. Most developers should probably stick with using K8s . The fixture also provides the NeonExecute(String[]) method which can be used for executing kubectl , helm , and other commands using the neon-cli . Commands will be executed against the test cluster (as the current config) and a ExecuteResponse will be returned holding the command exit code as well as the output text. CLUSTER TEST METHOD ATTRIBUTES Tests that require a neonKUBE cluster will generally be quite slow and will require additional resources on the machine where the test is executing and potentially external resources including XenServer hosts, cloud accounts, specific network configuration, etc. This means that cluster based unit tests can generally run only on specifically configured enviroments. We provide the ClusterFactAttribute and ClusterTheoryAttribute attributes to manage this. These derive from Xunit.FactAttribute and Xunit.TheoryAttribute respectively and set the base class Skip property when the NEON_CLUSTER_TESTING environment variable does not exist . Test methods that require neonKUBE clusters should be tagged with ClusterFactAttribute or ClusterTheoryAttribute instead of Xunit.FactAttribute or Xunit.TheoryAttribute . Then by default, these methods won't be executed unless the user has explicitly enabled this on the test machine by defining the NEON_CLUSTER_TESTING environment variable. In addition to tagging test methods like this, you'll need to modify your test class constructors to do nothing when the fixture's Start() methods return Disabled . You can also use IsClusterTestingEnabled determine when cluster testing is disabled. TESTING SCENARIOS ClusterFixture is designed to support some common testing scenarios, controlled by ClusterFixtureOptions . Fresh cluster The fixture will remove any existing cluster and deploy a fresh cluster for the tests. Configure this by setting RemoveClusterOnStart to true . This is the slowest option because deploying clusters can take 10-20 minutes. Reuse cluster The fixture will reuse an existing cluster if its reachable, healthy, and the the existing cluster definition matches the test cluster definition. Configure this by setting RemoveClusterOnStart to false . This is the default and fastest option when the the required conditions are met. Otherwise, the existing cluster will be removed and a new cluster will be deployed. Remove cluster Your test class can indicate that the test cluster will be removed after your test class finishes running test methods. Configure this by setting RemoveClusterOnDispose to true . This defaults to false because reusing a running cluster is the fastest way to run cluster based tests. note Clusters will continue running when the ClusterFixture is never disposed. This happens when the test runner fails or is stopped while debugging etc. The default ClusterFixtureOptions settings are configured to reuse clusters for better performance, leaving clusters running after running test cases. This is recommended for most user scenarios when you have enough resources to keep a test cluster running. CLUSTER CONFLICTS One thing you'll need to worry about is the possibility that a cluster created by one of the Start() methods may conflict with an existing production or neonDESKTOP built-in cluster. This fixture helps somewhat by persisting cluster state such as kubconfigs, logins, logs, etc. for each deployed cluster within separate directories named like ~/.neonkube/spaces/$fixture . This effectively isolates clusters deployed by the fixture from the user clusters. IMPORTANT: You'll need to ensure that your cluster name does not conflict with any existing clusters deployed to the same environment and also that the node IP addresses don't conflict with existing clusters deployed on shared infrastructure such as local machines, Hyper-V or XenServer instances. You don't need to worry about IP address conflicts for cloud environments because nodes run on private networks there. We recommend that you prefix your cluster name with something identifying the machine deploying the cluster. This could be the machine name, user or a combination of the machine and the current username, like runner0- or jeff- , or runner0-jeff- ... note neonKUBE maintainers can also use IProfileClient combined with the neon-assistant tool to reference per-user and/or per-machine profile settings including things like cluster name prefixes, reserved node IP addresses, etc. These can be referenced by cluster definitions using special macros like $<$<$<NAME>>> as described here: PreprocessReader . The goal here is prevent cluster and/or VM naming conflicts for test clusters deployed in parallel by different runners or developers on their own workstations as well as specifying environment specific settings such as host hypervisors, LAN configuration, and node IP addresses. LIMITATIONS ClusterFixture assumes that published cluster node images are invariant for a cluster version. The fixture will not automatically redeploy a cluster when a new node template is published without also incrementing the cluster version. This won't impact normal users but maintainers will need to manually remove test clusters for this situation. note In the past, we've been somewhat lazy and have node been incrementing cluster versions as we publish new node images. As of 3-30-2022, we're going to start incrementing versions properly so this should no longer be an issue. ClusterFixture attempts to detect significant differences between an already deployed cluster and a new cluster definition and redeploy the cluster in this case. Unfortunately, the detection mechanism isn't perfect at this time and sometimes clusters that should be redeployed won't be. Specifically, node labels won't be considered when detecting changes: https://github.com/nforgeio/neonKUBE/issues/1505 Constructors ClusterFixture() Constructor. Declaration public ClusterFixture() Properties Cluster Returns a ClusterProxy instance that can be used to manage the attached cluster after it has been started. Declaration public ClusterProxy Cluster { get; } Property Value Type Description ClusterProxy ClusterDefinition Returns the cluster definition for cluster deployed by this fixture via one of the Start() methods or null when the fixture was connected to the cluster via one of the ConnectAsync() methods. Declaration public ClusterDefinition ClusterDefinition { get; } Property Value Type Description ClusterDefinition K8s Returns a k8s.IKubernetes client instance with root privileges that can be used to manage the test cluster after it has been started. Declaration public IKubernetes K8s { get; } Property Value Type Description k8s.IKubernetes Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides TestFixture.Dispose(Boolean) NeonExecute(String[]) Executes a neon-cli command against the current test cluster. Declaration public ExecuteResponse NeonExecute(params string[] args) Parameters Type Name Description String [] args The command arguments. Returns Type Description ExecuteResponse An ExecuteResponse with the exit code and output text. Remarks neon-cli is a wrapper around the kubectl and helm tools. KUBECTL COMMANDS: neon-cli implements kubectl commands directly like: neon get pods neon apply -f myapp.yaml HELM COMMANDS: neon-cli implements helm commands like neon helm... : neon helm install -f values.yaml myapp . neon helm uninstall myapp THROW EXCEPTION ON ERRORS Rather than explicitly checking the ExitCode and throwing exceptions yourself, you can call EnsureSuccess() which throws an ExecuteException for non-zero exit codes or you can use NeonExecuteWithCheck(String[]) which does this for you. NeonExecuteWithCheck(String[]) Executes a neon-cli command against the current test cluster, throwing an ExecuteException for non-zero exit codes. Declaration public ExecuteResponse NeonExecuteWithCheck(params string[] args) Parameters Type Name Description String [] args The command arguments. Returns Type Description ExecuteResponse An ExecuteResponse with the exit code and output text. Remarks neon-cli is a wrapper around the kubectl and helm tools. KUBECTL COMMANDS: neon-cli implements kubectl commands directly like: neon get pods neon apply -f myapp.yaml HELM COMMANDS: neon-cli implements helm commands like neon helm... : neon helm install -f values.yaml myapp . neon helm uninstall myapp ResetCluster() Resets the cluster. Declaration public void ResetCluster() Start(FileInfo, ClusterFixtureOptions) Deploys a new cluster as specified by a cluster definition YAML file. note This method removes any existing neonKUBE cluster before deploying a fresh one. Declaration public TestFixtureStatus Start(FileInfo clusterDefinitionFile, ClusterFixtureOptions options = null) Parameters Type Name Description FileInfo clusterDefinitionFile FileInfo for the cluster definition YAML file. ClusterFixtureOptions options Optionally specifies the options that ClusterFixture will use to manage the test cluster. Returns Type Description TestFixtureStatus The TestFixtureStatus : Disabled Returned when cluster unit testing is disabled due to the NEON_CLUSTER_TESTING environment variable not being present on the current machine which means that IsClusterTestingEnabled returns false . Started Returned when one of the Start() methods is called for the first time for the fixture instance, indicating that an existing cluster has been connected or a new cluster has been deployed. AlreadyRunning Returned when one of the Start() methods has already been called by your test class instance. Remarks IMPORTANT: Only one ClusterFixture can be run at a time on any one computer. This is due to the fact that cluster state like the kubeconfig, neonKUBE logins, logs and other files will be written to ~/.neonkube/spaces/$fixture/* so multiple fixture instances will be confused when trying to manage these same files. This means that not only will running ClusterFixture based tests in parallel within the same instance of Visual Studio fail, but but running these tests in different Visual Studio instances will also fail. StartCluster(String, ClusterFixtureOptions) Deploys a new cluster as specified by the cluster definition YAML definition. note This method removes any existing neonKUBE cluster before deploying a fresh one. Declaration public TestFixtureStatus StartCluster(string clusterDefinitionYaml, ClusterFixtureOptions options = null) Parameters Type Name Description String clusterDefinitionYaml The cluster definition YAML. ClusterFixtureOptions options Optionally specifies the options that ClusterFixture will use to manage the test cluster. Returns Type Description TestFixtureStatus The TestFixtureStatus : Disabled Returned when cluster unit testing is disabled due to the NEON_CLUSTER_TESTING environment variable not being present on the current machine which means that IsClusterTestingEnabled returns false . Started Returned when one of the Start() methods is called for the first time for the fixture instance, indicating that an existing cluster has been connected or a new cluster has been deployed. AlreadyRunning Returned when one of the Start() methods has already been called by your test class instance. Remarks IMPORTANT: Only one ClusterFixture can be run at a time on any one computer. This is due to the fact that cluster state like the kubeconfig, neonKUBE logins, logs and other files will be written to ~/.neonkube/spaces/$fixture/* so multiple fixture instances will be confused when trying to manage these same files. This means that not only will running ClusterFixture based tests in parallel within the same instance of Visual Studio fail, but but running these tests in different Visual Studio instances will also fail. StartWithClusterDefinition(ClusterDefinition, ClusterFixtureOptions) Deploys a new test cluster as specified by the cluster definition passed or connects to a cluster previously deployed by this method when the cluster definition of the existing cluster and the definition passed here are the same. Declaration public TestFixtureStatus StartWithClusterDefinition(ClusterDefinition clusterDefinition, ClusterFixtureOptions options = null) Parameters Type Name Description ClusterDefinition clusterDefinition The cluster definition model. ClusterFixtureOptions options Optionally specifies the options that ClusterFixture will use to manage the test cluster. Returns Type Description TestFixtureStatus The TestFixtureStatus : Disabled Returned when cluster unit testing is disabled due to the NEON_CLUSTER_TESTING environment variable not being present on the current machine which means that IsClusterTestingEnabled returns false . Started Returned when one of the Start() methods is called for the first time for the fixture instance, indicating that an existing cluster has been connected or a new cluster has been deployed. AlreadyRunning Returned when one of the Start() methods has already been called by your test class instance. Remarks IMPORTANT: Only one ClusterFixture can be run at a time on any one computer. This is due to the fact that cluster state like the kubeconfig, neonKUBE logins, logs and other files will be written to ~/.neonkube/spaces/$fixture/* so multiple fixture instances will be confused when trying to manage these same files. This means that not only will running ClusterFixture based tests in parallel within the same instance of Visual Studio fail, but running these tests in different Visual Studio instances will also fail. Exceptions Type Condition NeonKubeException Thrown when the test cluster could not be deployed. StartWithCurrentCluster(ClusterFixtureOptions) Initializes the test fixture to run tests against the current cluster. This is useful when developing unit tests against a developer managed cluster. Declaration public TestFixtureStatus StartWithCurrentCluster(ClusterFixtureOptions options = null) Parameters Type Name Description ClusterFixtureOptions options Optionally specifies the options that ClusterFixture will use to manage the test cluster. Returns Type Description TestFixtureStatus This always returns AlreadyRunning . Exceptions Type Condition NeonKubeException Thrown when there isn't a current cluster or when it's locked. Implements ITestFixture"
  },
  "neonkube/api/Neon.Kube.Xunit.ClusterFixtureOptions.html": {
    "href": "neonkube/api/Neon.Kube.Xunit.ClusterFixtureOptions.html",
    "title": "Class ClusterFixtureOptions | NeonKUBE documentation",
    "keywords": "Class ClusterFixtureOptions Options for the ClusterFixture . Inheritance Object ClusterFixtureOptions Namespace : Neon.Kube.Xunit Assembly : Neon.Kube.Xunit.dll Syntax public class ClusterFixtureOptions Constructors ClusterFixtureOptions() Constructor. This initializes the properties to reasonable defaults. Declaration public ClusterFixtureOptions() Properties CaptureDeploymentLogs Optionally write the cluster deployment logs to TestOutputHelper . This defaults to true . Declaration public bool CaptureDeploymentLogs { get; set; } Property Value Type Description Boolean CloudMarketplace For cloud environments, this specifies whether the cluster should be provisioned using a VM image from the public cloud marketplace when true or from the private NEONFORGE image gallery for testing when false . This is ignored for on-premise environments. This defaults to true . note You must be a neonKUBE maintainer to use private node images. Declaration public bool CloudMarketplace { get; set; } Property Value Type Description Boolean ImageUriOrPath Optionally specifies the URI or file path to the node image to be used when deploying the cluster. This is used to override the default published node image. This default to null . Declaration public string ImageUriOrPath { get; set; } Property Value Type Description String MaxParallel Optionally specifies the maximum number of operations to be performed in parallel. This defaults to 500 which is effectively infinite. Declaration public int MaxParallel { get; set; } Property Value Type Description Int32 NeonCloudHeadendUri Optionally overrides the default neonCLOUD headend URI. This defaults to null . Declaration public string NeonCloudHeadendUri { get; set; } Property Value Type Description String RemoveClusterOnDispose Controls whether ClusterFixture will remove the cluster after unit test have finished executing or whether it will delete it. This defaults to false . note This property applies only to clusters deployed by ClusterFixture . Existing clusters will never be removed. Declaration public bool RemoveClusterOnDispose { get; set; } Property Value Type Description Boolean RemoveClusterOnStart Forces the removal of any existing cluster when the associated ClusterFixture is started. This defaults to false . note This property applies only to clusters deployed by ClusterFixture . Existing clusters will never be removed. Declaration public bool RemoveClusterOnStart { get; set; } Property Value Type Description Boolean Remarks For hypervisor hosted clusters, setting this to true turn off and remove all VMs that have the same name prefix as is specified by the test cluster definition and for cloud hosted clusters, the specified resource group will be removed. This ensures that even partially deployed clusters can be removed. s note An existing cluster that cannot be managed via an existing kubecontext and cluster login will always be removed. For clusters that can be managed, ClusterFixture will compare the cluster definition of the existing cluster with the definition for the specified test cluster and when these are different, ClusterFixture will remove the existing cluster when RemoveClusterOnStart is true or throw a NeonKubeException when RemoveClusterOnStart is false . ResetOptions Specifies the options that ResetCluster() will use when resetting the target cluster. This defaults to the stock ClusterResetOptions which performs a full cluster reset. Declaration public ClusterResetOptions ResetOptions { get; set; } Property Value Type Description ClusterResetOptions TestOutputHelper Optionally specifies a Xunit.Abstractions.ITestOutputHelper where ClusterFixture can write diagnostics including the cluster deployment logs. Declaration public ITestOutputHelper TestOutputHelper { get; set; } Property Value Type Description Xunit.Abstractions.ITestOutputHelper Unredacted Optionally disables the redaction of potentially sensitive information from cluster deployment logs. This defaults to false . Declaration public bool Unredacted { get; set; } Property Value Type Description Boolean Methods Clone() Returns a copy of the instance. Declaration public ClusterFixtureOptions Clone() Returns Type Description ClusterFixtureOptions The cloned instance."
  },
  "neonkube/api/Neon.Kube.Xunit.ClusterTheoryAttribute.html": {
    "href": "neonkube/api/Neon.Kube.Xunit.ClusterTheoryAttribute.html",
    "title": "Class ClusterTheoryAttribute | NeonKUBE documentation",
    "keywords": "Class ClusterTheoryAttribute Used for marking test throry cases that access or provision neonKUBE clusters by extending Xunit.TheoryAttribute and skipping these tests when they cannot or should not be executed on the current machine. This works by looking for the presence of the NEON_CLUSTER_TESTING environment variable. This attribute will run the test case when this variable exists otherwise the test case will be skipped. Inheritance Object Attribute Xunit.FactAttribute Xunit.TheoryAttribute ClusterTheoryAttribute Namespace : Neon.Kube.Xunit Assembly : Neon.Kube.Xunit.dll Syntax public class ClusterTheoryAttribute : TheoryAttribute Constructors ClusterTheoryAttribute() Constructor. Declaration public ClusterTheoryAttribute()"
  },
  "neonkube/api/Neon.Kube.Xunit.html": {
    "href": "neonkube/api/Neon.Kube.Xunit.html",
    "title": "Namespace Neon.Kube.Xunit | NeonKUBE documentation",
    "keywords": "Namespace Neon.Kube.Xunit Classes ClusterFactAttribute Used for marking test cases that access or provision neonKUBE clusters by extending Xunit.FactAttribute and skipping these tests when they cannot or should not be executed on the current machine. This works by looking for the presence of the NEON_CLUSTER_TESTING environment variable. This attribute will run the test case when this variable exists otherwise the test case will be skipped. ClusterFixture Fixture for testing against neonKUBE clusters. This can execute against an existing cluster or it can manage the lifecycle of a new cluster during test runs. note The NEON_CLUSTER_TESTING environment variable must be defined on the current machine to enable this feature. ClusterFixtureOptions Options for the ClusterFixture . ClusterTheoryAttribute Used for marking test throry cases that access or provision neonKUBE clusters by extending Xunit.TheoryAttribute and skipping these tests when they cannot or should not be executed on the current machine. This works by looking for the presence of the NEON_CLUSTER_TESTING environment variable. This attribute will run the test case when this variable exists otherwise the test case will be skipped. HyperVClusters INTERNAL USE ONLY: Hyper-V cluster definitions used by maintainers for unit test clusters deployed by ClusterFixture . KubeTestHelper Misc local unit test helpers. KubeTestManager Creates a temporary folder and puts KubeHelper into test mode to support neon-cli unit testing. Dispose() reverts the test mode and deletes the temporary folder. XenServerClusters INTERNAL USE ONLY: XenServer cluster definitions used by maintainers for unit test clusters deployed by ClusterFixture ."
  },
  "neonkube/api/Neon.Kube.Xunit.HyperVClusters.html": {
    "href": "neonkube/api/Neon.Kube.Xunit.HyperVClusters.html",
    "title": "Class HyperVClusters | NeonKUBE documentation",
    "keywords": "Class HyperVClusters INTERNAL USE ONLY: Hyper-V cluster definitions used by maintainers for unit test clusters deployed by ClusterFixture . Inheritance Object HyperVClusters Namespace : Neon.Kube.Xunit Assembly : Neon.Kube.Xunit.dll Syntax public static class HyperVClusters Remarks This class acts as repostory for cluster definitions that can be deployed by unit tests via ClusterFixture . These currently work only for project maintainers who have installed the neon-assistant tool and have configured their profile there as well as in 1Password. The definitions are organized by hosting environment. COMMON PROFILE REQUIREMENTS These profile values must be configured in neon-assistant for all test clusters. lan.gateway (profile) Specifies the default gateway IPv4 address for the LAN. lan.subnet (profile) Specifies the CIDR for the LAN. lan.dns0 (profile) Specifies the IPv4 address for the primary local DNS server. lan.dns1 (profile) Specifies the IPv4 address for the secondary local DNS server. datacenter (profile) Identifies the datacenter where the clusters will be hosted. Hyper-V These clusters are hosted on the local workstation using Hyper-V. Your neon-assistant profile will need these settings: hyperv.diskfolder (profile) Specifies the workstation path where the test virtual machine VHDX files will be created. Each cluster definition also uses the neon-assistant profile to obtain the IP addresses to be assigned to the cluster nodes. HYPERV-TINY The following profile definitions assigning IPv4 addresses to nodes are required for the Tiny cluster. hyperv.tiny0.ip IPv4 address to be assigned to the single cluster node. HYPERV-SMALL The following profile definitions assigning IPv4 addresses to nodes are required for the Small cluster. hyperv.small0.ip IPv4 address to be assigned to the cluster control-plane node. hyperv.small1.ip IPv4 address to be assigned to the first cluster worker node. hyperv.small2.ip IPv4 address to be assigned to the second cluster worker node. hyperv.small3.ip IPv4 address to be assigned to the third cluster worker node. HYPERV-LARGE The following profile definitions assigning IPv4 addresses to nodes are required for the Large cluster. hyperv.large0.ip IPv4 address to be assigned to the first cluster control-plane node. hyperv.large1.ip IPv4 address to be assigned to the second cluster control-plane node. hyperv.large2.ip IPv4 address to be assigned to the third cluster control-plane node. hyperv.large3.ip IPv4 address to be assigned to the first cluster worker node. hyperv.large4.ip IPv4 address to be assigned to the second cluster worker node. hyperv.large5.ip IPv4 address to be assigned to the third cluster worker node. Fields Large HYper-V: 3 control-plane and 3 worker cluster definition. Declaration public const string Large = \"\\r\\nname: hyperv-large\\r\\ndatacenter: $<profile:datacenter>\\r\\npurpose: test\\r\\nisLocked: false\\r\\ntimeSources:\\r\\n- pool.ntp.org\\r\\nkubernetes:\\r\\n allowPodsOnControlPlane: false\\r\\nhosting:\\r\\n environment: hyperv\\r\\n vm:\\r\\n namePrefix: test-large\\r\\n cores: 4\\r\\n memory: 16 GiB\\r\\n osDisk: 64 GiB\\r\\n openEbsDisk: 32 GiB\\r\\n diskLocation: $<profile:hyperv.diskfolder>\\r\\nnetwork:\\r\\n premiseSubnet: $<profile:lan.subnet>\\r\\n gateway: $<profile:lan.gateway>\\r\\n nameservers:\\r\\n - $<profile:lan.dns0>\\r\\n - $<profile:lan.dns1>\\r\\nnodes:\\r\\n control-0:\\r\\n role: control-plane\\r\\n address: $<profile:hyperv.large0.ip>\\r\\n memory: 4 GiB\\r\\n control-1:\\r\\n role: control-plane\\r\\n address: $<profile:hyperv.large1.ip>\\r\\n memory: 4 GiB\\r\\n control-2:\\r\\n role: control-plane\\r\\n address: $<profile:hyperv.large2.ip>\\r\\n memory: 4 GiB\\r\\n worker-0:\\r\\n role: worker\\r\\n address: $<profile:hyperv.large3.ip>\\r\\n worker-1:\\r\\n role: worker\\r\\n address: $<profile:hyperv.large4.ip>\\r\\n worker-2:\\r\\n role: worker\\r\\n address: $<profile:hyperv.large5.ip>\\r\\n\" Field Value Type Description String Small HYper-V: 1 control-plane and 3 worker cluster definition. Declaration public const string Small = \"\\r\\nname: hyperv-small\\r\\ndatacenter: $<profile:datacenter>\\r\\npurpose: test\\r\\nisLocked: false\\r\\ntimeSources:\\r\\n- pool.ntp.org\\r\\nkubernetes:\\r\\n allowPodsOnControlPlane: false\\r\\nhosting:\\r\\n environment: hyperv\\r\\n vm:\\r\\n namePrefix: test-small\\r\\n cores: 4\\r\\n memory: 16 GiB\\r\\n osDisk: 64 GiB\\r\\n openEbsDisk: 32 GiB\\r\\n diskLocation: $<profile:hyperv.diskfolder>\\r\\nnetwork:\\r\\n premiseSubnet: $<profile:lan.subnet>\\r\\n gateway: $<profile:lan.gateway>\\r\\n nameservers:\\r\\n - $<profile:lan.dns0>\\r\\n - $<profile:lan.dns1>\\r\\nnodes:\\r\\n control-0:\\r\\n role: control-plane\\r\\n address: $<profile:hyperv.small0.ip>\\r\\n worker-0:\\r\\n role: worker\\r\\n address: $<profile:hyperv.small1.ip>\\r\\n worker-1:\\r\\n role: worker\\r\\n address: $<profile:hyperv.small2.ip>\\r\\n worker-2:\\r\\n role: worker\\r\\n address: $<profile:hyperv.small3.ip>\\r\\n\" Field Value Type Description String Tiny HYper-V: single node cluster definition. Declaration public const string Tiny = \"\\r\\nname: hyperv-tiny\\r\\ndatacenter: $<profile:datacenter>\\r\\npurpose: test\\r\\nisLocked: false\\r\\ntimeSources:\\r\\n- pool.ntp.org\\r\\nkubernetes:\\r\\n allowPodsOnControlPlane: true\\r\\nhosting:\\r\\n environment: hyperv\\r\\n vm:\\r\\n namePrefix: test-tiny\\r\\n cores: 4\\r\\n memory: 16 GiB\\r\\n osDisk: 64 GiB\\r\\n openEbsDisk: 32 GiB\\r\\n diskLocation: $<profile:hyperv.diskfolder>\\r\\nnetwork:\\r\\n premiseSubnet: $<profile:lan.subnet>\\r\\n gateway: $<profile:lan.gateway>\\r\\n nameservers:\\r\\n - $<profile:lan.dns0>\\r\\n - $<profile:lan.dns1>\\r\\nnodes:\\r\\n control-0:\\r\\n role: control-plane\\r\\n address: $<profile:hyperv.tiny0.ip>\\r\\n\" Field Value Type Description String"
  },
  "neonkube/api/Neon.Kube.Xunit.KubeTestHelper.html": {
    "href": "neonkube/api/Neon.Kube.Xunit.KubeTestHelper.html",
    "title": "Class KubeTestHelper | NeonKUBE documentation",
    "keywords": "Class KubeTestHelper Misc local unit test helpers. Inheritance Object KubeTestHelper Namespace : Neon.Kube.Xunit Assembly : Neon.Kube.Xunit.dll Syntax public static class KubeTestHelper Fields TestGID ghcr.io/neonrelease/test image test group ID. Declaration public const string TestGID = \"6666\" Field Value Type Description String TestUID ghcr.io/neonrelease/test image test user ID. Declaration public const string TestUID = \"5555\" Field Value Type Description String TestUsername ghcr.io/neonrelease/test image test user name. Declaration public const string TestUsername = \"test\" Field Value Type Description String Properties ClusterDefinitions Returns a dictionary mapping test cluster definitions keyed like hyperv/tiny or xenserver/large to the actual cluster definition text. This is used so that maintainers can configure their neon-assistant profile to specify which cluster definition they wish to use for running unit tests in their environment. Declaration public static IReadOnlyDictionary<string, string> ClusterDefinitions { get; } Property Value Type Description IReadOnlyDictionary < String , String > Methods CreateTestFolder(Tuple<String, String>[]) Creates and optionally populates a temporary test folder with test files. Declaration public static TempFolder CreateTestFolder(params Tuple<string, string>[] files) Parameters Type Name Description Tuple < String , String >[] files The files to be created. The first item in each tuple entry will be the local file name and the second the contents of the file. Returns Type Description TempFolder The TempFolder(String, String) . Remarks note Ensure that the TempFolder(String, String) returned is disposed so it and any files within will be deleted. KubeTestManager() Starts and returns a KubeTestManager() instance. This will put KubeHelper into test mode. You must dispose the instance before the tests complete to revert back to normal mode. Declaration public static KubeTestManager KubeTestManager() Returns Type Description KubeTestManager The KubeTestManager() . TempFolder(String, String) Creates and populates a temporary test folder with a test file. Declaration public static TempFolder TempFolder(string filename, string data) Parameters Type Name Description String filename The file data. String data The file name Returns Type Description TempFolder The TempFolder(String, String) . Remarks note Ensure that the TempFolder(String, String) returned is disposed so it and any files within will be deleted."
  },
  "neonkube/api/Neon.Kube.Xunit.KubeTestManager.html": {
    "href": "neonkube/api/Neon.Kube.Xunit.KubeTestManager.html",
    "title": "Class KubeTestManager | NeonKUBE documentation",
    "keywords": "Class KubeTestManager Creates a temporary folder and puts KubeHelper into test mode to support neon-cli unit testing. Dispose() reverts the test mode and deletes the temporary folder. Inheritance Object KubeTestManager Namespace : Neon.Kube.Xunit Assembly : Neon.Kube.Xunit.dll Syntax public sealed class KubeTestManager : IDisposable Properties Current Returns the current test manager. Declaration public static KubeTestManager Current { get; } Property Value Type Description KubeTestManager TestFolder Returns the path to the temporary test folder. Declaration public string TestFolder { get; } Property Value Type Description String Methods Dispose() Declaration public void Dispose()"
  },
  "neonkube/api/Neon.Kube.Xunit.XenServerClusters.html": {
    "href": "neonkube/api/Neon.Kube.Xunit.XenServerClusters.html",
    "title": "Class XenServerClusters | NeonKUBE documentation",
    "keywords": "Class XenServerClusters INTERNAL USE ONLY: XenServer cluster definitions used by maintainers for unit test clusters deployed by ClusterFixture . Inheritance Object XenServerClusters Namespace : Neon.Kube.Xunit Assembly : Neon.Kube.Xunit.dll Syntax public static class XenServerClusters Remarks This class acts as repostory for cluster definitions that can be deployed by unit tests via ClusterFixture . These currently work only for project maintainers who have installed the neon-assistant tool and have configured their profile there as well as in 1Password. The definitions are organized by hosting environment. COMMON PROFILE REQUIREMENTS These profile values must be configured in neon-assistant for all test clusters. lan.gateway (profile) Specifies the default gateway IPv4 address for the LAN. lan.subnet (profile) Specifies the CIDR for the LAN. lan.dns0 (profile) Specifies the IPv4 address for the primary local DNS server. lan.dns1 (profile) Specifies the IPv4 address for the secondary local DNS server. datacenter (profile) Identifies the datacenter where the clusters will be hosted. XENSERVER/XCP-ng These clusters are hosted on a single XenServer specified by the neon-assistant profile along with other required common settings: xen-testhost (profile) Specifies the IPv4 address for the XenServer/XCP-ng server where the cluster nodes will be provisioned. Each machine that runs tests will need to specify a unique host machine to avoid conflicts. XENSERVER_LOGIN (1Password) The 1Password password credentials for the XenServer host machine. These credentials are currently shared across all XenServer deployments, but this may change in the future. Each cluster definition also uses the neon-assistant profile to obtain the IP addresses to be assigned to the cluster nodes. XEN-TINY The following profile definitions assigning IPv4 addresses to nodes are required for the Tiny cluster. xenserver.tiny0.ip IPv4 address to be assigned to the single cluster node. XEN-SMALL The following profile definitions assigning IPv4 addresses to nodes are required for the Small cluster. xenserver.small0.ip IPv4 address to be assigned to the cluster control-plane node. xenserver.small1.ip IPv4 address to be assigned to the first cluster worker node. xenserver.small2.ip IPv4 address to be assigned to the second cluster worker node. xenserver.small3.ip IPv4 address to be assigned to the third cluster worker node. XEN-LARGE The following profile definitions assigning IPv4 addresses to nodes are required for the Large cluster. xenserver.large0.ip IPv4 address to be assigned to the first cluster control-plane node. xenserver.large1.ip IPv4 address to be assigned to the second cluster control-plane node. xenserver.large2.ip IPv4 address to be assigned to the third cluster control-plane node. xenserver.large3.ip IPv4 address to be assigned to the first cluster worker node. xenserver.large4.ip IPv4 address to be assigned to the second cluster worker node. xenserver.large5.ip IPv4 address to be assigned to the third cluster worker node. Fields Large XenServer: 3 control-plane and 3 worker cluster definition. Declaration public const string Large = \"\\r\\nname: xenserver-large\\r\\ndatacenter: $<profile:datacenter>\\r\\npurpose: test\\r\\nisLocked: false\\r\\ntimeSources:\\r\\n- pool.ntp.org\\r\\nkubernetes:\\r\\n allowPodsOnControlPlane: false\\r\\nhosting:\\r\\n environment: xenserver\\r\\n vm:\\r\\n hostUsername: $<secret:XENSERVER_LOGIN[username]>\\r\\n hostPassword: $<secret:XENSERVER_LOGIN[password]>\\r\\n namePrefix: test-large\\r\\n cores: 4\\r\\n memory: 16 GiB\\r\\n osDisk: 64 GiB\\r\\n openEbsDisk: 32 GiB\\r\\n hosts:\\r\\n - name: XEN-TEST\\r\\n address: $<profile:xen-test.host>\\r\\n xenServer:\\r\\n snapshot: true\\r\\nnetwork:\\r\\n premiseSubnet: $<profile:lan.subnet>\\r\\n gateway: $<profile:lan.gateway>\\r\\n nameservers:\\r\\n - $<profile:lan.dns0>\\r\\n - $<profile:lan.dns1>\\r\\nnodes:\\r\\n control-0:\\r\\n role: control-plane\\r\\n address: $<profile:xenserver.large0.ip>\\r\\n memory: 4 GiB\\r\\n vm:\\r\\n host: XEN-TEST\\r\\n control-1:\\r\\n role: control-plane\\r\\n address: $<profile:xenserver.large1.ip>\\r\\n memory: 4 GiB\\r\\n vm:\\r\\n host: XEN-TEST\\r\\n control-2:\\r\\n role: control-plane\\r\\n address: $<profile:xenserver.large2.ip>\\r\\n memory: 4 GiB\\r\\n vm:\\r\\n host: XEN-TEST\\r\\n worker-0:\\r\\n role: worker\\r\\n address: $<profile:xenserver.large3.ip>\\r\\n vm:\\r\\n host: XEN-TEST\\r\\n worker-1:\\r\\n role: worker\\r\\n address: $<profile:xenserver.large4.ip>\\r\\n vm:\\r\\n host: XEN-TEST\\r\\n worker-2:\\r\\n role: worker\\r\\n address: $<profile:xenserver.large5.ip>\\r\\n vm:\\r\\n host: XEN-TEST\\r\\n\" Field Value Type Description String Small XenServer: 1 control-plane and 3 worker cluster definition. Declaration public const string Small = \"\\r\\nname: xenserver-small\\r\\ndatacenter: $<profile:datacenter>\\r\\npurpose: test\\r\\nisLocked: false\\r\\ntimeSources:\\r\\n- pool.ntp.org\\r\\nkubernetes:\\r\\n allowPodsOnControlPlane: false\\r\\nhosting:\\r\\n environment: xenserver\\r\\n vm:\\r\\n hostUsername: $<secret:XENSERVER_LOGIN[username]>\\r\\n hostPassword: $<secret:XENSERVER_LOGIN[password]>\\r\\n namePrefix: test-small\\r\\n cores: 4\\r\\n memory: 16 GiB\\r\\n osDisk: 64 GiB\\r\\n openEbsDisk: 32 GiB\\r\\n hosts:\\r\\n - name: XEN-TEST\\r\\n address: $<profile:xen-test.host>\\r\\n xenServer:\\r\\n snapshot: true\\r\\nnetwork:\\r\\n premiseSubnet: $<profile:lan.subnet>\\r\\n gateway: $<profile:lan.gateway>\\r\\n nameservers:\\r\\n - $<profile:lan.dns0>\\r\\n - $<profile:lan.dns1>\\r\\nnodes:\\r\\n control-0:\\r\\n role: control-plane\\r\\n address: $<profile:xenserver.small0.ip>\\r\\n vm:\\r\\n host: XEN-TEST\\r\\n worker-0:\\r\\n role: worker\\r\\n address: $<profile:xenserver.small1.ip>\\r\\n vm:\\r\\n host: XEN-TEST\\r\\n worker-1:\\r\\n role: worker\\r\\n address: $<profile:xenserver.small2.ip>\\r\\n vm:\\r\\n host: XEN-TEST\\r\\n worker-2:\\r\\n role: worker\\r\\n address: $<profile:xenserver.small3.ip>\\r\\n vm:\\r\\n host: XEN-TEST\\r\\n\" Field Value Type Description String Tiny XenServer: single node cluster definition. Declaration public const string Tiny = \"\\r\\nname: xenserver-tiny\\r\\ndatacenter: $<profile:datacenter>\\r\\npurpose: test\\r\\nisLocked: false\\r\\ntimeSources:\\r\\n- pool.ntp.org\\r\\nkubernetes:\\r\\n allowPodsOnControlPlane: true\\r\\nhosting:\\r\\n environment: xenserver\\r\\n vm:\\r\\n hostUsername: $<secret:XENSERVER_LOGIN[username]>\\r\\n hostPassword: $<secret:XENSERVER_LOGIN[password]>\\r\\n namePrefix: test-tiny\\r\\n cores: 4\\r\\n memory: 16 GiB\\r\\n osDisk: 64 GiB\\r\\n openEbsDisk: 32 GiB\\r\\n hosts:\\r\\n - name: XEN-TEST\\r\\n address: $<profile:xen-test.host>\\r\\n xenServer:\\r\\n snapshot: true\\r\\nnetwork:\\r\\n premiseSubnet: $<profile:lan.subnet>\\r\\n gateway: $<profile:lan.gateway>\\r\\n nameservers:\\r\\n - $<profile:lan.dns0>\\r\\n - $<profile:lan.dns1>\\r\\nnodes:\\r\\n control-0:\\r\\n role: control-plane\\r\\n address: $<profile:xenserver.tiny0.ip>\\r\\n vm:\\r\\n host: XEN-TEST\\r\\n\" Field Value Type Description String"
  },
  "neonsdk/api/Neon.Blazor.BodyOutlet.html": {
    "href": "neonsdk/api/Neon.Blazor.BodyOutlet.html",
    "title": "Class BodyOutlet | NeonSDK documentation",
    "keywords": "Class BodyOutlet Inheritance Object BodyOutlet Namespace : Neon.Blazor Assembly : Neon.Blazor.dll Syntax public class BodyOutlet : IDisposable Constructors BodyOutlet(IJSRuntime, IHttpContextAccessor) Declaration public BodyOutlet(IJSRuntime js, IHttpContextAccessor httpContextAccessor) Parameters Type Name Description IJSRuntime js IHttpContextAccessor httpContextAccessor Methods AddPropertiesAsync(String) Declaration public async Task AddPropertiesAsync(string properties) Parameters Type Name Description String properties Returns Type Description Task AddPropertiesAsync(String[]) Declaration public async Task AddPropertiesAsync(string[] properties) Parameters Type Name Description String [] properties Returns Type Description Task AddPropertyAsync(String) Declaration public async Task AddPropertyAsync(string property) Parameters Type Name Description String property Returns Type Description Task Dispose() Declaration public void Dispose() GetProperties() Declaration public HashSet<string> GetProperties() Returns Type Description HashSet < String > RemovePropertiesAsync(String) Declaration public async Task RemovePropertiesAsync(string properties) Parameters Type Name Description String properties Returns Type Description Task RemovePropertiesAsync(String[]) Declaration public async Task RemovePropertiesAsync(string[] properties) Parameters Type Name Description String [] properties Returns Type Description Task RemovePropertyAsync(String) Declaration public async Task RemovePropertyAsync(string property) Parameters Type Name Description String property Returns Type Description Task"
  },
  "neonsdk/api/Neon.Blazor.html": {
    "href": "neonsdk/api/Neon.Blazor.html",
    "title": "Namespace Neon.Blazor | NeonSDK documentation",
    "keywords": "Namespace Neon.Blazor Classes BodyOutlet HtmlElement MobileDetector NeonBlazorExtensions SwipeHandler Enums SwipeDirection Enumerates swipe directions."
  },
  "neonsdk/api/Neon.Blazor.HtmlElement.html": {
    "href": "neonsdk/api/Neon.Blazor.HtmlElement.html",
    "title": "Class HtmlElement | NeonSDK documentation",
    "keywords": "Class HtmlElement Inheritance Object ComponentBase HtmlElement Namespace : Neon.Blazor Assembly : Neon.Blazor.dll Syntax public class HtmlElement : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Properties Attributes Additional attributes to be applied to the element. Declaration [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> Attributes { get; set; } Property Value Type Description IReadOnlyDictionary < String , Object > ChildContent The child content. Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description RenderFragment Id The tag ID. Declaration [Parameter] public string Id { get; set; } Property Value Type Description String PreventDefaultOn Events to prevent default behaviour. Declaration [Parameter] public List<string> PreventDefaultOn { get; set; } Property Value Type Description List < String > StopPropagationOn Propagation events to prevent default behaviour. Declaration [Parameter] public List<string> StopPropagationOn { get; set; } Property Value Type Description List < String > TagName The tag name to use for this element. Declaration [Parameter] public string TagName { get; set; } Property Value Type Description String Type The element type. Declaration [Parameter] public string Type { get; set; } Property Value Type Description String Methods AsElementReference() Get the Element reference. Declaration public ElementReference AsElementReference() Returns Type Description ElementReference BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description RenderTreeBuilder builder Overrides ComponentBase.BuildRenderTree(RenderTreeBuilder) FocusAsync() Focuses the current element. Declaration public ValueTask FocusAsync() Returns Type Description ValueTask GenerateId() Generates an ID. Declaration public static string GenerateId() Returns Type Description String OnSetElementReference(ElementReference) Set the element reference. Declaration public void OnSetElementReference(ElementReference reference) Parameters Type Name Description ElementReference reference Operators Implicit(HtmlElement to ElementReference) Element reference operator. Declaration public static implicit operator ElementReference(HtmlElement element) Parameters Type Name Description HtmlElement element Returns Type Description ElementReference"
  },
  "neonsdk/api/Neon.Blazor.MobileDetector.html": {
    "href": "neonsdk/api/Neon.Blazor.MobileDetector.html",
    "title": "Class MobileDetector | NeonSDK documentation",
    "keywords": "Class MobileDetector Inheritance Object MobileDetector Namespace : Neon.Blazor Assembly : Neon.Blazor.dll Syntax public class MobileDetector : IDisposable Constructors MobileDetector(IJSRuntime, IHttpContextAccessor) Declaration public MobileDetector(IJSRuntime js, IHttpContextAccessor httpContextAccessor) Parameters Type Name Description IJSRuntime js IHttpContextAccessor httpContextAccessor Methods Dispose() Declaration public void Dispose() IsMobileAsync() Declaration public async Task<bool?> IsMobileAsync() Returns Type Description Task < Nullable < Boolean >>"
  },
  "neonsdk/api/Neon.Blazor.NeonBlazorExtensions.html": {
    "href": "neonsdk/api/Neon.Blazor.NeonBlazorExtensions.html",
    "title": "Class NeonBlazorExtensions | NeonSDK documentation",
    "keywords": "Class NeonBlazorExtensions Inheritance Object NeonBlazorExtensions Namespace : Neon.Blazor Assembly : Neon.Blazor.dll Syntax public static class NeonBlazorExtensions Methods AddNeonBlazor(IServiceCollection) Declaration public static IServiceCollection AddNeonBlazor(this IServiceCollection builder) Parameters Type Name Description IServiceCollection builder Returns Type Description IServiceCollection"
  },
  "neonsdk/api/Neon.Blazor.SwipeDirection.html": {
    "href": "neonsdk/api/Neon.Blazor.SwipeDirection.html",
    "title": "Enum SwipeDirection | NeonSDK documentation",
    "keywords": "Enum SwipeDirection Enumerates swipe directions. Namespace : Neon.Blazor Assembly : Neon.Blazor.dll Syntax public enum SwipeDirection Fields Name Description Down Left None Right Up Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Blazor.SwipeHandler.html": {
    "href": "neonsdk/api/Neon.Blazor.SwipeHandler.html",
    "title": "Class SwipeHandler | NeonSDK documentation",
    "keywords": "Class SwipeHandler Inheritance Object ComponentBase SwipeHandler Namespace : Neon.Blazor Assembly : Neon.Blazor.dll Syntax public class SwipeHandler : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IDisposable Properties AdditionalAttributes Additional HTML attributes to be applied to the RenderFragment . Declaration [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; } Property Value Type Description IReadOnlyDictionary < String , Object > ChildContent The styled Dialog panel. Declaration [Parameter] public RenderFragment<SwipeHandler> ChildContent { get; set; } Property Value Type Description RenderFragment < SwipeHandler > Id The element ID. Declaration [Parameter] public string Id { get; set; } Property Value Type Description String OnSwipe The callback to be called on swipe events. Declaration [Parameter] public EventCallback<SwipeDirection> OnSwipe { get; set; } Property Value Type Description EventCallback < SwipeDirection > Methods Dispose() Declaration public void Dispose() FocusAsync() Focuses the touch handler. Declaration public ValueTask FocusAsync() Returns Type Description ValueTask OnAfterRenderAsync(Boolean) Declaration protected override async Task OnAfterRenderAsync(bool firstRender) Parameters Type Name Description Boolean firstRender Returns Type Description Task Overrides ComponentBase.OnAfterRenderAsync(Boolean) Operators Implicit(SwipeHandler to ElementReference) The current element reference. Declaration public static implicit operator ElementReference(SwipeHandler element) Parameters Type Name Description SwipeHandler element Returns Type Description ElementReference"
  },
  "neonsdk/api/Neon.Build.html": {
    "href": "neonsdk/api/Neon.Build.html",
    "title": "Class Build | NeonSDK documentation",
    "keywords": "Class Build Neon build constants. Inheritance Object Build Namespace : Neon Assembly : Neon.Common.dll Syntax public static class Build Fields Company The company name to use for all Neon assemblies. Declaration public const string Company = \"NEONFORGE LLC\" Field Value Type Description String Configuration The build configuration. Declaration public const string Configuration = \"Release\" Field Value Type Description String Copyright The copyright statement to be included in all assemblies. Declaration public const string Copyright = \"Copyright © 2005-2023 by NEONFORGE LLC. All rights reserved.\" Field Value Type Description String NeonSdkVersion The released library/package version. note WARNING: Do not rename this constant without updating the relevant release scripts to match. Declaration public const string NeonSdkVersion = \"3.0.0-preview0\" Field Value Type Description String ProductLicense The product license. Declaration public const string ProductLicense = \"Apache License, Version 2.0\" Field Value Type Description String ProductLicenseUrl The product license URL. Declaration public const string ProductLicenseUrl = \"http://www.apache.org/licenses/LICENSE-2.0\" Field Value Type Description String ProductName The product name. Declaration public const string ProductName = \"neonSDK\" Field Value Type Description String Trademark Trademark statement. Declaration public const string Trademark = \"neonSDK, neonKUBE, and neonDESKTOP are trademarks of NEONFORGE LLC\" Field Value Type Description String"
  },
  "neonsdk/api/Neon.BuildInfo.html": {
    "href": "neonsdk/api/Neon.BuildInfo.html",
    "title": "Namespace Neon.BuildInfo | NeonSDK documentation",
    "keywords": "Namespace Neon.BuildInfo Classes ThisAssembly This is a drop-in replacement for the GitInfo Internal.ThisAssembly class. ThisAssembly.Git Returns information about the current git repo for the solution. ThisAssembly.Git.BaseVersion Provides access to the base version information used to determine the ThisAssembly.Git.SemVer . ThisAssembly.Git.SemVer Provides access to SemVer information for the current assembly."
  },
  "neonsdk/api/Neon.BuildInfo.ThisAssembly.Git.BaseVersion.html": {
    "href": "neonsdk/api/Neon.BuildInfo.ThisAssembly.Git.BaseVersion.html",
    "title": "Class ThisAssembly.Git.BaseVersion | NeonSDK documentation",
    "keywords": "Class ThisAssembly.Git.BaseVersion Provides access to the base version information used to determine the ThisAssembly.Git.SemVer . Inheritance Object ThisAssembly.Git.BaseVersion Namespace : Neon.BuildInfo Assembly : Neon.BuildInfo.dll Syntax public static class BaseVersion Fields Major The major version. Declaration public const string Major = \"0\" Field Value Type Description String Minor The minor version. Declaration public const string Minor = \"0\" Field Value Type Description String Patch The patch version. Declaration public const string Patch = \"0\" Field Value Type Description String"
  },
  "neonsdk/api/Neon.BuildInfo.ThisAssembly.Git.html": {
    "href": "neonsdk/api/Neon.BuildInfo.ThisAssembly.Git.html",
    "title": "Class ThisAssembly.Git | NeonSDK documentation",
    "keywords": "Class ThisAssembly.Git Returns information about the current git repo for the solution. Inheritance Object ThisAssembly.Git Namespace : Neon.BuildInfo Assembly : Neon.BuildInfo.dll Syntax public static class Git Fields BaseTag Returns the base tag. Declaration public const string BaseTag = \"\" Field Value Type Description String Branch Returns the name of the current branch. Declaration public const string Branch = \"master\" Field Value Type Description String Commit Returns the current commit hash (short). Declaration public const string Commit = \"437e4c4\" Field Value Type Description String CommitDate Returns the commit timestamp. Declaration public const string CommitDate = \"2023-01-18T12:14:10-08:00\" Field Value Type Description String Commits Returns the commits on top of the base version. Declaration public const string Commits = \"450\" Field Value Type Description String IsDirty Returns true when the git repo has uncommited changes. Declaration public const bool IsDirty = true Field Value Type Description Boolean IsDirtyString Returns \"true when the git repo has uncommited changes, \"false\" otherwise. Declaration public const string IsDirtyString = \"true\" Field Value Type Description String RepositoryUrl Returns the upstream git repository URL. Declaration public const string RepositoryUrl = \"https://github.com/nforgeio/neonSDK.git\" Field Value Type Description String Sha Returns the current commit SHA. Declaration public const string Sha = \"437e4c4feb8f80f8026aefa2e9bc9aaf61d50649\" Field Value Type Description String Tag Returns the full tag. Declaration public const string Tag = \"\" Field Value Type Description String"
  },
  "neonsdk/api/Neon.BuildInfo.ThisAssembly.Git.SemVer.html": {
    "href": "neonsdk/api/Neon.BuildInfo.ThisAssembly.Git.SemVer.html",
    "title": "Class ThisAssembly.Git.SemVer | NeonSDK documentation",
    "keywords": "Class ThisAssembly.Git.SemVer Provides access to SemVer information for the current assembly. Inheritance Object ThisAssembly.Git.SemVer Namespace : Neon.BuildInfo Assembly : Neon.BuildInfo.dll Syntax public class SemVer Fields DashLabel The label (if any) prefixed with a dash. Declaration public const string DashLabel = \"\" Field Value Type Description String Label The label. Declaration public const string Label = \"\" Field Value Type Description String Major The major version. Declaration public const string Major = \"0\" Field Value Type Description String Minor The minor version. Declaration public const string Minor = \"0\" Field Value Type Description String Patch The patch version. Declaration public const string Patch = \"450\" Field Value Type Description String Source The source. Declaration public const string Source = \"Default\" Field Value Type Description String"
  },
  "neonsdk/api/Neon.BuildInfo.ThisAssembly.html": {
    "href": "neonsdk/api/Neon.BuildInfo.ThisAssembly.html",
    "title": "Class ThisAssembly | NeonSDK documentation",
    "keywords": "Class ThisAssembly This is a drop-in replacement for the GitInfo Internal.ThisAssembly class. Inheritance Object ThisAssembly Namespace : Neon.BuildInfo Assembly : Neon.BuildInfo.dll Syntax public static class ThisAssembly Remarks This is a workaround for duplicate symbol compiler errors we often see for more complex solutions that target multiple build configurations and target frameworks. The root problem is that the GitInfo nuget package generates a C# file under [/obj/$Configuration)] or [/obj/$Configuration)/$(TargetFramework)] and when there are multiple configurations and/or target frameworks, we can end up with multiple versions of the generated file and since MSBUILD recursively compiles all C# files within the project folder, we end up with compiler errors. This library works by using the GitInfo nuget but this project only has one build configuration (Release) and only one target framework (netstandard2.0), so we we'll never see duplicate source files."
  },
  "neonsdk/api/Neon.Cassandra.html": {
    "href": "neonsdk/api/Neon.Cassandra.html",
    "title": "Namespace Neon.Cassandra | NeonSDK documentation",
    "keywords": "Namespace Neon.Cassandra Classes KeyspaceStatus Holds information about a database's schema as returned by GetStatusAsync() . RowSetExtensions Extends the Cassandra Cassandra.RowSet class. SchemaManager Manages the initial creation and schema updates for a Cassandra keyspace. SchemaManagerException Thrown by SchemaManager when a problem is detected. SessionExtensions Extends Cassandra.ISession with useful methods. Enums SchemaStatus Enumerates the possible keyspace states as returned by GetStatusAsync() ."
  },
  "neonsdk/api/Neon.Cassandra.KeyspaceStatus.html": {
    "href": "neonsdk/api/Neon.Cassandra.KeyspaceStatus.html",
    "title": "Class KeyspaceStatus | NeonSDK documentation",
    "keywords": "Class KeyspaceStatus Holds information about a database's schema as returned by GetStatusAsync() . Inheritance Object KeyspaceStatus Namespace : Neon.Cassandra Assembly : Neon.Cassandra.dll Syntax public class KeyspaceStatus Properties Error Returns the error from a previous upgrade attempt when SchemaStatus = UpgradeError . Declaration public string Error { get; } Property Value Type Description String IsCurrent Returns true when the database has schema information and the current version is the same as the most recent schema script. Declaration public bool IsCurrent { get; } Property Value Type Description Boolean MaxVersion Returns the maximum known schema version as determined by the available schema scripts. Declaration public int MaxVersion { get; } Property Value Type Description Int32 SchemaStatus Returns an indication of whether the database exisis and has schema information. Declaration public SchemaStatus SchemaStatus { get; } Property Value Type Description SchemaStatus Updater Identifes the updater claiming to be currently upgrading the database when Neon.Cassandra.SchemaStatus.#ctor = Updating . Declaration public string Updater { get; } Property Value Type Description String Version Returns the database's current schema version or -1 when the database doesn't exist or have a DBINFO table. Declaration public int Version { get; } Property Value Type Description Int32"
  },
  "neonsdk/api/Neon.Cassandra.RowSetExtensions.html": {
    "href": "neonsdk/api/Neon.Cassandra.RowSetExtensions.html",
    "title": "Class RowSetExtensions | NeonSDK documentation",
    "keywords": "Class RowSetExtensions Extends the Cassandra Cassandra.RowSet class. Inheritance Object RowSetExtensions Namespace : Neon.Cassandra Assembly : Neon.Cassandra.dll Syntax public static class RowSetExtensions Methods HasRows(RowSet) Distructively tests a Cassandra.RowSet to see if it has any rows. It does this by trying to fetch the first row and returning true when there was a row or false when there wasn't. This means that if you enumerate the rows after calling this, that the first row returned by the database won't be included in the enumeration. This is what we mean by distructive . Declaration public static bool HasRows(this RowSet rowSet) Parameters Type Name Description Cassandra.RowSet rowSet The row set. Returns Type Description Boolean"
  },
  "neonsdk/api/Neon.Cassandra.SchemaManager.html": {
    "href": "neonsdk/api/Neon.Cassandra.SchemaManager.html",
    "title": "Class SchemaManager | NeonSDK documentation",
    "keywords": "Class SchemaManager Manages the initial creation and schema updates for a Cassandra keyspace. Inheritance Object SchemaManager Namespace : Neon.Cassandra Assembly : Neon.Cassandra.dll Syntax public class SchemaManager : IDisposable Remarks This class uses some simple conventions to make it easy to upgrade a keyspace schema over time as the data model evolves. This uses the concept of schema version numbers. A schema version is simply an integer value where the version will be 0 when a keyspace is initially created and then the version is incremented by one whenever the keyspace schema is updated. This class uses a reserved table named DbInfoTableName that is used to keep track of the current schema version. This table will have a single row with these columns: Version:integer The integer keyspace schema version. This will be set to 0 when the keyspace is first created and will be incremented for each subsequent update. Updater:text Used by multiple service instances to coordinate which one actually handles the update. This will be NULL when the keyspace isn't being updated and will be set to a string identifying the entity currently updating the keyspace. This string can be anything from a GUID, container ID, hostname, or whatever. UpdateStartUtc:timestamp Time (UTC) when the most recent update was started. UpdateFinishUtc:timestamp Time (UTC) when the most recent update was completed. This will be NULL while an update is in progress. You'll be authoring Postgres SQL script files to create the initial keyspace as well as to upgrade the keyspace for each subsequent schema change. By convention, this class assumes that the SQL scripts for each keyspace will be saved to separate folders with each script file named like: schema-#.script where # is the schema version the script will upgrade the keyspace to, with schema-0.script being the script that creates the keyspace as Version 0 . So your script folder will look something like: schema-0000.script <-- keyspace created as v0 schema-0001.script <-- upgrades from v0 to v1 schema-0002.script <-- upgrades from v1 to v2 schema-0003.script <-- upgrades from v2 to v3 schema-0004.script <-- upgrades from v3 to v4 ... schema-####.script note This method parses the version number in the file names after the dash so it's perfectly OK to include leading zero digits there (like we did in the example above). We actually recommend this so that your schema files can be sorted nicely by version when listed by the file system. Each script file is responsible for upgrading the keyspace from the previous version to the next. This class will help manage the upgrade process by deciding which scripts need to be executed based on the DbInfoTableName table and then executing the required scripts. To use, construct an instance via SchemaManager , passing a keyspace session for the Postgres superuser or a user with the CREATEDB privilege. You'll also need to pass the keyspace name and the path to the file system folder holding the script files. Then call CreateKeyspaceAsync() to create the keyspace if it doesn't already exist; this uses the session passed to the constructor. Then call UpgradeKeyspaceAsync(String, Int32, Boolean, Action<Boolean, Int32>) to apply any necessary updates; this sets the session to default to the target keyspace while the upgrade scripts are being executed. You may optionally pass a string to UpgradeKeyspaceAsync(String, Int32, Boolean, Action<Boolean, Int32>) that identifies the entity performing the upgrade. This could be an application name, the name of the host the updater is running on, the username of the person performing the upgrade etc. This method uses this to try to prevent multiple updgrade from happening in parallel on the same keyspace (which would be bad) and the updater string can be used to help identify who else is updating the keyspace. This parameter defaults to a GUID. Most applications will include at least two scripts when they get started with schema-0.script creating the keyspace and schema-1.script creating the tables, views, data types, stored procedures, etc. SQL COMMAND BATCHES It's often necessary to execute a sequence of SQL commands that depend on each other. One example is a command that creates a table followed by commands that write rows. You might think that you could achieve this by executing the following as one command: CREATE TABLE my_table (name text); INSERT INTO my_table (name) values ('Jack'); INSERT INTO my_table (name) values ('Jill'); But, this won't actually work because the keyspace generates a query plan for the entire command and when it does this and sees the inserts into [my_table] but the table doesn't actually exist at the time the query plan is being created. So the command will fail. What you really need to do is create the table first as a separate command and then do the inserts as one or more subsequent commands. This is not terribly convenient so we've introduced the concept of a batch of commands. Here's what this would look like: CREATE TABLE my_table (name text); go INSERT INTO my_table (name) values ('Jack'); INSERT INTO my_table (name) values ('Jill'); See how the go line separates the table creation from the inserts. This method will split the script files into separate commands on any go lines and then execute these commands in order. note go is case insensitive and any leading or trailing space on the line will be ignored. Batch commands are implemented by ExecuteBatch(ISession, String) and an asynchonous alternative. SCRIPT VARIABLES Your schema scripts may include variables of the form ${NAME} where NAME is the case sensitive variable name. The variable references will be replaced by the variable's value when the variable is defined, otherwise the variable reference will be left in place. The ${keyspace} variable is reserved and will be replaced by the name of the Cassandra keyspace being managed. You can specify your own variables by passing a dictionary to the constructor. This can be useful for specifying things like password, replication factors, etc. UPGRADE STRATEGIES The current implementation assumes that applications using the database are offline or can work properly with both the new and old schema. Here are some siggestions for managing updates: Use YugaByte snapshots to backup the keyspace. Effectively take the keyspace offline during the upgrade by revoking all rights to all users besides the current one and the superuser before upgrading and then restoring these rights afterwards. For services and keyspaces deployed to Kubernetes, we recommend that you handle keyspace schema updates via a custom Kubernetes operator which would stop any services using the keyspace, apply the schema update, and then restart the services, potentially upgrading them as well. You could embed the schema scripts in the operator itself so upgrading the keyspace (and application) would be as simple as upgrading the operator. HANDLING UPGRADE ERRORS It's possible for a database upgrade to fail. Addressing upgrade failures will generally require manual intervention. You should start out by looking at the version and error columns in the DbInfoTableName in your database to diagnose what happened. version indicates the schema version before the update script was executed but that it's possible that the update script was paratially completed which means that the database may be in a state between the old and update schema version. Here are the underlying causes for upgrade errors: hardware/cluster The database cluster or the hardware/platform it's running is having problems that prevent the updates from being applied. The error column will describe the error. script errors Your upgrade scripts have syntax errors or are otherwise invalid. The error column will describe the error. updater conflict Another updater is currently running or terminated for some reason before completing the update. The updater column will identify the updater instance that is currently updating the database or that failed prematurely. For updater conflicts , you'll need to determine whether the identified updater is still running or whether it has failed. Simply wait for the other updater to finish if it's still running, otherwise you have a failure and will need to follow these recomendations to manually mitigate the situation: Manual Rollback It's possible that some but not all of the commands in your update script have completed. Depending on the upgrade details, you may want to manually undo any of the statements that completed to get the database back to its state before the the update started and then call UpgradeKeyspaceAsync(String, Int32, Boolean, Action<Boolean, Int32>) with force: true . Manual Upgrade As an alternative to Manual Rollback , you could simply execute the remaining update commands manually and then updating the DbInfoTableName by setting version to the new version number and setting the updater and error fields to NULL . Script Corrections Be sure to correct any problems with your upgrade script, even if your are going to manually complete the upgrade so that upgrades will work for new database instances. SCRIPTS AS EMBEDDED RESOURCES In addition to reading SQL scripts as standard files, the SchemaManager can also read scripts from embedded resources. This is an easy and clean way to include these scripts in a program or library. Here's what you need to do: Create a folder in your project to hold your SQL script files. Add your scripts to the new folder, saving them with UTF-8 encoding . Select your script files in the Solution Explorer and then left-click on them and select Properties . Set Build Action to Embedded resource . You'll be using the SchemaManager(ISession, String, IStaticDirectory, Dictionary<String, String>) override constructor and you'll be passing an IStaticDirectory that emulates a read-only file system constructed from embedded resources. You'll need to call GetResourceFileSystem(Assembly, String) to obtain this directory, passing a string identifying resource name prefix that identifies your virtual folder. Constructors SchemaManager(ISession, String, IStaticDirectory, Dictionary<String, String>) Constructs an instance that loads scripts from embedded resources. Declaration public SchemaManager(ISession session, string keyspace, IStaticDirectory schemaDirectory, Dictionary<string, string> variables = null) Parameters Type Name Description Cassandra.ISession session The master keyspace session to be used for creating the target keyspace. This session must have been made for a Postgres superuser or a user with global CREATE permission. String keyspace The keyspace name to be used. IStaticDirectory schemaDirectory The embedded resource directory returned by a call to GetResourceFileSystem(Assembly, String) . Dictionary < String , String > variables Optionally specifies script variables. Exceptions Type Condition FileNotFoundException Thrown if there's no directory at Neon.Cassandra.SchemaManager.scriptFolder or when there's no schema-0.script file in the directory. SchemaManager(ISession, String, String, Dictionary<String, String>) Constructs an instance that loads scripts from files. Declaration public SchemaManager(ISession session, string keyspace, string schemaFolder, Dictionary<string, string> variables = null) Parameters Type Name Description Cassandra.ISession session The master keyspace session to be used for creating the target keyspace. This session must have been made for a Postgres superuser or a user with global CREATE permission. String keyspace The keyspace name to be used. String schemaFolder The path to the file system folder holding the keyspace schema scripts. Dictionary < String , String > variables Optionally specifies script variables. Exceptions Type Condition FileNotFoundException Thrown if there's no directory at Neon.Cassandra.SchemaManager.scriptFolder or when there's no schema-0.script file in the directory. Fields DbInfoTableName The name of the keyspace information table. Declaration public const string DbInfoTableName = \"__dbinfo\" Field Value Type Description String Methods CreateKeyspaceAsync() Creates the keyspace using the schema-0.script file from the script folder. This also creates the DbInfoTableName table adds a row setting the Version to 0. Declaration public async Task<bool> CreateKeyspaceAsync() Returns Type Description Task < Boolean > true if the keyspace was created or false if it already exists. Exceptions Type Condition FileNotFoundException Thrown if the schema-0.script file does not exist in the script folder. SchemaManagerException Thrown if the keyspace already exists but does not include the DbInfoTableName table or if that table doesn't have exactly one row or the version there is not positive. Dispose() Declaration public void Dispose() Dispose(Boolean) Handles the actual disposal. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if we're disposing, false for finalizing. Finalize() Finalizer. Declaration protected void Finalize() GetStatusAsync() Returns information about the keyspace schema status and schema scripts. Declaration public async Task<KeyspaceStatus> GetStatusAsync() Returns Type Description Task < KeyspaceStatus > The KeyspaceStatus . Exceptions Type Condition SchemaManagerException Thrown when the keyspace has an invalid DbInfoTableName table. UpgradeKeyspaceAsync(String, Int32, Boolean, Action<Boolean, Int32>) Upgrades the keyspace by applying any upgrade scripts from the current keyspace version to the latest update script found in the script folder or optionally when the keyspace version equals stopVersion . Declaration public async Task<int> UpgradeKeyspaceAsync(string updaterIdentity = null, int stopVersion = -1, bool force = false, Action<bool, int> updateAction = null) Parameters Type Name Description String updaterIdentity Optionally specifies the identity of the entity performing the update. This may be the username of the person doing this or something identifying the service instance for more automated scenarios. This service identity could be a hostname, container ID, or something else that makes sense. This is used to ensure that only a single entity can update the keyspace. This defaults to a generated GUID. Int32 stopVersion Optionally specifies the latest keyspace update to apply. Boolean force Optionally specifies that any indication that another updater is in the process of updating the keyspace will be ignored and that any pewnding updates will proceed. This may be necessary after a previous update failed. note WARNING: You should take care to ensure that the other potential updater is not actually performing an update. This may also means that the previous update was only partially completed which could require manual intervention. Action < Boolean , Int32 > updateAction Optional action that will be called before each update is applied and then afterwards. The bool argument will be false before the update is applied and true afterwards. The int argument is the schema version being applied. Returns Type Description Task < Int32 > The version of the keyspace after the upgrade. Remarks note IMPORTANT: This method does not perform the schema updates within a transaction because that will be impractical for large keyspaces and also due to limitations of YugaByte Postgres. This means that you'll need to take care to ensure that your schema scripts are well tested and bulletproof and you should also consider backing up your keyspace to be very safe. Exceptions Type Condition SchemaManagerException Thrown if the keyspace doesn't exist or does not include the DbInfoTableName table or if it invalid. FileNotFoundException Thrown if the schema-0.script file does not exist or when there are any missing script files (e.g. gaps in the sequence of files) or there are scripts with unexpected file names. SchemaManagerException Thrown when another entity currently is in the process of updating the keyspace schema."
  },
  "neonsdk/api/Neon.Cassandra.SchemaManagerException.html": {
    "href": "neonsdk/api/Neon.Cassandra.SchemaManagerException.html",
    "title": "Class SchemaManagerException | NeonSDK documentation",
    "keywords": "Class SchemaManagerException Thrown by SchemaManager when a problem is detected. Inheritance Object Exception SchemaManagerException Namespace : Neon.Cassandra Assembly : Neon.Cassandra.dll Syntax public class SchemaManagerException : Exception, ISerializable Constructors SchemaManagerException(String) Constructor. Declaration public SchemaManagerException(string message = null) Parameters Type Name Description String message Optionally specifies the nexception message. Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Cassandra.SchemaStatus.html": {
    "href": "neonsdk/api/Neon.Cassandra.SchemaStatus.html",
    "title": "Enum SchemaStatus | NeonSDK documentation",
    "keywords": "Enum SchemaStatus Enumerates the possible keyspace states as returned by GetStatusAsync() . Namespace : Neon.Cassandra Assembly : Neon.Cassandra.dll Syntax public enum SchemaStatus Fields Name Description ExistsNoSchema The database exists but has no DbInfoTableName table with any schema information. ExistsWithSchema The database exists with schema information. NotFound The database doesn't exist. Updating Another updater is currently updating the database or has failed before completing the update. UpgradeError An error occured during the previous update indicating that the database schema may have been partially updated. It's likely that manual intervention may be necessary to rollback to the previous schema version or manually apply the remaining updates. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Cassandra.SessionExtensions.html": {
    "href": "neonsdk/api/Neon.Cassandra.SessionExtensions.html",
    "title": "Class SessionExtensions | NeonSDK documentation",
    "keywords": "Class SessionExtensions Extends Cassandra.ISession with useful methods. Inheritance Object SessionExtensions Namespace : Neon.Cassandra Assembly : Neon.Cassandra.dll Syntax public static class SessionExtensions Methods ExecuteAsync(ISession, String) Executes a text command asynchronously. Declaration public static async Task<RowSet> ExecuteAsync(this ISession session, string cqlText) Parameters Type Name Description Cassandra.ISession session The database session. String cqlText The command or query text. Returns Type Description Task < Cassandra.RowSet > The resulting Cassandra.RowSet . ExecuteBatch(ISession, String) Executes a batch of SQL commands saeparated by lines including go separators. This works like Microsoft SQL server related tools. note The term batch here is different from the usual Cassandra terminology, where batch refers an Cassandra.BatchStatement which may include multiple statements that are executed together atomically. Batch here refers to statements extracted from the text passed and then executed individually . Sorry for the confusion here, but we used this to be consistent with the our Postgres extensions and frankly, we couldn't think of a better term. Declaration public static void ExecuteBatch(this ISession session, string batchText) Parameters Type Name Description Cassandra.ISession session The database session. String batchText The SQL commands possibly separated by go lines. Remarks It's often necessary to execute a sequence of SQL commands that depend on each other. One example is a command that creates a table followed by commands that write rows. You might think that you could achieve this by executing the following as one command: CREATE TABLE my_table (name text); INSERT INTO my_table (name) values ('Jack'); INSERT INTO my_table (name) values ('Jill'); but this won't actually work because the database generates a query plan for the entire command and when it does this and sees the inserts into [my_table] but the table doesn't actually exist at the time the query plan is being created. So the command will fail. What you really need to do is create the table first as a separate command and then do the inserts as one or more subsequent commands. This is not terribly convenient so we've introduced the concept of a batch of commands via this method. Here's what this would look like: CREATE TABLE my_table (name text); go INSERT INTO my_table (name) values ('Jack'); INSERT INTO my_table (name) values ('Jill'); See how the go line separates the table creation from the inserts. This method will split the batchText into separate commands on any go lines and then execute these commands in order. note go is case insensitive and any leading or trailing space on the line will be ignored. ExecuteBatchAsync(ISession, String) Asynchronously a batch of SQL commands saeparated by lines including go separators. This works like Microsoft SQL server related tools. note The term batch here is different from the usual Cassandra terminology, where batch refers an Cassandra.BatchStatement which may include multiple statements that are executed together atomically. Batch here refers to statements extracted from the text passed and then executed individually . Sorry for the confusion here, but we used this to be consistent with the our Postgres extensions and frankly, we couldn't think of a better term. Declaration public static async Task ExecuteBatchAsync(this ISession session, string batchText) Parameters Type Name Description Cassandra.ISession session The database session. String batchText The SQL commands possibly separated by go lines. Returns Type Description Task The tracking Task . Remarks note This method doesn't actually execute the statements asynchronously because the Cassandra driver doesn't include an ISession.ExecuteAsync(string) method. This method simply calls ExecuteBatch(ISession, String) . We're retaining this method for compatibility with our Postgres extensions. It's often necessary to execute a sequence of SQL commands that depend on each other. One example is a command that creates a table followed by commands that write rows. You might think that you could achieve this by executing the following as one command: CREATE TABLE my_table (name text); INSERT INTO my_table (name) values ('Jack'); INSERT INTO my_table (name) values ('Jill'); but this won't actually work because the database generates a query plan for the entire command and when it does this and sees the inserts into [my_table] but the table doesn't actually exist at the time the query plan is being created. So the command will fail. What you really need to do is create the table first as a separate command and then do the inserts as one or more subsequent commands. This is not terribly convenient so we've introduced the concept of a batch of commands via this method. Here's what this would look like: CREATE TABLE my_table (name text); go INSERT INTO my_table (name) values ('Jack'); INSERT INTO my_table (name) values ('Jill'); See how the go line separates the table creation from the inserts. This method will split the batchText into separate commands on any go lines and then execute these commands in order. note go is case insensitive and any leading or trailing space on the line will be ignored."
  },
  "neonsdk/api/Neon.Collections.ArgDictionary.html": {
    "href": "neonsdk/api/Neon.Collections.ArgDictionary.html",
    "title": "Class ArgDictionary | NeonSDK documentation",
    "keywords": "Class ArgDictionary A dictionary of objects keyed by case sensitive strings. Inheritance Object Dictionary < String , Object > ArgDictionary Namespace : Neon.Collections Assembly : Neon.Common.dll Syntax public class ArgDictionary : Dictionary<string, object>, IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IReadOnlyDictionary<string, object>, IReadOnlyCollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable Extension Methods IEnumerableExtensions.SelectRandom<T>(IEnumerable<T>, Int32) IEnumerableExtensions.IsEmpty<T>(IEnumerable<T>, Func<T, Boolean>)"
  },
  "neonsdk/api/Neon.Collections.Bits.html": {
    "href": "neonsdk/api/Neon.Collections.Bits.html",
    "title": "Class Bits | NeonSDK documentation",
    "keywords": "Class Bits Implements an efficient array of boolean values that can also perform bit oriented operations such as AND, OR, NOT, XOR. Inheritance Object Bits Namespace : Neon.Collections Assembly : Neon.Common.dll Syntax public class Bits Remarks note This class is similar to the .NET BitArray class. The main difference is that this class serializes the bits to a byte array as you'd expect, with bit zero being the most significant bit of the first byte, bit one being the second significant bit, etc. The BitArray class serializes the first bit to the least significant bit of the first byte. A Bits bitmap encodes internally as an array of 32-bit integers which is much more memory efficent than how the .NET Framework would encode an array of boolean values. Use the Bits(Int32) constructor to create a zeroed bitmap with the specified number of bits, Bits(Boolean[]) to initialize the bitmap from a boolean array, or Bits(String) to create a bitmap from a string of ones and zeros, and Bits(Byte[], Int32) to load a bitmap from a byte array serialized by a previous call to ToBytes() . You can use the indexer to get/set specific bits in the bitmap. Note that all indexes are zero-based. ClearRange(Int32, Int32) sets the specified range of bits to zero, SetRange(Int32, Int32) sets the specified range of bits to one, and ClearAll() and SetAll() sets all bits to the appropriate value. Resize(Int32) can be used to resize a bitmap. The class implements the following bitwise operations: Not() , And(Bits) , Or(Bits) , Xor(Bits) , ShiftLeft(Int32) , and ShiftRight(Int32) . Note that the lengths of the two bitmaps passed to binary operations must be the same. Clone() returns a copy of the bitmap and ToArray() converts the bitmap into a boolean array. The IsAllZeros and IsAllOnes properties can be used to determine if a bitmap is all zeros or ones and Equals(Object) can be used to determine whether two bitmaps are the same. ToString() renders the bitmap as a string of 1s and 0s. This class also defines explict casts for converting to and from a string of ones and zeros and also defines the bitwise || , & , ~ and ^ , << , and >> operators. Constructors Bits(Boolean[]) Constructs a bitmap from a boolean array. Declaration public Bits(bool[] array) Parameters Type Name Description Boolean [] array The array. Exceptions Type Condition ArgumentNullException Thrown if array is null . Bits(Byte[]) Constructs a bitmap from a an array of bytes. Declaration public Bits(byte[] bytes) Parameters Type Name Description Byte [] bytes The byte array. Remarks This constructor is useful for deserializing bitmaps persisted to a binary structure. Exceptions Type Condition ArgumentNullException Thrown if bytes is null . Bits(Byte[], Int32) Constructs a bitmap from a specified number of bits from an array of bytes. Declaration public Bits(byte[] bytes, int length) Parameters Type Name Description Byte [] bytes The byte array. Int32 length Specifies length of the bitmap to be created. Remarks This constructor is useful for deserializing bitmaps persisted to a binary structure. Exceptions Type Condition ArgumentNullException Thrown if bytes is null . ArgumentException Thrown is length is negative. Bits(Int32) Constructs a zeroed bitmap of a specified length. Declaration public Bits(int length) Parameters Type Name Description Int32 length The bitmap length. Exceptions Type Condition ArgumentException Thrown is length is negative. Bits(String) Constructs a bitmap by parsing a string of 1s and 0s. Declaration public Bits(string bitString) Parameters Type Name Description String bitString The bit string. Exceptions Type Condition ArgumentNullException Thrown if bitString is null . FormatException Thrown if bitString contains a character other than a 1 or 0. Properties IsAllOnes Returns true if all of the bits are set to ones. Declaration public bool IsAllOnes { get; } Property Value Type Description Boolean IsAllZeros Returns true if all of the bits are set to zeros. Declaration public bool IsAllZeros { get; } Property Value Type Description Boolean Item[Int32] Gets or sets a bit in the bitmap. Declaration public bool this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the bit. Property Value Type Description Boolean The bit value. Exceptions Type Condition ArgumentOutOfRangeException Throw if the index is not in range. Length Returns the length of the bitmap. Declaration public int Length { get; } Property Value Type Description Int32 Methods And(Bits) Performs a bitwise and on the bits passed and the current bits and returns the result. Declaration public Bits And(Bits bits) Parameters Type Name Description Bits bits The source Bits . Returns Type Description Bits A new Bits instance with the intersection. Exceptions Type Condition InvalidOperationException Thrown if the source bitmaps don't have the same length. ClearAll() Zeros all bits. Declaration public void ClearAll() ClearRange(Int32, Int32) Zeros a number of bits starting at an index. Declaration public void ClearRange(int index, int count) Parameters Type Name Description Int32 index The start index. Int32 count Number of bits. Exceptions Type Condition ArgumentOutOfRangeException Thrown if the index or count is out of range. Clone() Returns a clone of the bitmap. Declaration public Bits Clone() Returns Type Description Bits The cloned copy. Equals(Object) Determines if the bitmap passed is equal to the current bitmap. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The instance to be compared. Returns Type Description Boolean true of the bitmaps are equal. Overrides Object.Equals(Object) GetHashCode() Computes a hash code for the instance. Declaration public override int GetHashCode() Returns Type Description Int32 The hash code. Overrides Object.GetHashCode() Not() Returns a bitmap that inverts all the bits of the current bitmap. Declaration public Bits Not() Returns Type Description Bits The inverted Bits . Or(Bits) Performs a bitwise or on the bits passed and the current bits and returns the result. Declaration public Bits Or(Bits bits) Parameters Type Name Description Bits bits The source Bits . Returns Type Description Bits A new Bits instance with the union. Exceptions Type Condition InvalidOperationException Thrown if the source bitmaps don't have the same length. Resize(Int32) Creates a new bitmap from the current instance, but resized to contain the specified number of bits. Declaration public Bits Resize(int length) Parameters Type Name Description Int32 length The length desired for the new bitmap. Returns Type Description Bits The resized bitmap. Exceptions Type Condition ArgumentException Thrown if length is negative. SetAll() Sets all bits. Declaration public void SetAll() SetRange(Int32, Int32) Sets a number of bits starting at an index. Declaration public void SetRange(int index, int count) Parameters Type Name Description Int32 index The start index. Int32 count Number of bits. Exceptions Type Condition ArgumentOutOfRangeException Thrown if the index or count is out of range. ShiftLeft(Int32) Left shifts a bitmap by a number of positions and returns the result. Declaration public Bits ShiftLeft(int count) Parameters Type Name Description Int32 count The number of positions to shift. Returns Type Description Bits The shifted bitmap. Remarks note Any bits shifted left past position zero will be lost. Exceptions Type Condition ArgumentException Thrown if count is less than zero. ShiftRight(Int32) Right shifts a bitmap by a number of positions and returns the result. Declaration public Bits ShiftRight(int count) Parameters Type Name Description Int32 count The number of positions to shift. Returns Type Description Bits The shifted bitmap. Remarks note Any bits shifted right past the end of the bitmap will be lost. Exceptions Type Condition ArgumentException Thrown if count is less than zero. ToArray() Converts the bitmap into a boolean array. Declaration public bool[] ToArray() Returns Type Description Boolean [] The boolean array. ToBytes() Converts the bitmap into an array of bytes. Declaration public byte[] ToBytes() Returns Type Description Byte [] The byte array. Remarks This method is useful for serializing bitmaps for storage in a binary structure. ToString() Renders the bitmap as a string of ones and zeros. Declaration public override string ToString() Returns Type Description String The bitmap string. Overrides Object.ToString() Xor(Bits) Performs a bitwise xor on the bits passed and the current bits and returns the result. Declaration public Bits Xor(Bits bits) Parameters Type Name Description Bits bits The source Bits . Returns Type Description Bits A new Bits instance with the exclusive or results. Exceptions Type Condition InvalidOperationException Thrown if the source bitmaps don't have the same length. Operators BitwiseAnd(Bits, Bits) Returns the intersection of two bitmaps. Declaration public static Bits operator &(Bits b1, Bits b2) Parameters Type Name Description Bits b1 The first bitmap. Bits b2 The second bitmap. Returns Type Description Bits The intersection. Exceptions Type Condition InvalidOperationException Thrown if the source bitmaps don't have the same length. BitwiseOr(Bits, Bits) Returns the union of two bitmaps. Declaration public static Bits operator |(Bits b1, Bits b2) Parameters Type Name Description Bits b1 The first bitmap. Bits b2 The second bitmap. Returns Type Description Bits The union. Exceptions Type Condition InvalidOperationException Thrown if the source bitmaps don't have the same length. Equality(Bits, Bits) Determines whether two bitmaps contain the same values. Declaration public static bool operator ==(Bits b1, Bits b2) Parameters Type Name Description Bits b1 The first bitmap. Bits b2 The second bitmap. Returns Type Description Boolean true if the bitmaps are the same. ExclusiveOr(Bits, Bits) Returns the exclusive or of two bitmaps. Declaration public static Bits operator ^(Bits b1, Bits b2) Parameters Type Name Description Bits b1 The first bitmap. Bits b2 The second bitmap. Returns Type Description Bits The exclusive-or of the bits. Exceptions Type Condition InvalidOperationException Thrown if the source bitmaps don't have the same length. Explicit(Bits to String) Casts a Bits instance into a bit string of ones and zeros. Declaration public static explicit operator string (Bits bits) Parameters Type Name Description Bits bits The bitmap. Returns Type Description String The bit string. Explicit(String to Bits) Casts a bit string of ones and zeros into a Bits bitmap. Declaration public static explicit operator Bits(string bitString) Parameters Type Name Description String bitString The bit string. Returns Type Description Bits The bitmap. Exceptions Type Condition FormatException Thrown if bitString contains a character other than a 1 or 0. Inequality(Bits, Bits) Determines whether two bitmaps do not contain the same values. Declaration public static bool operator !=(Bits b1, Bits b2) Parameters Type Name Description Bits b1 The first bitmap. Bits b2 The second bitmap. Returns Type Description Boolean true if the bitmaps are the same. LeftShift(Bits, Int32) Left shifts a bitmap by a number of positions and returns the result. Declaration public static Bits operator <<(Bits input, int count) Parameters Type Name Description Bits input The input bitmap. Int32 count The number of positions to shift. Returns Type Description Bits The shifted bitmap. Remarks note Any bits shifted left past position zero will be lost. Exceptions Type Condition ArgumentException Thrown if count is less than zero. OnesComplement(Bits) Returns the bitwise not on a bitmap. Declaration public static Bits operator ~(Bits bits) Parameters Type Name Description Bits bits The source bitmap. Returns Type Description Bits The output bitmap. RightShift(Bits, Int32) Right shifts a bitmap by a number of positions and returns the result. Declaration public static Bits operator >>(Bits input, int count) Parameters Type Name Description Bits input The input bitmap. Int32 count The number of positions to shift. Returns Type Description Bits The shifted bitmap. Remarks note Any bits shifted right past the end of the bitmap will be lost. Exceptions Type Condition ArgumentException Thrown if count is less than zero."
  },
  "neonsdk/api/Neon.Collections.html": {
    "href": "neonsdk/api/Neon.Collections.html",
    "title": "Namespace Neon.Collections | NeonSDK documentation",
    "keywords": "Namespace Neon.Collections Classes ArgDictionary A dictionary of objects keyed by case sensitive strings. Bits Implements an efficient array of boolean values that can also perform bit oriented operations such as AND, OR, NOT, XOR. NiceDictionary<TKey, TValue> A dictionary of values where the indexer will return the default value for keys that don't map to an item. ObjectDictionary Describes dictionaries mapping case-sensitive strings to objects along with nice generic methods that converts item values to specific types. Interfaces IObjectDictionary Describes dictionaries mapping case-sensitive strings to objects along with nice generic methods that converts item values to specific types."
  },
  "neonsdk/api/Neon.Collections.IObjectDictionary.html": {
    "href": "neonsdk/api/Neon.Collections.IObjectDictionary.html",
    "title": "Interface IObjectDictionary | NeonSDK documentation",
    "keywords": "Interface IObjectDictionary Describes dictionaries mapping case-sensitive strings to objects along with nice generic methods that converts item values to specific types. Namespace : Neon.Collections Assembly : Neon.Common.dll Syntax public interface IObjectDictionary : IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IEnumerable Methods Get<TValue>(String) Returns the value of an item converted to a specific type. Declaration TValue Get<TValue>(string key) Parameters Type Name Description String key The key. Returns Type Description TValue The value converted to TValue . Type Parameters Name Description TValue The result type. Exceptions Type Condition ArgumentNullException Thrown if key is null . KeyNotFoundException Thrown by the getter if the key doesn't exist. InvalidCastException Thrown if the item value cannot be cast into a TValue . Get<TValue>(String, TValue) Returns the value of an item converted to a specific type. Declaration TValue Get<TValue>(string key, TValue default = null) Parameters Type Name Description String key The key. TValue default Secifies the default value to return if the key doesn't exist. Returns Type Description TValue The value converted to TValue . Type Parameters Name Description TValue The result type. Exceptions Type Condition ArgumentNullException Thrown if key is null . InvalidCastException Thrown if the item value cannot be cast into a TValue . TryGetValue<TValue>(String, out TValue) Attempts to retrieve a specific value from the dictionary. Declaration bool TryGetValue<TValue>(string key, out TValue value) Parameters Type Name Description String key The key. TValue value Returns as the value when the key exists. Returns Type Description Boolean true if the key exists and the value was returned. Type Parameters Name Description TValue The result type. Exceptions Type Condition ArgumentNullException Thrown if key is null . Extension Methods IEnumerableExtensions.SelectRandom<T>(IEnumerable<T>, Int32) IEnumerableExtensions.IsEmpty<T>(IEnumerable<T>, Func<T, Boolean>)"
  },
  "neonsdk/api/Neon.Collections.NiceDictionary-2.html": {
    "href": "neonsdk/api/Neon.Collections.NiceDictionary-2.html",
    "title": "Class NiceDictionary<TKey, TValue> | NeonSDK documentation",
    "keywords": "Class NiceDictionary<TKey, TValue> A dictionary of values where the indexer will return the default value for keys that don't map to an item. Inheritance Object Dictionary <TKey, TValue> NiceDictionary<TKey, TValue> Namespace : Neon.Collections Assembly : Neon.Common.dll Syntax public class NiceDictionary<TKey, TValue> : Dictionary<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable Type Parameters Name Description TKey The key type. TValue The value type. Properties Item[TKey] Accesses the value associated with a specified key. Declaration public TValue this[TKey key] { get; set; } Parameters Type Name Description TKey key The key. Property Value Type Description TValue The associated value or the default value for the type when there's no associated value. Extension Methods IEnumerableExtensions.SelectRandom<T>(IEnumerable<T>, Int32) IEnumerableExtensions.IsEmpty<T>(IEnumerable<T>, Func<T, Boolean>)"
  },
  "neonsdk/api/Neon.Collections.ObjectDictionary.html": {
    "href": "neonsdk/api/Neon.Collections.ObjectDictionary.html",
    "title": "Class ObjectDictionary | NeonSDK documentation",
    "keywords": "Class ObjectDictionary Describes dictionaries mapping case-sensitive strings to objects along with nice generic methods that converts item values to specific types. Inheritance Object Dictionary < String , Object > ObjectDictionary Implements IObjectDictionary Namespace : Neon.Collections Assembly : Neon.Common.dll Syntax public class ObjectDictionary : Dictionary<string, object>, IReadOnlyDictionary<string, object>, IReadOnlyCollection<KeyValuePair<string, object>>, IDictionary, ICollection, IDeserializationCallback, ISerializable, IObjectDictionary, IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IEnumerable Constructors ObjectDictionary() Constructor. Declaration public ObjectDictionary() Methods Get<TValue>(String) Returns the value of an item converted to a specific type. Declaration public TValue Get<TValue>(string key) Parameters Type Name Description String key The key. Returns Type Description TValue The value converted to TValue . Type Parameters Name Description TValue The result type. Exceptions Type Condition ArgumentNullException Thrown if key is null . KeyNotFoundException Thrown by the getter if the key doesn't exist. InvalidCastException Thrown if the item value cannot be cast into a TValue . Get<TValue>(String, TValue) Returns the value of an item converted to a specific type. Declaration public TValue Get<TValue>(string key, TValue default = null) Parameters Type Name Description String key The key. TValue default Secifies the default value to return if the key doesn't exist. Returns Type Description TValue The value converted to TValue . Type Parameters Name Description TValue The result type. Exceptions Type Condition ArgumentNullException Thrown if key is null . InvalidCastException Thrown if the item value cannot be cast into a TValue . TryGetValue<TValue>(String, out TValue) Attempts to retrieve a specific value from the dictionary. Declaration public bool TryGetValue<TValue>(string key, out TValue value) Parameters Type Name Description String key The key. TValue value Returns as the value when the key exists. Returns Type Description Boolean true if the key exists and the value was returned. Type Parameters Name Description TValue The result type. Exceptions Type Condition ArgumentNullException Thrown if key is null . Implements IObjectDictionary Extension Methods IEnumerableExtensions.SelectRandom<T>(IEnumerable<T>, Int32) IEnumerableExtensions.IsEmpty<T>(IEnumerable<T>, Func<T, Boolean>)"
  },
  "neonsdk/api/Neon.Common.AppDomainExtensions.html": {
    "href": "neonsdk/api/Neon.Common.AppDomainExtensions.html",
    "title": "Class AppDomainExtensions | NeonSDK documentation",
    "keywords": "Class AppDomainExtensions Implements AppDomain extension methods. Inheritance Object AppDomainExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class AppDomainExtensions Methods GetUserAssemblies(AppDomain) Enumerates all non System and Microsoft assemblies currently loaded in the AppDomain . This can be used as a performance optimization when you only need to scan user assemblies. Declaration public static IEnumerable<Assembly> GetUserAssemblies(this AppDomain appDomain) Parameters Type Name Description AppDomain appDomain The AppDomain . Returns Type Description IEnumerable < Assembly > The enumerated assemblies. Remarks We also use this to work around this Visual Studio bug:"
  },
  "neonsdk/api/Neon.Common.Block.html": {
    "href": "neonsdk/api/Neon.Common.Block.html",
    "title": "Class Block | NeonSDK documentation",
    "keywords": "Class Block Used to reference a block in a BlockArray or BlockStream . Inheritance Object Block Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public sealed class Block Constructors Block(Byte[]) Constructs a block. Declaration public Block(byte[] buffer) Parameters Type Name Description Byte [] buffer The byte buffer. Block(Byte[], Int32, Int32) Constructs a block. Declaration public Block(byte[] buffer, int offset, int length) Parameters Type Name Description Byte [] buffer The byte buffer. Int32 offset Offset of the first referenced byte. Int32 length Byte length of the reference. Block(Int32) Allocates a block to a newly allocated buffer of the specified size. Declaration public Block(int size) Parameters Type Name Description Int32 size The new block size in bytes. Properties Buffer The referenced buffer. Declaration public byte[] Buffer { get; set; } Property Value Type Description Byte [] Item[Int32] Accesses the byte at the specified index in the block. Declaration public byte this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description Byte Length The number of referenced bytes. Declaration public int Length { get; set; } Property Value Type Description Int32 Offset The offset of the starting position of the referenced bytes in the buffer. Declaration public int Offset { get; set; } Property Value Type Description Int32 Methods Assemble(Block[]) Assembles the bytes referenced by the blocks into a contiguous buffer. Declaration public static byte[] Assemble(params Block[] blocks) Parameters Type Name Description Block [] blocks The blocks. Returns Type Description Byte [] A contiguous buffer. CopyFrom(Byte[], Int32, Int32, Int32) Copies bytes from the byte array passed into the block. Declaration public void CopyFrom(byte[] source, int sourceOffset, int targetOffset, int length) Parameters Type Name Description Byte [] source The source byte array. Int32 sourceOffset Offset of the first byte to copy from the source array. Int32 targetOffset Logical offset of the first target byte in the block. Int32 length Number of bytes to copy. CopyTo(Int32, Byte[], Int32, Int32) Copies bytes from the logical offset in the block to the target byte array. Declaration public void CopyTo(int sourceOffset, byte[] target, int targetOffset, int length) Parameters Type Name Description Int32 sourceOffset Logical offset of the first byte to copy. Byte [] target The output byte array. Int32 targetOffset Target offset where the first byte is to be written. Int32 length The number of bytes to copy. SetRange(Int32, Int32) Modifies the range of bytes referenced by the instance. Declaration public void SetRange(int offset, int length) Parameters Type Name Description Int32 offset Index of the first referenced byte. Int32 length Number of bytes referenced. Operators Explicit(Block to ArraySegment<Byte>) Explict cast from a Block to a Byte ArraySegment<T> Declaration public static explicit operator ArraySegment<byte>(Block block) Parameters Type Name Description Block block The Block to be converted. Returns Type Description ArraySegment < Byte > The equivalent ArraySegment<T> . Explicit(ArraySegment<Byte> to Block) Explict cast from a Byte ArraySegment<T> to a Block . Declaration public static explicit operator Block(ArraySegment<byte> segment) Parameters Type Name Description ArraySegment < Byte > segment The array segment to be converted. Returns Type Description Block The equivalent Block ."
  },
  "neonsdk/api/Neon.Common.BlockArray.html": {
    "href": "neonsdk/api/Neon.Common.BlockArray.html",
    "title": "Class BlockArray | NeonSDK documentation",
    "keywords": "Class BlockArray Implements an array of Block instances. Inheritance Object BlockArray Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public sealed class BlockArray Remarks The purpose of BlockArray is to avoid performance robbing buffer reallocations and copies and large obvject heap applications as can happen with extensive use of the MemoryStream class. Rather than doing I/O to a single large buffer, the BlockArray provides the underlying functionality for spreading I/O across multiple blocks. This avoids any need to reallocate and copy a large buffer as the stream grows an also tends to allocate consistently sized memory blocks, making life easier for the memory allocator. This class is pretty flexible. Blocks can be explicitly added and removed from the class or the ExtendTo(Int32) , TruncateTo(Int32) , or SetExactSize(Int32) methods can be used have the class handle block management. The BlockSize and BlockOffset properties are used by the internal block management methods when allocating new blocks. BlockSize defaults to 512 and specifies the size of new blocks. BlockOffset defaults to 0. New blocks will have their Offset field set to BlockOffset . BlockOffset provides for some tricky performance optimizations. A common situation in network protocols is the need to fragment serialized data across multiple data packets with fixed sized headers. Setting BlockOffset to the size of the fixed header will reserve these bytes at the beginning of each block. The data can be serialized into the array and then afterwards, the headers can be written manually into each block. This technique can avoid lots of buffer copying. note You should call Reload() after directly modifying the Length or Offset properties of any of the blocks in the array. It is not necessary to call this for changes to the Block.Buffer array. Constructors BlockArray() Constructs an empty list. Declaration public BlockArray() BlockArray(Block[]) Constructs an array from the blocks passed. Declaration public BlockArray(params Block[] blocks) Parameters Type Name Description Block [] blocks The blocks. BlockArray(Byte[]) Constructs a block array from a buffer. Declaration public BlockArray(byte[] buffer) Parameters Type Name Description Byte [] buffer The buffer to append. BlockArray(Int32) Constructs an array with the specified capacity. Declaration public BlockArray(int capacity) Parameters Type Name Description Int32 capacity The capacity in bytes. BlockArray(Int32, Int32) Constructs an array with the specified capacity and block size. Declaration public BlockArray(int capacity, int blockSize) Parameters Type Name Description Int32 capacity The capacity in bytes. Int32 blockSize Size of blocks added when extending the array. BlockArray(Int32, Int32, Int32) Constructs an array with the specified capacity, block size, and block offset. Declaration public BlockArray(int capacity, int blockSize, int blockOffset) Parameters Type Name Description Int32 capacity The capacity in bytes. Int32 blockSize Size of blocks added when extending the array. Int32 blockOffset Bytes to be reserved at the beginning of each new block. Properties BlockOffset The default offset to use when adding new blocks to the array. Declaration public int BlockOffset { get; set; } Property Value Type Description Int32 BlockSize The size of new blocks added when extending the array. Declaration public int BlockSize { get; set; } Property Value Type Description Int32 Count Returns the number of blocks in the list. Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Accesses the indexed byte in the logical array formed by concatentating all of the blocks. Declaration public byte this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description Byte Size Returns the total size of all the blocks in bytes. Declaration public int Size { get; } Property Value Type Description Int32 Methods Append(Block) Appends a block to end of the array. Declaration public void Append(Block block) Parameters Type Name Description Block block The new block. Append(BlockArray) Appends all blocks from a block array to this array. Declaration public void Append(BlockArray blocks) Parameters Type Name Description BlockArray blocks The source array. Append(BlockArray, Int32, Int32) Appends blocks from a block array to this array. Declaration public void Append(BlockArray blocks, int index, int count) Parameters Type Name Description BlockArray blocks The source array. Int32 index Index of the first block to append. Int32 count Number of blocks to append. Append(Byte[]) Appends a block formed by a buffer to the array. Declaration public void Append(byte[] buffer) Parameters Type Name Description Byte [] buffer The buffer to add. Clone() Returns a shallow copy of the block array. Declaration public BlockArray Clone() Returns Type Description BlockArray The cloned array. Remarks A new set of Block objects will be returned but they will point to the same underlying buffers. CopyFrom(Byte[], Int32, Int32, Int32) Copies bytes from the byte array passed into the blocks. Declaration public void CopyFrom(byte[] source, int sourceOffset, int targetOffset, int length) Parameters Type Name Description Byte [] source The source byte array. Int32 sourceOffset Offset of the first byte to copy from the source array. Int32 targetOffset Logical offset of the first target byte in the buffer references. Int32 length Number of bytes to copy. CopyTo(Int32, Byte[], Int32, Int32) Copies bytes from the logical offset in the blocks to the target byte array. Declaration public void CopyTo(int sourceOffset, byte[] target, int targetOffset, int length) Parameters Type Name Description Int32 sourceOffset Logical offset of the first byte to copy. Byte [] target The output byte array. Int32 targetOffset Target offset where the first byte is to be written. Int32 length The number of bytes to copy. ExtendTo(Int32) Adds blocks to the array as necessary to ensure that the total size of these blocks is at least equal to the value passed. Declaration public void ExtendTo(int capacity) Parameters Type Name Description Int32 capacity The minimum requested capacity in bytes. Extract(Int32) Extracts a range of bytes from the array from the specified index to the end of the array into newly created block array. Declaration public BlockArray Extract(int index) Parameters Type Name Description Int32 index Logical index of the first byte. Returns Type Description BlockArray A new block array referencing the bytes. Remarks note Although this method does create a new BlockArray and Block objects, it does not copy the underlying buffers. Instead, it adjusts the new Block objects to reference the requested portions of the original underlying buffers. Extract(Int32, Int32) Extracts a range of bytes from the array into newly created block array. Declaration public BlockArray Extract(int index, int length) Parameters Type Name Description Int32 index Logical index of the first byte. Int32 length Number of bytes to extract. Returns Type Description BlockArray A new block array referencing the bytes. Remarks note Although this method does create a new BlockArray and Block objects, it does not copy the underlying buffers. Instead, it adjusts the new Block objects to reference the requested portions of the original underlying buffers. GetBlock(Int32) Returns the indexed block in the list. Declaration public Block GetBlock(int index) Parameters Type Name Description Int32 index The index (0..Count-1). Returns Type Description Block The block. GetBlocks() Returns an array to the underlying blocks. Declaration public Block[] GetBlocks() Returns Type Description Block [] The block array. Reload() Reloads cached information about the blocks in the array. Declaration public void Reload() Remarks This should be called after making changes to the Length property of any blocks in the array. Reset() Used internally by unit tests to reset any internal positional optimization information maintained by the class. Declaration public void Reset() SetExactSize(Int32) Adjusts the blocks in the array such that their sizes total exactly to the value passed. Declaration public void SetExactSize(int capacity) Parameters Type Name Description Int32 capacity The desired size. Remarks The method removes or appends blocks onto the end of the array to reach the desired size. The method will also adjust the length of the final block if necessary. ToByteArray() Assembles the blocks referenced by the array into a contiguous byte array. Declaration public byte[] ToByteArray() Returns Type Description Byte [] A contiguous byte array. TruncateTo(Int32) Removes blocks from the and of the array array such that only those blocks necessary to achieve the specified capacity remain. Declaration public void TruncateTo(int capacity) Parameters Type Name Description Int32 capacity The desired capacity in bytes. Remarks The method does nothing if the requested capacity is larger than the current size of the blocks. Operators Implicit(Block[] to BlockArray) Implicit cast from and array of Blocks into a BlockArray. Declaration public static implicit operator BlockArray(Block[] blocks) Parameters Type Name Description Block [] blocks The array of blocks to be converted. Returns Type Description BlockArray The BlockArray ."
  },
  "neonsdk/api/Neon.Common.ByteEncoding.html": {
    "href": "neonsdk/api/Neon.Common.ByteEncoding.html",
    "title": "Class ByteEncoding | NeonSDK documentation",
    "keywords": "Class ByteEncoding Implements a text encoding that simply reads and writes bytes without any changes. This corresponds to the Windows codepage 1252 . Inheritance Object Encoding ByteEncoding Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public class ByteEncoding : Encoding, ICloneable Properties Instance Returns a ByteEncoding instance. Declaration public static ByteEncoding Instance { get; } Property Value Type Description ByteEncoding Methods GetByteCount(Char[], Int32, Int32) Declaration public override int GetByteCount(char[] chars, int index, int count) Parameters Type Name Description Char [] chars Int32 index Int32 count Returns Type Description Int32 Overrides Encoding.GetByteCount(Char[], Int32, Int32) GetBytes(Char[], Int32, Int32, Byte[], Int32) Declaration public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) Parameters Type Name Description Char [] chars Int32 charIndex Int32 charCount Byte [] bytes Int32 byteIndex Returns Type Description Int32 Overrides Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32) GetCharCount(Byte[], Int32, Int32) Declaration public override int GetCharCount(byte[] bytes, int index, int count) Parameters Type Name Description Byte [] bytes Int32 index Int32 count Returns Type Description Int32 Overrides Encoding.GetCharCount(Byte[], Int32, Int32) GetChars(Byte[], Int32, Int32, Char[], Int32) Declaration public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) Parameters Type Name Description Byte [] bytes Int32 byteIndex Int32 byteCount Char [] chars Int32 charIndex Returns Type Description Int32 Overrides Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32) GetMaxByteCount(Int32) Declaration public override int GetMaxByteCount(int charCount) Parameters Type Name Description Int32 charCount Returns Type Description Int32 Overrides Encoding.GetMaxByteCount(Int32) GetMaxCharCount(Int32) Declaration public override int GetMaxCharCount(int byteCount) Parameters Type Name Description Int32 byteCount Returns Type Description Int32 Overrides Encoding.GetMaxCharCount(Int32)"
  },
  "neonsdk/api/Neon.Common.ByteUnits.html": {
    "href": "neonsdk/api/Neon.Common.ByteUnits.html",
    "title": "Class ByteUnits | NeonSDK documentation",
    "keywords": "Class ByteUnits Converts a size string with optional units into a count. K or KB 1,000 Ki or kiB 1,024 M or MB 1000000 Mi or MiB 1,048,576 G or GB 1,000,000,000 Gi or GiB 1,073,741,824 T or TB 1,000,000,000,000 Ti or TiB 1,099,511,627,776 P or PB 1,000,000,000,000,000 Pi or PiB 1,125,899,906,842,624 E or EB 1,000,000,000,000,000,000‬ Ei or EiB 1,152,921,504,606,846,976‬ Inheritance Object ByteUnits Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class ByteUnits Fields ExaBytes One PB: 1,000,000,000,000,000 Declaration public const decimal ExaBytes = 1000000000000000000M Field Value Type Description Decimal ExbiBytes One PiB: 1,152,921,504,606,846,976‬ (2^60) Declaration public const decimal ExbiBytes = 1152921504606846976M Field Value Type Description Decimal GibiBytes One GiB: 1,073,741,824 (2^30) Declaration public const decimal GibiBytes = 1073741824M Field Value Type Description Decimal GigaBytes One GB: 1,000,000,000 Declaration public const decimal GigaBytes = 1000000000M Field Value Type Description Decimal KibiBytes One KiB: 1,024 (2^10) Declaration public const decimal KibiBytes = 1024M Field Value Type Description Decimal KiloBytes One KB: 1,000 Declaration public const decimal KiloBytes = 1000M Field Value Type Description Decimal MebiBytes One MiB: 1,048,576 (2^20) Declaration public const decimal MebiBytes = 1048576M Field Value Type Description Decimal MegaBytes One MB: 1,000,000 Declaration public const decimal MegaBytes = 1000000M Field Value Type Description Decimal PebiBytes One PiB: 1,125,899,906,842,624 (2^50) Declaration public const decimal PebiBytes = 1125899906842624M Field Value Type Description Decimal PetaBytes One PB: 1,000,000,000,000 Declaration public const decimal PetaBytes = 1000000000000000M Field Value Type Description Decimal TebiBytes The constant 1,099,511,627,776 (2^40) Declaration public const decimal TebiBytes = 1099511627776M Field Value Type Description Decimal TeraBytes The constant 1,000,000,000 Declaration public const decimal TeraBytes = 1000000000000M Field Value Type Description Decimal Methods Humanize(Decimal, Boolean, Boolean, Boolean) Humanizes the size passed into a string using appropriate units. This uses power-of-10 based units by default but you can switch to power-of-2 units by passing powerOfTwo as true . Declaration public static string Humanize(decimal size, bool powerOfTwo = false, bool spaceBeforeUnit = true, bool removeByteUnit = false) Parameters Type Name Description Decimal size The size. Boolean powerOfTwo Optionally returns a power-of-2 based unit. Boolean spaceBeforeUnit Optionally excludes a space between the value and unit (this defaults to true . Boolean removeByteUnit Optionally strip any trailing \"B\" from the unit string. For example when this is set, a decimal value of 1000 will return 1K instead of 1KB . Returns Type Description String The converted string. Parse(String) Parses a size and returns a decimal . Declaration public static decimal Parse(string text) Parameters Type Name Description String text The value being parsed. Returns Type Description Decimal The parsed value. Exceptions Type Condition FormatException Thrown if the value cannot be parsed. ToByteString(Decimal) Converts a size to a string using byte units. Declaration public static string ToByteString(decimal size) Parameters Type Name Description Decimal size The size. Returns Type Description String The size in bytes. ToEB(Decimal) Converts a size to a string using EB units. Declaration public static string ToEB(decimal size) Parameters Type Name Description Decimal size The size. Returns Type Description String The size in EB. ToEiB(Decimal) Converts a size to a string using EiB units. Declaration public static string ToEiB(decimal size) Parameters Type Name Description Decimal size The size. Returns Type Description String The size in EiB. ToGB(Decimal) Converts a size to a string using GB units. Declaration public static string ToGB(decimal size) Parameters Type Name Description Decimal size The size. Returns Type Description String The size in GB. ToGiB(Decimal) Converts a size to a string using GiB units. Declaration public static string ToGiB(decimal size) Parameters Type Name Description Decimal size The size. Returns Type Description String The size in GiB. ToKB(Decimal) Converts a size to a string using KB units. Declaration public static string ToKB(decimal size) Parameters Type Name Description Decimal size The size. Returns Type Description String The size in KB. ToKiB(Decimal) Converts a size to a string using KiB units. Declaration public static string ToKiB(decimal size) Parameters Type Name Description Decimal size The size. Returns Type Description String The size in KiB. ToMB(Decimal) Converts a size to a string using MB units. Declaration public static string ToMB(decimal size) Parameters Type Name Description Decimal size The size. Returns Type Description String The size in MB. ToMiB(Decimal) Converts a size to a string using MiB units. Declaration public static string ToMiB(decimal size) Parameters Type Name Description Decimal size The size. Returns Type Description String The size in MiB. ToPB(Decimal) Converts a size to a string using PB units. Declaration public static string ToPB(decimal size) Parameters Type Name Description Decimal size The size. Returns Type Description String The size in PB. ToPiB(Decimal) Converts a size to a string using PiB units. Declaration public static string ToPiB(decimal size) Parameters Type Name Description Decimal size The size. Returns Type Description String The size in PiB. ToTB(Decimal) Converts a size to a string using TB units. Declaration public static string ToTB(decimal size) Parameters Type Name Description Decimal size The size. Returns Type Description String The size in TB. ToTiB(Decimal) Converts a size to a string using TiB units. Declaration public static string ToTiB(decimal size) Parameters Type Name Description Decimal size The size. Returns Type Description String The size in TiB. TryParse(String, out Decimal) Parses a floating point count string that may include one of the optional unit suffixes described here ByteUnits . Declaration public static bool TryParse(string input, out decimal value) Parameters Type Name Description String input The input string. Decimal value Returns as the output value. Returns Type Description Boolean true on success"
  },
  "neonsdk/api/Neon.Common.CommandLine.html": {
    "href": "neonsdk/api/Neon.Common.CommandLine.html",
    "title": "Class CommandLine | NeonSDK documentation",
    "keywords": "Class CommandLine Performs common operations on application a DOS or Linux command line. Inheritance Object CommandLine Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public sealed class CommandLine Remarks Command lines may consist of zero or more items. Items that begin with the dash (-) character are considered to be command line options. Items that begin with an at sign (@) can be considered to be response files, and all other items are considered to be command line arguments. note The \" - \" and \" -- \" items (without an option name are considered arguments, not options. The static ExpandFiles(String[]) method can be used to process response files specified in a command line. Response files are specified by prepending a &apos;@' character to the name of a text file and then treating each line of the file as a command line item. The static ExpandWildcards(String) method can be used to expand file names with wildcard characters into the set of actual files that match the pattern. The CommandLine class can also handles parsing of items as command line options. -<option name>[=<value>] will be parsed into name/value pairs and will be available for lookup via the string keyed indexer. Options that specify no value will be assigned an empty string value. note Command line option names are case sensitive. The class will also make all command line items available via the integer keyed indexer which will return items based on their position on the command line and also via the Items property. Command line items that are not command, are available via the Arguments property. Options can be looked up via the GetOption(String, String) and GetOptionValues(String) overrides. CommandLine also supports the definition of long and short forms of options with optional default values using the DefineOption(String[]) method. This associates one or more option names with an optional default value. You can use this easily implement the short and long forms of options as well as to centralize the specification of option default values. var commandLine = new CommandLine(args); commandLine.DefineOption(\"-q\", \"--quiet\"); commandLine.DefineOption(\"-k\", \"--key\").Default = \"none\"; // These calls both return the option value for \"-q\" or \"--quiet\". // Since no default value was set, the default value will be the // empty string. commandLine.GetOption(\"-q\"); commandLine.GetOption(\"--quiet\"); // These calls both return the option value for \"-k\" or \"--key\". // The default value will be \"none\". commandLine.GetOption(\"-k\"); commandLine.GetOption(\"--key\"); note This class assumes that the position of command line options doesn't matter, which is somewhat simplistic. In particular, the Shift(Int32, String) method actually relocates all of the options to the beginning of the shifted command line. Constructors CommandLine(Object[]) Constructs an instance optionally expanding any response files specified in the arguments passed. Declaration public CommandLine(params object[] args) Parameters Type Name Description Object [] args The optional command line arguments. Properties Arguments Returns the array of command line values (items that are not command line options). Declaration public string[] Arguments { get; } Property Value Type Description String [] HasHelpOption Determines if the --help command line option is present. Declaration public bool HasHelpOption { get; } Property Value Type Description Boolean true if the --help help option is present. Item[Int32] Returns an item from the command line based on its position. Declaration public string this[int index] { get; } Parameters Type Name Description Int32 index The zero-based position of the desired argument. Property Value Type Description String The argument string. Items Returns the array of command line arguments (including both command line options and values). Declaration public string[] Items { get; } Property Value Type Description String [] Options Returns the command line options as a dictionary of option name/value tuples. Declaration public Dictionary<string, string> Options { get; } Property Value Type Description Dictionary < String , String > Methods DefineOption(String[]) Adds an option definition to the command line and returns the definition so its default value may be set if desired. Declaration public CommandLine.OptionDefinition DefineOption(params string[] names) Parameters Type Name Description String [] names The option names (e.g. the short and long form). Returns Type Description CommandLine.OptionDefinition The CommandLine.OptionDefinition . Remarks You can use this easily implement the short and long forms of options as well as to centralize the specification of option default values. var commandLine = new CommandLine(args); commandLine.DefineOption(\"-q\", \"--quiet\"); commandLine.DefineOption(\"-k\", \"--key\").Default = \"none\"; // These calls both return the option value for \"-q\" or \"--quiet\". // Since no default value was set, the default value will be the // empty string. commandLine.GetOption(\"-q\"); commandLine.GetOption(\"--quiet\"); // These calls both return the option value for \"-k\" or \"--key\". // The default value will be \"none\". commandLine.GetOption(\"-k\"); commandLine.GetOption(\"--key\"); ExpandFiles(String[]) Expands the command line by processing items beginning with &apos;@' as input files. Declaration public static string[] ExpandFiles(string[] args) Parameters Type Name Description String [] args The command line arguments. Returns Type Description String [] The set of expanded items. Remarks Command line items will be assumed to specify a text file name after the &apos;@'. This file will be read and each non-empty line of text will be inserted as a command line parameter. Lines of text whose first non-whitespace character is a pound sign (#) will be ignored as comments. Command line parameters may also span multiple lines by beginning the parameter with a line of text begininning with \"{{\" and finishing it with a line of text containing \"}}\". In this case, the command line parameter will be set to the text between the {{...}} with any CRLF sequences replaced by a single space. Here's an example: # This is a comment and will be ignored -param1=aaa -param2=bbb {{ -param3=hello world }} This will be parsed as three command line parameters: -param1=aaa , -param2=bbb , and -param3=hello world Exceptions Type Condition IOException Thrown if there's a problem opening an &quot;@\" input file. FormatException Thrown if there's an error parsing an &quot;@\" input file. ExpandWildcards(String) Checks the argument passed for wildcards and expands them into the appopriate set of matching file names. Declaration public static string[] ExpandWildcards(string path) Parameters Type Name Description String path The file path potentially including wildcards. Returns Type Description String [] The set of matching file names. Format(Object[]) Formats an array of objects into a form suitable for passing to a process on the command line by adding double quotes around any values with embedded spaces. Declaration public static string Format(params object[] args) Parameters Type Name Description Object [] args The arguments to be formatted. Returns Type Description String the formatted string. Exceptions Type Condition FormatException Thrown if any of the arguments contain double quote or any other invalid characters. GetArguments(Int32) Enumerates the command line arguments beginning at the specified index. Declaration public IEnumerable<string> GetArguments(int startIndex = 0) Parameters Type Name Description Int32 startIndex The index of the first argument to be returned. Returns Type Description IEnumerable < String > The enumerated arguments. GetFlag(String) Determines whether an option is present on the command line. Declaration public bool GetFlag(string optionName) Parameters Type Name Description String optionName The case sensitive option name (including the leading dashes ( - ). Returns Type Description Boolean The option value if present, the specified default value otherwise. GetOption(String, String) Returns the value associated with a command line option if the option was present on the command line otherwise, the specified default value will be returned. Declaration public string GetOption(string optionName, string def = null) Parameters Type Name Description String optionName The case sensitive option name (including the leading dashes ( - ). String def The default value. Returns Type Description String The option value if present, the specified default value otherwise. Remarks If the optionName was included in a previous DefineOption(String[]) call, then all aliases for the option will be searched. If the option is not present on the command line and def is null , then the default defined default value will be returned otherwise def will override the definition. GetOptionValues(String) Returns all of the values a command line option that appears multiple times in the command. Declaration public string[] GetOptionValues(string optionName) Parameters Type Name Description String optionName The case sensitive option name (including the leading dashes ( - ). Returns Type Description String [] The array of values found sorted in the same order thney appear in the command line. Remarks note Only command line options that actually specify a value using the colon (=) syntax are returned by this method. If the optionName was included in a previous DefineOption(String[]) call, then all aliases for the option will be searched. HasOption(String) Determines if an option was present on the command line. Declaration public bool HasOption(string optionName) Parameters Type Name Description String optionName The case sensitive option name (including the leading dashes ( - ). Returns Type Description Boolean true if the option is present. Remarks If the optionName was included in a previous DefineOption(String[]) call, then all aliases for the option will be searched. Parse(String) Parses the argument string passed into a CommandLine instance, dealing with quoted parameters, etc. Declaration public static CommandLine Parse(string input) Parameters Type Name Description String input The argument string. Returns Type Description CommandLine The parsed CommandLine . Preprocess(Dictionary<String, String>, Regex) Preprocesses the command line by using PreprocessReader to replace any environment variable, profile, or secret references like <password:MY-PASSWORD$gt; in the command line arguments. note IMPORTANT: You must register an IProfileClient implementation with ServiceContainer for this to work. Declaration public CommandLine Preprocess(Dictionary<string, string> variables = null, Regex variableRegex = null) Parameters Type Name Description Dictionary < String , String > variables Optionally specifies variables to be incuded in the preprocessing. Regex variableRegex Optionally specifies the regular expression that will be used to locate and process any variable references. This defaults to AngleVariableExpansionRegex but may be set to any expressions supported by PreprocessReader . Returns Type Description CommandLine A new CommandLine including any changes. Shift(Int32, String) Returns a new CommandLine which includes all of the command line options and the arguments starting at the position passed to the end of the command line, essentially shifting arguments to the left. Declaration public CommandLine Shift(int position, string splitter = \"--\") Parameters Type Name Description Int32 position The index of the first argument to be included in the result. String splitter The optional argument used to ensure that we're only shifting the left side of a command line. This defaults to \"--\" but may be set to null or the empty string to disable this behavior. Returns Type Description CommandLine The new CommandLine . Split(String, Boolean) Splits the command line into two parts, the command line to the left of the first specified item (defaults to \"--\" ) and the command line to the right of it. Declaration public (CommandLine Left, CommandLine Right) Split(string splitter = \"--\", bool addSplitterToRight = false) Parameters Type Name Description String splitter The split item (defaults to \"--\" ). Boolean addSplitterToRight Optionally specifies that the split item should be included in the right command line returned. Returns Type Description (T1, T2) < CommandLine , CommandLine > A tuple with Left and Right properties. Remarks note The Left command line will return with a copy of the original option definitions. note If there is no split item present, then Right will be null . StartsWithArgs(String[]) Determines whether the command line starts with the specified arguments. Declaration public bool StartsWithArgs(params string[] args) Parameters Type Name Description String [] args The non- null argument strings. Returns Type Description Boolean true if the command is prefxed with the specified arguments. Remarks note The argument comparison is case sensitive. ToString() Renders the command line as a string suitable for presenting to a process or a command line shell. Arguments that include spaces will be enclosed in double quotes. Declaration public override string ToString() Returns Type Description String The command line string. Overrides Object.ToString()"
  },
  "neonsdk/api/Neon.Common.CommandLine.OptionDefinition.html": {
    "href": "neonsdk/api/Neon.Common.CommandLine.OptionDefinition.html",
    "title": "Class CommandLine.OptionDefinition | NeonSDK documentation",
    "keywords": "Class CommandLine.OptionDefinition Associates one or more option names with a default value. Inheritance Object CommandLine.OptionDefinition Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public class OptionDefinition Constructors OptionDefinition(IEnumerable<String>) Constructor. Declaration public OptionDefinition(IEnumerable<string> names) Parameters Type Name Description IEnumerable < String > names The associated option names. Properties Default The option's default value or the empty string. Declaration public string Default { get; set; } Property Value Type Description String Names Returns the array of associated option names. Declaration public string[] Names { get; } Property Value Type Description String []"
  },
  "neonsdk/api/Neon.Common.CpuArchitecture.html": {
    "href": "neonsdk/api/Neon.Common.CpuArchitecture.html",
    "title": "Enum CpuArchitecture | NeonSDK documentation",
    "keywords": "Enum CpuArchitecture Enumerates the known CPU architectures. Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public enum CpuArchitecture Fields Name Description amd32 32-bit AMD/Intel. amd64 64-bit AMD/Intel. arm32 32-bit ARM. arm64 64-bit ARM. unknown The CPU architecture is not known. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Common.Credentials.html": {
    "href": "neonsdk/api/Neon.Common.Credentials.html",
    "title": "Class Credentials | NeonSDK documentation",
    "keywords": "Class Credentials Used to persist credentials. Inheritance Object Credentials Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public class Credentials Remarks Two forms of credentials are currently supported: a standalone security token or API key or the combination of a username and password. Constructors Credentials() Constructor. Declaration public Credentials() Properties HasToken Returns true if the credentials hold a Token . Declaration [JsonIgnore] [YamlIgnore] public bool HasToken { get; } Property Value Type Description Boolean HasUsernamePassword Returns true if the credentials hold a Username and Password . Declaration [JsonIgnore] [YamlIgnore] public bool HasUsernamePassword { get; } Property Value Type Description Boolean Password The password (use in conjunction with Username ). Declaration [JsonProperty(PropertyName = \"Password\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"password\", ApplyNamingConventions = false)] public string Password { get; set; } Property Value Type Description String Token The security token. Declaration [JsonProperty(PropertyName = \"Token\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"token\", ApplyNamingConventions = false)] public string Token { get; set; } Property Value Type Description String Username The username (use in conjunction with Password ). Declaration [JsonProperty(PropertyName = \"Username\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"username\", ApplyNamingConventions = false)] public string Username { get; set; } Property Value Type Description String Methods FromToken(String) Constructs credentials from a token. Declaration public static Credentials FromToken(string token) Parameters Type Name Description String token The token. Returns Type Description Credentials The Credentials . FromUserPassword(String, String) Constructs credentials from a token. Declaration public static Credentials FromUserPassword(string username, string password) Parameters Type Name Description String username The username. String password The password. Returns Type Description Credentials The Credentials ."
  },
  "neonsdk/api/Neon.Common.DateTimeExtensions.html": {
    "href": "neonsdk/api/Neon.Common.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | NeonSDK documentation",
    "keywords": "Class DateTimeExtensions DateTime extensions. Inheritance Object DateTimeExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class DateTimeExtensions Methods RoundDown(DateTime, TimeSpan) Rounds a DateTime down to the nearest specified interval, like: var date = new DateTime(2010, 02, 05, 10, 35, 25, 450); // 2010/02/05 10:35:25 var roundedDown = date.RoundDown(TimeSpan.FromMinutes(15)); // 2010/02/05 10:30:00 Declaration public static DateTime RoundDown(this DateTime dt, TimeSpan interval) Parameters Type Name Description DateTime dt The datetime to be rounded. TimeSpan interval The time interval to be rounded to. Returns Type Description DateTime RoundToNearest(DateTime, TimeSpan) Rounds a DateTime to the nearest specified interval, like: var date = new DateTime(2010, 02, 05, 10, 35, 25, 450); // 2010/02/05 10:35:25 var roundedToNearest = date.RoundToNearest(TimeSpan.FromMinutes(15)); // 2010/02/05 10:30:00 Declaration public static DateTime RoundToNearest(this DateTime dt, TimeSpan interval) Parameters Type Name Description DateTime dt The datetime to be rounded. TimeSpan interval The time interval to be rounded to. Returns Type Description DateTime RoundUp(DateTime, TimeSpan) Rounds a DateTime up to the nearest specified interval, like: var date = new DateTime(2010, 02, 05, 10, 35, 25, 450); // 2010/02/05 10:35:25 var roundedUp = date.RoundUp(TimeSpan.FromMinutes(15)); // 2010/02/05 10:45:00 Declaration public static DateTime RoundUp(this DateTime dt, TimeSpan interval) Parameters Type Name Description DateTime dt The datetime to be rounded. TimeSpan interval The time interval to be rounded to. Returns Type Description DateTime ToUnixEpochMilliseconds(DateTime) Converts the DateTime into the number of milliseconds since the Unix Epoc (midnight 1-1-1070 UTC). Declaration public static long ToUnixEpochMilliseconds(this DateTime time) Parameters Type Name Description DateTime time The time being converted. Returns Type Description Int64 The Unix time in milliseconds. ToUnixEpochNanoseconds(DateTime) Converts the DateTime into the number of neonseconds since the Unix Epoc (midnight 1-1-1070 UTC). Declaration public static long ToUnixEpochNanoseconds(this DateTime time) Parameters Type Name Description DateTime time The time being converted. Returns Type Description Int64 The Unix time in naonseconds."
  },
  "neonsdk/api/Neon.Common.EnumExtensions.html": {
    "href": "neonsdk/api/Neon.Common.EnumExtensions.html",
    "title": "Class EnumExtensions | NeonSDK documentation",
    "keywords": "Class EnumExtensions Enum extensions. Inheritance Object EnumExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class EnumExtensions Methods ToMemberString(Enum) Converts an enumeration value into a string, using the EnumMemberAttribute value if one was specified for the value in the enumeration type definition otherwise the default enumeration value name will be returned. Declaration public static string ToMemberString(this Enum value) Parameters Type Name Description Enum value The enumeration value to be converted. Returns Type Description String The member or default string value. Remarks This is useful because ToString() ignores any EnumMemberAttribute attributes."
  },
  "neonsdk/api/Neon.Common.EnvironmentParser.html": {
    "href": "neonsdk/api/Neon.Common.EnvironmentParser.html",
    "title": "Class EnvironmentParser | NeonSDK documentation",
    "keywords": "Class EnvironmentParser Handles parsing of environment variables by default or optionally variables from a custom source. This has built-in methods for parsing: int , long , double , TimeSpan , string and enum variables as well as mechanisms to parse custom types. note This class logs details about parsed variables. By default, these logs include actual value that could not be parsed. This may not be desirable for variables defining secrets. Pass redact: true for these cases. When debugging, it's useful to ignore redact arguments and include these values in any logged events anyway. You can accomplish this by setting the NEON_REDACT_OVERRIDE=1 environment variable. IMPORTANT: Never set NEON_REDACT_OVERRIDE=1 for production. Inheritance Object EnvironmentParser Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public class EnvironmentParser Constructors EnvironmentParser(ILogger, EnvironmentParser.VariableSource) Constructor. Declaration public EnvironmentParser(ILogger logger = null, EnvironmentParser.VariableSource source = null) Parameters Type Name Description ILogger logger Optionally specifies the logger where parsing errors will be logged. EnvironmentParser.VariableSource source Optionally specifies an alternative variable source. This defaults to retrieving environment variables. Methods Get(String, Boolean, Boolean, EnvironmentParser.Validator<Boolean>) Attempts to parse an environment variable as a Boolean , writting messages to the associated logger if one was passed to the constructor. Declaration public bool Get(string variable, bool defaultInput, bool required = false, EnvironmentParser.Validator<bool> validator = null) Parameters Type Name Description String variable The variable name. Boolean defaultInput The default value. Boolean required Optionally specifies that the variable is required to exist. EnvironmentParser.Validator < Boolean > validator Optional validation function to be called to verify that the parsed variable value is valid. This should return null for valid values and an error message for invalid ones. Returns Type Description Boolean The parsed value. Exceptions Type Condition KeyNotFoundException Thrown if the variable does not exists and required = true . FormatException Thrown if the variable could not be parsed or the validator returned an error. Get(String, Double, Boolean, EnvironmentParser.Validator<Double>) Attempts to parse an environment variable as an Double , writting messages to the associated logger if one was passed to the constructor. Declaration public double Get(string variable, double defaultInput, bool required = false, EnvironmentParser.Validator<double> validator = null) Parameters Type Name Description String variable The variable name. Double defaultInput The default value. Boolean required Optionally specifies that the variable is required to exist. EnvironmentParser.Validator < Double > validator Optional validation function to be called to verify that the parsed variable value is valid. This should return null for valid values and an error message for invalid ones. Returns Type Description Double The parsed value. Exceptions Type Condition KeyNotFoundException Thrown if the variable does not exists and required = true . FormatException Thrown if the variable could not be parsed or the validator returned an error. Get(String, Int32, Boolean, EnvironmentParser.Validator<Int32>) Attempts to parse an environment variable as an Int32 , writting messages to the associated logger if one was passed to the constructor. Declaration public int Get(string variable, int defaultInput, bool required = false, EnvironmentParser.Validator<int> validator = null) Parameters Type Name Description String variable The variable name. Int32 defaultInput The default value. Boolean required Optionally specifies that the variable is required to exist. EnvironmentParser.Validator < Int32 > validator Optional validation function to be called to verify that the parsed variable value is valid. This should return null for valid values and an error message for invalid ones. Returns Type Description Int32 The parsed value. Exceptions Type Condition KeyNotFoundException Thrown if the variable does not exists and required = true . FormatException Thrown if the variable could not be parsed or the validator returned an error. Get(String, Int64, Boolean, EnvironmentParser.Validator<Int64>) Attempts to parse an environment variable as a Int64 , writting messages to the associated logger if one was passed to the constructor. Declaration public long Get(string variable, long defaultInput, bool required = false, EnvironmentParser.Validator<long> validator = null) Parameters Type Name Description String variable The variable name. Int64 defaultInput The default value. Boolean required Optionally specifies that the variable is required to exist. EnvironmentParser.Validator < Int64 > validator Optional validation function to be called to verify that the parsed variable value is valid. This should return null for valid values and an error message for invalid ones. Returns Type Description Int64 The parsed value. Exceptions Type Condition KeyNotFoundException Thrown if the variable does not exists and required = true . FormatException Thrown if the variable could not be parsed or the validator returned an error. Get(String, String, Boolean, EnvironmentParser.Validator<String>, Boolean) Attempts to parse an environment variable as a String , writting messages to the associated logger if one was passed to the constructor. Declaration public string Get(string variable, string defaultInput, bool required = false, EnvironmentParser.Validator<string> validator = null, bool redact = false) Parameters Type Name Description String variable The variable name. String defaultInput The default value. Boolean required Optionally specifies that the variable is required to exist. EnvironmentParser.Validator < String > validator Optional validation function to be called to verify that the parsed variable value is valid. This should return null for valid values and an error message for invalid ones. Boolean redact Optionally redact log output of the variable. Returns Type Description String The parsed value. Remarks note This class logs details about parsed variables. By default, these logs include actual value that could not be parsed. This may not be desirable for variables defining secrets. Pass redact: true for these cases. When debugging, it's useful to ignore redact arguments and include these values in any logged events anyway. You can accomplish this by setting the NEON_REDACT_OVERRIDE=1 environment variable. IMPORTANT: Never set NEON_REDACT_OVERRIDE=1 for production. Exceptions Type Condition KeyNotFoundException Thrown if the variable does not exists and required = true . FormatException Thrown if the variable could not be parsed or the validator returned an error. Get(String, TimeSpan, Boolean, EnvironmentParser.Validator<TimeSpan>) Attempts to parse an environment variable as a TimeSpan , writting messages to the associated logger if one was passed to the constructor. Declaration public TimeSpan Get(string variable, TimeSpan defaultInput, bool required = false, EnvironmentParser.Validator<TimeSpan> validator = null) Parameters Type Name Description String variable The variable name. TimeSpan defaultInput The default value. Boolean required Optionally specifies that the variable is required to exist. EnvironmentParser.Validator < TimeSpan > validator Optional validation function to be called to verify that the parsed variable value is valid. This should return null for valid values and an error message for invalid ones. Returns Type Description TimeSpan The parsed value. Exceptions Type Condition KeyNotFoundException Thrown if the variable does not exists and required = true . FormatException Thrown if the variable could not be parsed or the validator returned an error. Get<TEnum>(String, TEnum, Boolean, EnvironmentParser.Validator<TEnum>) Attempts to parse an environment variable as an eumeration, writting messages to the associated logger if one was passed to the constructor. Declaration public TEnum Get<TEnum>(string variable, TEnum defaultInput, bool required = false, EnvironmentParser.Validator<TEnum> validator = null) where TEnum : struct, Enum Parameters Type Name Description String variable The variable name. TEnum defaultInput The default value. Boolean required Optionally specifies that the variable is required to exist. EnvironmentParser.Validator <TEnum> validator Optional validation function to be called to verify that the parsed variable value is valid. This should return null for valid values and an error message for invalid ones. Returns Type Description TEnum The parsed value. Type Parameters Name Description TEnum The desired enumeration type. Exceptions Type Condition KeyNotFoundException Thrown if the variable does not exists and required = true . FormatException Thrown if the variable could not be parsed or the validator returned an error. Parse<T>(String, String, EnvironmentParser.Parser<T>, Boolean, EnvironmentParser.Validator<T>, Boolean) Attempts to parse an environment variable as a T , writting messages to the associated logger if one was passed to the constructor. Declaration public T Parse<T>(string variable, string defaultInput, EnvironmentParser.Parser<T> parser, bool required = false, EnvironmentParser.Validator<T> validator = null, bool redact = false) Parameters Type Name Description String variable The variable name. String defaultInput The default value. EnvironmentParser.Parser <T> parser The parser function. Boolean required Optionally specifies that the variable is required to exist. EnvironmentParser.Validator <T> validator Optional validation function. Boolean redact Optionally redact log output of the variable. Returns Type Description T The parsed value. Type Parameters Name Description T The parsed output type. Remarks note This class logs details about parsed variables. By default, these logs include actual value that could not be parsed. This may not be desirable for variables defining secrets. Pass redact: true for these cases. When debugging, it's useful to ignore redact arguments and include these values in any logged events anyway. You can accomplish this by setting the NEON_REDACT_OVERRIDE=1 environment variable. IMPORTANT: Never set NEON_REDACT_OVERRIDE=1 for production. Exceptions Type Condition KeyNotFoundException Thrown if the variable does not exists and required = true . FormatException Thrown if the variable could not be parsed or the validator returned an error."
  },
  "neonsdk/api/Neon.Common.EnvironmentParser.Parser-1.html": {
    "href": "neonsdk/api/Neon.Common.EnvironmentParser.Parser-1.html",
    "title": "Delegate EnvironmentParser.Parser<T> | NeonSDK documentation",
    "keywords": "Delegate EnvironmentParser.Parser<T> Attempts to parse an environment variable as a specific type. Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public delegate bool Parser<T>(string input, out T value, out string error); Parameters Type Name Description String input The string to be parsed. T value Returns as the parsed value on success. String error Returns as the error message on failure. Returns Type Description Boolean true If the input was parsed successfully. Type Parameters Name Description T The output type."
  },
  "neonsdk/api/Neon.Common.EnvironmentParser.Validator-1.html": {
    "href": "neonsdk/api/Neon.Common.EnvironmentParser.Validator-1.html",
    "title": "Delegate EnvironmentParser.Validator<T> | NeonSDK documentation",
    "keywords": "Delegate EnvironmentParser.Validator<T> Validates that a parsed environment variable is valid. Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public delegate bool Validator<T>(T input); Parameters Type Name Description T input The input value. Returns Type Description Boolean Returns true if the input value is valid. Type Parameters Name Description T The parsed variable type."
  },
  "neonsdk/api/Neon.Common.EnvironmentParser.VariableSource.html": {
    "href": "neonsdk/api/Neon.Common.EnvironmentParser.VariableSource.html",
    "title": "Delegate EnvironmentParser.VariableSource | NeonSDK documentation",
    "keywords": "Delegate EnvironmentParser.VariableSource Used for custom variable lookup implementation. This will be passed a variable name and should return the value as a string when the variable exists or null if it does not. Pass a custom implementation to the EnvironmentParser constructor when necessary. Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public delegate string VariableSource(string variable); Parameters Type Name Description String variable The variable name. Returns Type Description String The variable's value or null ."
  },
  "neonsdk/api/Neon.Common.ExceptionExtensions.html": {
    "href": "neonsdk/api/Neon.Common.ExceptionExtensions.html",
    "title": "Class ExceptionExtensions | NeonSDK documentation",
    "keywords": "Class ExceptionExtensions Exception extensions. Inheritance Object ExceptionExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class ExceptionExtensions Methods Contains<T>(Exception) Determines whether the exception has a specified type or was triggered by an underlying exception of a specified type. This is useful for checking whether an exception has a specific inner exception or whether an AggregateException was triggered with a specific exception type. Declaration public static bool Contains<T>(this Exception e) where T : Exception Parameters Type Name Description Exception e The exception being tested. Returns Type Description Boolean true if the exception was triggered by an exception of type T . Type Parameters Name Description T The target exception type. Find(Exception, Type) Searches an exception for an underlying exception of a specific type. This is useful for checking whether an exception has a specific inner exception or whether an AggregateException was triggered with a specific exception type. Declaration public static Exception Find(this Exception e, Type exceptionType) Parameters Type Name Description Exception e The exception being tested. Type exceptionType The target exception type. Returns Type Description Exception The underlying exception or null . Find<T>(Exception) Searches an exception for an underlying exception of a specific type specified as a generic type parameter. This is useful for checking whether an exception has a specific inner exception or whether an AggregateException was triggered with a specific exception type. Declaration public static T Find<T>(this Exception e) where T : Exception Parameters Type Name Description Exception e The exception being tested. Returns Type Description T The underlying exception or null . Type Parameters Name Description T The target exception type. GetNonAggregateException(Exception) Examines the exception passed and if it's a AggregateException then the first inner exception will be returned. This is handy when you need to log the details of the underlying exception thrown by an async operation. Declaration public static Exception GetNonAggregateException(this Exception e) Parameters Type Name Description Exception e The exception. Returns Type Description Exception The underlying exception."
  },
  "neonsdk/api/Neon.Common.ExecuteException.html": {
    "href": "neonsdk/api/Neon.Common.ExecuteException.html",
    "title": "Class ExecuteException | NeonSDK documentation",
    "keywords": "Class ExecuteException Thrown by EnsureSuccess() if the executed command did not return a zero exit code. Inheritance Object Exception ExecuteException Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public class ExecuteException : Exception, ISerializable Constructors ExecuteException(ExecuteResponse, String) Constructs an instance from a ExecuteResponse . Declaration public ExecuteException(ExecuteResponse response, string message) Parameters Type Name Description ExecuteResponse response The command response. String message The error message. ExecuteException(Int32, String, String, String) Constructs an instance explictly passing the exit code and output streams. Declaration public ExecuteException(int exitCode, string message, string outputText = null, string errorText = null) Parameters Type Name Description Int32 exitCode The program exit code. String message The error message. String outputText Optionally specifies the program standard output text. String errorText Optionally specifies the program standard error text. Properties ErrorText Returns the command standard error text. Declaration public string ErrorText { get; } Property Value Type Description String ExitCode Returns the command exit code. Declaration public int ExitCode { get; } Property Value Type Description Int32 OutputText Returns the command standard output text. Declaration public string OutputText { get; } Property Value Type Description String Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Common.ExecuteResponse.html": {
    "href": "neonsdk/api/Neon.Common.ExecuteResponse.html",
    "title": "Class ExecuteResponse | NeonSDK documentation",
    "keywords": "Class ExecuteResponse Holds the process exit code and captured standard output from a process launched by any of the ExecuteCapture(String, Object[], Nullable<TimeSpan>, Process, String, Dictionary<String, String>, Action<String>, Action<String>, TextReader, Encoding, Action<Process>) related methods. Inheritance Object ExecuteResponse Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public class ExecuteResponse Constructors ExecuteResponse(Int32, String, String) Constuctor. Declaration public ExecuteResponse(int exitCode, string outputText = null, string errorText = null) Parameters Type Name Description Int32 exitCode The exit code. String outputText Optionally specifies the output text. String errorText Optionally specifies the error text. Properties AllText Returns the captured standard output and error stream text from the process. Declaration public string AllText { get; } Property Value Type Description String ErrorText Returns the captured standard error stream text from the process. Declaration public string ErrorText { get; } Property Value Type Description String ExitCode Returns the process exit code. Declaration public int ExitCode { get; } Property Value Type Description Int32 OutputText Returns the captured standard output stream text from the process. Declaration public string OutputText { get; } Property Value Type Description String Methods EnsureSuccess() Ensure that the command returned a zero exit code. Declaration public ExecuteResponse EnsureSuccess() Returns Type Description ExecuteResponse The response for fluent-style chaining. Exceptions Type Condition ExecuteException Thrown if the exit code isn't zero."
  },
  "neonsdk/api/Neon.Common.GlobPattern.html": {
    "href": "neonsdk/api/Neon.Common.GlobPattern.html",
    "title": "Class GlobPattern | NeonSDK documentation",
    "keywords": "Class GlobPattern Implements a very simple glob matcher inspired by the GitHub .gitignore patterns described here . Inheritance Object GlobPattern Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public class GlobPattern Remarks The current implementation is somewhat limited compared to that for .gitignore : Only \" \" and \" \" wildcard chacacters are allowed. \"!\" and \"[..]\" are not recognized. \"\" matches anything except for \"/\" . \"**\" matches zero or more directories. note This class works only for file paths using either Linux style forward slashes (/) or Windows style backslashes by converting any backslashes to forward slashes in IsMatch(String) before performing the match. The Regex handles forward slash matching only. Properties Regex Returns the Regex that can be used to match strings against the glob. Declaration public Regex Regex { get; } Property Value Type Description Regex RegexPattern Returns the glob as a regular expression string. Declaration public string RegexPattern { get; } Property Value Type Description String Methods IsMatch(String) Matches a string against the glob. Declaration public bool IsMatch(string input) Parameters Type Name Description String input The value to be matched. Returns Type Description Boolean true if the parameter matches the glob. Parse(String, Boolean) Parses a GlobPattern from a pattern string. Declaration public static GlobPattern Parse(string pattern, bool caseInsensitive = false) Parameters Type Name Description String pattern The pattern. Boolean caseInsensitive Optionally uses case insensitive that matching. Returns Type Description GlobPattern The created GlobPattern . Exceptions Type Condition ArgumentNullException Thrown if the pattern is null or empty. FormatException Thrown if the pattern is invalid. ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() TryParse(String, out GlobPattern) Attempts to parse a case insensitive GlobPattern . Declaration public static bool TryParse(string pattern, out GlobPattern globPattern) Parameters Type Name Description String pattern The pattern string. GlobPattern globPattern Returns as the parsed GlobPattern . Returns Type Description Boolean true if the pattern was parsed successfully. TryParse(String, Boolean, out GlobPattern) Attempts to parse a GlobPattern where case sensitivity can be controlled. Declaration public static bool TryParse(string pattern, bool caseInsenstive, out GlobPattern globPattern) Parameters Type Name Description String pattern The pattern string. Boolean caseInsenstive Controls whether the mactching is case insensitive. GlobPattern globPattern Returns as the parsed GlobPattern . Returns Type Description Boolean true if the pattern was parsed successfully."
  },
  "neonsdk/api/Neon.Common.HexDumpOption.html": {
    "href": "neonsdk/api/Neon.Common.HexDumpOption.html",
    "title": "Enum HexDumpOption | NeonSDK documentation",
    "keywords": "Enum HexDumpOption Enumerates the option flags for the HexDump(Byte[], Int32, Int32, Int32, HexDumpOption) and HexDump(Byte[], Int32, HexDumpOption) > methods. Namespace : Neon.Common Assembly : Neon.Common.dll Syntax [Flags] public enum HexDumpOption Fields Name Description None Enable no special formatting options. ShowAll Enables all formatting options. ShowAnsi Include ANSI characters after the HEX bytes on each line. ShowOffsets Include the byte offset of the first byte of each line. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Common.html": {
    "href": "neonsdk/api/Neon.Common.html",
    "title": "Namespace Neon.Common | NeonSDK documentation",
    "keywords": "Namespace Neon.Common Classes AppDomainExtensions Implements AppDomain extension methods. Block Used to reference a block in a BlockArray or BlockStream . BlockArray Implements an array of Block instances. ByteEncoding Implements a text encoding that simply reads and writes bytes without any changes. This corresponds to the Windows codepage 1252 . ByteUnits Converts a size string with optional units into a count. K or KB 1,000 Ki or kiB 1,024 M or MB 1000000 Mi or MiB 1,048,576 G or GB 1,000,000,000 Gi or GiB 1,073,741,824 T or TB 1,000,000,000,000 Ti or TiB 1,099,511,627,776 P or PB 1,000,000,000,000,000 Pi or PiB 1,125,899,906,842,624 E or EB 1,000,000,000,000,000,000‬ Ei or EiB 1,152,921,504,606,846,976‬ CommandLine Performs common operations on application a DOS or Linux command line. CommandLine.OptionDefinition Associates one or more option names with a default value. Credentials Used to persist credentials. DateTimeExtensions DateTime extensions. EnumExtensions Enum extensions. EnvironmentParser Handles parsing of environment variables by default or optionally variables from a custom source. This has built-in methods for parsing: int , long , double , TimeSpan , string and enum variables as well as mechanisms to parse custom types. note This class logs details about parsed variables. By default, these logs include actual value that could not be parsed. This may not be desirable for variables defining secrets. Pass redact: true for these cases. When debugging, it's useful to ignore redact arguments and include these values in any logged events anyway. You can accomplish this by setting the NEON_REDACT_OVERRIDE=1 environment variable. IMPORTANT: Never set NEON_REDACT_OVERRIDE=1 for production. ExceptionExtensions Exception extensions. ExecuteException Thrown by EnsureSuccess() if the executed command did not return a zero exit code. ExecuteResponse Holds the process exit code and captured standard output from a process launched by any of the ExecuteCapture(String, Object[], Nullable<TimeSpan>, Process, String, Dictionary<String, String>, Action<String>, Action<String>, TextReader, Encoding, Action<Process>) related methods. GlobPattern Implements a very simple glob matcher inspired by the GitHub .gitignore patterns described here . HttpClientExtensions HttpClient extension methods, mostly related to easily supporting custom headers. IEnumerableExtensions IEnumerable<T> extension methods. IOExtensions Implements I/O related class extensions. IStaticDirectoryExtensions Extension methods for IStaticDirectory . LabelSelector Implements label related utilities. LabelSelector<TItem> Implements a Kubernetes compatible general purpose label-based selector mechanism that can select a set of items from a collection based on the set of labels assigned to each item. This class supports some simple fixed query methods as well as a simple text-based query language. This is suitable for operations like selecting Kubernetes related items by labels or annotations. NeonAssemblyExtensions Implements custom Assembly extension methods. NeonHelper Provides global common utilities and state. NewtonsoftExtensions Newtonsoft JSON Linq extensions. NotReadyException Indicates that a component is not ready to perform an operation but may become ready in the future. ProgramExitException Used to signal that a program or tool should exit. ProgramRunner Used to implement unit tests on command line tools by simulating their execution on a thread rather than forking the tool as a process. This is makes debugging easier and also deals with the fact that unit tests may leave orphan processes running. RandomExtensions Random class extension methods. ReflectionExtensions Reflection related extension methods. SemanticVersion Implements a semantic version as defined by the Semantic Versioning 2.0.0 specification. This is similar to the base Version class but includes support for pre-release identifiers as well as build information. ServiceContainer This class combines the capabilities of a IServiceCollection and IServiceProvider into a single object that implements the combined IServiceContainer interface. StringBuilderExtensions System class extensions. StringExtensions String extension methods. Stub Used in situations where an innocous parameter is required to disambiguate constructor or method overloads. TaskExtensions Task extension methods. TimeSpanExtensions TimeSpan extensions. ToolException Typically thrown when a tool or subprocess is executed an fails. WeakEventController Implements a weak event listener that allows the owner to be garbage collected if it is the only remaining link is an event handler. YamlDotNetExtensions YamlDotNet related class extensions. Structs Stub.Value An empty value structure. Interfaces ILabeled Used by LabelSelector<TItem> to retrieve the label dictionary for a specific item. Labels are simply key/value pairs assigned to an object and LabelSelector<TItem> can be used to select items based on their assigned labels. IServiceContainer This interface combines the capabilities of IServiceCollection and IServiceProvider to define an object that can dynamically add and remove service implementations. See the default implementation ServiceCollection for more information. note Implementations must be thread-safe. Enums CpuArchitecture Enumerates the known CPU architectures. HexDumpOption Enumerates the option flags for the HexDump(Byte[], Int32, Int32, Int32, HexDumpOption) and HexDump(Byte[], Int32, HexDumpOption) > methods. LabelSelectorOptions LabelSelector<TItem> related options. NetFramework Enumerates the known .NET Framework implementations. StaticZipOptions Enumerates the ZIP options for Zip(IStaticDirectory, Stream, String, SearchOption, StaticZipOptions) and Zip(IStaticDirectory, String, String, SearchOption, StaticZipOptions) . These may be bitwise ORed togther in various combinations. TriState Used to specify a tristate boolean with values: true , false , and default . WindowsEdition Enumerates the known Windows Editions. WindowsFeatureStatus Enumerates the possible states of an optional Windows feature. Delegates EnvironmentParser.Parser<T> Attempts to parse an environment variable as a specific type. EnvironmentParser.Validator<T> Validates that a parsed environment variable is valid. EnvironmentParser.VariableSource Used for custom variable lookup implementation. This will be passed a variable name and should return the value as a string when the variable exists or null if it does not. Pass a custom implementation to the EnvironmentParser constructor when necessary. ProgramEntrypoint Synchronous main entry point method signature. ProgramEntrypointAsync Asynchronous main entry point method signature."
  },
  "neonsdk/api/Neon.Common.HttpClientExtensions.html": {
    "href": "neonsdk/api/Neon.Common.HttpClientExtensions.html",
    "title": "Class HttpClientExtensions | NeonSDK documentation",
    "keywords": "Class HttpClientExtensions HttpClient extension methods, mostly related to easily supporting custom headers. Inheritance Object HttpClientExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class HttpClientExtensions Methods DeleteAsync(HttpClient, String, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a DELETE request to a string URI. Declaration public static async Task<HttpResponseMessage> DeleteAsync(this HttpClient client, string requestUri, HttpContent content = null, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . DeleteAsync(HttpClient, Uri, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a DELETE request to a Uri . Declaration public static async Task<HttpResponseMessage> DeleteAsync(this HttpClient client, Uri requestUri, HttpContent content = null, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . DeleteSafeAsync(HttpClient, String, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a DELETE request to a string URI ensuring that the operation succeeded. Declaration public static async Task<HttpResponseMessage> DeleteSafeAsync(this HttpClient client, string requestUri, HttpContent content = null, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. DeleteSafeAsync(HttpClient, Uri, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a DELETE request to a Uri ensuring that the operation succeeded. Declaration public static async Task<HttpResponseMessage> DeleteSafeAsync(this HttpClient client, Uri requestUri, HttpContent content = null, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. GetAsync(HttpClient, String, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a GET request to a specified Uri . Declaration public static async Task<HttpResponseMessage> GetAsync(this HttpClient client, string requestUri, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . GetAsync(HttpClient, Uri, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a GET request to the specified string URI. Declaration public static async Task<HttpResponseMessage> GetAsync(this HttpClient client, Uri requestUri, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . GetByteArrayAsync(HttpClient, String, ArgDictionary) Sends a GET to a specified string URI and returns the response body as a byte array. Declaration public static async Task<byte[]> GetByteArrayAsync(this HttpClient client, string requestUri, ArgDictionary headers = null) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. ArgDictionary headers Optional request headers. Returns Type Description Task < Byte []> The response byte array. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . GetByteArrayAsync(HttpClient, Uri, ArgDictionary) Sends a GET to a specified Uri and returns the response body as a byte array. Declaration public static async Task<byte[]> GetByteArrayAsync(this HttpClient client, Uri requestUri, ArgDictionary headers = null) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. ArgDictionary headers Optional request headers. Returns Type Description Task < Byte []> The response byte array. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . GetByteArraySafeAsync(HttpClient, String, ArgDictionary) Sends a GET to a specified string URI and returns the response body as a byte array ensuring that the operation succeeded. Declaration public static async Task<byte[]> GetByteArraySafeAsync(this HttpClient client, string requestUri, ArgDictionary headers = null) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. ArgDictionary headers Optional request headers. Returns Type Description Task < Byte []> The response byte array. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. GetByteArraySafeAsync(HttpClient, Uri, ArgDictionary) Sends a GET to a specified Uri and returns the response body as a byte array ensuring that the operation succeeded. Declaration public static async Task<byte[]> GetByteArraySafeAsync(this HttpClient client, Uri requestUri, ArgDictionary headers = null) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. ArgDictionary headers Optional request headers. Returns Type Description Task < Byte []> The response byte array. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. GetSafeAsync(HttpClient, String, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a GET request to a specified Uri ensuring that the operation succeeded. Declaration public static async Task<HttpResponseMessage> GetSafeAsync(this HttpClient client, string requestUri, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. GetSafeAsync(HttpClient, Uri, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a GET request to the specified string URI ensuring that the operation succeeded. Declaration public static async Task<HttpResponseMessage> GetSafeAsync(this HttpClient client, Uri requestUri, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. GetStreamAsync(HttpClient, String, ArgDictionary) Sends a GET to a specified string URI and returns the response body as a Stream . Declaration public static async Task<Stream> GetStreamAsync(this HttpClient client, string requestUri, ArgDictionary headers = null) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. ArgDictionary headers Optional request headers. Returns Type Description Task < Stream > The response stream. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . GetStreamAsync(HttpClient, Uri, ArgDictionary) Sends a GET to a specified Uri and returns the response body as a Stream . Declaration public static async Task<Stream> GetStreamAsync(this HttpClient client, Uri requestUri, ArgDictionary headers = null) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. ArgDictionary headers Optional request headers. Returns Type Description Task < Stream > The response stream. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . GetStreamSafeAsync(HttpClient, String, ArgDictionary) Sends a GET to a specified string URI and returns the response body as a Stream ensuring that the operation succeeded. Declaration public static async Task<Stream> GetStreamSafeAsync(this HttpClient client, string requestUri, ArgDictionary headers = null) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. ArgDictionary headers Optional request headers. Returns Type Description Task < Stream > The response stream. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. GetStreamSafeAsync(HttpClient, Uri, ArgDictionary) Sends a GET to a specified Uri and returns the response body as a Stream ensuring that the operation succeeded. Declaration public static async Task<Stream> GetStreamSafeAsync(this HttpClient client, Uri requestUri, ArgDictionary headers = null) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. ArgDictionary headers Optional request headers. Returns Type Description Task < Stream > The response stream. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. GetStringAsync(HttpClient, String, ArgDictionary) Sends a GET request to a string URI and returns the response as a string. Declaration public static async Task<string> GetStringAsync(this HttpClient client, string requestUri, ArgDictionary headers = null) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. ArgDictionary headers Optional request headers. Returns Type Description Task < String > The response string. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . GetStringAsync(HttpClient, Uri, ArgDictionary) Sends a GET request to a Uri and returns the response as a string. Declaration public static async Task<string> GetStringAsync(this HttpClient client, Uri requestUri, ArgDictionary headers = null) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. ArgDictionary headers Optional request headers. Returns Type Description Task < String > The response string. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . GetStringSafeAsync(HttpClient, String, ArgDictionary) Sends a GET request to a string URI and returns the response as a string ensuring that the operation succeeded. Declaration public static async Task<string> GetStringSafeAsync(this HttpClient client, string requestUri, ArgDictionary headers = null) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. ArgDictionary headers Optional request headers. Returns Type Description Task < String > The response string. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. GetStringSafeAsync(HttpClient, Uri, ArgDictionary) Sends a GET request to a Uri and returns the response as a string ensuring that the operation succeeded. Declaration public static async Task<string> GetStringSafeAsync(this HttpClient client, Uri requestUri, ArgDictionary headers = null) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. ArgDictionary headers Optional request headers. Returns Type Description Task < String > The response string. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. GetToFileSafeAsync(HttpClient, String, String, ArgDictionary) Downloads the contents of a string URI to a file. Declaration public static async Task<HttpResponseMessage> GetToFileSafeAsync(this HttpClient client, string requestUri, string outputPath, ArgDictionary headers = null) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. String outputPath The path to the output file. ArgDictionary headers Optional request headers. Returns Type Description Task < HttpResponseMessage > The HttpResponseMessage making things like response headers available. GetToFileSafeAsync(HttpClient, Uri, String, ArgDictionary) Downloads the contents of a string URI to a file. Declaration public static async Task<HttpResponseMessage> GetToFileSafeAsync(this HttpClient client, Uri requestUri, string outputPath, ArgDictionary headers = null) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. String outputPath The path to the output file. ArgDictionary headers Optional request headers. Returns Type Description Task < HttpResponseMessage > The HttpResponseMessage making things like response headers available. GetToStreamSafeAsync(HttpClient, String, Stream, ArgDictionary) Downloads the contents of a string URI to a stream. Declaration public static async Task<HttpResponseMessage> GetToStreamSafeAsync(this HttpClient client, string requestUri, Stream output, ArgDictionary headers = null) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. Stream output The stream where the URI contents will be written. ArgDictionary headers Optional request headers. Returns Type Description Task < HttpResponseMessage > The HttpResponseMessage making things like response headers available. GetToStreamSafeAsync(HttpClient, Uri, Stream, ArgDictionary) Downloads the contents of a URI to a stream. Declaration public static async Task<HttpResponseMessage> GetToStreamSafeAsync(this HttpClient client, Uri requestUri, Stream output, ArgDictionary headers = null) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. Stream output The stream where the URI contents will be written. ArgDictionary headers Optional request headers. Returns Type Description Task < HttpResponseMessage > The HttpResponseMessage making things like response headers available. HeadAsync(HttpClient, String, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a HEAD request to a string URI. Declaration public static async Task<HttpResponseMessage> HeadAsync(this HttpClient client, string requestUri, HttpContent content = null, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . HeadAsync(HttpClient, Uri, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a HEAD request to a Uri . Declaration public static async Task<HttpResponseMessage> HeadAsync(this HttpClient client, Uri requestUri, HttpContent content = null, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . HeadSafeAsync(HttpClient, String, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a HEAD request to a string URI ensuring that the operation succeeded. Declaration public static async Task<HttpResponseMessage> HeadSafeAsync(this HttpClient client, string requestUri, HttpContent content = null, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. HeadSafeAsync(HttpClient, Uri, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a HEAD request to a Uri ensuring that the operation succeeded. Declaration public static async Task<HttpResponseMessage> HeadSafeAsync(this HttpClient client, Uri requestUri, HttpContent content = null, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. OptionsAsync(HttpClient, String, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a OPTIONS request to a string URI. Declaration public static async Task<HttpResponseMessage> OptionsAsync(this HttpClient client, string requestUri, HttpContent content = null, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . OptionsAsync(HttpClient, Uri, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a OPTIONS request to a Uri . Declaration public static async Task<HttpResponseMessage> OptionsAsync(this HttpClient client, Uri requestUri, HttpContent content = null, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . OptionsSafeAsync(HttpClient, String, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a OPTIONS request to a string URI ensuring that the operation succeeded. Declaration public static async Task<HttpResponseMessage> OptionsSafeAsync(this HttpClient client, string requestUri, HttpContent content = null, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. OptionsSafeAsync(HttpClient, Uri, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a OPTIONS request to a Uri ensuring that the operation succeeded. Declaration public static async Task<HttpResponseMessage> OptionsSafeAsync(this HttpClient client, Uri requestUri, HttpContent content = null, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. PatchAsync(HttpClient, String, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a PATCH request to a string URI. Declaration public static async Task<HttpResponseMessage> PatchAsync(this HttpClient client, string requestUri, HttpContent content, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . PatchAsync(HttpClient, Uri, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a PATCH request to a Uri . Declaration public static async Task<HttpResponseMessage> PatchAsync(this HttpClient client, Uri requestUri, HttpContent content, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . PatchSafeAsync(HttpClient, String, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a PATCH request to a string URI ensuring that the operation succeeded. Declaration public static async Task<HttpResponseMessage> PatchSafeAsync(this HttpClient client, string requestUri, HttpContent content, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. PatchSafeAsync(HttpClient, Uri, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a PATCH request to a Uri ensuring that the operation succeeded. Declaration public static async Task<HttpResponseMessage> PatchSafeAsync(this HttpClient client, Uri requestUri, HttpContent content, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. PostAsync(HttpClient, String, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a POST request to a string URI. Declaration public static async Task<HttpResponseMessage> PostAsync(this HttpClient client, string requestUri, HttpContent content, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . PostAsync(HttpClient, Uri, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a POST request to a Uri . Declaration public static async Task<HttpResponseMessage> PostAsync(this HttpClient client, Uri requestUri, HttpContent content, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . PostSafeAsync(HttpClient, String, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a POST request to a string URI ensuring that the operation succeeded. Declaration public static async Task<HttpResponseMessage> PostSafeAsync(this HttpClient client, string requestUri, HttpContent content, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. PostSafeAsync(HttpClient, Uri, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a POST request to a Uri ensuring that the operation succeeded. Declaration public static async Task<HttpResponseMessage> PostSafeAsync(this HttpClient client, Uri requestUri, HttpContent content, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. PutAsync(HttpClient, String, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a PUT request to a string URI. Declaration public static async Task<HttpResponseMessage> PutAsync(this HttpClient client, string requestUri, HttpContent content, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . PutAsync(HttpClient, Uri, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a PUT request to a Uri . Declaration public static async Task<HttpResponseMessage> PutAsync(this HttpClient client, Uri requestUri, HttpContent content, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . PutSafeAsync(HttpClient, String, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a PUT request to a string URI ensuring that the operation succeeded. Declaration public static async Task<HttpResponseMessage> PutSafeAsync(this HttpClient client, string requestUri, HttpContent content, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. String requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. PutSafeAsync(HttpClient, Uri, HttpContent, ArgDictionary, HttpCompletionOption, CancellationToken) Sends a PUT request to a Uri ensuring that the operation succeeded. Declaration public static async Task<HttpResponseMessage> PutSafeAsync(this HttpClient client, Uri requestUri, HttpContent content, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. Uri requestUri The request URI. HttpContent content The content to be sent to the server. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. SendAsync(HttpClient, HttpRequestMessage, ArgDictionary, HttpCompletionOption, CancellationToken) Sends an HttpRequestMessage . Declaration public static async Task<HttpResponseMessage> SendAsync(this HttpClient client, HttpRequestMessage request, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. HttpRequestMessage request The request. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . InvalidOperationException Thrown when the request has already been sent by the HttpClient class. SendSafeAsync(HttpClient, HttpRequestMessage, ArgDictionary, HttpCompletionOption, CancellationToken) Sends an HttpRequestMessage ensuring that the operation succeeded. Declaration public static async Task<HttpResponseMessage> SendSafeAsync(this HttpClient client, HttpRequestMessage request, ArgDictionary headers = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpClient client The client. HttpRequestMessage request The request. ArgDictionary headers Optional request headers. HttpCompletionOption completionOption Optionally specifies when the operation should complete (as soon as a response is available or after reading the whole response content). CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Exceptions Type Condition ArgumentNullException Thrown when a required argument is null . InvalidOperationException Thrown when the request has already been sent by the HttpClient class. SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code."
  },
  "neonsdk/api/Neon.Common.IEnumerableExtensions.html": {
    "href": "neonsdk/api/Neon.Common.IEnumerableExtensions.html",
    "title": "Class IEnumerableExtensions | NeonSDK documentation",
    "keywords": "Class IEnumerableExtensions IEnumerable<T> extension methods. Inheritance Object IEnumerableExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class IEnumerableExtensions Methods IsEmpty<T>(IEnumerable<T>, Func<T, Boolean>) Determines whether an IEnumerable is empty. Declaration public static bool IsEmpty<T>(this IEnumerable<T> items, Func<T, bool> predicate = null) Parameters Type Name Description IEnumerable <T> items The items to be tested. Func <T, Boolean > predicate Optional item selector. Returns Type Description Boolean true if items is empty. Type Parameters Name Description T The enumeration value type. SelectRandom<T>(IEnumerable<T>, Int32) Selects one or more randomly selected items from an enumeration. Declaration public static IEnumerable<T> SelectRandom<T>(this IEnumerable<T> items, int count = 1) Parameters Type Name Description IEnumerable <T> items The source items. Int32 count The number of values to be returned (defaults to 1 . Returns Type Description IEnumerable <T> The randomly selected items as an enumeration. Type Parameters Name Description T The value type. Exceptions Type Condition ArgumentException Thrown if count is not positive or if items does not have at least count items."
  },
  "neonsdk/api/Neon.Common.ILabeled.html": {
    "href": "neonsdk/api/Neon.Common.ILabeled.html",
    "title": "Interface ILabeled | NeonSDK documentation",
    "keywords": "Interface ILabeled Used by LabelSelector<TItem> to retrieve the label dictionary for a specific item. Labels are simply key/value pairs assigned to an object and LabelSelector<TItem> can be used to select items based on their assigned labels. Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public interface ILabeled Methods GetLabels() Returns the label dictionary for the instance. These are simply key/value pairs where the key is the label name. You may return null to indicate that there are not labels. Declaration IDictionary<string, string> GetLabels() Returns Type Description IDictionary < String , String > The label dictionary or null . Remarks Label names may be treated as case sensitive or insentive based on how the underlying dictionary returned was constructed. Generally though, labels are considered to be case insensitive so you should probably use InvariantCultureIgnoreCase when constructing your dictionaries."
  },
  "neonsdk/api/Neon.Common.IOExtensions.html": {
    "href": "neonsdk/api/Neon.Common.IOExtensions.html",
    "title": "Class IOExtensions | NeonSDK documentation",
    "keywords": "Class IOExtensions Implements I/O related class extensions. Inheritance Object IOExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class IOExtensions Methods DeflateTo(Stream, Stream) Uses deflate to compress a source to a target stream. Declaration public static void DeflateTo(this Stream source, Stream target) Parameters Type Name Description Stream source The source stream. Stream target The target stream. GunzipTo(Stream, Stream) Uses GZIP to decompress a source to a target stream. Declaration public static void GunzipTo(this Stream source, Stream target) Parameters Type Name Description Stream source The source stream. Stream target The target stream. GzipTo(Stream, Stream) Uses GZIP to compress a source to a target stream. Declaration public static void GzipTo(this Stream source, Stream target) Parameters Type Name Description Stream source The source stream. Stream target The target stream. InflateTo(Stream, Stream) Uses deflate to decompress a source to a target stream. Declaration public static void InflateTo(this Stream source, Stream target) Parameters Type Name Description Stream source The source stream. Stream target The target stream. Lines(TextReader, Boolean) Returns an enumerator that returns the lines of text from a TextReader . Declaration public static IEnumerable<string> Lines(this TextReader reader, bool ignoreBlank = false) Parameters Type Name Description TextReader reader The reader. Boolean ignoreBlank Optionally skip empty lines or lines with oly whitespace. Returns Type Description IEnumerable < String > The IEnumerable<T> . ReadBytes(Stream, Int32) Reads the byte array from the current position, advancing the position past the value read. Declaration public static byte[] ReadBytes(this Stream stream, int cb) Parameters Type Name Description Stream stream The stream. Int32 cb The number of bytes to read. Returns Type Description Byte [] The byte array. Note that the array returned may have a length less than the size requested if the end of the file has been reached. ReadToEnd(Stream) Reads all bytes from the current position to the end of the stream. Declaration public static byte[] ReadToEnd(this Stream stream) Parameters Type Name Description Stream stream The source stream. Returns Type Description Byte [] The byte array. ReadToEndAsync(Stream) Asynchronously reads all bytes from the current position to the end of the stream. Declaration public static async Task<byte[]> ReadToEndAsync(this Stream stream) Parameters Type Name Description Stream stream The source stream. Returns Type Description Task < Byte []> The byte array. Write(Stream, Byte[]) Writes a byte array to a stream. Declaration public static void Write(this Stream stream, byte[] bytes) Parameters Type Name Description Stream stream The stream. Byte [] bytes The byte array. WriteAsync(Stream, Byte[]) Asynchronously writes a byte array to a stream. Declaration public static async Task WriteAsync(this Stream stream, byte[] bytes) Parameters Type Name Description Stream stream The stream. Byte [] bytes The byte array. Returns Type Description Task The tracking Task ."
  },
  "neonsdk/api/Neon.Common.IServiceContainer.html": {
    "href": "neonsdk/api/Neon.Common.IServiceContainer.html",
    "title": "Interface IServiceContainer | NeonSDK documentation",
    "keywords": "Interface IServiceContainer This interface combines the capabilities of IServiceCollection and IServiceProvider to define an object that can dynamically add and remove service implementations. See the default implementation ServiceCollection for more information. note Implementations must be thread-safe. Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public interface IServiceContainer : IServiceCollection, IList<ServiceDescriptor>, ICollection<ServiceDescriptor>, IEnumerable<ServiceDescriptor>, IEnumerable, IServiceProvider Extension Methods NeonBlazorExtensions.AddNeonBlazor(IServiceCollection) IEnumerableExtensions.SelectRandom<T>(IEnumerable<T>, Int32) IEnumerableExtensions.IsEmpty<T>(IEnumerable<T>, Func<T, Boolean>) TailwindExtensions.AddTailwind(IServiceCollection)"
  },
  "neonsdk/api/Neon.Common.IStaticDirectoryExtensions.html": {
    "href": "neonsdk/api/Neon.Common.IStaticDirectoryExtensions.html",
    "title": "Class IStaticDirectoryExtensions | NeonSDK documentation",
    "keywords": "Class IStaticDirectoryExtensions Extension methods for IStaticDirectory . Inheritance Object IStaticDirectoryExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class IStaticDirectoryExtensions Methods Zip(IStaticDirectory, Stream, String, SearchOption, StaticZipOptions) Writes a ZIP file to a stream, including the selected files from the static directory. Declaration public static void Zip(this IStaticDirectory directory, Stream zipStream, string searchPattern = null, SearchOption searchOptions = SearchOption.TopDirectoryOnly, StaticZipOptions zipOptions = StaticZipOptions.None) Parameters Type Name Description IStaticDirectory directory The static directory instance. Stream zipStream The output stream. String searchPattern Optionally specifies a file name pattern using standard file system wildcards like [*] and [?] . This defaults to including all files. SearchOption searchOptions Optionally perform a recursive search. This defaults to TopDirectoryOnly . StaticZipOptions zipOptions Additional options that control things like whether the files are zipped within the parent directory or whether the files are assumed to contain UTF-8 text and that Windows style CRLF line endings are to be converted to Linux compatible LF endings. You can combine options by bitwise ORing them. This defaults to None . Remarks note The current implementation loads the files into memory so this isn't really suitable for zipping very large files. Zip(IStaticDirectory, String, String, SearchOption, StaticZipOptions) Creates a ZIP file, including the selected files from the static directory. Declaration public static void Zip(this IStaticDirectory directory, string zipPath, string searchPattern = null, SearchOption searchOptions = SearchOption.TopDirectoryOnly, StaticZipOptions zipOptions = StaticZipOptions.None) Parameters Type Name Description IStaticDirectory directory The static directory instance. String zipPath Path to the output ZIP file. String searchPattern Optionally specifies a file name pattern using standard file system wildcards like [*] and [?] . This defaults to including all files. SearchOption searchOptions Optionally perform a recursive search. This defaults to TopDirectoryOnly . StaticZipOptions zipOptions Additional options that control things like whether the files are zipped within the parent directory or whether the files are assumed to contain UTF-8 text and that Windows style CRLF line endings are to be converted to Linux compatible LF endings. You can combine options by bitwise ORing them. This defaults to None ."
  },
  "neonsdk/api/Neon.Common.LabelSelector.html": {
    "href": "neonsdk/api/Neon.Common.LabelSelector.html",
    "title": "Class LabelSelector | NeonSDK documentation",
    "keywords": "Class LabelSelector Implements label related utilities. Inheritance Object LabelSelector Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class LabelSelector Methods ValidateLabelKey(String) Validates a label key. Declaration public static void ValidateLabelKey(string labelKey) Parameters Type Name Description String labelKey The label key. Exceptions Type Condition FormatException Thrown if the key is not valid. ValidateLabelValue(String) Validates a label value. Declaration public static void ValidateLabelValue(string labelValue) Parameters Type Name Description String labelValue The label value. Exceptions Type Condition FormatException Thrown if the key is not valid."
  },
  "neonsdk/api/Neon.Common.LabelSelector-1.html": {
    "href": "neonsdk/api/Neon.Common.LabelSelector-1.html",
    "title": "Class LabelSelector<TItem> | NeonSDK documentation",
    "keywords": "Class LabelSelector<TItem> Implements a Kubernetes compatible general purpose label-based selector mechanism that can select a set of items from a collection based on the set of labels assigned to each item. This class supports some simple fixed query methods as well as a simple text-based query language. This is suitable for operations like selecting Kubernetes related items by labels or annotations. Inheritance Object LabelSelector<TItem> Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public class LabelSelector<TItem> where TItem : ILabeled Type Parameters Name Description TItem The underlying item type. Remarks This class supports Kubernetes style label selectors: Kubernetes: Labels and Selectors For this to work, your TItem type will need to implement the ILabeled interface and its GetLabels() which returns a string/string dictionary holding that items labels. Then you can construct a selector instance via LabelSelector<TItem> , passing your set of labeled items. Then you can call GetItemsWith(String) , GetItemsWithout(String) , and Select(String) to select items based on their labels and one ore more label conditions to be satisified. note Kubernetes labels are key/value pairs. Valid label keys have two segments: an optional prefix and name, separated by a slash (/) . The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-) , underscores ( ) , dots (.) , and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.) , not longer than 253 characters in total, followed by a slash (/) . If the prefix is omitted, the label Key is presumed to be private to the user. Automated system components (e.g. kube-scheduler, kube-controller-manager, kube-apiserver, kubectl, or other third-party automation) which add labels to end-user objects must specify a prefix. The kubernetes.io/ and k8s.io/ prefixes are reserved for Kubernetes core components. Valid label values must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]) with dashes (-) , underscores () , dots (.) , and alphanumerics between. Label Names: must conform to the Kubernetes standard and will be treated as case sensitive or insensitive based on how the underlying dictionary returned was constructed. Generally though, labels are considered to be case insensitive so you should probably use InvariantCultureIgnoreCase when constructing the dictionaries returned by your item's GetLabels() method. Label names must conform to the Kubernetes conventions by default but this can be relaxed by passing an option to the constructor. note Label Values: are considered to be case senstive by default but this can be customized via the constructor. note See Select(String) for a description of the label selector language. note You may use the static ValidateLabelKey(String) and ValidateLabelValue(String) methods to explicity confirm that label keys and values satisfy the Kubernetes conventions. Constructors LabelSelector(IEnumerable<TItem>, LabelSelectorOptions) Constructor. Declaration public LabelSelector(IEnumerable<TItem> items, LabelSelectorOptions options = LabelSelectorOptions.None) Parameters Type Name Description IEnumerable <TItem> items The set of items to be queries. null will treated as an empty set. LabelSelectorOptions options Optionally customize selector case sensitivity and other behaviors. Methods GetItemsWith(String) Returns the set of items including a specific label. Declaration public IEnumerable<TItem> GetItemsWith(string labelKey) Parameters Type Name Description String labelKey The desired label key. Returns Type Description IEnumerable <TItem> The set of items with the label. GetItemsWithout(String) Returns the set of items that do not include the label. Declaration public IEnumerable<TItem> GetItemsWithout(string labelKey) Parameters Type Name Description String labelKey The undesired label key. Returns Type Description IEnumerable <TItem> The set of items without the label. Select(String) Returns the set of items that satisfy a label selector. Declaration public IEnumerable<TItem> Select(string labelSelector) Parameters Type Name Description String labelSelector The label selector condistions(s). Returns Type Description IEnumerable <TItem> The set of items whose meet the query requirements. Remarks This class supports Kubernetes style label selectors: Kubernetes: Labels and Selectors Label selectors must include zero or more label conditions separated by commas. All label conditions must be satisfied for an item to be selected. The conditions are essentially AND-ed together. We'll support two basic types of label conditions: equality/inequality and set based. note A null or empty labelSelector simply returns all items. equality/inequality conditions: [label] = [value] [label] == [value] [label] != [value] The first two examples two compare label value equality and the last compares for inequality. Note that it is not currently possible to compare an empty or null string. set conditions: [label] in ([value1], [value2],,...) notin([value1], [value2],...) [label] ![label] The first example selects items if they have a label with any of the values listed and the second selects items that have the label that doesn't have any of the values. The last two examples select items when they have or don't have a label, regardless of its value. note The in and notin operators both require that the item have the target label for a match. note Case Sensitivity: Label name lookups are actually determined by the dictionary returned by each item. .NET string dictionaries are typically case sensitive by default but you can change this behavior by having your item implementations construct case insenstive dictionaries. By default, this class performs case insensitive comparisions for label values. You can override this by passing CaseInsensitiveValues to the LabelSelector(IEnumerable<TItem>, LabelSelectorOptions) constructor. note Label Name Constraints: Label keys are checked to ensure that they match Kubernetes conventions by default. You can override this by passing UnConstraintedLabels to the LabelSelector(IEnumerable<TItem>, LabelSelectorOptions) constructor. Label Value Constraints: Label values are also checked to ensure that they match Kubernetes conventions by default. This behavior can also be overriden by passing to the constructor. Exceptions Type Condition FormatException Thrown when the label selector is not valid."
  },
  "neonsdk/api/Neon.Common.LabelSelectorOptions.html": {
    "href": "neonsdk/api/Neon.Common.LabelSelectorOptions.html",
    "title": "Enum LabelSelectorOptions | NeonSDK documentation",
    "keywords": "Enum LabelSelectorOptions LabelSelector<TItem> related options. Namespace : Neon.Common Assembly : Neon.Common.dll Syntax [Flags] public enum LabelSelectorOptions Fields Name Description CaseInsensitiveValues Normally LabelSelector<TItem> matches label values using case sensitive comparisons. Use this to make the comparisons case insensitive. note Label name case sensitivity is determined by the the dictionaries returned by the item GetLabels() method. None No options are selected. UnConstraintedLabels LabelSelector<TItem> defaults to parsing label names and values to ensure that they are Kubernetes compliant. Use this to disable this so you can use arbitrary labels. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Common.NeonAssemblyExtensions.html": {
    "href": "neonsdk/api/Neon.Common.NeonAssemblyExtensions.html",
    "title": "Class NeonAssemblyExtensions | NeonSDK documentation",
    "keywords": "Class NeonAssemblyExtensions Implements custom Assembly extension methods. Inheritance Object NeonAssemblyExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class NeonAssemblyExtensions Methods GetExtensionMethodsFor(Assembly, Type, Boolean) Retrieves all of the extensions methods in an assembly targeting a specific type. note This doesn't currently support nested or generic target types. Declaration public static IEnumerable<MethodInfo> GetExtensionMethodsFor(this Assembly assembly, Type targetType, bool allowPrivate = false) Parameters Type Name Description Assembly assembly The source assembly. Type targetType The type being extended. Boolean allowPrivate Optionally specifies that only private methods are to be returned as well as public ones. Returns Type Description IEnumerable < MethodInfo > The extension methods. GetResourceFileSystem(Assembly, String) Returns an eumlated static file system that includes some or all of an assembly's embedded resources. This method returns the root IStaticDirectory for the file system. Declaration public static IStaticDirectory GetResourceFileSystem(this Assembly assembly, string resourcePrefix = null) Parameters Type Name Description Assembly assembly The target assembly. String resourcePrefix Specifies the resource name prefix to be used to identify the embedded resources to be included in the static file system. See the remarks for more information. Returns Type Description IStaticDirectory The root IStaticDirectory . Remarks This method maps Linux style paths (using forward not back slashes) to embedded resources in the assembly. Resources in .NET projects are embedded and named like: ASSEMBLY-NAMESPACE [ \".\" DIR ] \".\" RESOURCE-FILENAME where ASSEMBLY-NAME is the name of the source assembly, DIR optionally specifies the directoriea to the resource and RESOURCE-FILENAME specifies the name of the resource file. When a .NET project is built, any source files with build actions set to Embedded Resource will be included in the assembly using the naming convention described above. The ASSEMBLY-NAMESPACE will be set to the source projects default namespace and the DIR s will be set to the relative path from the project file to the source resource file. For example, if your project is structured like: my-project/ my-project.csproj top-level.txt resources/ resource1.dat resource2.dat tests/ test1.txt test2.txt samples/ sample1.txt sample2.txt and its default namespace is company.mproject , then the following resources embedded in your project assembly: company.my-project.top-level.txt company.my-project.resources.resource1.dat company.my-project.resources.resource2.dat company.my-project.resources.tests.test1.txt company.my-project.resources.tests.test2.txt company.my-project.resources.samples.sample1.txt company.my-project.resources.samples.sample2.txt By default, calling GetResourceFileSystem(Assembly, String) on your project assembly will return a IStaticDirectory with a directory structure holding all of the resources. The paths are mapped from the resource names by converting any dots except for the last one into forward slashes. / company/ my-project/ top-level.txt resources/ resource1.dat resource2.dat tests/ test1.txt test2.txt samples/ sample1.txt sample2.txt You can also pass an optional resource name prefix so that only a subset of the resources are included in the file system. For example, by passing company.my-project.resources , file system returned will look like: / resource1.dat resource2.dat tests/ test1.txt test2.txt samples/ sample1.txt sample2.txt RESOURCE NAMING AMBIGUITIES When creating the file system from resource names, it's possible to encounter situations where it's not possible to distingish between a a directory and a file name. For example: company.my-project.resources.resource1.dat Here are some possibilities: path is /company.my-project.resources.resource1 and the file name dat path is /company.my-project.resources and the file name resource1.dat path is /company.my-project and the file name .resources.resource1.dat There is really no way for this method to know what the original resource source files and directory paths were. To resolve this, we're going to assume that resource file names include a file extension with a single dot and that any additional dots will form the file's parent directory path. note All resource file names must include an extension to be loaded properly. If you need a file to be loaded without an extension , save the file with the special \". \" extension like test. . This method will remove that special extension when reading files with it. What this means is that your resource file names must include a file extension. So, file names like this are OK: schema.sql config.json You should avoid file names like: schema.1.sql and use something like a dash instead so that schema won't be considered to be part of the file's parent directory path: schema-1.sql"
  },
  "neonsdk/api/Neon.Common.NeonHelper.html": {
    "href": "neonsdk/api/Neon.Common.NeonHelper.html",
    "title": "Class NeonHelper | NeonSDK documentation",
    "keywords": "Class NeonHelper Provides global common utilities and state. Inheritance Object NeonHelper Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class NeonHelper Fields CR Ordinal value of an ASCII carriage return. Declaration public const int CR = 13 Field Value Type Description Int32 CRLF A string consisting of a CRLF sequence. Declaration public const string CRLF = \"\\r\\n\" Field Value Type Description String DateFormat100NsTZ Returns the date format string used for serialize dates with 100 nanosecond precision to strings like: 2018-06-05T14:30:13.000000Z Declaration public const string DateFormat100NsTZ = \"yyyy-MM-ddTHH:mm:ss.fffffffZ\" Field Value Type Description String DateFormat100NsTZOffset Returns the date format string used for serialize dates with 100 nanosecond precision to strings like: 2018-06-05T14:30:13.000000+00:00 Declaration public const string DateFormat100NsTZOffset = \"yyyy-MM-ddTHH:mm:ss.fffffff+00:00\" Field Value Type Description String DateFormatMicroTZ Returns the date format string used for serialize dates with microsecond precision to strings like: 2018-06-05T14:30:13.000000Z Declaration public const string DateFormatMicroTZ = \"yyyy-MM-ddTHH:mm:ss.ffffffZ\" Field Value Type Description String DateFormatMicroTZOffset Returns the date format string used for serialize dates with microsecond precision to strings like: 2018-06-05T14:30:13.000000+00:00 Declaration public const string DateFormatMicroTZOffset = \"yyyy-MM-ddTHH:mm:ss.ffffff+00:00\" Field Value Type Description String DateFormatTZ Returns the date format string used for serialize dates with millisecond precision to strings like: 2018-06-05T14:30:13.000Z Declaration public const string DateFormatTZ = \"yyyy-MM-ddTHH:mm:ss.fffZ\" Field Value Type Description String DateFormatTZOffset Returns the date format string used for serialize dates with millisecond precision to strings like: 2018-06-05T14:30:13.000+00:00 Declaration public const string DateFormatTZOffset = \"yyyy-MM-ddTHH:mm:ss.fff+00:00\" Field Value Type Description String ESC Ordinal value of an ASCII escape character. Declaration public const int ESC = 27 Field Value Type Description Int32 HT Ordinal value of an ASCII horizontal TAB. Declaration public const int HT = 9 Field Value Type Description Int32 JsonRelaxedSerializerSettings The global relaxed JSON serializer settings. These settings do not require that all source JSON properties match those defined by the type being deserialized. Declaration public static Lazy<JsonSerializerSettings> JsonRelaxedSerializerSettings Field Value Type Description Lazy < Newtonsoft.Json.JsonSerializerSettings > JsonStrictSerializerSettings The global strict JSON serializer settings. These settings do require that all source JSON properties match those defined by the type being deserialized. Declaration public static Lazy<JsonSerializerSettings> JsonStrictSerializerSettings Field Value Type Description Lazy < Newtonsoft.Json.JsonSerializerSettings > LF Ordinal value of an ASCII linefeed. Declaration public const int LF = 10 Field Value Type Description Int32 LineEnding Returns the native text line ending for the current environment. Declaration public static readonly string LineEnding Field Value Type Description String NeonKubeOtelCollectorUri The URI for Kubernetes Services deployed to namespaces for forwarding OTEL Collector log and trace information to the local Tempo installation or elsewhere. Declaration public const string NeonKubeOtelCollectorUri = \"http://grafana-agent-node.neon-monitor.svc.cluster.local:4317\" Field Value Type Description String NeonMetricsPrefix Returns the prefix to be used for Neon related Prometheus names. Declaration public const string NeonMetricsPrefix = \"neon.\" Field Value Type Description String NeonPublicBucketUri The URI for the public AWS S3 bucket where we persist cluster VM images and other things. Declaration public const string NeonPublicBucketUri = \"https://neon-public.s3.us-west-2.amazonaws.com\" Field Value Type Description String NeonSdkDevRegistry Identifies the development neonSDK container image registry. Declaration public const string NeonSdkDevRegistry = \"ghcr.io/neonrelease-dev\" Field Value Type Description String NeonSdkProdRegistry Identifies the production neonSDK container image registry. Declaration public const string NeonSdkProdRegistry = \"ghcr.io/neonrelease\" Field Value Type Description String TAB Ordinal value of an ASCII TAB character. Declaration public const int TAB = 9 Field Value Type Description Int32 TestModeFolderVar The environment variable used for unit testing that indicates that Neon.Service.NeonService should run in test mode and locate user test files in the folder specified by this variable (when set). Declaration public const string TestModeFolderVar = \"NF_TESTMODE_FOLDER\" Field Value Type Description String UnixEpoch Returns the Unix epoch time: 01-01-1970 (UTC). Declaration public static readonly DateTime UnixEpoch Field Value Type Description DateTime Properties CpuArchitecture Returns the current CPU architecture. Declaration public static CpuArchitecture CpuArchitecture { get; } Property Value Type Description CpuArchitecture DebugLogPath The fully qualified path to the file where the simple LogDebug(String) method will write debug lines. This defaults to debug-log.txt within the current user's home folder. You may change this to a different location. Declaration public static string DebugLogPath { get; set; } Property Value Type Description String DockerCli Returns the name of the Docker CLI execuable for the current platform. This will be the fully qualified pathj to docker.exe on Windows and just docker on Linux and OS/X. Declaration public static string DockerCli { get; } Property Value Type Description String The path to the Docker CLI or null when it couldn't be located. DockerComposeCli Returns the name of the Docker Compose CLI execuable for the current platform. This will be docker-compose.exe on Windows and just docker-compose on Linux and OS/x. Declaration public static string DockerComposeCli { get; } Property Value Type Description String FileWildcards Returns the characters used as wildcards for the current file system. Declaration public static char[] FileWildcards { get; } Property Value Type Description Char [] Framework Identifies the .NET runtime hosting the current process. Declaration public static NetFramework Framework { get; } Property Value Type Description NetFramework FrameworkDescription Returns the .NET runtime description. Declaration public static string FrameworkDescription { get; } Property Value Type Description String FrameworkVersion Returns the current .NET runtime version hosting the current process. Declaration public static SemanticVersion FrameworkVersion { get; } Property Value Type Description SemanticVersion HasElevatedPermissions Determines whether the current process is running with elevated permissions. This corresponds to running with administrator privileges for Windows or as the root user for Linux and OS/X. Declaration public static bool HasElevatedPermissions { get; } Property Value Type Description Boolean Exceptions Type Condition PlatformNotSupportedException Thrown for unsupported platforms. Is32BitBuild Returns true if the client was built as 32-bit. Declaration public static bool Is32BitBuild { get; } Property Value Type Description Boolean Is32BitOS Returns true for 32-bit operating systems. Declaration public static bool Is32BitOS { get; } Property Value Type Description Boolean Is64BitBuild Returns true if the application was built as 64-bit. Declaration public static bool Is64BitBuild { get; } Property Value Type Description Boolean Is64BitOS Returns true for 64-bit operating systems. Declaration public static bool Is64BitOS { get; } Property Value Type Description Boolean IsARM Returns true if the current process is runniong on an ARM processor. Declaration public static bool IsARM { get; } Property Value Type Description Boolean IsCI Returns true if the current process is running within a CI environment such as GitHub Actions. This checks for this environment variable: CI=true . Declaration public static bool IsCI { get; } Property Value Type Description Boolean IsDevWorkstation Indicates whether the current application is running on a developer workstation. This is determined by the presence of the DEV_WORKSTATION environment variable. Declaration public static bool IsDevWorkstation { get; } Property Value Type Description Boolean IsKubernetes Returns true if the current process is running as a container on Kubernetes. Declaration public static bool IsKubernetes { get; } Property Value Type Description Boolean IsLinux Returns true if the current process is running on a Linux variant operating system. Declaration public static bool IsLinux { get; } Property Value Type Description Boolean IsMaintainer Indicates whether the current user is a NEONFORGE maintainer. This is determined by the presence of the NF_MAINTAINER environment variable. Declaration public static bool IsMaintainer { get; } Property Value Type Description Boolean IsOSX Returns true if the current process is running on Mac OSX. Declaration public static bool IsOSX { get; } Property Value Type Description Boolean IsWindows Returns true if the current process is running on a Windows variant operating system. Declaration public static bool IsWindows { get; } Property Value Type Description Boolean JsonConverters Returns the list of Newtonsoft.Json.JsonConverter instances that will be automatically recognized by the JSON deserializers. This is initialized with converters for some common types like DateTime , TimeSpan , and Version . note IMPORTANT: You may customize this list but for that to have any impact, you must make the modifications very early in your application startup sequence, before any JSON serialization operations have been performed. Any changes made after this will be ignored. Declaration public static List<JsonConverter> JsonConverters { get; } Property Value Type Description List < Newtonsoft.Json.JsonConverter > MemoryMib Returns the system RAM in MiB. note For applications running in containers, this will return information about the RAM available to the container, not the host system RAM. Declaration public static long MemoryMib { get; } Property Value Type Description Int64 NeonSdkBranchRegistry Returns the appropriate public container neonSDK registry to be used for the git branch the assembly was built from. This returns NeonSdkProdRegistry for release branches and NeonSdkDevRegistry for all other branches. Declaration public static string NeonSdkBranchRegistry { get; } Property Value Type Description String OpenEditorHandler Used for implementing unit tests against the OpenEditor(String) method. OpenEditor(String) will call this action when it's non-null passing the file path, rather than actually opening the file in an editor. The handler can then simulate editing the file. Declaration public static Action<string> OpenEditorHandler { get; set; } Property Value Type Description Action < String > OSDescription Returns the operation system description. Declaration public static string OSDescription { get; } Property Value Type Description String ServiceContainer The root dependency injection service container used by Neon class libraries. and applications. Declaration public static ServiceContainer ServiceContainer { get; set; } Property Value Type Description ServiceContainer Remarks This instance implements both the IServiceCollection and IServiceProvider interfaces and supports adding, removing, and locating services over the lifetime of the application. This is more flexible than the default Microsoft injection pattern, where services are added to an IServiceCollection at startup and then a read-only snapshot is taken via a BuildServiceProvider() call that is used throughout the remaining application lifespan. This is implemented by a ServiceCollection by default. It is possible to replace this very early during application initialization but the default implementation should suffice for most purposes. UserHomeFolder Returns the path to the current user's HOME folder. Declaration public static string UserHomeFolder { get; } Property Value Type Description String UserNeonDevBuildFolder Returns the path to the development/build folder for NEONFORGE developers. This folder is used to hold build related files and is named .neondev/build under the current user's home folder. note This property ensures that the folder exists. Declaration public static string UserNeonDevBuildFolder { get; } Property Value Type Description String UserNeonDevFolder Returns the path to the development folder for NEONFORGE developers. This folder is used to hold build and test related files and is named .neondev under the current user's home folder. Related: UserNeonDevBuildFolder , UserNeonDevTestFolder note This property ensures that the folder exists. Declaration public static string UserNeonDevFolder { get; } Property Value Type Description String UserNeonDevTestFolder Returns the path to the development/build folder for NEONFORGE developers. This folder is used to hold unit test related files and is named .neondev/test under the current user's home folder. note This property ensures that the folder exists. Declaration public static string UserNeonDevTestFolder { get; } Property Value Type Description String WindowsEdition Identifies the current Windows edition (home, pro, server,...). Declaration public static WindowsEdition WindowsEdition { get; } Property Value Type Description WindowsEdition Exceptions Type Condition InvalidOperationException Thrown when not running on Windows. Methods ArrayEquals(Byte[], Byte[]) Determines whether two byte arrays contain the same values in the same order. Declaration public static bool ArrayEquals(byte[] v1, byte[] v2) Parameters Type Name Description Byte [] v1 Byte array #1. Byte [] v2 Byte array #2. Returns Type Description Boolean true if the arrays are equal. Base64UrlDecode(String) Decodes a base64url encoded string. This is a URL and filename safe base-64 based encoding scheme: RFC6448 . Declaration public static byte[] Base64UrlDecode(string encoded) Parameters Type Name Description String encoded The encoded string. Returns Type Description Byte [] The decoded bytes. Base64UrlEncode(Byte[], Boolean) Encodes a byte array using Base64Url encoding as specifed here: RFC 4648 Declaration public static string Base64UrlEncode(byte[] bytes, bool retainPadding = false) Parameters Type Name Description Byte [] bytes The input byte array. Boolean retainPadding Optionally onverts any '=' characters padding into escaped \"%3D\", otherwise any padding will be omitted from the output. Returns Type Description String The Base64Url encoded string. CastTo<TResult>(Object) Attempts to cast an object into a specific type. Declaration public static TResult CastTo<TResult>(object value) Parameters Type Name Description Object value The value to be cast. Returns Type Description TResult The casted result. Type Parameters Name Description TResult The desired result type. Exceptions Type Condition InvalidCastException Thrown if the value could not be cast into the type. ClearDebugLog() Clears the debug log file if it exists. Declaration public static void ClearDebugLog() CopyFolder(String, String) Recursively copies the files within one directory to another, creating target folders as required. Declaration public static void CopyFolder(string sourceFolder, string targetFolder) Parameters Type Name Description String sourceFolder The source folder. String targetFolder The target folder. Remarks note This method does not currently copy empty folders. CreateBase36Uuid(Boolean) Generates a 13 digit base-36 UUID including only lowercase ASCII characters and digits. This is useful for generating unique shorter names for Kubernetes objects etc. Declaration public static string CreateBase36Uuid(bool secure = true) Parameters Type Name Description Boolean secure Optionally specifies that a cryptographically secure algorithm is is used to generate the UUID, rather than the default pseudo random generator. Cryptogrphically secure algorithms consume system entropy. Returns Type Description String The new base-36 string. CreateSecureRandom() Creates a Random pseudo random number generated with a cryptographically random seed. Declaration public static Random CreateSecureRandom() Returns Type Description Random A Random . DecryptFile(String) Decrypts a file or directory when supported by the underlying operating system and file system. Currently, this only works on non-HOME versions of Windows and NTFS file systems. Declaration public static bool DecryptFile(string path) Parameters Type Name Description String path The file or directory path. Returns Type Description Boolean true if the operation was successful. DeflateBytes(Byte[]) Uses deflate to commpress a byte array. Declaration public static byte[] DeflateBytes(byte[] bytes) Parameters Type Name Description Byte [] bytes The input byte array or null . Returns Type Description Byte [] The compressed bytes or null . DeflateString(String) Uses deflate to commpress a string. Declaration public static byte[] DeflateString(string input) Parameters Type Name Description String input The input string or null . Returns Type Description Byte [] The compressed bytes or null . DeleteFile(String) Deletes a file if it exists. Declaration public static void DeleteFile(string path) Parameters Type Name Description String path The target file. DeleteFolder(String) Recursively deletes a file system folder, ignoring any errors. Declaration public static void DeleteFolder(string folder) Parameters Type Name Description String folder The folder path. DeleteFolderContents(String) Recursively deletes the contents of a file folder, ignoring any errors. Declaration public static void DeleteFolderContents(string folder) Parameters Type Name Description String folder The folder path. DisableOptionalWindowsFeature(String) Disables an optional Windows feature. Declaration public static void DisableOptionalWindowsFeature(string feature) Parameters Type Name Description String feature Remarks This method does nothing when the feature is already disabled. Exceptions Type Condition InvalidOperationException Thrown if the feature does't exist or is enabled and waiting for a Windows restart. DoesNotThrow(Action) Verfies that an action does not throw an exception. Declaration [Pure] public static bool DoesNotThrow(Action action) Parameters Type Name Description Action action The action. Returns Type Description Boolean true if no exception was thrown. DoesNotThrow<TException>(Action) Verfies that an action does not throw a TException . Declaration public static bool DoesNotThrow<TException>(Action action) where TException : Exception Parameters Type Name Description Action action The action. Returns Type Description Boolean true if no exception was thrown. Type Parameters Name Description TException The exception type. EnableOptionalWindowsFeature(String) Enables an optional Windows feature, returning an indication of whether a Windows restart is required to complete the installation. Declaration public static bool EnableOptionalWindowsFeature(string feature) Parameters Type Name Description String feature Returns Type Description Boolean true if a restart is required. Remarks This method does nothing when the feature is already enabled or has been enabled but is waiting for a restart. Exceptions Type Condition InvalidOperationException Thrown if the feature does't exist. EncryptFile(String) Encrypts a file or directory when supported by the underlying operating system and file system. Currently, this only works on non-HOME versions of Windows and NTFS file systems. Declaration public static bool EncryptFile(string path) Parameters Type Name Description String path The file or directory path. Returns Type Description Boolean true if the operation was successful. EnsureElevatedPermissions() Ensures that the current process has elevated permissions. See HasElevatedPermissions . Declaration public static void EnsureElevatedPermissions() Exceptions Type Condition SecurityException Thrown when the process does not have elevated permissions. PlatformNotSupportedException Thrown for unsupported platforms. EnumToString(Type, Object) Type-safe enum serializer that also honors any EnumMemberAttribute decorating the enumeration values. Declaration public static string EnumToString(Type type, object input) Parameters Type Name Description Type type The enumeration type. Object input The input value. Returns Type Description String The deserialized value. EnumToString<TEnum>(TEnum) Type-safe enum serializer that also honors any EnumMemberAttribute decorating the enumeration values. Declaration public static string EnumToString<TEnum>(TEnum input) where TEnum : struct, Enum Parameters Type Name Description TEnum input The input value. Returns Type Description String The deserialized value. Type Parameters Name Description TEnum The enumeration type. EscapeCsv(String) Escapes a string passed so that is suitable for writing to a CSV file as a field. Declaration public static string EscapeCsv(string value) Parameters Type Name Description String value The field value. Returns Type Description String The escaped string. Remarks The method surrounds the value with double quotes if it contains a comma or CRLF as well as escaping any double quotes in the string with second double quote. ExceptionError(Exception, Boolean, Boolean, Int32) Returns a string representation of an exception suitable for logging. Declaration public static string ExceptionError(Exception e, bool stackTrace = false, bool excludeInner = false, int depth = 0) Parameters Type Name Description Exception e The exception. Boolean stackTrace Optionally include the stack track. Boolean excludeInner Optionally exclude information about any inner exception. Int32 depth INTERNAL USE ONLY: Used to prevent infinite recursion when inner exceptions cycle. Returns Type Description String The error string. Execute(String, Object[], Nullable<TimeSpan>, Process, String, Dictionary<String, String>, TextReader, Action<Process>) Starts a process with an array of arguments to run an executable file and then waits for the process to terminate. Declaration public static int Execute(string path, object[] args, TimeSpan? timeout = null, Process process = null, string workingDirectory = null, Dictionary<string, string> environmentVariables = null, TextReader input = null, Action<Process> processCallback = null) Parameters Type Name Description String path Name or path to the executable file. note The PATH environment variable will be searched for the executable file when no path is specified. Object [] args Command line arguments (or null ). Nullable < TimeSpan > timeout Optional maximum time to wait for the process to complete or null to wait indefinitely. Process process Optional existing Process instance used to launch the process. String workingDirectory Optionally specifies the working directory for executing the program. Dictionary < String , String > environmentVariables Optionally specifies the environment variables to be passed into the process. The new process inherits the current processes variables when this is null . TextReader input Optionally specifies a TextReader with text to be sent to the process as input. Action < Process > processCallback Optionally passed to obtain the details of the process created to execute the command. When a non-null value is passed, the callback will be called with the Process instances just after it is launched. Returns Type Description Int32 The process exit code. Remarks note If timeout is exceeded and execution has not completed in time then a TimeoutException will be thrown and the process will be killed if it was created by this method. Process instances passed via the process parameter will not be killed in this case. Exceptions Type Condition TimeoutException Thrown if the process did not exit within the timeout limit. Execute(String, String, Nullable<TimeSpan>, Process, String, Dictionary<String, String>, TextReader, Action<Process>) Starts a process to run an executable file and then waits for the process to terminate. Declaration public static int Execute(string path, string args, TimeSpan? timeout = null, Process process = null, string workingDirectory = null, Dictionary<string, string> environmentVariables = null, TextReader input = null, Action<Process> processCallback = null) Parameters Type Name Description String path Name or path to the executable file. note The PATH environment variable will be searched for the executable file when no path is specified. String args Command line arguments (or null ). Nullable < TimeSpan > timeout Optional maximum time to wait for the process to complete or null to wait indefinitely. Process process Optional existing Process instance used to launch the process. String workingDirectory Optionally specifies the working directory for executing the program. Dictionary < String , String > environmentVariables Optionally specifies the environment variables to be passed into the process. The new process inherits the current processes variables when this is null . TextReader input Optionally specifies a TextReader with text to be sent to the process as input. Action < Process > processCallback Optionally passed to obtain the details of the process created to execute the command. When a non-null value is passed, the callback will be called with the Process instances just after it is launched. Returns Type Description Int32 The process exit code. Remarks note If timeout is exceeded and execution has not completed in time then a TimeoutException will be thrown and the process will be killed if it was created by this method. Process instances passed via the process parameter will not be killed in this case. Exceptions Type Condition TimeoutException Thrown if the process did not exit within the timeout limit. ExecuteAsync(String, Object[], Nullable<TimeSpan>, Process, String, Dictionary<String, String>, TextReader, Action<Process>) Asynchronously starts a process to run an executable file with an array of arguments and then and waits for the process to terminate. Declaration public static async Task<int> ExecuteAsync(string path, object[] args, TimeSpan? timeout = null, Process process = null, string workingDirectory = null, Dictionary<string, string> environmentVariables = null, TextReader input = null, Action<Process> processCallback = null) Parameters Type Name Description String path Name or path to the executable file. note The PATH environment variable will be searched for the executable file when no path is specified. Object [] args Command line arguments (or null ). Nullable < TimeSpan > timeout Optional maximum time to wait for the process to complete or null to wait indefinitely. Process process Optional existing Process instance used to launch the process.Optional existing Process instance used to launch the process. String workingDirectory Optionally specifies the working directory for executing the program. Dictionary < String , String > environmentVariables Optionally specifies the environment variables to be passed into the process. The new process inherits the current processes variables when this is null . TextReader input Optionally specifies a TextReader with text to be sent to the process as input. Action < Process > processCallback Optionally passed to obtain the details of the process created to execute the command. When a non-null value is passed, the callback will be called with the Process instances just after it is launched. Returns Type Description Task < Int32 > The process exit code. Remarks note If timeout is exceeded and execution has not completed in time then a TimeoutException will be thrown and the process will be killed if it was created by this method. Process instances passed via the process parameter will not be killed in this case. Exceptions Type Condition TimeoutException Thrown if the process did not exit within the timeout limit. ExecuteAsync(String, String, Nullable<TimeSpan>, Process, String, Dictionary<String, String>, TextReader, Action<Process>) Asynchronously starts a process to run an executable file and then waits for the process to terminate. Declaration public static async Task<int> ExecuteAsync(string path, string args, TimeSpan? timeout = null, Process process = null, string workingDirectory = null, Dictionary<string, string> environmentVariables = null, TextReader input = null, Action<Process> processCallback = null) Parameters Type Name Description String path Name or path to the executable file. note The PATH environment variable will be searched for the executable file when no path is specified. String args Command line arguments (or null ). Nullable < TimeSpan > timeout Optional maximum time to wait for the process to complete or null to wait indefinitely. Process process Optional existing Process instance used to launch the process. String workingDirectory Optionally specifies the working directory for executing the program. Dictionary < String , String > environmentVariables Optionally specifies the environment variables to be passed into the process. The new process inherits the current processes variables when this is null . TextReader input Optionally specifies a TextReader with text to be sent to the process as input. Optionally passed to obtain the details of the process created to execute the command. When a non-null value is passed, the callback will be called with the Process instances just after it is launched. Action < Process > processCallback Returns Type Description Task < Int32 > The process exit code. Remarks note If timeout is exceeded and execution has not completed in time then a TimeoutException will be thrown and the process will be killed if it was created by this method. Process instances passed via the process parameter will not be killed in this case. Exceptions Type Condition TimeoutException Thrown if the process did not exit within the timeout limit. ExecuteCapture(String, Object[], Nullable<TimeSpan>, Process, String, Dictionary<String, String>, Action<String>, Action<String>, TextReader, Encoding, Action<Process>) Starts a process to run an executable file and then waits for the process to terminate while capturing any output written to the standard output and error streams. Declaration public static ExecuteResponse ExecuteCapture(string path, object[] args, TimeSpan? timeout = null, Process process = null, string workingDirectory = null, Dictionary<string, string> environmentVariables = null, Action<string> outputAction = null, Action<string> errorAction = null, TextReader input = null, Encoding outputEncoding = null, Action<Process> processCallback = null) Parameters Type Name Description String path Name or path to the executable file. note The PATH environment variable will be searched for the executable file when no path is specified. Object [] args Command line arguments (or null ). Nullable < TimeSpan > timeout Optional maximum time to wait for the process to complete or null to wait indefinitely. Process process Optional existing Process instance used to launch the process. String workingDirectory Optionally specifies the working directory for executing the program. Dictionary < String , String > environmentVariables Optionally specifies the environment variables to be passed into the process. The new process inherits the current processes variables when this is null . Action < String > outputAction Optional action that will be called when the process outputs some text. Action < String > errorAction Optional action that will be called when the process outputs some error text. TextReader input Optionally specifies a TextReader with text to be sent to the process as standard input. Encoding outputEncoding Optionally specifies the expected standard output/error encoding. This defaults to null which sets the default system codepage. Action < Process > processCallback Optionally passed to obtain the details of the process created to execute the command. When a non-null value is passed, the callback will be called with the Process instances just after it is launched. Returns Type Description ExecuteResponse The ExecuteResponse including the process exit code and capture standard output and error streams. Remarks note If timeout is exceeded and execution has not completed in time then a TimeoutException will be thrown and the process will be killed if it was created by this method. Process instances passed via the process parameter will not be killed in this case. You can optionally specify the outputAction and/or errorAction callbacks to receive the process output as it is received. outputAction will be called with both the STDOUT and STDERR streams if errorAction is null otherwise it will called only with STDOUT text. Exceptions Type Condition TimeoutException Thrown if the process did not exit within the timeout limit. ExecuteCapture(String, String, Nullable<TimeSpan>, Process, String, Dictionary<String, String>, Action<String>, Action<String>, TextReader, Encoding, Action<Process>) Starts a process to run an executable file and then waits for the process to terminate while capturing any output written to the standard output and error streams. Declaration public static ExecuteResponse ExecuteCapture(string path, string args, TimeSpan? timeout = null, Process process = null, string workingDirectory = null, Dictionary<string, string> environmentVariables = null, Action<string> outputAction = null, Action<string> errorAction = null, TextReader input = null, Encoding outputEncoding = null, Action<Process> processCallback = null) Parameters Type Name Description String path Name or path to the executable file. note The PATH environment variable will be searched for the executable file when no path is specified. String args Command line arguments (or null ). Nullable < TimeSpan > timeout Optional maximum time to wait for the process to complete or null to wait indefinitely. Process process Optional existing Process instance used to launch the process. String workingDirectory Optionally specifies the working directory for executing the program. Dictionary < String , String > environmentVariables Optionally specifies the environment variables to be passed into the process. The new process inherits the current processes variables when this is null . Action < String > outputAction Optional action that will be called when the process outputs some text. Action < String > errorAction Optional action that will be called when the process outputs some error text. TextReader input Optionally specifies a TextReader with text to be sent to the process as standard input. Encoding outputEncoding Optionally specifies the expected standard output/error encoding. This defaults to null which sets the default system codepage. Action < Process > processCallback Optionally passed to obtain the details of the process created to execute the command. When a non-null value is passed, the callback will be called with the Process instances just after it is launched. Returns Type Description ExecuteResponse The ExecuteResponse including the process exit code and capture standard output and error streams. Remarks note If timeout is exceeded and execution has not completed in time then a TimeoutException will be thrown and the process will be killed if it was created by this method. Process instances passed via the process parameter will not be killed in this case. You can optionally specify the outputAction and/or errorAction callbacks to receive the process output as it is received. outputAction will be called with both the STDOUT and STDERR streams if errorAction is null otherwise it will called only with STDOUT text. Exceptions Type Condition TimeoutException Thrown if the process did not exit within the timeout limit. ExecuteCaptureAsync(String, Object[], String, Dictionary<String, String>, Nullable<TimeSpan>, Process, TextReader, Encoding, Action<Process>) Asynchronously starts a process to run an executable file and then waits for the process to terminate while capturing any output written to the standard output and error streams. Declaration public static async Task<ExecuteResponse> ExecuteCaptureAsync(string path, object[] args, string workingDirectory = null, Dictionary<string, string> environmentVariables = null, TimeSpan? timeout = null, Process process = null, TextReader input = null, Encoding outputEncoding = null, Action<Process> processCallback = null) Parameters Type Name Description String path Name or path to the executable file. note The PATH environment variable will be searched for the executable file when no path is specified. Object [] args Command line arguments (or null ). String workingDirectory Optionally specifies the working directory for executing the program. Dictionary < String , String > environmentVariables Optionally specifies the environment variables to be passed into the process. The new process inherits the current processes variables when this is null . Nullable < TimeSpan > timeout Maximum time to wait for the process to complete or null to wait indefinitely. Process process Optional existing Process instance used to launch the process. TextReader input Optionally specifies a TextReader with text to be sent to the process as input. Encoding outputEncoding Optionally specifies the expected standard output/error encoding. This defaults to null which sets the default system codepage. Action < Process > processCallback Optionally passed to obtain the details of the process created to execute the command. When a non-null value is passed, the callback will be called with the Process instances just after it is launched. Returns Type Description Task < ExecuteResponse > The ExecuteResponse including the process exit code and capture standard output and error streams. Remarks note If timeout is exceeded and execution has not completed in time then a TimeoutException will be thrown and the process will be killed if it was created by this method. Process instances passed via the process parameter will not be killed in this case. Exceptions Type Condition TimeoutException Thrown if the process did not exit within the timeout limit. ExecuteCaptureAsync(String, String, Nullable<TimeSpan>, Process, String, Dictionary<String, String>, TextReader, Encoding, Action<Process>) Asynchronously starts a process to run an executable file and then waits for the process to terminate while capturing any output written to the standard output and error streams. Declaration public static async Task<ExecuteResponse> ExecuteCaptureAsync(string path, string args, TimeSpan? timeout = null, Process process = null, string workingDirectory = null, Dictionary<string, string> environmentVariables = null, TextReader input = null, Encoding outputEncoding = null, Action<Process> processCallback = null) Parameters Type Name Description String path Name or path to the executable file. note The PATH environment variable will be searched for the executable file when no path is specified. String args Command line arguments (or null ). Nullable < TimeSpan > timeout Maximum time to wait for the process to complete or null to wait indefinitely. Process process Optional existing Process instance used to launch the process. String workingDirectory Optionally specifies the working directory for executing the program. Dictionary < String , String > environmentVariables Optionally specifies the environment variables to be passed into the process. The new process inherits the current processes variables when this is null . TextReader input Optionally specifies a TextReader with text to be sent to the process as input. Encoding outputEncoding Optionally specifies the expected standard output/error encoding. This defaults to null which sets the default system codepage. Action < Process > processCallback Optionally passed to obtain the details of the process created to execute the command. When a non-null value is passed, the callback will be called with the Process instances just after it is launched. Returns Type Description Task < ExecuteResponse > The ExecuteResponse including the process exit code and capture standard output and error streams. Remarks note If timeout is exceeded and execution has not completed in time then a TimeoutException will be thrown and the process will be killed if it was created by this method. Process instances passed via the process parameter will not be killed in this case. Exceptions Type Condition TimeoutException Thrown if the process did not exit within the timeout limit. ExecuteShell(String) Executes a command using the local shell, CMD.EXE for Windows and Bash for OSX and Linux. Declaration public static int ExecuteShell(string command) Parameters Type Name Description String command The command and arguments to be executed. Returns Type Description Int32 The process exit code. ExpandTabs(String, Int32) Expands any embedded TAB (\\t) characters in the string passed into spaces such that the tab stops will be formatted correctly. Declaration public static string ExpandTabs(string input, int tabStop = 4) Parameters Type Name Description String input The input string. Int32 tabStop Optionally expands TABs into spaces when greater than zero or converts a series of leading spaces into tabs if less than zero. This defaults to 4 . Returns Type Description String The expanded string. Remarks note If the string passed includes line ending characters (CR or LF) then the output will include line endings for every line, including the last one. A positive tabStop does what you'd expect by converting spaces in the string into TABs such that the tab stops align to the value passed. This works a bit differently for negative values. A negative tabStop indicates that leading spaces in each line will be converted into TABs. A value of -1 indicates that each leading two spaces will bve converted into a TAB, a value of -2 indicates that each leading 2 spaces will be converted into a TAB, and so on. Conversion to TABs will cease when the first non space is ecountered and any odd number of spaces remaining will be included in the output. FileWildcardRegex(String) Generates a case insensitive Regex equivalent to a standard file name wildcard pattern using [*] and [?] characters. Declaration public static Regex FileWildcardRegex(string pattern) Parameters Type Name Description String pattern The file name wildcard pattern. Returns Type Description Regex The corresponding Regex . Fork(String, Object[]) Forks a child process that will run in parallel with the current process. Declaration public static Process Fork(string path, params object[] args) Parameters Type Name Description String path Name or path to the executable file. note The PATH environment variable will be searched for the executable file when no path is specified. Object [] args Command line arguments (or null ). Returns Type Description Process The Process information. FromBase64(String, Encoding) Declaration public static string FromBase64(string encodedValue, Encoding encoding = null) Parameters Type Name Description String encodedValue The base64 encoded input. Encoding encoding Optionally specifies the encoding to use to convert the decoded bytes to the result. This defaults to UTF8 . Returns Type Description String The converted string. FromHex(String) Parses the hex string passed and converts it a byte array. Declaration public static byte[] FromHex(string s) Parameters Type Name Description String s The string to convert from hex. Returns Type Description Byte [] The corresponding byte array. Remarks note The method ignores whitespace characters (SP,CR,LF, and TAB) in the string so that HEX strings copied directly from typical hex dump outputs can be passed directly with minimal editing. Exceptions Type Condition FormatException Thrown if the input is not valid. GetAssemblyFolder(Assembly) Returns the fully qualified path to the folder holding the assembly passed (includes the terminating \"&quot;). Declaration [Obsolete(\"Avoid this because it is not compatible with single-file executables.\")] public static string GetAssemblyFolder(Assembly assembly) Parameters Type Name Description Assembly assembly The assembly. Returns Type Description String Path to the folder holding the assembly. GetAssemblyPath(Assembly) Returns the fully qualified path to the assembly file. Declaration [Obsolete(\"Avoid this because it is not compatible with single-file executables.\")] public static string GetAssemblyPath(Assembly assembly) Parameters Type Name Description Assembly assembly The assembly. Returns Type Description String The assembly's path. GetBaseDirectory() Returns the fully qualified path to the folder where the executable resides. This will include the terminating \"&quot;. Declaration public static string GetBaseDirectory() Returns Type Description String Path to the folder holding the executable GetConstructor(Type, Type[]) Uses reflection to locate a specific public or non-public constructor for a type. Declaration public static ConstructorInfo GetConstructor(Type type, params Type[] parameterTypes) Parameters Type Name Description Type type The target type. Type [] parameterTypes The parameter types. Returns Type Description ConstructorInfo The MethodInfo . Exceptions Type Condition MissingMethodException Thrown if the method does not exist. GetCryptoRandomBytes(Int32) Generates a byte array filled with a cryptographically strong sequence of random values. Declaration public static byte[] GetCryptoRandomBytes(int count) Parameters Type Name Description Int32 count The number of random bytes to be generated. Returns Type Description Byte [] The random byte array. GetCryptoRandomPassword(Int32) Generates a cryptographically random password. Declaration public static string GetCryptoRandomPassword(int length) Parameters Type Name Description Int32 length The password length. Returns Type Description String The generated password. GetEnhancedJsonConverters() Returns instances of the types that implement IEnhancedJsonConverter from the Neon.Common assembly. Declaration public static List<IEnhancedJsonConverter> GetEnhancedJsonConverters() Returns Type Description List < IEnhancedJsonConverter > The list of converters. GetEntryAssemblyPath() Returns the fully qualified path the entry assembly for the current process. Declaration [Obsolete(\"Avoid this because it is not compatible with single-file executables.\")] public static string GetEntryAssemblyPath() Returns Type Description String The entry assembly file path. GetEnumNames<TEnum>() Returns the value names for an enumeration type. This is similar to GetNames(Type) but also honors value names customized via EnumMemberAttribute . Declaration public static string[] GetEnumNames<TEnum>() where TEnum : struct, Enum Returns Type Description String [] The array of value names. Type Parameters Name Description TEnum GetExecuteCommandLine(String, Object[]) Returns the actual command line that will be executed from the command and arguments passed. Declaration public static string GetExecuteCommandLine(string command, params object[] args) Parameters Type Name Description String command The command to be executed. Object [] args Optional command arguments. Returns Type Description String The actual command line to be executed. GetMethod(Type, String, Type[]) Uses reflection to locate a specific public, non-public, instance or static method on a type. Declaration public static MethodInfo GetMethod(Type type, string name, params Type[] parameterTypes) Parameters Type Name Description Type type The target type. String name The method name. Type [] parameterTypes The parameter types. Returns Type Description MethodInfo The MethodInfo . Exceptions Type Condition MissingMethodException Thrown if the method does not exist. GetProcessById(Int32) Returns the Process associated with an ID or null if no process with this ID exists. Declaration public static Process GetProcessById(int id) Parameters Type Name Description Int32 id The target process ID. Returns Type Description Process The Process or null . Remarks This is slightly different from how GetProcessById(Int32) works. That method throws an ArgumentException if there's no process with the ID where as this one will return null . GetTaskResultAsObjectAsync(Task) Used to await a generic Task<TResult> and return its result as an Object . This is handy for situations where the task result type is unknown at compile time. Declaration public static async Task<object> GetTaskResultAsObjectAsync(Task task) Parameters Type Name Description Task task The Task<TResult> . Returns Type Description Task < Object > The task result. GetWindowsOptionalFeatures() Returns a dictionary mapping optional Windows feature names to a WindowsFeatureStatus indicating feature installation status. note This method requires elevated permissions. Declaration public static Dictionary<string, WindowsFeatureStatus> GetWindowsOptionalFeatures() Returns Type Description Dictionary < String , WindowsFeatureStatus > The feature dictionary. Remarks note The feature names are in English and the lookup is case-insensitive. Exceptions Type Condition InvalidOperationException Thrown when not running on Windows. ExecuteException Thrown when the current process doesn't have elevated permissions. GetWindowsOptionalFeatureStatus(String) Returns the installation status for the named feature. Declaration public static WindowsFeatureStatus GetWindowsOptionalFeatureStatus(string feature) Parameters Type Name Description String feature Specifies the English name for the feature. Returns Type Description WindowsFeatureStatus The WindowsFeatureStatus for the feature. Remarks You'll need to pass the feature name in English. You can list possible feature names by executing this in your command shell: dism /Online /English /Get-Features /Format:table note Unknown will be returned for unknown features. GunzipBytes(Byte[]) Uses GZIP to decompress a byte array from compressed bytes. Declaration public static byte[] GunzipBytes(byte[] bytes) Parameters Type Name Description Byte [] bytes The compressed bytes or null . Returns Type Description Byte [] The decompressed string or null . GunzipFile(String, String) Use GZIP to uncompress one file into another. Declaration public static void GunzipFile(string sourcePath, string targetPath) Parameters Type Name Description String sourcePath Path to the (compressed) source file. String targetPath Path to the (uncompressed) target file. GunzipString(Byte[]) Uses GZIP to decompress a string from compressed bytes. Declaration public static string GunzipString(byte[] bytes) Parameters Type Name Description Byte [] bytes The compressed bytes or null . Returns Type Description String The decompressed string or null . GzipBytes(Byte[]) Uses GZIP to commpress a byte array. Declaration public static byte[] GzipBytes(byte[] bytes) Parameters Type Name Description Byte [] bytes The input byte array or null . Returns Type Description Byte [] The compressed bytes or null . GzipFile(String, String) Use GZIP to compress one file into another. Declaration public static void GzipFile(string sourcePath, string targetPath) Parameters Type Name Description String sourcePath Path to the (uncompressed) source file. String targetPath Path to the (compressed) target file. GzipString(String) Uses GZIP to commpress a string. Declaration public static byte[] GzipString(string input) Parameters Type Name Description String input The input string or null . Returns Type Description Byte [] The compressed bytes or null . HexDump(Byte[], Int32, HexDumpOption) Returns a byte array as a formatted hex dump. Declaration public static string HexDump(byte[] data, int bytesPerLine, HexDumpOption options) Parameters Type Name Description Byte [] data The buffer to be dumped. Int32 bytesPerLine The number of bytes to dump per output line. HexDumpOption options The formatting options. Returns Type Description String The hex dump string. HexDump(Byte[], Int32, Int32, Int32, HexDumpOption) Returns a byte array as a formatted hex dump. Declaration public static string HexDump(byte[] data, int start, int count, int bytesPerLine, HexDumpOption options) Parameters Type Name Description Byte [] data The buffer to be dumped. Int32 start The first byte to be dumped. Int32 count The number of bytes to be dumped. Int32 bytesPerLine The number of bytes to dump per output line. HexDumpOption options The formatting options. Returns Type Description String The hex dump string. HexValue(Char) Returns the decimal value of the hex digit passed. Declaration public static int HexValue(char ch) Parameters Type Name Description Char ch The hex digit. Returns Type Description Int32 The corresponding decimal value. Remarks Throws a FormatException if the character is not a hex digit. InflateBytes(Byte[]) Uses deflate to decompress a byte array from compressed bytes. Declaration public static byte[] InflateBytes(byte[] bytes) Parameters Type Name Description Byte [] bytes The compressed bytes or null . Returns Type Description Byte [] The decompressed string or null . InflateString(Byte[]) Uses deflate to decompress a string from compressed bytes. Declaration public static string InflateString(byte[] bytes) Parameters Type Name Description Byte [] bytes The compressed bytes or null . Returns Type Description String The decompressed string or null . IsGzipped(Stream) Examines a Stream to determine whether it has been compressed via GZIP. This assumes that the current position points to the GZIP header if there is one. The stream position will be restored before returning. Declaration public static bool IsGzipped(Stream stream) Parameters Type Name Description Stream stream The stream. Returns Type Description Boolean true if the file is compressed via GZIP. IsGzipped(String) Examines a file to determine whether it has been compressed via GZIP. Declaration public static bool IsGzipped(string path) Parameters Type Name Description String path The file path. Returns Type Description Boolean true if the file is compressed via GZIP. IsHex(Char) Returns true if the character passed is a hex digit. Declaration public static bool IsHex(char ch) Parameters Type Name Description Char ch The character to test. Returns Type Description Boolean true if the character is in one of the ranges: 0..9, a..f or A..F. IsOdd(Int32) Determines whether an integer is odd. Declaration public static bool IsOdd(int value) Parameters Type Name Description Int32 value The value. Returns Type Description Boolean true if the value is odd. IsWithin(DateTime, DateTime, TimeSpan) Determines whether a value is within expected - maxDelta and value + maxDelta inclusive. This is useful for unit tests where there might be an minor allowable variance due to clock skew, etc. Declaration public static bool IsWithin(DateTime expected, DateTime value, TimeSpan maxDelta) Parameters Type Name Description DateTime expected The expected value. DateTime value The value being tested. TimeSpan maxDelta The allowed variance. Returns Type Description Boolean true when the two datetime values are within maxDelta of each other. IsWithin(DateTimeOffset, DateTimeOffset, TimeSpan) Determines whether a value is within expected - maxDelta and value + maxDelta inclusive. This is useful for unit tests where there might be an minor allowable variance due to clock skew, etc. Declaration public static bool IsWithin(DateTimeOffset expected, DateTimeOffset value, TimeSpan maxDelta) Parameters Type Name Description DateTimeOffset expected The expected value. DateTimeOffset value The value being tested. TimeSpan maxDelta The allowed variance. Returns Type Description Boolean true when the two datetime values are within maxDelta of each other. JsonClone<T>(T) Creates a deep clone of an object by first serializing to JSON and then deserializing it. Declaration public static T JsonClone<T>(T value) where T : class Parameters Type Name Description T value The object being clonned or null . Returns Type Description T The clone. Type Parameters Name Description T The object type. JsonDeserialize(Type, Byte[], Boolean) Non-generic method that deserializes UTF-8 encoded JSON bytes, optionally requiring strict mapping of input properties to the target type. Declaration public static object JsonDeserialize(Type type, byte[] jsonBytes, bool strict = false) Parameters Type Name Description Type type The target type. Byte [] jsonBytes The UTF-8 encoded JSON bytes. Boolean strict Optionally require that all input properties map to type properties. Returns Type Description Object The parsed object . Remarks This method uses the default JsonRelaxedSerializerSettings when specific settings are not passed. You may pass JsonStrictSerializerSettings or entirely custom settings. JsonDeserialize(Type, String, Boolean) Non-generic method that deserializes JSON text, optionally requiring strict mapping of input properties to the target type. Declaration public static object JsonDeserialize(Type type, string json, bool strict = false) Parameters Type Name Description Type type The target type. String json The JSON text. Boolean strict Optionally require that all input properties map to type properties. Returns Type Description Object The parsed object . Remarks This method uses the default JsonRelaxedSerializerSettings when specific settings are not passed. You may pass JsonStrictSerializerSettings or entirely custom settings. JsonDeserialize<T>(Byte[], Boolean) Deserializes UITF-8 encoded JSON bytes, optionally requiring strict mapping of input properties to the target type. Declaration public static T JsonDeserialize<T>(byte[] jsonBytes, bool strict = false) Parameters Type Name Description Byte [] jsonBytes The UTF-8 encoded JSON bytes. Boolean strict Optionally require that all input properties map to T properties. Returns Type Description T The parsed T . Type Parameters Name Description T The desired output type. Remarks This method uses the default JsonRelaxedSerializerSettings when specific settings are not passed. You may pass JsonStrictSerializerSettings or entirely custom settings. JsonDeserialize<T>(String, JsonSerializerSettings) Deserializes JSON text using custom settings. Declaration public static T JsonDeserialize<T>(string json, JsonSerializerSettings settings) Parameters Type Name Description String json The JSON text. Newtonsoft.Json.JsonSerializerSettings settings The optional settings or null to use JsonRelaxedSerializerSettings . Returns Type Description T The parsed T . Type Parameters Name Description T The desired output type. Remarks This method uses the default JsonRelaxedSerializerSettings when specific settings are not passed. You may pass JsonStrictSerializerSettings or entirely custom settings. JsonDeserialize<T>(String, Boolean) Deserializes JSON text, optionally requiring strict mapping of input properties to the target type. Declaration public static T JsonDeserialize<T>(string json, bool strict = false) Parameters Type Name Description String json The JSON text. Boolean strict Optionally require that all input properties map to T properties. Returns Type Description T The parsed T . Type Parameters Name Description T The desired output type. Remarks This method uses the default JsonRelaxedSerializerSettings when specific settings are not passed. You may pass JsonStrictSerializerSettings or entirely custom settings. JsonEquals(Object, Object) Compares two object instances for equality by serializing them JSON and comparing the output. Declaration public static bool JsonEquals(object v1, object v2) Parameters Type Name Description Object v1 Value 1 Object v2 Value 2 Returns Type Description Boolean true if the instances are the same. Remarks This is a convienent and safe way of comparing two objects without having to comparing a potentially complex tree of members and then maintaining that as code changes over time at the cost of having to perform the serializations. JsonOrYamlDeserialize<T>(String, Boolean) Deserializes JSON or YAML text using, optionally requiring strict mapping of input properties to the target type. Declaration public static T JsonOrYamlDeserialize<T>(string input, bool strict = false) Parameters Type Name Description String input The input text (JSON or YAML). Boolean strict Optionally require that all input properties map to T properties. Returns Type Description T The parsed T . Type Parameters Name Description T The desired output type. Remarks note This method works by looking for leading '{' or '[' as the first non-whitespace character in the string to detect whether the input is JSON. The method assumes YAML otherwise. JsonSerialize(Object, Formatting) Serializes an object to JSON text. Declaration public static string JsonSerialize(object value, Formatting format = Formatting.None) Parameters Type Name Description Object value The value to be serialized. Newtonsoft.Json.Formatting format Output formatting option (defaults to Newtonsoft.Json.Formatting.None ). Returns Type Description String The JSON text. Remarks This method uses the default JsonRelaxedSerializerSettings when specific settings are not passed. You may pass JsonStrictSerializerSettings or entirely custom settings. JsonSerialize(Object, JsonSerializerSettings, Formatting) Serializes an object to JSON text using custom settings. Declaration public static string JsonSerialize(object value, JsonSerializerSettings settings, Formatting format = Formatting.None) Parameters Type Name Description Object value The value to be serialized. Newtonsoft.Json.JsonSerializerSettings settings The optional settings or null to use JsonStrictSerializerSettings . Newtonsoft.Json.Formatting format Output formatting option (defaults to Newtonsoft.Json.Formatting.None ). Returns Type Description String The JSON text. Remarks This method uses the default JsonRelaxedSerializerSettings when specific settings are not passed. You may pass JsonStrictSerializerSettings or entirely custom settings. JsonSerializeToBytes(Object, Formatting) Serializes an object to UTF-8 encoded JSON bytes. Declaration public static byte[] JsonSerializeToBytes(object value, Formatting format = Formatting.None) Parameters Type Name Description Object value The value to be serialized. Newtonsoft.Json.Formatting format Output formatting option (defaults to Newtonsoft.Json.Formatting.None ). Returns Type Description Byte [] The UTF-8 encoded JSON bytes. Remarks This method uses the default JsonRelaxedSerializerSettings when specific settings are not passed. You may pass JsonStrictSerializerSettings or entirely custom settings. JsonSerializeToBytes(Object, JsonSerializerSettings, Formatting) Serializes an object to UTF-8 encoded JSON bytes using custom settings. Declaration public static byte[] JsonSerializeToBytes(object value, JsonSerializerSettings settings, Formatting format = Formatting.None) Parameters Type Name Description Object value The value to be serialized. Newtonsoft.Json.JsonSerializerSettings settings The optional settings or null to use JsonStrictSerializerSettings . Newtonsoft.Json.Formatting format Output formatting option (defaults to Newtonsoft.Json.Formatting.None ). Returns Type Description Byte [] The ITF-8 encoded JSON bytes. Remarks This method uses the default JsonRelaxedSerializerSettings when specific settings are not passed. You may pass JsonStrictSerializerSettings or entirely custom settings. JsonToYaml(String) Converts a JSON text to YAML. Declaration public static string JsonToYaml(string jsonText) Parameters Type Name Description String jsonText The JSON text. Returns Type Description String The equivalent YAML text. Remarks note Property names are always converted to lowercase when converting to YAML. Exceptions Type Condition ArgumentNullException Thrown if jsonText is null . ArgumentException Thrown if jsonText does not specify a value, array, or object. JTokenEquals(JToken, JToken) Compares the two Newtonsoft JSON.NET Newtonsoft.Json.Linq.JToken instances along with their decendants for equality. This is an alternative to Newtonsoft.Json.Linq.JToken.EqualityComparer which seems to have some problems, as outlined in the remarks. Declaration public static bool JTokenEquals(JToken token1, JToken token2) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token1 The first token. Newtonsoft.Json.Linq.JToken token2 The second token. Returns Type Description Boolean true if the tokens are to be considered as equal. LogDebug(Exception) Appends exception information to the file at DebugLogPath . This is intended for low-level debugging when normal logging via TelemetryHub isn't suitable. Declaration public static void LogDebug(Exception e) Parameters Type Name Description Exception e The exception. LogDebug(String) Appends a line of text to the file at DebugLogPath . This is intended for low-level debugging when normal logging via TelemetryHub isn't suitable (i.e. when debugging logging code or application initialization code running before normal logging is configured. Declaration public static void LogDebug(string line = null) Parameters Type Name Description String line Optionally specifies the line of text. Max(TimeSpan[]) Determines the maximum TimeSpan value. Declaration public static TimeSpan Max(params TimeSpan[] values) Parameters Type Name Description TimeSpan [] values The values to compare. Returns Type Description TimeSpan The minimum of the values passed or Zero when nothing is passed. Min(TimeSpan[]) Determines the minimum TimeSpan value. Declaration public static TimeSpan Min(params TimeSpan[] values) Parameters Type Name Description TimeSpan [] values The values to compare. Returns Type Description TimeSpan The minimum of the values passed or Zero when nothing is passed. NoAwait(Task) Do nothing method that is used when you explicitly don't want to await a task and you don't want to see warning CS4014 . Declaration public static void NoAwait(Task task) Parameters Type Name Description Task task The task. NormalizeExecArgs(Object[]) Normalizes an array of argument objects into a form that can be passed to an invoked process by adding a quotes and escape characters as necessary. Declaration public static string NormalizeExecArgs(params object[] args) Parameters Type Name Description Object [] args The arguments. Returns Type Description String The formatted argument string. Remarks note null and empty arguments are ignored. NullableEquals<T>(Nullable<T>, Nullable<T>) Determines whether two nullable values are equal. Declaration public static bool NullableEquals<T>(T? v1, T? v2) where T : struct Parameters Type Name Description Nullable <T> v1 Value #1. Nullable <T> v2 Value #2. Returns Type Description Boolean true if the values are equal. Type Parameters Name Description T The base value type. OpenBrowser(String) Launches the default browser to display the specified URI. Declaration public static void OpenBrowser(string uri) Parameters Type Name Description String uri The target URI. OpenEditor(String) Launches the platform text editor to create or edit a file. Declaration public static void OpenEditor(string path) Parameters Type Name Description String path The file path. Remarks This method will launch the editor specified in the EDITOR environment variable otherwise it will launch NotePad on Windows and Vim on Linux and OS/X. EDITOR should be set to the command line used to launch the editor with special $FILE parameter. This will be replaced with the path to the file being edited. note We'll simply append the file path if $FILE isn't found in the EDITOR environment variable. This method will block until the editor is closed. note For unit testing, you may set OpenEditorHandler to an action that will simulate editing the file. This action will be called instead of actually opening an editor when set. OpenPlatformBrowser(String, Boolean) Launches the platform (i.e. Edge for Windows or Safari for OS/X) browser to display the specified URI, optionally opening a new browser window. Declaration public static void OpenPlatformBrowser(string uri, bool newWindow = false) Parameters Type Name Description String uri The target URI. Boolean newWindow Optionally opens the URI in a new platform browser window. By default, this method will open the URI in as new browser tab. OpenStandardInput() Opens the current process standard inout stream. Declaration public static Stream OpenStandardInput() Returns Type Description Stream The open Stream . Remarks note This method integrates with ProgramRunner such that program executions simulated by calls to ExecuteWithInput(ProgramEntrypoint, String, String[]) or ExecuteWithInput(ProgramEntrypoint, Byte[], String[]) can read the simulated input. Should generally call this instead of calling OpenStandardInput() directly. PackageReferenceToNeonCommonIsRequired() This method may be called to ensure that the Neon.Common assembly is required at compile in a project that doesn't reference Neon.Common . The method does nothing. note A call to this is currently included by Neon.ModelGen to ensure that the enclosing project references Neon.Common . Declaration public static void PackageReferenceToNeonCommonIsRequired() ParseBool(String) Parses common boolean literals. Declaration public static bool ParseBool(string input) Parameters Type Name Description String input The input string being parsed. Returns Type Description Boolean The parsed output. Remarks This method recognizes the following case insensitive literals: false 0 off no disabled false true 1 on yes enabled true Exceptions Type Condition FormatException Thrown if the value is not valid. ParseCsv(String) Parses a CSV encoded string into its component fields. Declaration public static string[] ParseCsv(string value) Parameters Type Name Description String value The encoded CSV string. Returns Type Description String [] The decoded fields. Exceptions Type Condition FormatException Thrown if the CSV file format is not valid. ParseEnum<TEnum>(String, Nullable<TEnum>) Type-safe enum parser that also honors any EnumMemberAttribute decorating the enumeration values. This is case insensitive. Declaration public static TEnum ParseEnum<TEnum>(string input, TEnum? defaultValue = null) where TEnum : struct, Enum Parameters Type Name Description String input The input string. Nullable <TEnum> defaultValue Optionally specifies the value to be returned if the input cannot be parsed instead of throwing an exception. Returns Type Description TEnum The parsed value. Type Parameters Name Description TEnum The enumeration type. Exceptions Type Condition ArgumentNullException Thrown if input is null . ArgumentException Thrown if input is not valid. ParseNullableBool(String) Parses a nullable Boolean . Declaration public static bool? ParseNullableBool(string input) Parameters Type Name Description String input The input string being parsed. null , empty or input == \"null\" will return null . Otherwise we'll expect either \"true\" or \"false\" or one of the other literals supported by ParseBool(String) . Returns Type Description Nullable < Boolean > true , false , or null . Exceptions Type Condition FormatException Thrown for invalid input strings. PartitionCount(Int32, Int32) Computes the Int32 number of partitions that would be required to divide a set of items where the number of items in each partition is limited. Declaration public static int PartitionCount(int itemCount, int partitionSize) Parameters Type Name Description Int32 itemCount The number of items to be partitioned. Int32 partitionSize The maximim number of items in any partition. Returns Type Description Int32 The number of partitions required. PartitionCount(Int64, Int64) Computes the Int64 number of partitions that would be required to divide a set of items where the number of items in each partition is limited. Declaration public static long PartitionCount(long itemCount, long partitionSize) Parameters Type Name Description Int64 itemCount The number of items to be partitioned. Int64 partitionSize The maximim number of items in any partition. Returns Type Description Int64 The number of partitions required. PartitionCount(UInt32, UInt32) Computes the UInt32 number of partitions that would be required to divide a set of items where the number of items in each partition is limited. Declaration public static uint PartitionCount(uint itemCount, uint partitionSize) Parameters Type Name Description UInt32 itemCount The number of items to be partitioned. UInt32 partitionSize The maximim number of items in any partition. Returns Type Description UInt32 The number of partitions required. PartitionCount(UInt64, UInt64) Computes the UInt64 number of partitions that would be required to divide a set of items where the number of items in each partition is limited. Declaration public static ulong PartitionCount(ulong itemCount, ulong partitionSize) Parameters Type Name Description UInt64 itemCount The number of items to be partitioned. UInt64 partitionSize The maximim number of items in any partition. Returns Type Description UInt64 The number of partitions required. PseudoRandomBytes(Int32) Returns the specified number of pseudo random bytes. Declaration public static byte[] PseudoRandomBytes(int count) Parameters Type Name Description Int32 count The requested number of bytes. Returns Type Description Byte [] The random bytes. PseudoRandomDouble() Returns a double pseudo random number between 0.0 and +1.0 Declaration public static double PseudoRandomDouble() Returns Type Description Double The random number. PseudoRandomDouble(Double) Returns a double pseudo random number between 0.0 and the specified limit. Declaration public static double PseudoRandomDouble(double limit) Parameters Type Name Description Double limit The limit. Returns Type Description Double The random number. PseudoRandomIndex(Int32) Returns a random index into a sequence whose length is specified. Declaration public static int PseudoRandomIndex(int length) Parameters Type Name Description Int32 length The sequence length. Returns Type Description Int32 The random index. Exceptions Type Condition IndexOutOfRangeException Thrown if length is <= 0. PseudoRandomInt() Returns an integer pseudo random number. Declaration public static int PseudoRandomInt() Returns Type Description Int32 The random integer. PseudoRandomInt(Int32) Returns a pseudo random number in the range of 0..limit-1. Declaration public static int PseudoRandomInt(int limit) Parameters Type Name Description Int32 limit The value returned will not exceed one less than this value. Returns Type Description Int32 The random number. PseudoRandomTimespan(TimeSpan) Returns a random TimeSpan between zero and a specified maximum. Declaration public static TimeSpan PseudoRandomTimespan(TimeSpan maxInterval) Parameters Type Name Description TimeSpan maxInterval The maximum interval. Returns Type Description TimeSpan The random timespan. Remarks This method is useful for situations where its desirable to have some variation in a delay before performing an activity like retrying an operation or performing a background task. PseudoRandomTimespan(TimeSpan, Double) Returns a TimeSpan between the specified base interval plus a random period of the specified fraction of the value. Declaration public static TimeSpan PseudoRandomTimespan(TimeSpan baseInterval, double fraction) Parameters Type Name Description TimeSpan baseInterval The base interval. Double fraction The fractional multiplier for the random component. Returns Type Description TimeSpan The random timespan. Remarks The value returned is at least as large as baseInterval with an added random fractional interval if fraction is positive or the value returned may be less than baseInterval for a negative fraction . This is computed via: baseInterval + Helper.RandTimespan(TimeSpan.FromSeconds(baseInterval.TotalSeconds * fraction)); This method is useful for situations where its desirable to have some variation in a delay before performing an activity like retrying an operation or performing a background task. PseudoRandomTimespan(TimeSpan, TimeSpan) Returns a random TimeSpan value between the min/max values specified. Declaration public static TimeSpan PseudoRandomTimespan(TimeSpan minInterval, TimeSpan maxInterval) Parameters Type Name Description TimeSpan minInterval The minimum interval. TimeSpan maxInterval The maximum interval. Returns Type Description TimeSpan The randomized time span. ReadConsolePassword(String) Reads a password from the Console terminated by Enter without echoing the typed characters. Declaration public static string ReadConsolePassword(string prompt = null) Parameters Type Name Description String prompt Optional prompt. Returns Type Description String The password entered. ReadStandardInputBytes() Reads the standard input file to the end and returns the result as bytes. Declaration public static byte[] ReadStandardInputBytes() Returns Type Description Byte [] The standard input. ReadStandardInputText() Reads the standard input file to the end and returns the result as a string. Declaration public static string ReadStandardInputText() Returns Type Description String The standard input. RegisterMisspelledUtf8Provider() Ensures that a special UTF-8 text encoding provider misnamed as utf8 (without the dash) is registered. This is required sometimes because certain REST APIs may return incorrect charset values. Declaration public static void RegisterMisspelledUtf8Provider() SequenceEqual<T>(IEnumerable<T>, IEnumerable<T>) Compares two null or non- null enumerable sequences for equality. Declaration public static bool SequenceEqual<T>(IEnumerable<T> sequence1, IEnumerable<T> sequence2) Parameters Type Name Description IEnumerable <T> sequence1 The first list or null . IEnumerable <T> sequence2 The second list or null . Returns Type Description Boolean true if the sequences have matching elements. Type Parameters Name Description T The enumerable item type. Remarks note This method is capable of comparing null arguments and also uses Equals(Object, Object) to compare individual elements. SequenceEqual<T>(IList<T>, IList<T>) Compares two null or non- null lists for equality. Declaration public static bool SequenceEqual<T>(IList<T> list1, IList<T> list2) Parameters Type Name Description IList <T> list1 The first list or null . IList <T> list2 The second list or null . Returns Type Description Boolean true if the sequences have matching elements. Type Parameters Name Description T The enumerable item type. Remarks note This method is capable of comparing null arguments and also uses Equals(Object, Object) to compare individual elements. StartProcess(Assembly, String) Starts a process for an Assembly by calling the assembly's main() entry point method. Declaration public static Process StartProcess(Assembly assembly, string args) Parameters Type Name Description Assembly assembly The assembly to be started. String args The command line arguments (or null ). Returns Type Description Process The process started. Remarks note This method works only for executable assemblies with an appropriate main entry point that reside on the local file system. StartThread(Action, Int32) Starts a new Thread to perform an action. Declaration public static Thread StartThread(Action action, int maxStackSize = 0) Parameters Type Name Description Action action The action to be performed. Int32 maxStackSize Optionally specifies the maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable. Important for partially trusted code, maxStackSize is ignored if it is greater than the default stack size. No exception is thrown in theis case. This defaults to 0 which generally means the stack size will be limited to 1 MiB for 32-bit applications or 4 MiB for 64-bit applications. Returns Type Description Thread The Thread . StartThread(Action<Object>, Object, Int32) Starts a new Thread to perform a parameterized action with an object parameter. Declaration public static Thread StartThread(Action<object> action, object parameter, int maxStackSize = 0) Parameters Type Name Description Action < Object > action The action to be performed. Object parameter The parameter to be passed to the thread action. Int32 maxStackSize Optionally specifies the maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable. Important for partially trusted code, maxStackSize is ignored if it is greater than the default stack size. No exception is thrown in theis case. This defaults to 0 which generally means the stack size will be limited to 1 MiB for 32-bit applications or 4 MiB for 64-bit applications. Returns Type Description Thread The Thread . StartTypedThread<TParam>(Action<TParam>, TParam, Int32) Starts a new Thread to perform a parameterized action with a typed parameter. Declaration public static Thread StartTypedThread<TParam>(Action<TParam> action, TParam parameter, int maxStackSize = 0) Parameters Type Name Description Action <TParam> action The action to be performed. TParam parameter The parameter to be passed to the thread action. Int32 maxStackSize Optionally specifies the maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable. Important for partially trusted code, maxStackSize is ignored if it is greater than the default stack size. No exception is thrown in theis case. This defaults to 0 which generally means the stack size will be limited to 1 MiB for 32-bit applications or 4 MiB for 64-bit applications. Returns Type Description Thread The Thread . Type Parameters Name Description TParam Identifies the type of the thread action parameter. StripAnsibleWarnings(String) HACK: This method attempts to trim warnings generated by Ansible because it writes these warnings to STDOUT instead of STDERR. This is super fragile. Declaration public static string StripAnsibleWarnings(string text) Parameters Type Name Description String text The text to be adjusted. Returns Type Description String The adjusted text. StripFileScheme(String) Removes a file:// scheme from the path URI if this is scheme is present. The result will be a valid file system path. Declaration public static string StripFileScheme(string path) Parameters Type Name Description String path The path/URI to be converted. Returns Type Description String The file system path. Remarks note This method behaves slightly differently when running on Windows and when running on Unix/Linux. On Windows, file URIs are absolute file paths of the form: FILE:///C:/myfolder/myfile To convert this into a valid file system path this method strips the file:// scheme and the following forward slash. On Unix/Linux, file URIs will have the form: FILE:///myfolder/myfile In this case, the forward shlash following the file:// scheme is part of the file system path and will not be removed. ToBase64(String, Encoding) Converts the string passed into base64 string. Declaration public static string ToBase64(string value, Encoding encoding = null) Parameters Type Name Description String value The plaintext string to be encoded (cannot be null ). Encoding encoding Optionally specifies the encoding to use to convert the input to bytes before base64 encoding it. This defaults to UTF8 . Returns Type Description String The converted base-64 string. ToBoolString(Boolean) Renders a bool value as either true or false (lowercase). Declaration public static string ToBoolString(bool value) Parameters Type Name Description Boolean value The value. Returns Type Description String true or false , ToHex(Byte, Boolean) Converts a single byte into its hexidecimal equivalent. Declaration public static string ToHex(byte value, bool uppercase = false) Parameters Type Name Description Byte value The input byte. Boolean uppercase Optionally return the hex value as uppercase. Returns Type Description String The hex string. ToHex(Byte[], Boolean) Converts the byte buffer passed into a hex encoded string. Declaration public static string ToHex(byte[] buf, bool uppercase = false) Parameters Type Name Description Byte [] buf The buffer Boolean uppercase Optionally renders the hex digits in uppercase. Returns Type Description String The hex encoded string. ToLinuxLineEndings(String) Converts Windows line endings (CR-LF) to Linux/Unix line endings (LF). Declaration public static string ToLinuxLineEndings(string input) Parameters Type Name Description String input The input string or null . Returns Type Description String The input string with converted line endings. TryParse<TEnum>(String, out TEnum) Type-safe enum parser that also honors any EnumMemberAttribute decorating the enumeration values. This is case insensitive. Declaration public static bool TryParse<TEnum>(string input, out TEnum output) where TEnum : struct, Enum Parameters Type Name Description String input The input string. TEnum output Returns as the parsed value. Returns Type Description Boolean true if the value was parsed. Type Parameters Name Description TEnum The enumeration type. TryParseBool(String, out Boolean) Attempts to parse a boolean from common literals. Declaration public static bool TryParseBool(string input, out bool value) Parameters Type Name Description String input The input string being parsed. Boolean value Returns as the parsed value on success. Returns Type Description Boolean true on success. Remarks This method recognizes the following case insensitive literals: false 0 off no disabled false true 1 on yes enabled true TryParseEnum(Type, String, out Object) enum parser that also honors any EnumMemberAttribute decorating the enumeration values. This is case insensitive. Declaration public static bool TryParseEnum(Type type, string input, out object output) Parameters Type Name Description Type type The enumeration type. String input The input string. Object output Returns as the parsed value. Returns Type Description Boolean true if the value was parsed. TryParseEnum<TEnum>(String, out TEnum) enum parser that also honors any EnumMemberAttribute decorating the enumeration values. This is case insensitive. Declaration public static bool TryParseEnum<TEnum>(string input, out TEnum output) Parameters Type Name Description String input The input string. TEnum output Returns as the parsed value. Returns Type Description Boolean true if the value was parsed. Type Parameters Name Description TEnum Specifies the enumeration type. TryParseHex(String, out Byte[]) Attempts to parse a hex string into a byte array. Declaration public static bool TryParseHex(string s, out byte[] output) Parameters Type Name Description String s The string to convert from hex. Byte [] output Returns as the parsed byte array on success. Returns Type Description Boolean true if the string was parsed successfully. Remarks note The method ignores whitespace characters (SP,CR,LF, and TAB) in the string so that HEX strings copied directly from typical hex dump outputs can be passed directly with minimal editing. TryParseHex(String, out Int32) Attempts to parse a hex encoded string into an integer. Declaration public static bool TryParseHex(string input, out int value) Parameters Type Name Description String input The input string. Int32 value The parsed integer. Returns Type Description Boolean true if the input could be parsed successfully. TryParseNullableBool(String, out Nullable<Boolean>) Attempts to parse a nullable Boolean . null , empty or input == \"null\" will return null . Otherwise we'll expect either \"true\" or \"false\" or one of the other literals supported by ParseBool(String) . Declaration public static bool TryParseNullableBool(string input, out bool? value) Parameters Type Name Description String input The input string being parsed. Nullable < Boolean > value Returns as the parsed value. Returns Type Description Boolean true if the input was parsed successfully. UnixEpochMillisecondsToDateTimeUtc(Int64) Converts the number of milliseconds from the Unix Epoch (1/1/1970 12:00:00am) into a UTC cref=\"DateTime\"/> (UTC). Declaration public static DateTime UnixEpochMillisecondsToDateTimeUtc(long milliseconds) Parameters Type Name Description Int64 milliseconds Returns Type Description DateTime The converted DateTime . UnixEpochNanosecondsToDateTimeUtc(Int64) Converts the number of nanoseconds from the Unix Epoch (1/1/1970 12:00:00am) into a UTC cref=\"DateTime\"/> (UTC). Declaration public static DateTime UnixEpochNanosecondsToDateTimeUtc(long nanoseconds) Parameters Type Name Description Int64 nanoseconds Returns Type Description DateTime The converted DateTime . UrlTokenDecode(String) Decodes a string encoded by UrlTokenEncode(Byte[]) back into a byte array. Declaration public static byte[] UrlTokenDecode(string input) Parameters Type Name Description String input The input string. Returns Type Description Byte [] The decoded bytes. Exceptions Type Condition NullReferenceException Thrown if input is null . UrlTokenEncode(Byte[]) Encodes a byte array into a form suitable for using as a URI path segment or query parameter. Declaration public static string UrlTokenEncode(byte[] input) Parameters Type Name Description Byte [] input The byte array. Returns Type Description String The encoded string. Exceptions Type Condition NullReferenceException Thrown if input is null . WaitAll(IEnumerable<Thread>) Waits for all of the threads passed to complete. This method does nothing when threads is null or empty. Also and null threads passed will be ignored. Declaration public static void WaitAll(IEnumerable<Thread> threads) Parameters Type Name Description IEnumerable < Thread > threads The threads being waited on. WaitAllAsync(IEnumerable<Task>) Asynchronously waits for all of the Task s passed to complete. Declaration public static async Task WaitAllAsync(IEnumerable<Task> tasks) Parameters Type Name Description IEnumerable < Task > tasks The tasks to wait on. Returns Type Description Task The tracking Task . WaitAllAsync(IEnumerable<Task>, Nullable<TimeSpan>, String, CancellationToken) Asynchronously waits for all of the Task s passed to complete. Declaration public static async Task WaitAllAsync(IEnumerable<Task> tasks, TimeSpan? timeout = null, string timeoutMessage = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IEnumerable < Task > tasks Specifies the tasks being waited on. Nullable < TimeSpan > timeout Optionally specifies a timeout. String timeoutMessage Optionally specifies a message to be included in any TimeoutException thrown to help the what failed. CancellationToken cancellationToken Optionally a cancellation token. Returns Type Description Task The tracking Task . Exceptions Type Condition TimeoutException Thrown if the timeout was exceeded. WaitAllAsync(Task[]) Asynchronously waits for all of the Task s passed to complete. Declaration public static async Task WaitAllAsync(params Task[] tasks) Parameters Type Name Description Task [] tasks The tasks to wait on. Returns Type Description Task The tracking Task . WaitFor(Func<Boolean>, TimeSpan, Nullable<TimeSpan>, String) Waits for a boolean function to return true . Declaration public static void WaitFor(Func<bool> predicate, TimeSpan timeout, TimeSpan? pollInterval = null, string timeoutMessage = null) Parameters Type Name Description Func < Boolean > predicate The boolean predicate. TimeSpan timeout Optionally specifies the maximum time to wait. Nullable < TimeSpan > pollInterval Optionally specifies time to wait between each predicate call or null for a reasonable default. String timeoutMessage Optionally overrides the TimeoutException message. Remarks This method periodically calls predicate until it returns true or exceeded. Exceptions Type Condition TimeoutException Thrown if the never returned true before the timeout. WaitForAsync(Func<Task<Boolean>>, TimeSpan, Nullable<TimeSpan>, String, CancellationToken) Asynchronously waits for a boolean function to return true . Declaration public static async Task WaitForAsync(Func<Task<bool>> predicate, TimeSpan timeout, TimeSpan? pollInterval = null, string timeoutMessage = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Func < Task < Boolean >> predicate The boolean predicate. TimeSpan timeout Optionally specifies the maximum time to wait. Nullable < TimeSpan > pollInterval Optionally specifies time to wait between each predicate call or null for a reasonable default. String timeoutMessage Optionally overrides the TimeoutException message. CancellationToken cancellationToken Optionally specifies a CancellationToken . Returns Type Description Task The tracking Task . Remarks This method periodically calls predicate until it returns true or exceeded. Exceptions Type Condition TimeoutException Thrown if the never returned true before the timeout. YamlDeserialize<T>(String, Boolean) Deserializes YAML text to an object, optionally requiring strict mapping of input properties to the target type. note Property names are expected to be lowercase. Declaration public static T YamlDeserialize<T>(string yaml, bool strict = false) Parameters Type Name Description String yaml The YAML text. Boolean strict Optionally require that all input properties map to route properties. Returns Type Description T The parsed T . Type Parameters Name Description T The desired output type. YamlDeserializeViaJson<T>(String, Boolean) Deserializes YAML to an object via JSON.NET. This allows the use of Newtonsoft.Json.JsonConverter s to deserialize complex types. Strict requires mapping of input properties in the target type. Declaration public static T YamlDeserializeViaJson<T>(string yaml, bool strict = false) Parameters Type Name Description String yaml The YAML text. Boolean strict Optionally require that all input properties map to route properties. Returns Type Description T The parsed T . Type Parameters Name Description T The desired output type. Exceptions Type Condition YamlDotNet.Core.YamlException YamlSerialize(Object) Serializes an object to YAML. note Property names are always converted to lowercase when serializing to YAML. Declaration public static string YamlSerialize(object value) Parameters Type Name Description Object value The value to be serialized. Returns Type Description String The YAML text."
  },
  "neonsdk/api/Neon.Common.NetFramework.html": {
    "href": "neonsdk/api/Neon.Common.NetFramework.html",
    "title": "Enum NetFramework | NeonSDK documentation",
    "keywords": "Enum NetFramework Enumerates the known .NET Framework implementations. Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public enum NetFramework Fields Name Description Core .NET Core Native .NET Native Net .NET 5.0 and later NetFramework .NET Framework Unknown The framework could not be determined. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Common.NewtonsoftExtensions.html": {
    "href": "neonsdk/api/Neon.Common.NewtonsoftExtensions.html",
    "title": "Class NewtonsoftExtensions | NeonSDK documentation",
    "keywords": "Class NewtonsoftExtensions Newtonsoft JSON Linq extensions. Inheritance Object NewtonsoftExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class NewtonsoftExtensions Methods CopyTo(JsonSerializerSettings, JsonSerializerSettings) Copies the settings from one Newtonsoft.Json.JsonSerializerSettings instance to another. Declaration public static void CopyTo(this JsonSerializerSettings source, JsonSerializerSettings target) Parameters Type Name Description Newtonsoft.Json.JsonSerializerSettings source The source settings. Newtonsoft.Json.JsonSerializerSettings target The target instance. TryGetValue<T>(JObject, String, out T) Attempts to return the value of a specified Newtonsoft.Json.Linq.JObject property converted to a specific type. Declaration public static bool TryGetValue<T>(this JObject jObject, string propertyName, out T value) Parameters Type Name Description Newtonsoft.Json.Linq.JObject jObject The Newtonsoft.Json.Linq.JObject instance. String propertyName The property name. T value Returns as the property value if present. Returns Type Description Boolean true if the property was present and returned. Type Parameters Name Description T The desired type."
  },
  "neonsdk/api/Neon.Common.NotReadyException.html": {
    "href": "neonsdk/api/Neon.Common.NotReadyException.html",
    "title": "Class NotReadyException | NeonSDK documentation",
    "keywords": "Class NotReadyException Indicates that a component is not ready to perform an operation but may become ready in the future. Inheritance Object Exception NotReadyException Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public class NotReadyException : Exception, ISerializable Constructors NotReadyException() Default constructor. Declaration public NotReadyException() NotReadyException(String, Exception) Constructs an exception with a specific message and optional inner exception. Declaration public NotReadyException(string message, Exception innerException = null) Parameters Type Name Description String message The custom message. Exception innerException Optional inner exception. Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Common.ProgramEntrypoint.html": {
    "href": "neonsdk/api/Neon.Common.ProgramEntrypoint.html",
    "title": "Delegate ProgramEntrypoint | NeonSDK documentation",
    "keywords": "Delegate ProgramEntrypoint Synchronous main entry point method signature. Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public delegate int ProgramEntrypoint(params string[] args); Parameters Type Name Description String [] args The command line arguments. Returns Type Description Int32 The exit code."
  },
  "neonsdk/api/Neon.Common.ProgramEntrypointAsync.html": {
    "href": "neonsdk/api/Neon.Common.ProgramEntrypointAsync.html",
    "title": "Delegate ProgramEntrypointAsync | NeonSDK documentation",
    "keywords": "Delegate ProgramEntrypointAsync Asynchronous main entry point method signature. Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public delegate Task<int> ProgramEntrypointAsync(params string[] args); Parameters Type Name Description String [] args The command line arguments. Returns Type Description Task < Int32 > The exit code."
  },
  "neonsdk/api/Neon.Common.ProgramExitException.html": {
    "href": "neonsdk/api/Neon.Common.ProgramExitException.html",
    "title": "Class ProgramExitException | NeonSDK documentation",
    "keywords": "Class ProgramExitException Used to signal that a program or tool should exit. Inheritance Object Exception ProgramExitException Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public class ProgramExitException : Exception, ISerializable Constructors ProgramExitException(Int32) Constructor. Declaration public ProgramExitException(int exitCode) Parameters Type Name Description Int32 exitCode The desired program exit code. Properties ExitCode Returns the desired program exit code. Declaration public int ExitCode { get; } Property Value Type Description Int32 Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Common.ProgramRunner.html": {
    "href": "neonsdk/api/Neon.Common.ProgramRunner.html",
    "title": "Class ProgramRunner | NeonSDK documentation",
    "keywords": "Class ProgramRunner Used to implement unit tests on command line tools by simulating their execution on a thread rather than forking the tool as a process. This is makes debugging easier and also deals with the fact that unit tests may leave orphan processes running. Inheritance Object ProgramRunner Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public sealed class ProgramRunner : IDisposable Remarks This class is designed to simulate running a single executable by calling its main entry point. To accomplish this, use the default constructor to create a ProgramRunner instance. The constructor will set Current to itself and then you can call Execute(ProgramEntrypoint, String[]) to execute the program synchronously (waiting for it to return), or Fork(ProgramEntrypoint, String[]) to simulate forking the program by running it on a new thread. Fork(ProgramEntrypoint, String[]) waits to return until the program calls ProgramReady() . This is used to ensure that program has completed the activities required by the unit tests before the tests are executed. note Only one ProgramRunner instance can active at any particular time. Simulated program entry points that will be called by Fork(ProgramEntrypoint, String[]) and that run indefinitely, need to call WaitForExit() when after its started the operation. This returns when the TerminateFork() is called. The simulated program should stop any operations being performed, release any important resources and exit cleanly its Main method cleanly. The Arguments dictionary can be used to pass additional arguments into the program being tested. This maps case insensitve keys to object values. note You should call Dispose() when you're finished with the runner. Constructors ProgramRunner(TimeSpan) Constructor. Declaration public ProgramRunner(TimeSpan forkTimeout = default(TimeSpan)) Parameters Type Name Description TimeSpan forkTimeout Specifies the maximum time for Fork(ProgramEntrypoint, String[]) to wait for the program to signal that it's ready by calling ProgramReady() . This defaults to 30 seconds . Properties Arguments Returns a case insensitve dictionary of additional unit test related arguments that can be passed to the program being tested. Declaration public Dictionary<string, object> Arguments { get; } Property Value Type Description Dictionary < String , Object > Current Returns the current ProgramRunner or null . Declaration public static ProgramRunner Current { get; } Property Value Type Description ProgramRunner Methods Dispose() Declaration public void Dispose() Execute(ProgramEntrypoint, String[]) Executes a program entry point synchronously, passing arguments and returning the result. Declaration public ExecuteResponse Execute(ProgramEntrypoint main, params string[] args) Parameters Type Name Description ProgramEntrypoint main The program entry point. String [] args The arguments. Returns Type Description ExecuteResponse The ExecuteResponse returned by the simulated program run. ExecuteAsync(ProgramEntrypointAsync, String[]) Executes a program entry point asynchronously, passing arguments and returning the result. Declaration public async Task<ExecuteResponse> ExecuteAsync(ProgramEntrypointAsync mainAsync, params string[] args) Parameters Type Name Description ProgramEntrypointAsync mainAsync The program entry point. String [] args The arguments. Returns Type Description Task < ExecuteResponse > The ExecuteResponse returned by the simulated program run. ExecuteWithInput(ProgramEntrypoint, Byte[], String[]) Executes a program entry point synchronously, streaming some bytes as standard input, passing arguments and returning the result. Declaration public ExecuteResponse ExecuteWithInput(ProgramEntrypoint main, byte[] inputBytes, params string[] args) Parameters Type Name Description ProgramEntrypoint main The program entry point. Byte [] inputBytes The bytes to be passed as standard input. String [] args The arguments. Returns Type Description ExecuteResponse The ExecuteResponse returned by the simulated program run. ExecuteWithInput(ProgramEntrypoint, String, String[]) Executes a program entry point synchronously, streaming some text as standard input, passing arguments and returning the result. Declaration public ExecuteResponse ExecuteWithInput(ProgramEntrypoint main, string inputText, params string[] args) Parameters Type Name Description ProgramEntrypoint main The program entry point. String inputText The text to be passed as standard input. String [] args The arguments. Returns Type Description ExecuteResponse The ExecuteResponse returned by the simulated program run. ExecuteWithInputAsync(ProgramEntrypointAsync, Byte[], String[]) Executes a program entry point asynchronously, streaming some bytes as standard input, passing arguments and returning the result. Declaration public async Task<ExecuteResponse> ExecuteWithInputAsync(ProgramEntrypointAsync mainAsync, byte[] inputBytes, params string[] args) Parameters Type Name Description ProgramEntrypointAsync mainAsync The program entry point. Byte [] inputBytes The bytes to be passed as standard input. String [] args The arguments. Returns Type Description Task < ExecuteResponse > The ExecuteResponse returned by the simulated program run. ExecuteWithInputAsync(ProgramEntrypointAsync, String, String[]) Executes a program entry point asynchronously, streaming some text as standard input, passing arguments and returning the result. Declaration public async Task<ExecuteResponse> ExecuteWithInputAsync(ProgramEntrypointAsync mainAsync, string inputText, params string[] args) Parameters Type Name Description ProgramEntrypointAsync mainAsync The program entry point. String inputText The text to be passed as standard input. String [] args The arguments. Returns Type Description Task < ExecuteResponse > The ExecuteResponse returned by the simulated program run. Fork(ProgramEntrypoint, String[]) Executes a program entry point asynchronously, without waiting for the command to complete. This is useful for commands that don't terminate by themselves. Call TerminateFork() to kill the running command. note IMPORTANT: The main simulated entry point must call WaitForExit() . This will block until the TerminateFork() is called, returning when the program is expected to terminate itself. Declaration public void Fork(ProgramEntrypoint main, params string[] args) Parameters Type Name Description ProgramEntrypoint main The program entry point. String [] args The arguments. OpenStandardInput() Opens the standard input stream. This will return a stream with the input specified when ExecuteWithInput(ProgramEntrypoint, Byte[], String[]) or ExecuteWithInput(ProgramEntrypoint, String, String[]) were called or else it will simply return the result of OpenStandardInput() . Declaration public Stream OpenStandardInput() Returns Type Description Stream The input Stream . ProgramReady() Called by programs executed via Fork(ProgramEntrypoint, String[]) when the program has initialized itself enough to be ready for testing. note This must be called or else Fork(ProgramEntrypoint, String[]) will never return. Declaration public void ProgramReady() TerminateFork() Terminates the forked program if one is running. Declaration public void TerminateFork() WaitForExit() Called by the emulated program entry point for operations that are initiated via Fork(ProgramEntrypoint, String[]) . This method will block until TerminateFork() is called. The emulated program must exit cleanly when this returns. Declaration public void WaitForExit()"
  },
  "neonsdk/api/Neon.Common.RandomExtensions.html": {
    "href": "neonsdk/api/Neon.Common.RandomExtensions.html",
    "title": "Class RandomExtensions | NeonSDK documentation",
    "keywords": "Class RandomExtensions Random class extension methods. Inheritance Object RandomExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class RandomExtensions Methods NextIndex(Random, Int32) Returns a random index into a sequence whose length is specified. Declaration public static int NextIndex(this Random random, int length) Parameters Type Name Description Random random The Random instance. Int32 length The sequence length. Returns Type Description Int32 The random index. Exceptions Type Condition IndexOutOfRangeException Thrown if length is <= 0. RandomTimespan(Random, TimeSpan) Returns a random TimeSpan between zero and a specified maximum. Declaration public static TimeSpan RandomTimespan(this Random random, TimeSpan maxInterval) Parameters Type Name Description Random random The Random instance. TimeSpan maxInterval The maximum interval. Returns Type Description TimeSpan The random timespan. Remarks This method is useful for situations where its desirable to have some variation in a delay before performing an activity like retrying an operation or performing a background task. RandomTimespan(Random, TimeSpan, Double) Returns a TimeSpan between the specified base interval plus a random period of the specified fraction of the value. Declaration public static TimeSpan RandomTimespan(this Random random, TimeSpan baseInterval, double fraction) Parameters Type Name Description Random random The Random instance. TimeSpan baseInterval The base interval. Double fraction The fractional multiplier for the random component. Returns Type Description TimeSpan The random timespan. Remarks The value returned is at least as large as baseInterval with an added random fractional interval if fraction is positive or the value returned may be less than baseInterval for a negative fraction . This is computed via: baseInterval + RandTimespan(TimeSpan.FromSeconds(baseInterval.TotalSeconds * fraction)); This method is useful for situations where its desirable to have some variation in a delay before performing an activity like retrying an operation or performing a background task."
  },
  "neonsdk/api/Neon.Common.ReflectionExtensions.html": {
    "href": "neonsdk/api/Neon.Common.ReflectionExtensions.html",
    "title": "Class ReflectionExtensions | NeonSDK documentation",
    "keywords": "Class ReflectionExtensions Reflection related extension methods. Inheritance Object ReflectionExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class ReflectionExtensions Methods GetParameterTypes(MethodInfo) Returns the array of types for a method's parameters. Declaration public static Type[] GetParameterTypes(this MethodInfo method) Parameters Type Name Description MethodInfo method The method. Returns Type Description Type [] The parameter type array. Implements(Type, Type) Determines whether a Type implements a specific interface. Declaration public static bool Implements(Type type, Type interfaceType) Parameters Type Name Description Type type The type being tested. Type interfaceType The interface type. Returns Type Description Boolean true if type implements type . Exceptions Type Condition ArgumentNullException Thrown if either of type or interfaceType are null . ArgumentException Thrown if interfaceType is not an interface . Implements<TInterface>(Type) Determines whether a Type implements a specific interface. Declaration public static bool Implements<TInterface>(this Type type) Parameters Type Name Description Type type The type being tested. Returns Type Description Boolean true if type implements type . Type Parameters Name Description TInterface The required interface type. Exceptions Type Condition ArgumentNullException Thrown if type is null . ArgumentException Thrown if TInterface is not an interface . Inherits<TBase>(Type) Determines whether a type inherits from another type. Declaration public static bool Inherits<TBase>(this Type type) Parameters Type Name Description Type type The type being tested. Returns Type Description Boolean true if type inherits type . Type Parameters Name Description TBase The required base type. Remarks note This method also returns true when TBase is the same as type . Exceptions Type Condition ArgumentNullException Thrown if type is null . Is(Type, Type) Determines whether a type inherits from (or is) a specified base type. Declaration public static bool Is(this Type type, Type targetType) Parameters Type Name Description Type type The type being tested. Type targetType Identifies the type we're matching. Returns Type Description Boolean true if type inherits or is targetType . Is<T>(Type) Determines whether a type inherits from (or is) a specified base type. Declaration public static bool Is<T>(this Type type) Parameters Type Name Description Type type The type being tested. Returns Type Description Boolean true if type inherits or is T . Type Parameters Name Description T Identifies the type we're matching."
  },
  "neonsdk/api/Neon.Common.SemanticVersion.html": {
    "href": "neonsdk/api/Neon.Common.SemanticVersion.html",
    "title": "Class SemanticVersion | NeonSDK documentation",
    "keywords": "Class SemanticVersion Implements a semantic version as defined by the Semantic Versioning 2.0.0 specification. This is similar to the base Version class but includes support for pre-release identifiers as well as build information. Inheritance Object SemanticVersion Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public class SemanticVersion : IComparable Constructors SemanticVersion() Default constuctor. Declaration public SemanticVersion() Properties Build The build information or null . Declaration public string Build { get; set; } Property Value Type Description String Major The major version number. Declaration public int Major { get; set; } Property Value Type Description Int32 Minor The minor version number. Declaration public int Minor { get; set; } Property Value Type Description Int32 Patch The patch version number. Declaration public int Patch { get; set; } Property Value Type Description Int32 Prerelease The prerelease identifer or null . Declaration public string Prerelease { get; set; } Property Value Type Description String Methods Compare(SemanticVersion, SemanticVersion) Compares two non-null semantic versions. Declaration public static int Compare(SemanticVersion v1, SemanticVersion v2) Parameters Type Name Description SemanticVersion v1 The first version. SemanticVersion v2 The second version. Returns Type Description Int32 -1 if v1 is less than v2 0 if v1 equals v2 +1 if v1 is greater than v2 Remarks note A null version is considered to be less than a non-null version. CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Create(Int32, Int32, Int32, String, String) Creates a semantic version number from parameters. Declaration public static SemanticVersion Create(int major, int minor = 0, int patch = 0, string build = null, string prerelease = null) Parameters Type Name Description Int32 major The major version. Int32 minor Optional minor version. Int32 patch Optional patch version. String build Optional build. String prerelease Optional prerelease. Returns Type Description SemanticVersion The SemanticVersion . Exceptions Type Condition ArgumentException Thrown if any of the parameters are invalid. Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() Parse(String) Parses a semantic version string. Declaration public static SemanticVersion Parse(string versionText) Parameters Type Name Description String versionText The version text. Returns Type Description SemanticVersion The parsed SemanticVersion . Exceptions Type Condition FormatException Thrown if the version could not be parsed. ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() TryParse(String, out SemanticVersion) Attempts to parse a semantic version string. Declaration public static bool TryParse(string versionText, out SemanticVersion version) Parameters Type Name Description String versionText The version text. SemanticVersion version Returns as the parsed version on success. Returns Type Description Boolean true if the version was parsed successfully. Operators Equality(SemanticVersion, SemanticVersion) Compares two SemanticVersion instances for equality. Declaration public static bool operator ==(SemanticVersion v1, SemanticVersion v2) Parameters Type Name Description SemanticVersion v1 Version #1. SemanticVersion v2 Version #2. Returns Type Description Boolean true if the versions have the same precedence. Exceptions Type Condition ArgumentNullException Throw if either parameter is null . Explicit(SemanticVersion to String) Explicitly casts a SemanticVersion into a string. Declaration public static explicit operator string (SemanticVersion version) Parameters Type Name Description SemanticVersion version The version input. Returns Type Description String The version converted to a string. Explicit(String to SemanticVersion) Explicitly casts a string into a SemanticVersion . Declaration public static explicit operator SemanticVersion(string version) Parameters Type Name Description String version The version input. Returns Type Description SemanticVersion The string converted to a SemanticVersion . Exceptions Type Condition ArgumentNullException Thrown if version is null . GreaterThan(SemanticVersion, SemanticVersion) Compares two SemanticVersion instances to see if the first is greater. Declaration public static bool operator>(SemanticVersion v1, SemanticVersion v2) Parameters Type Name Description SemanticVersion v1 Version #1. SemanticVersion v2 Version #2. Returns Type Description Boolean true v1 has greater precedence. Exceptions Type Condition ArgumentNullException Throw if either parameter is null . GreaterThanOrEqual(SemanticVersion, SemanticVersion) Compares two SemanticVersion instances to see if the first is greater or equal. Declaration public static bool operator >=(SemanticVersion v1, SemanticVersion v2) Parameters Type Name Description SemanticVersion v1 Version #1. SemanticVersion v2 Version #2. Returns Type Description Boolean true v1 has the same or greater precedence. Exceptions Type Condition ArgumentNullException Throw if either parameter is null . Inequality(SemanticVersion, SemanticVersion) Compares two SemanticVersion instances for inequality. Declaration public static bool operator !=(SemanticVersion v1, SemanticVersion v2) Parameters Type Name Description SemanticVersion v1 Version #1. SemanticVersion v2 Version #2. Returns Type Description Boolean true if the versions have the different precedences. Exceptions Type Condition ArgumentNullException Throw if either parameter is null . LessThan(SemanticVersion, SemanticVersion) Compares two SemanticVersion instances to see if the first is less. Declaration public static bool operator <(SemanticVersion v1, SemanticVersion v2) Parameters Type Name Description SemanticVersion v1 Version #1. SemanticVersion v2 Version #2. Returns Type Description Boolean true v1 has lower precedence. Exceptions Type Condition ArgumentNullException Throw if either parameter is null . LessThanOrEqual(SemanticVersion, SemanticVersion) Compares two SemanticVersion instances to see if the first is less or equal. Declaration public static bool operator <=(SemanticVersion v1, SemanticVersion v2) Parameters Type Name Description SemanticVersion v1 Version #1. SemanticVersion v2 Version #2. Returns Type Description Boolean true v1 has the same or lower precedence. Exceptions Type Condition ArgumentNullException Throw if either parameter is null ."
  },
  "neonsdk/api/Neon.Common.ServiceContainer.html": {
    "href": "neonsdk/api/Neon.Common.ServiceContainer.html",
    "title": "Class ServiceContainer | NeonSDK documentation",
    "keywords": "Class ServiceContainer This class combines the capabilities of a IServiceCollection and IServiceProvider into a single object that implements the combined IServiceContainer interface. Inheritance Object ServiceContainer Implements IServiceContainer Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public class ServiceContainer : IServiceContainer, IServiceCollection, IList<ServiceDescriptor>, ICollection<ServiceDescriptor>, IEnumerable<ServiceDescriptor>, IEnumerable, IServiceProvider Remarks The design of IServiceCollection and IServiceProvider seems somewhat limited. This assumes that applications explicitly initialize a IServiceCollection instance during startup and then call BuildServiceProvider() to return the IServiceProvider that can actually be used to find a service at runtime. This works fine for lots of applications, but with a framework like Neon, it is useful to have a global service provider that allows the client to register default services for applications that are not coded to be aware of dependency injection. The problem with the Microsoft DependencyInjection design is that additional services registered after a BuildServiceProvider() call will not be returned by the service provider. This class combines both these capabilities into a single class such that services can be registered and located dynamically without ever having to call BuildServiceProvider() . note The BuildServiceProvider() extension methods still work the same and return only a point-in-time snapshot of the services. You may not need to call these though, because you can call GetService(Type) directly. Constructors ServiceContainer() Constructor. Declaration public ServiceContainer() Properties Count Declaration public int Count { get; } Property Value Type Description Int32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Item[Int32] Declaration public ServiceDescriptor this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description ServiceDescriptor Methods Add(ServiceDescriptor) Declaration public void Add(ServiceDescriptor item) Parameters Type Name Description ServiceDescriptor item Clear() Declaration public void Clear() Clone() Returns a clone of the instance. This can be useful for unit testing to save the service container before executing a test and then restoring it afterwards. Declaration public ServiceContainer Clone() Returns Type Description ServiceContainer The cloned instance. Contains(ServiceDescriptor) Declaration public bool Contains(ServiceDescriptor item) Parameters Type Name Description ServiceDescriptor item Returns Type Description Boolean CopyTo(ServiceDescriptor[], Int32) Declaration public void CopyTo(ServiceDescriptor[] array, int arrayIndex) Parameters Type Name Description ServiceDescriptor [] array Int32 arrayIndex GetEnumerator() Declaration public IEnumerator<ServiceDescriptor> GetEnumerator() Returns Type Description IEnumerator < ServiceDescriptor > GetService(Type) Declaration public object GetService(Type serviceType) Parameters Type Name Description Type serviceType Returns Type Description Object GetService<TService>() This is a convenience generic method that returns the service already cast to requested type. Declaration public TService GetService<TService>() Returns Type Description TService The service instance if it exists or null . Type Parameters Name Description TService Specifies the desired service type. IndexOf(ServiceDescriptor) Declaration public int IndexOf(ServiceDescriptor item) Parameters Type Name Description ServiceDescriptor item Returns Type Description Int32 Insert(Int32, ServiceDescriptor) Declaration public void Insert(int index, ServiceDescriptor item) Parameters Type Name Description Int32 index ServiceDescriptor item Remove(ServiceDescriptor) Declaration public bool Remove(ServiceDescriptor item) Parameters Type Name Description ServiceDescriptor item Returns Type Description Boolean RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Implements IServiceContainer Extension Methods NeonBlazorExtensions.AddNeonBlazor(IServiceCollection) IEnumerableExtensions.SelectRandom<T>(IEnumerable<T>, Int32) IEnumerableExtensions.IsEmpty<T>(IEnumerable<T>, Func<T, Boolean>) TailwindExtensions.AddTailwind(IServiceCollection)"
  },
  "neonsdk/api/Neon.Common.StaticZipOptions.html": {
    "href": "neonsdk/api/Neon.Common.StaticZipOptions.html",
    "title": "Enum StaticZipOptions | NeonSDK documentation",
    "keywords": "Enum StaticZipOptions Enumerates the ZIP options for Zip(IStaticDirectory, Stream, String, SearchOption, StaticZipOptions) and Zip(IStaticDirectory, String, String, SearchOption, StaticZipOptions) . These may be bitwise ORed togther in various combinations. Namespace : Neon.Common Assembly : Neon.Common.dll Syntax [Flags] public enum StaticZipOptions Fields Name Description LinuxLineEndings Convert any Windows CRLF line endings into Linux compatiable LF endings. None No special options required. This is the default. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Common.StringBuilderExtensions.html": {
    "href": "neonsdk/api/Neon.Common.StringBuilderExtensions.html",
    "title": "Class StringBuilderExtensions | NeonSDK documentation",
    "keywords": "Class StringBuilderExtensions System class extensions. Inheritance Object StringBuilderExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class StringBuilderExtensions Methods AppendLineLinux(StringBuilder, String) Appends a line of text using a Linux-style (LF) line ending. Declaration public static void AppendLineLinux(this StringBuilder sb, string line = null) Parameters Type Name Description StringBuilder sb The StringBuilder . String line The line. AppendWithSeparator(StringBuilder, String, String) Appends non- null and non-empty text, separating it from any existing text with a string. Declaration public static void AppendWithSeparator(this StringBuilder sb, string text, string separator = \" \") Parameters Type Name Description StringBuilder sb The StringBuilder . String text The text to be appended. String separator The separator string, this defaults to a single space. Remarks note The separator string will not be appended if text is null or empty."
  },
  "neonsdk/api/Neon.Common.StringExtensions.html": {
    "href": "neonsdk/api/Neon.Common.StringExtensions.html",
    "title": "Class StringExtensions | NeonSDK documentation",
    "keywords": "Class StringExtensions String extension methods. Inheritance Object StringExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class StringExtensions Methods ToLines(String) Splits the string into lines of text. Declaration public static IEnumerable<string> ToLines(this string value) Parameters Type Name Description String value The string value. Returns Type Description IEnumerable < String > An IEnumerable<T> with the extracted lines. Note that an empty string will return a single empty line and a null string will return no lines."
  },
  "neonsdk/api/Neon.Common.Stub.html": {
    "href": "neonsdk/api/Neon.Common.Stub.html",
    "title": "Class Stub | NeonSDK documentation",
    "keywords": "Class Stub Used in situations where an innocous parameter is required to disambiguate constructor or method overloads. Inheritance Object Stub Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class Stub Fields Param Returns the stub value. Declaration public static readonly Stub.Value Param Field Value Type Description Stub.Value"
  },
  "neonsdk/api/Neon.Common.Stub.Value.html": {
    "href": "neonsdk/api/Neon.Common.Stub.Value.html",
    "title": "Struct Stub.Value | NeonSDK documentation",
    "keywords": "Struct Stub.Value An empty value structure. Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public struct Value"
  },
  "neonsdk/api/Neon.Common.TaskExtensions.html": {
    "href": "neonsdk/api/Neon.Common.TaskExtensions.html",
    "title": "Class TaskExtensions | NeonSDK documentation",
    "keywords": "Class TaskExtensions Task extension methods. Inheritance Object TaskExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class TaskExtensions Methods ResultWithoutAggregate<TResult>(Task<TResult>) Waits for the task to complete and then returns the result but rethrows original exceptions rather than a wrapper ArgumentException . Otherwise, this is a replacement for Result . Declaration public static TResult ResultWithoutAggregate<TResult>(this Task<TResult> task) Parameters Type Name Description Task <TResult> task The task Returns Type Description TResult Type Parameters Name Description TResult The task result type. WaitWithoutAggregate(Task) Waits for the task to complete but rethrows original exceptions rather than a wrapper ArgumentException . Otherwise, this is a replacement for Wait() . Declaration public static void WaitWithoutAggregate(this Task task) Parameters Type Name Description Task task The task"
  },
  "neonsdk/api/Neon.Common.TimeSpanExtensions.html": {
    "href": "neonsdk/api/Neon.Common.TimeSpanExtensions.html",
    "title": "Class TimeSpanExtensions | NeonSDK documentation",
    "keywords": "Class TimeSpanExtensions TimeSpan extensions. Inheritance Object TimeSpanExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class TimeSpanExtensions Methods AdjustToFitDateRange(TimeSpan, DateTime) Adjusts a TimeSpan such that when it is added to a DateTime the resulting date is within the valid possible date range of MinValue ... MaxValue . This is useful for timeout related calculations. Declaration public static TimeSpan AdjustToFitDateRange(this TimeSpan timespan, DateTime dateTime) Parameters Type Name Description TimeSpan timespan The TimeSpan . DateTime dateTime The DateTime . Returns Type Description TimeSpan The adjusted TimeSpan ."
  },
  "neonsdk/api/Neon.Common.ToolException.html": {
    "href": "neonsdk/api/Neon.Common.ToolException.html",
    "title": "Class ToolException | NeonSDK documentation",
    "keywords": "Class ToolException Typically thrown when a tool or subprocess is executed an fails. Inheritance Object Exception ToolException Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public class ToolException : Exception, ISerializable Constructors ToolException(String, Exception) Constructor. Declaration public ToolException(string message = null, Exception inner = null) Parameters Type Name Description String message The optional exception message. Exception inner The optional inner exception. Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Common.TriState.html": {
    "href": "neonsdk/api/Neon.Common.TriState.html",
    "title": "Enum TriState | NeonSDK documentation",
    "keywords": "Enum TriState Used to specify a tristate boolean with values: true , false , and default . Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public enum TriState Fields Name Description Default Specifies the default behavior. False Specifies false . True Specifies true . Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Common.WeakEventController.html": {
    "href": "neonsdk/api/Neon.Common.WeakEventController.html",
    "title": "Class WeakEventController | NeonSDK documentation",
    "keywords": "Class WeakEventController Implements a weak event listener that allows the owner to be garbage collected if it is the only remaining link is an event handler. Inheritance Object WeakEventController Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class WeakEventController Remarks This class is intended to be a drop-in replacement for the WeakEventManager class that is available in .NET 4.5 but is not currently present in the Xamarin Mono class libraries. Use the AddHandler<TEventSource, TEventArgs>(TEventSource, String, EventHandler<TEventArgs>) and RemoveHandler<TEventSource, TEventArgs>(TEventSource, String, EventHandler<TEventArgs>) to add or remove event handlers. note Important: Take care to remove any handlers when an event listener instance is disposed and/or finalized. Neglecting to do this will orhpan the objects WeakEventController uses to track the handler references. This code was adapted from a Code Project article by Samuel Cragg called WeakEventManager for WinRT . The code is licensed under the The Code Project Open License (CPOL) . I enhanced the code by making it threadsafe. Methods AddHandler<TEventSource, TEventArgs>(TEventSource, String, EventHandler<TEventArgs>) Adds the specified event handler to the specified event. Declaration public static void AddHandler<TEventSource, TEventArgs>(TEventSource source, string eventName, EventHandler<TEventArgs> handler) Parameters Type Name Description TEventSource source The source object that raises the specified event or null . String eventName The name of the event to subscribe to. EventHandler <TEventArgs> handler The delegate that handles the event. Type Parameters Name Description TEventSource The type that raises the event. TEventArgs The type that holds the event data. RemoveHandler<TEventSource, TEventArgs>(TEventSource, String, EventHandler<TEventArgs>) Removes the specified event handler from the specified event. Declaration public static void RemoveHandler<TEventSource, TEventArgs>(TEventSource source, string eventName, EventHandler<TEventArgs> handler) Parameters Type Name Description TEventSource source The source object that raises the specified event, or null if it's a static event. String eventName The name of the event to remove the handler from. EventHandler <TEventArgs> handler The delegate to remove. Type Parameters Name Description TEventSource The type that raises the event. TEventArgs The type that holds the event data."
  },
  "neonsdk/api/Neon.Common.WindowsEdition.html": {
    "href": "neonsdk/api/Neon.Common.WindowsEdition.html",
    "title": "Enum WindowsEdition | NeonSDK documentation",
    "keywords": "Enum WindowsEdition Enumerates the known Windows Editions. Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public enum WindowsEdition Fields Name Description Home Windows Home. Professional Windows Professional. ServerDatacenter Windows Server (datacenter). ServerEnterprise Windows Server (enterprise). ServerStandard Windows Server (standard). Unknown The Windows edition could not be identified. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Common.WindowsFeatureStatus.html": {
    "href": "neonsdk/api/Neon.Common.WindowsFeatureStatus.html",
    "title": "Enum WindowsFeatureStatus | NeonSDK documentation",
    "keywords": "Enum WindowsFeatureStatus Enumerates the possible states of an optional Windows feature. Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public enum WindowsFeatureStatus Fields Name Description Disabled The feature is disabled. Enabled The feature is enabled. EnabledPending The feature is currently partially installed and will be enabled after Windows is restarted. Unknown The feature status couldn't be determined. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Common.YamlDotNetExtensions.html": {
    "href": "neonsdk/api/Neon.Common.YamlDotNetExtensions.html",
    "title": "Class YamlDotNetExtensions | NeonSDK documentation",
    "keywords": "Class YamlDotNetExtensions YamlDotNet related class extensions. Inheritance Object YamlDotNetExtensions Namespace : Neon.Common Assembly : Neon.Common.dll Syntax public static class YamlDotNetExtensions Methods Load(YamlStream, String) Initializes a YamlDotNet.RepresentationModel.YamlStream with text. Declaration public static void Load(this YamlStream stream, string text) Parameters Type Name Description YamlDotNet.RepresentationModel.YamlStream stream The YAML stream. String text The text to be loaded."
  },
  "neonsdk/api/Neon.Cryptography.AesCipher.html": {
    "href": "neonsdk/api/Neon.Cryptography.AesCipher.html",
    "title": "Class AesCipher | NeonSDK documentation",
    "keywords": "Class AesCipher Implements a convienent wrapper over AesManaged that handles the encryption and decryption of data using the AES algorthim using many security best practices. Inheritance Object AesCipher Namespace : Neon.Cryptography Assembly : Neon.Cryptography.dll Syntax public sealed class AesCipher : IDisposable Remarks This class uses the BinaryWriter to generate the encrypted output and BinaryReader to read it. The data is formatted with an unencrypted header that specifies the initialization vector (IV), as well as the HMAC512 that will be used to validate the encrypted data. The encrypted data includes variable length psuedo random padding followed by the encrypted user data. Header (plaintext) +------------------+ | 0x3BBAA035 | 32-bit magic number (for verification) +------------------+ | IV Size | 16-bits +------------------+ | | | IV Bytes | IV Size bytes | | +------------------+ | HMAC Size | 16-bits +------------------+ | | | HMAC Bytes | HMAC Size bytes | | +------------------- AES256 Encrypted: +------------------+ | Padding Size | 16-bits +------------------+ | | | Padding Bytes | Padding Size bytes | | +------------------+ | | | | | | | User Data | | | | | | | +------------------+ note Note that this encodes multi-byte integers using little endian byte ordering via BinaryWriter and BinaryReader . This class automatically generates a new initialization vector for every encyption operation. This ensures that every encryption operation will generate different ciphertext even when the key and data haven't changed to enhance security. The class is designed to be easier to use than the .NET Core AesManaged base implementation. To encrypt data: Generate an encryption key via GenerateKey(Int32) and create an instance via AesCipher(String, Int32) passing the key, or just call AesCipher(Int32, Int32) to create with a generated key of the specified size. You can always obtain the key via the Key property. Call one of EncryptToBase64(Byte[]) , EncryptToBase64(Byte[]) , EncryptToBytes(String) , or EncryptToBytes(Byte[]) to perform the encryption with varying input and output formats. To decrypt data: Use AesCipher(String, Int32) to construct and instance using the key originally used to encrypt the data. Call one of DecryptBytesFrom(Byte[]) , DecryptBytesFrom(String) , DecryptStringFrom(Byte[]) , or DecryptStringFrom(Byte[]) . to decrypt data. Constructors AesCipher(Int32, Int32) Constructs an AES cypher using a randomly generated encyption key. Declaration public AesCipher(int keySize = 256, int maxPaddingBytes = 64) Parameters Type Name Description Int32 keySize Optionally specifies the key size (defaults to 256 bits ). Int32 maxPaddingBytes The maximum number of padding bytes. This must be less than or equal to 32767. This defaults to 64. Remarks Note that only these key sizes are currently supported: 128 , 192 , and 256 bits. Only 256 bits is currently considered to be secure. AesCipher(String, Int32) Constructs an AES cypher using a specific encryption key. Declaration public AesCipher(string key, int maxPaddingBytes = 64) Parameters Type Name Description String key The base-64 encoded key. Int32 maxPaddingBytes The maximum number of padding bytes. This must be less than or equal to 32767. This defaults to 64. Fields Magic The 32-bit magic number that will be written in plaintext to the beginning of the encrypted output to be used to verify that encrypted buffers will generated by this class. Declaration public const int Magic = 1002086453 Field Value Type Description Int32 Properties IV Returns the encyption initialization vector encoded as base-64. Declaration public string IV { get; } Property Value Type Description String Key Returns the encyption key encoded as base-64. Declaration public string Key { get; } Property Value Type Description String Methods DecryptBytesFrom(Byte[]) Decrypts the encrypted base-64 text passed returning the result as a byte array. Declaration public byte[] DecryptBytesFrom(byte[] encryptedBytes) Parameters Type Name Description Byte [] encryptedBytes The encrypted bytes. Returns Type Description Byte [] The encrypted result as a string. DecryptBytesFrom(String) Decrypts the encrypted base-64 text passed returning the result as a byte array. Declaration public byte[] DecryptBytesFrom(string encryptedBase64) Parameters Type Name Description String encryptedBase64 The encrypted base-64 text. Returns Type Description Byte [] The encrypted result as a string. DecryptStream(Stream, Stream) Decrypts one stream to another. Declaration public void DecryptStream(Stream encrypted, Stream decrypted) Parameters Type Name Description Stream encrypted The encrypted input stream. Stream decrypted The decrypted output stream. DecryptStringFrom(Byte[]) Decrypts the encrypted bytes passed returning the result as a string. Declaration public string DecryptStringFrom(byte[] encryptedBytes) Parameters Type Name Description Byte [] encryptedBytes The encrypted base-64 text. Returns Type Description String The encrypted result as a base-64 string. DecryptStringFrom(String) Decrypts the encrypted base-64 text passed returning the result as a string. Declaration public string DecryptStringFrom(string encryptedBase64) Parameters Type Name Description String encryptedBase64 The encrypted base-64 text. Returns Type Description String The encrypted result as a base-64 string. Dispose() Declaration public void Dispose() EncryptStream(Stream, Stream) Encrypts one stream to another. Declaration public void EncryptStream(Stream decrypted, Stream encrypted) Parameters Type Name Description Stream decrypted The decrypted input stream. Stream encrypted The encrypted output stream. EncryptToBase64(Byte[]) Encrypts the bytes passed returning the result encoded as base-64. Declaration public string EncryptToBase64(byte[] decryptedBytes) Parameters Type Name Description Byte [] decryptedBytes The unencrypted text. Returns Type Description String The encrypted result as base-64. EncryptToBase64(String) Encrypts the text passed returning the result encoded as base-64. Declaration public string EncryptToBase64(string decryptedText) Parameters Type Name Description String decryptedText The unencrypted text. Returns Type Description String The encrypted result as base-64. EncryptToBytes(Byte[]) Encrypts the text passed returning the result encoded as a byte array. Declaration public byte[] EncryptToBytes(byte[] decryptedBytes) Parameters Type Name Description Byte [] decryptedBytes The unencrypted bytes. Returns Type Description Byte [] The encrypted result as bytes. EncryptToBytes(String) Encrypts the text passed returning the result encoded as a byte array. Declaration public byte[] EncryptToBytes(string decryptedText) Parameters Type Name Description String decryptedText The unencrypted text. Returns Type Description Byte [] The encrypted result as bytes. GenerateKey(Int32) Generates a random encryption key with the specified size in bits. Declaration public static string GenerateKey(int keySize = 256) Parameters Type Name Description Int32 keySize The key size in bits (default 256 ). Returns Type Description String The key encoded as base-64. Remarks Note that only these key sizes are currently supported: 128 , 192 , and 256 bits. Only 256 bits is currently considered to be secure."
  },
  "neonsdk/api/Neon.Cryptography.CryptoExtensions.html": {
    "href": "neonsdk/api/Neon.Cryptography.CryptoExtensions.html",
    "title": "Class CryptoExtensions | NeonSDK documentation",
    "keywords": "Class CryptoExtensions Crytography extensions. Inheritance Object CryptoExtensions Namespace : Neon.Cryptography Assembly : Neon.Cryptography.dll Syntax public static class CryptoExtensions Methods ComputeHash(MD5, String) Computes a hash from a UTF-8 encoded string. Declaration public static byte[] ComputeHash(this MD5 hasher, string input) Parameters Type Name Description MD5 hasher The hasher. String input The input string. Returns Type Description Byte [] The hash bytes. ComputeHashBase64(MD5, String) Computes a hash from a UTF-8 encoded string and then encodes the result as base-64. Declaration public static string ComputeHashBase64(this MD5 hasher, string input) Parameters Type Name Description MD5 hasher The hasher. String input The input string. Returns Type Description String The hash bytes encoded as base-64."
  },
  "neonsdk/api/Neon.Cryptography.CryptoHelper.html": {
    "href": "neonsdk/api/Neon.Cryptography.CryptoHelper.html",
    "title": "Class CryptoHelper | NeonSDK documentation",
    "keywords": "Class CryptoHelper Crypography related helper methods. Inheritance Object CryptoHelper Namespace : Neon.Cryptography Assembly : Neon.Cryptography.dll Syntax public static class CryptoHelper Fields HMAC256ByteCount The size of an HMAC256 in bytes. Declaration public const int HMAC256ByteCount = 32 Field Value Type Description Int32 HMAC512ByteCount The size of an HMAC512 in bytes. Declaration public const int HMAC512ByteCount = 64 Field Value Type Description Int32 MD5ByteSize The number of bytes in a MD5 hash. Declaration public const int MD5ByteSize = 16 Field Value Type Description Int32 SHA1ByteSize The number of bytes in a SHA1 hash. Declaration public const int SHA1ByteSize = 20 Field Value Type Description Int32 SHA256ByteSize The number of bytes in a SHA256 hash. Declaration public const int SHA256ByteSize = 32 Field Value Type Description Int32 SHA512ByteSize The number of bytes in a SHA512 hash. Declaration public const int SHA512ByteSize = 64 Field Value Type Description Int32 Methods ComputeMD5Bytes(Byte[]) Computes the MD5 hash for a byte array and returns the result as a byte array. Declaration public static byte[] ComputeMD5Bytes(byte[] input) Parameters Type Name Description Byte [] input The input bytes. Returns Type Description Byte [] The hash as a byte array. ComputeMD5Bytes(Stream) Computes the MD5 hash for a stream from the current position until the end and returns the result as a byte array. Declaration public static byte[] ComputeMD5Bytes(Stream input) Parameters Type Name Description Stream input The stream. Returns Type Description Byte [] The hash as a byte array. ComputeMD5Bytes(String) Computes the MD5 hash for a string and returns the result as a byte array. Declaration public static byte[] ComputeMD5Bytes(string input) Parameters Type Name Description String input The input string. Returns Type Description Byte [] The hash as a byte array. ComputeMD5BytesFromFile(String) Computes the MD5 hash for file and returns the result returns the result as a byte array. Declaration public static byte[] ComputeMD5BytesFromFile(string path) Parameters Type Name Description String path The source file path. Returns Type Description Byte [] The hash as a byte array. ComputeMD5String(Byte[]) Computes the MD5 hash for a byte array and returns the result formatted as a lowercase hex string. Declaration public static string ComputeMD5String(byte[] input) Parameters Type Name Description Byte [] input The input bytes. Returns Type Description String The hash as a HEX string. ComputeMD5String(Stream) Computes the MD5 hash for a stream from the current position' until the end and returns the result formatted as a lowercase hex string. Declaration public static string ComputeMD5String(Stream input) Parameters Type Name Description Stream input The stream. Returns Type Description String The hash as a HEX string. ComputeMD5String(String) Computes the MD5 hash for a string and returns the result formatted as a lowercase hex string. Declaration public static string ComputeMD5String(string input) Parameters Type Name Description String input The input string. Returns Type Description String The hash as a HEX string. ComputeMD5StringFromFile(String) Computes the MD5 hash for file and returns the result formatted as a lowercase hex string. Declaration public static string ComputeMD5StringFromFile(string path) Parameters Type Name Description String path The source file path. Returns Type Description String The hash as a HEX string. ComputeSHA1Bytes(Byte[]) Computes the SHA1 hash for a byte array and returns the result as a byte array. Declaration public static byte[] ComputeSHA1Bytes(byte[] input) Parameters Type Name Description Byte [] input The input bytes. Returns Type Description Byte [] The hash as a byte array. ComputeSHA1Bytes(Stream) Computes the SHA1 hash for a stream from the current position' until the end and returns the result formatted as a lowercase hex string. Declaration public static byte[] ComputeSHA1Bytes(Stream input) Parameters Type Name Description Stream input The stream. Returns Type Description Byte [] The hash as a byte array. ComputeSHA1Bytes(String) Computes the SHA1 hash for a string and returns the result as a byte array. Declaration public static byte[] ComputeSHA1Bytes(string input) Parameters Type Name Description String input The input string. Returns Type Description Byte [] The hash as a byte array. ComputeSHA1BytesFromFile(String) Computes the SHA1 hash for file and returns the result returns the result as a byte array. Declaration public static byte[] ComputeSHA1BytesFromFile(string path) Parameters Type Name Description String path The source file path. Returns Type Description Byte [] The hash as a byte array. ComputeSHA1String(Byte[]) Computes the SHA1 hash for a byte array and returns the result formatted as a lowercase hex string. Declaration public static string ComputeSHA1String(byte[] input) Parameters Type Name Description Byte [] input The input bytes. Returns Type Description String The hash as a HEX string. ComputeSHA1String(Stream) Computes the SHA1 hash for a stream from the current position' until the end and returns the result formatted as a lowercase hex string. Declaration public static string ComputeSHA1String(Stream input) Parameters Type Name Description Stream input The stream. Returns Type Description String The hash as a HEX string. ComputeSHA1String(String) Computes the SHA1 hash for a string and returns the result formatted as a lowercase hex string. Declaration public static string ComputeSHA1String(string input) Parameters Type Name Description String input The input string. Returns Type Description String The hash as a HEX string. ComputeSHA1StringFromFile(String) Computes the SHA1 hash for file and returns the result formatted as a lowercase hex string. Declaration public static string ComputeSHA1StringFromFile(string path) Parameters Type Name Description String path The source file path. Returns Type Description String The hash as a HEX string. ComputeSHA256Bytes(Byte[]) Computes the SHA256 hash for a byte array and returns the result as a byte array. Declaration public static byte[] ComputeSHA256Bytes(byte[] input) Parameters Type Name Description Byte [] input The input bytes. Returns Type Description Byte [] The hash as a byte array. ComputeSHA256Bytes(Stream) Computes the SHA256 hash for a stream from the current position' until the end and returns the result formatted as a lowercase hex string. Declaration public static byte[] ComputeSHA256Bytes(Stream input) Parameters Type Name Description Stream input The stream. Returns Type Description Byte [] The hash as a byte array. ComputeSHA256Bytes(String) Computes the SHA256 hash for a string and returns the result as a byte array. Declaration public static byte[] ComputeSHA256Bytes(string input) Parameters Type Name Description String input The input string. Returns Type Description Byte [] The hash as a byte array. ComputeSHA256BytesFromFile(String) Computes the SHA256 hash for file and returns the result returns the result as a byte array. Declaration public static byte[] ComputeSHA256BytesFromFile(string path) Parameters Type Name Description String path The source file path. Returns Type Description Byte [] The hash as a byte array. ComputeSHA256String(Byte[]) Computes the SHA256 hash for a byte array and returns the result formatted as a lowercase hex string. Declaration public static string ComputeSHA256String(byte[] input) Parameters Type Name Description Byte [] input The input bytes. Returns Type Description String The hash as a HEX string. ComputeSHA256String(Stream) Computes the SHA256 hash for a stream from the current position' until the end and returns the result formatted as a lowercase hex string. Declaration public static string ComputeSHA256String(Stream input) Parameters Type Name Description Stream input The stream. Returns Type Description String The hash as a HEX string. ComputeSHA256String(String) Computes the SHA256 hash for a string and returns the result formatted as a lowercase hex string. Declaration public static string ComputeSHA256String(string input) Parameters Type Name Description String input The input string. Returns Type Description String The hash as a HEX string. ComputeSHA256StringFromFile(String) Computes the SHA256 hash for file and returns the result formatted as a lowercase hex string. Declaration public static string ComputeSHA256StringFromFile(string path) Parameters Type Name Description String path The source file path. Returns Type Description String The hash as a HEX string. ComputeSHA512Bytes(Byte[]) Computes the SHA512 hash for a byte array and returns the result as a byte array. Declaration public static byte[] ComputeSHA512Bytes(byte[] input) Parameters Type Name Description Byte [] input The input bytes. Returns Type Description Byte [] The hash bytes. ComputeSHA512Bytes(Stream) Computes the SHA512 hash for a stream from the current position' until the end and returns the result formatted as a lowercase hex string. Declaration public static byte[] ComputeSHA512Bytes(Stream input) Parameters Type Name Description Stream input The stream. Returns Type Description Byte [] The hash as a byte array. ComputeSHA512Bytes(String) Computes the SHA512 hash for a string and returns the result as a byte array. Declaration public static byte[] ComputeSHA512Bytes(string input) Parameters Type Name Description String input The input string. Returns Type Description Byte [] The hash as a byte array. ComputeSHA512BytesFromFile(String) Computes the SHA512 hash for file and returns the result returns the result as a byte array. Declaration public static byte[] ComputeSHA512BytesFromFile(string path) Parameters Type Name Description String path The source file path. Returns Type Description Byte [] The hash as a byte array. ComputeSHA512String(Byte[]) Computes the SHA512 hash for a byte array and returns the result formatted as a lowercase hex string. Declaration public static string ComputeSHA512String(byte[] input) Parameters Type Name Description Byte [] input The input bytes. Returns Type Description String The hash as a HEX string. ComputeSHA512String(Stream) Computes the SHA512 hash for a stream from the current position' until the end and returns the result formatted as a lowercase hex string. Declaration public static string ComputeSHA512String(Stream input) Parameters Type Name Description Stream input The stream. Returns Type Description String The hash as a HEX string. ComputeSHA512String(String) Computes the SHA512 hash for a string and returns the result formatted as a lowercase hex string. Declaration public static string ComputeSHA512String(string input) Parameters Type Name Description String input The input string. Returns Type Description String The hash as a HEX string. ComputeSHA512StringFromFile(String) Computes the SHA512 hash for file and returns the result formatted as a lowercase hex string. Declaration public static string ComputeSHA512StringFromFile(string path) Parameters Type Name Description String path The source file path. Returns Type Description String The hash as a HEX string. DeriveKeyFromPassword(String, Int32) Generates a symmetric encryption key from a password string. Declaration public static byte[] DeriveKeyFromPassword(string password, int keySize) Parameters Type Name Description String password The input password. Int32 keySize The desired key size in bits (this must be less than or equal to 512 and be a factor of 8). Returns Type Description Byte [] The derived key."
  },
  "neonsdk/api/Neon.Cryptography.html": {
    "href": "neonsdk/api/Neon.Cryptography.html",
    "title": "Namespace Neon.Cryptography | NeonSDK documentation",
    "keywords": "Namespace Neon.Cryptography Classes AesCipher Implements a convienent wrapper over AesManaged that handles the encryption and decryption of data using the AES algorthim using many security best practices. CryptoExtensions Crytography extensions. CryptoHelper Crypography related helper methods. NeonVault Manages the encryption and decryption of files using passwords. This works a lot like Ansible Vault. Enums Wildcard Enumerates the possible wildcard certificate generation modes."
  },
  "neonsdk/api/Neon.Cryptography.NeonVault.html": {
    "href": "neonsdk/api/Neon.Cryptography.NeonVault.html",
    "title": "Class NeonVault | NeonSDK documentation",
    "keywords": "Class NeonVault Manages the encryption and decryption of files using passwords. This works a lot like Ansible Vault. Inheritance Object NeonVault Namespace : Neon.Cryptography Assembly : Neon.Cryptography.dll Syntax public class NeonVault Remarks This class works by using AesCipher with a 256-bit key to encrypt and decrypt files using a Neon standard ASCII text file format. This encryption is performed using the value of a named password as the encryption key. The class depends on a password provider function like string LookupPassword(string) that will return the value for a named password. The idea here is that applications will define one or more named passwords like: mypassword1=GU6qc2vsJgmCWmdL and mypassword2=GBRDUqsX3GSKJ2af and then implement a password provider that returns the value of a password based on its name. You'll pass this provider to the NeonVault constructor. note Password names are case insensitive and will always be converted to lowercase using the invariant culture. Password names may include alphanumeric characters plus dashs, dots, or underscores. Password providers should throw an exception whenever the named password cannot be located. Most providers will throw a KeyNotFoundException when this happens. Encrypted files are encoded as ASCII and are formatted like: $NEON_VAULT;4C823A36774CA4AC760F31DD8ABE7BD3;1.0;AES256;PASSWORD-NAME 4c5330744c5331435255644a5469424452564a5553555a4a51304655525330744c533074436b314a 53554e3552454e4451574a445a30463353554a425a306c4351555242546b4a6e6133466f61326c48 4f586377516b465263305a425245465754564a4e64305652575552575556464552586477636d5258 536d774b5932303162475248566e704e516a5259524652464e5531455358644e616b557954587072 4d4535736231684556456b3154555246656b314552544a4e656d7377546d787664305a555256524e 516b564851544656525170426545314c59544e5761567059536e566157464a735933704451304654 5358644555566c4b53323961535768325930354255555643516c46425247646e5256424252454e44 515646765132646e52554a42536d6c50436c6b345a45395163324a454f466379526c6b30566a5274 595570584d323032634452714e5467314e7a4131627a4e47527a6859564730724e33686957465130 546b68775645686d646e686161584e685a6e6f304f54414b4c325a6a53454d32546b4d3464697445 4e7a5a355931685156564a3164576f724f56646e51335133555670735a574d7954474a364b7a5a6f 55466f7a4c32347962544e7a51573952536c527253574e7565485172625170575458527157554d35 57573970633145305a453877634646444c3141784d6d4d7951586c46515663334d314a4555314256 526e597a555770365a47777255577052564556784b3068305257704a52544659626b4a70436e4a42 563078334d323872656d5a4f4e30684559555534596d7061636a4a765a7a687459574a454e566444 4c30395656 The first line of the file holds metadata that is used to identify encrypted files and also to identify the encryption method and name of the password to be used for decryption. The remaining lines encode the encrypted AesCipher output encoded as 80 character lines of HEX digits. This class considers files starting $NEON_VAULT;4C823A36774CA4AC760F31DD8ABE7BD3 to be encrypted. This essentially acts as a very unique magic number. This is followed by the NeonVault format version (currently 1.0 ), the encryption cypher (currently AES256 ), and the name of the password that was used for encryption. The decrypt methods are smart enough to determine whether a file is not encrypted and simply write the unencrypted data to the target. This means that you can safely call these methods on unencrypted data. This class provides several methods to encrypt and decrypt data given a password. note Source Stream instances passed to encryption and decryption methods must support reading and seeking and target Stream instances must support writing as well as reading and seeking to support HMAC signatures. Constructors NeonVault(Func<String, String>, String) Constructor. Declaration public NeonVault(Func<string, string> passwordProvider, string lineEnding = null) Parameters Type Name Description Func < String , String > passwordProvider Specifies the function that returns the password value for a named password. String lineEnding Optionally specifies line ending to be used when writing the output file. This defaults to the current platform's line ending: \"\\r\\n\" for Windows and \"\\n\" for Linux, OS/X, etc. Fields MagicString The string at the beginning of all files encrypted by NeonVault . This is used to identify these files. Declaration public const string MagicString = \"$NEON_VAULT;4C823A36774CA4AC760F31DD8ABE7BD3;\" Field Value Type Description String Properties MagicBytes Returns MagicString encoded as a byte array for ease of use. Declaration public static byte[] MagicBytes { get; } Property Value Type Description Byte [] Methods Decrypt(Stream) Decrypts a stream to a byte array. Declaration public byte[] Decrypt(Stream source) Parameters Type Name Description Stream source The source. Returns Type Description Byte [] The decrypted byte array. Exceptions Type Condition CryptographicException Thrown if the password was not found or for other decryption problems. Decrypt(Stream, Stream) Decrypts a stream to another stream. Declaration public void Decrypt(Stream source, Stream target) Parameters Type Name Description Stream source The source stream. Stream target The target stream. Exceptions Type Condition CryptographicException Thrown if the password was not found or for other decryption problems. Decrypt(String) Decrypts file to a byte array. Declaration public byte[] Decrypt(string sourcePath) Parameters Type Name Description String sourcePath The source path. Returns Type Description Byte [] The decrypted bytes. Exceptions Type Condition CryptographicException Thrown if the password was not found or for other decryption problems. Decrypt(String, Stream) Decrypts a file to a stream. Declaration public void Decrypt(string sourcePath, Stream target) Parameters Type Name Description String sourcePath The source path. Stream target The target stream. Exceptions Type Condition CryptographicException Thrown if the password was not found or for other decryption problems. Decrypt(String, String) Decrypts a file to another file. Declaration public void Decrypt(string sourcePath, string targetPath) Parameters Type Name Description String sourcePath The source path. String targetPath The target path. Exceptions Type Condition CryptographicException Thrown if the password was not found or for other decryption problems. Encrypt(Stream, Stream, String) Encrypts a stream to another stream. Declaration public void Encrypt(Stream source, Stream target, string passwordName) Parameters Type Name Description Stream source The source stream. Stream target The target stream. String passwordName Identifies the password. Exceptions Type Condition CryptographicException Thrown if the password was not found or for other encryption problems. Encrypt(Stream, String) Encrypts a stream to a byte array. Declaration public byte[] Encrypt(Stream source, string passwordName) Parameters Type Name Description Stream source The source stream. String passwordName Identifies the password. Returns Type Description Byte [] The encrypted bytes. Exceptions Type Condition CryptographicException Thrown if the password was not found or for other encryption problems. Encrypt(Stream, String, String) Encrypts a stream to a file. Declaration public void Encrypt(Stream source, string targetPath, string passwordName) Parameters Type Name Description Stream source The source stream. String targetPath The target path. String passwordName Identifies the password. Exceptions Type Condition CryptographicException Thrown if the password was not found or for other encryption problems. Encrypt(String, String) Encrypts a file to a byte array. Declaration public byte[] Encrypt(string sourcePath, string passwordName) Parameters Type Name Description String sourcePath The source path. String passwordName Identifies the password. Returns Type Description Byte [] The encrypted bytes. Exceptions Type Condition CryptographicException Thrown if the password was not found or for other encryption problems. Encrypt(String, String, String) Encrypts a file to another file. Declaration public void Encrypt(string sourcePath, string targetPath, string passwordName) Parameters Type Name Description String sourcePath The source path. String targetPath The target path. String passwordName Identifies the password. Exceptions Type Condition CryptographicException Thrown if the password was not found or for other encryption problems. IsEncrypted(Stream) Determines if a stream is encrypted via NeonVault . Declaration public static bool IsEncrypted(Stream stream) Parameters Type Name Description Stream stream The stream. Returns Type Description Boolean true if the stream is encrypted. Remarks note The stream position must be at the beginning of the stream for this to work. IsEncrypted(Stream, out String) Determines if a stream is encrypted via NeonVault and returns the name of the password used. Declaration public static bool IsEncrypted(Stream stream, out string passwordName) Parameters Type Name Description Stream stream The stream. String passwordName For encrypted files, this returns as the name of the password used. Returns Type Description Boolean true if the stream is encrypted. Remarks note The stream position must be at the beginning of the stream for this to work. IsEncrypted(String) Determines if a file is encrypted via NeonVault . Declaration public static bool IsEncrypted(string path) Parameters Type Name Description String path The file path. Returns Type Description Boolean true if the file is encrypted. IsEncrypted(String, out String) Determines if a file is encrypted via NeonVault and returns the name of the password used. Declaration public static bool IsEncrypted(string path, out string passwordName) Parameters Type Name Description String path The file path. String passwordName For encrypted files, this returns as the name of the password used. Returns Type Description Boolean true if the file is encrypted. ValidatePasswordName(String) Ensures that a password name is valid. Declaration public static string ValidatePasswordName(string passwordName) Parameters Type Name Description String passwordName The password name. Returns Type Description String The password name converted to lowercase. Exceptions Type Condition CryptographicException Thrown if the name is invalid."
  },
  "neonsdk/api/Neon.Cryptography.Wildcard.html": {
    "href": "neonsdk/api/Neon.Cryptography.Wildcard.html",
    "title": "Enum Wildcard | NeonSDK documentation",
    "keywords": "Enum Wildcard Enumerates the possible wildcard certificate generation modes. Namespace : Neon.Cryptography Assembly : Neon.Cryptography.dll Syntax public enum Wildcard Fields Name Description None Do not create a wildcard certificate. RootAndSubdomains Create a certificate the covers both the root domain mydomain.com as well as all subdomains *.mydomain.com . SubdomainsOnly Create a certificate that covers all subdomains *.mydomain.com . Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.CSharp.CompilerErrorException.html": {
    "href": "neonsdk/api/Neon.CSharp.CompilerErrorException.html",
    "title": "Class CompilerErrorException | NeonSDK documentation",
    "keywords": "Class CompilerErrorException Thrown for a compiler error. Inheritance Object Exception CompilerErrorException Namespace : Neon.CSharp Assembly : Neon.CSharp.dll Syntax public class CompilerErrorException : Exception, ISerializable Constructors CompilerErrorException(IEnumerable<Diagnostic>) Constructor. Declaration public CompilerErrorException(IEnumerable<Diagnostic> diagnostics) Parameters Type Name Description IEnumerable < Diagnostic > diagnostics The compiler diagnostics. Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.CSharp.CSharpHelper.html": {
    "href": "neonsdk/api/Neon.CSharp.CSharpHelper.html",
    "title": "Class CSharpHelper | NeonSDK documentation",
    "keywords": "Class CSharpHelper C# dynamic compilation related utilities. Inheritance Object CSharpHelper Namespace : Neon.CSharp Assembly : Neon.CSharp.dll Syntax public static class CSharpHelper Properties RuntimeReferenceAssemblies Returns the reference assembles for the current .NET runtime environment. These are required when dynamically compiling C# code. Declaration public static IEnumerable<PortableExecutableReference> RuntimeReferenceAssemblies { get; } Property Value Type Description IEnumerable < PortableExecutableReference > Exceptions Type Condition NotSupportedException Thrown when the current runtime environment is not recognized or supported. Methods Compile(String, String, Action<MetadataReferences>, CSharpCompilationOptions) Compiles C# source code into an assembly. Declaration public static MemoryStream Compile(string source, string assemblyName, Action<MetadataReferences> referenceHandler = null, CSharpCompilationOptions compilerOptions = null) Parameters Type Name Description String source The C# source code. String assemblyName The generated assembly name. Action < MetadataReferences > referenceHandler Called to manage metadata/assembly references (see remarks). CSharpCompilationOptions compilerOptions Optional compilation options. This defaults to building a release assembly. Returns Type Description MemoryStream The compiled assembly as a MemoryStream . Remarks By default, this method will compile the assembly with the standard reference assemblies for the currently executing runtime. You may customize these by passing a referenceHandler action. This is passed the list of MetadataReference instances. You can add or remove references as required. The easiest way to add a reference is to use type reference like: using Microsoft.CodeAnalysis; ... var source = \"public class Foo {}\"; var assembly = CSharpHelper.Compile(source, \"my-assembly\", references => { references.Add(typeof(MyClass)); // Adds the assembly containing MyClass. }); Exceptions Type Condition CompilerErrorException Thrown for compiler errors."
  },
  "neonsdk/api/Neon.CSharp.html": {
    "href": "neonsdk/api/Neon.CSharp.html",
    "title": "Namespace Neon.CSharp | NeonSDK documentation",
    "keywords": "Namespace Neon.CSharp Classes CompilerErrorException Thrown for a compiler error. CSharpHelper C# dynamic compilation related utilities. MetadataReferences Specifies the metadata references to be used when compiling C# code."
  },
  "neonsdk/api/Neon.CSharp.MetadataReferences.html": {
    "href": "neonsdk/api/Neon.CSharp.MetadataReferences.html",
    "title": "Class MetadataReferences | NeonSDK documentation",
    "keywords": "Class MetadataReferences Specifies the metadata references to be used when compiling C# code. Inheritance Object List < MetadataReference > MetadataReferences Namespace : Neon.CSharp Assembly : Neon.CSharp.dll Syntax public class MetadataReferences : List<MetadataReference>, IList<MetadataReference>, ICollection<MetadataReference>, IReadOnlyList<MetadataReference>, IReadOnlyCollection<MetadataReference>, IEnumerable<MetadataReference>, IList, ICollection, IEnumerable Methods Add(Type) Adds the assembly holding a specific type to the references. Declaration public void Add(Type type) Parameters Type Name Description Type type The type."
  },
  "neonsdk/api/Neon.Csv.CsvReader.html": {
    "href": "neonsdk/api/Neon.Csv.CsvReader.html",
    "title": "Class CsvReader | NeonSDK documentation",
    "keywords": "Class CsvReader Parses CSV encoded rows from text. Inheritance Object CsvReader Namespace : Neon.Csv Assembly : Neon.Common.dll Syntax public sealed class CsvReader : IDisposable Remarks Use this class to parse CSV encoded tables. Use one of the constructors to initialize in instance to read from a file, Stream , string, or a TextReader and then call Read() to read each row of the table. This class handles the all special cases for CSV parsing including quoted fields, escaped double quotes, and fields that include CR and LF characters. Be sure to call Close() or Dispose() when you are finished with the class to release any underlying resources. note The underlying stream must support seeking for this class to work properly. Constructors CsvReader(Stream, Encoding) Constructs a reader to parse a stream. Declaration public CsvReader(Stream stream, Encoding encoding) Parameters Type Name Description Stream stream The input stream. Encoding encoding The stream's character Encoding . CsvReader(TextReader) Constructs a reader to parse text from a TextReader . Declaration public CsvReader(TextReader reader) Parameters Type Name Description TextReader reader The TextReader . CsvReader(String) Constructs a reader to parse a string. Declaration public CsvReader(string text) Parameters Type Name Description String text The text string. Methods Close() Closes the reader if it is still open. Declaration public void Close() Dispose() Releases any resources associated with the reader. Declaration public void Dispose() Read() Parses and returns the next row of fields. Declaration public List<string> Read() Returns Type Description List < String > A list of parsed field strings or null if the end of the input stream has been reached. Rows() Returns an enumerator that returns the data rows from a CsvReader . Declaration public IEnumerable<List<string>> Rows() Returns Type Description IEnumerable < List < String >> The next row as a List<T> ."
  },
  "neonsdk/api/Neon.Csv.CsvTableReader.html": {
    "href": "neonsdk/api/Neon.Csv.CsvTableReader.html",
    "title": "Class CsvTableReader | NeonSDK documentation",
    "keywords": "Class CsvTableReader Used to read a CSV table that includes row headers. Inheritance Object CsvTableReader Namespace : Neon.Csv Assembly : Neon.Common.dll Syntax public class CsvTableReader : IDisposable Remarks This class makes it easy to process tabular data loaded from a CSV file, where the first row of the file contains the row header strings that identify the table columns. Initialize an instance by passing a CsvReader , stream, string, or file path to the constructor. The constructor will read the first row of the file and initialize the ColumnMap dictionary which maps the case insensitive column name to the zero based index of the column in the table. You'll process each data row by calling ReadRow() . This returns a list with the next row of data or null if the end of the table has been reached. You can process the row data returned directly or use the GetColumn(String) method to access a column value on the current row directly. note This class is tolerant of blank or duplicate column names. In the case of duplicates, the first column matching the requested column name will be used when parsing data. Applications should call the reader's Dispose() or Close() method when they are finished with the reader so that the underlying CsvReader will be closed as well, promptly releasing any system resources (such as the stream). Constructors CsvTableReader(CsvReader) Constructs an instance to read from a CsvReader . Declaration public CsvTableReader(CsvReader reader) Parameters Type Name Description CsvReader reader The CsvReader to read from. CsvTableReader(Stream, Encoding) Constructs an instance to read from a stream. Declaration public CsvTableReader(Stream stream, Encoding encoding) Parameters Type Name Description Stream stream The input stream. Encoding encoding The stream's character Encoding . CsvTableReader(TextReader) Constructs an instance to read from a TextReader . Declaration public CsvTableReader(TextReader reader) Parameters Type Name Description TextReader reader The reader. CsvTableReader(String) Constructs an instance to read from a CSV string. Declaration public CsvTableReader(string text) Parameters Type Name Description String text The CSV text. Properties ColumnMap Returns the dictionary that case insensitvely maps a column name to the zero based index of the column. Declaration public Dictionary<string, int> ColumnMap { get; } Property Value Type Description Dictionary < String , Int32 > Columns Returns the list of table columns in the order read from the source. Declaration public List<string> Columns { get; } Property Value Type Description List < String > Item[Int32] Indexer that returns the value for a column. Declaration public string this[int column] { get; } Parameters Type Name Description Int32 column The column index. Property Value Type Description String The column value or null if the column (or row) does not exist. Item[String] Indexer that returns the value for the named column in the current row. Declaration public string this[string columnName] { get; } Parameters Type Name Description String columnName The column name. Property Value Type Description String The column value or null if the column (or row) does not exist. Reader Returns the underlying CsvReader or null if the reader is closed. Declaration public CsvReader Reader { get; } Property Value Type Description CsvReader Methods Close() Closes the reader if it is still open. Declaration public void Close() Dispose() Releases any system resources held by the instance, Declaration public void Dispose() GetColumn(String) Returns the value for the named column in the current row. Declaration public string GetColumn(string columnName) Parameters Type Name Description String columnName The column name. Returns Type Description String The column value or null if the column (or row) does not exist. IsEmpty(String) Determines whether a cell in a named column in the current row is empty or if the column does not exist. Declaration public bool IsEmpty(string columnName) Parameters Type Name Description String columnName The column name. Returns Type Description Boolean true if the cell is empty or the named column is not present. ReadRow() Reads the next row of table. Declaration public List<string> ReadRow() Returns Type Description List < String > The list of column values or null if the end of the table has been reached. Rows() Returns an enumerator that returns the data rows from a CsvTableReader . Declaration public IEnumerable<List<string>> Rows() Returns Type Description IEnumerable < List < String >> The next row as a List<T> ."
  },
  "neonsdk/api/Neon.Csv.CsvTableWriter.html": {
    "href": "neonsdk/api/Neon.Csv.CsvTableWriter.html",
    "title": "Class CsvTableWriter | NeonSDK documentation",
    "keywords": "Class CsvTableWriter Used to generate a CSV table. Inheritance Object CsvTableWriter Namespace : Neon.Csv Assembly : Neon.Common.dll Syntax public class CsvTableWriter : IDisposable Remarks This class is used to generate a CSV table with column headers with the class handling the mapping of column names to columns. The class is easy to use. Simply construct an instance, passing an array of case insensitive table column header names and then write table rows by calling Set() methods to set row cell values and then WriteRow() to write each row to the output. Constructors CsvTableWriter(String[], CsvWriter) Constructs an instance to write to a CsvWriter . Declaration public CsvTableWriter(string[] columnHeaders, CsvWriter writer) Parameters Type Name Description String [] columnHeaders The table column names. CsvWriter writer The CsvWriter to write to. Remarks note This method writes the column headers passed to the writer so the application can begin writing rows of data. CsvTableWriter(String[], Stream, Encoding) Constructs an instance to write to a stream. Declaration public CsvTableWriter(string[] columnHeaders, Stream stream, Encoding encoding) Parameters Type Name Description String [] columnHeaders The table column names. Stream stream The output stream. Encoding encoding The file's character Encoding . Remarks note This method writes the column headers passed to the writer so the application can begin writing rows of data. CsvTableWriter(String[], TextWriter) Constructs an instance to write to a TextWriter . Declaration public CsvTableWriter(string[] columnHeaders, TextWriter writer) Parameters Type Name Description String [] columnHeaders The table column names. TextWriter writer The writer. Remarks note This method writes the column headers passed to the writer so the application can begin writing rows of data. Properties ColumnMap Returns the dictionary that case insensitvely maps a column name to the zero base index of the column. Declaration public Dictionary<string, int> ColumnMap { get; } Property Value Type Description Dictionary < String , Int32 > Row Returns the current row array. Declaration public string[] Row { get; } Property Value Type Description String [] Writer Returns the underlying CsvWriter or null if the writer is closed. Declaration public CsvWriter Writer { get; } Property Value Type Description CsvWriter Methods Close() Closes the reader if it is still open. Declaration public void Close() Dispose() Releases any system resources held by the instance, Declaration public void Dispose() GetColumnIndex(String) Returns the zero-based index of the specified column. Declaration public int GetColumnIndex(string columnName) Parameters Type Name Description String columnName The column name. Returns Type Description Int32 The index of the column or -1 if the column does not exist. Set(String, Object) Sets the value of a named table column in the current row. Declaration public void Set(string columnName, object value) Parameters Type Name Description String columnName The column name. Object value The column value. Remarks note This method will do nothing if the columnName passed does not map to a table column. Set(String, String) Sets the value of a named table column in the current row. Declaration public void Set(string columnName, string value) Parameters Type Name Description String columnName The column name. String value The column value. Remarks note This method will do nothing if the columnName passed does not map to a table column. WriteRow() Writes the current row of data to the output and then clears the row so the application can begin setting the next row. Declaration public void WriteRow()"
  },
  "neonsdk/api/Neon.Csv.CsvWriter.html": {
    "href": "neonsdk/api/Neon.Csv.CsvWriter.html",
    "title": "Class CsvWriter | NeonSDK documentation",
    "keywords": "Class CsvWriter Writes lines of CSV encoded columns to a file or TextWriter . Inheritance Object CsvWriter Namespace : Neon.Csv Assembly : Neon.Common.dll Syntax public sealed class CsvWriter : IDisposable Constructors CsvWriter(Stream, Encoding) Constructs a writer to a stream. Declaration public CsvWriter(Stream stream, Encoding encoding) Parameters Type Name Description Stream stream The output stream. Encoding encoding The stream's character Encoding . CsvWriter(TextWriter) Constructs a writer to a TextWriter . Declaration public CsvWriter(TextWriter writer) Parameters Type Name Description TextWriter writer The TextWriter . Methods Close() Closes the writer if it is still open. Declaration public void Close() Dispose() Releases any resources associated with the reader. Declaration public void Dispose() WriteLine(Object[]) Writes the arguments passed to the output, separating each argument with a comma and adding escape characters as necessary. Declaration public void WriteLine(params object[] args) Parameters Type Name Description Object [] args The arguments."
  },
  "neonsdk/api/Neon.Csv.html": {
    "href": "neonsdk/api/Neon.Csv.html",
    "title": "Namespace Neon.Csv | NeonSDK documentation",
    "keywords": "Namespace Neon.Csv Classes CsvReader Parses CSV encoded rows from text. CsvTableReader Used to read a CSV table that includes row headers. CsvTableWriter Used to generate a CSV table. CsvWriter Writes lines of CSV encoded columns to a file or TextWriter ."
  },
  "neonsdk/api/Neon.Data.DateTimeJsonConverter.html": {
    "href": "neonsdk/api/Neon.Data.DateTimeJsonConverter.html",
    "title": "Class DateTimeJsonConverter | NeonSDK documentation",
    "keywords": "Class DateTimeJsonConverter Newtonsoft: Implements a type converter for DateTime using the culture invariant yyyy-MM-ddTHH:mm:ss.fffZ format. note This converter assumes that the DateTime being converted is relative to UTC. Inheritance Object Newtonsoft.Json.JsonConverter Newtonsoft.Json.JsonConverter < DateTime > DateTimeJsonConverter Implements IEnhancedJsonConverter Namespace : Neon.Data Assembly : Neon.Common.dll Syntax public class DateTimeJsonConverter : JsonConverter<DateTime>, IEnhancedJsonConverter Properties Type Returns the type handled by the converter. Declaration public Type Type { get; } Property Value Type Description Type Methods ReadJson(JsonReader, Type, DateTime, Boolean, JsonSerializer) Declaration public override DateTime ReadJson(JsonReader reader, Type objectType, DateTime existingValue, bool hasExistingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader Type objectType DateTime existingValue Boolean hasExistingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description DateTime Overrides Newtonsoft.Json.JsonConverter<System.DateTime>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.DateTime, System.Boolean, Newtonsoft.Json.JsonSerializer) ToSimpleString(Object) Converts an object instance to a simple (non-JSON) string. Declaration public string ToSimpleString(object instance) Parameters Type Name Description Object instance The object instance. Returns Type Description String The rendered string. WriteJson(JsonWriter, DateTime, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, DateTime value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer DateTime value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter<System.DateTime>.WriteJson(Newtonsoft.Json.JsonWriter, System.DateTime, Newtonsoft.Json.JsonSerializer) Implements IEnhancedJsonConverter"
  },
  "neonsdk/api/Neon.Data.DateTimeOffsetJsonConverter.html": {
    "href": "neonsdk/api/Neon.Data.DateTimeOffsetJsonConverter.html",
    "title": "Class DateTimeOffsetJsonConverter | NeonSDK documentation",
    "keywords": "Class DateTimeOffsetJsonConverter Newtonsoft: Implements a type converter for DateTimeOffset using the culture invariant yyyy-MM-ddTHH:mm:ss.fffzzz format. Inheritance Object Newtonsoft.Json.JsonConverter Newtonsoft.Json.JsonConverter < DateTimeOffset > DateTimeOffsetJsonConverter Implements IEnhancedJsonConverter Namespace : Neon.Data Assembly : Neon.Common.dll Syntax public class DateTimeOffsetJsonConverter : JsonConverter<DateTimeOffset>, IEnhancedJsonConverter Properties Type Returns the type handled by the converter. Declaration public Type Type { get; } Property Value Type Description Type Methods ReadJson(JsonReader, Type, DateTimeOffset, Boolean, JsonSerializer) Declaration public override DateTimeOffset ReadJson(JsonReader reader, Type objectType, DateTimeOffset existingValue, bool hasExistingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader Type objectType DateTimeOffset existingValue Boolean hasExistingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description DateTimeOffset Overrides Newtonsoft.Json.JsonConverter<System.DateTimeOffset>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.DateTimeOffset, System.Boolean, Newtonsoft.Json.JsonSerializer) ToSimpleString(Object) Converts an object instance to a simple (non-JSON) string. Declaration public string ToSimpleString(object instance) Parameters Type Name Description Object instance The object instance. Returns Type Description String The rendered string. WriteJson(JsonWriter, DateTimeOffset, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, DateTimeOffset value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer DateTimeOffset value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter<System.DateTimeOffset>.WriteJson(Newtonsoft.Json.JsonWriter, System.DateTimeOffset, Newtonsoft.Json.JsonSerializer) Implements IEnhancedJsonConverter"
  },
  "neonsdk/api/Neon.Data.html": {
    "href": "neonsdk/api/Neon.Data.html",
    "title": "Namespace Neon.Data | NeonSDK documentation",
    "keywords": "Namespace Neon.Data Classes DateTimeJsonConverter Newtonsoft: Implements a type converter for DateTime using the culture invariant yyyy-MM-ddTHH:mm:ss.fffZ format. note This converter assumes that the DateTime being converted is relative to UTC. DateTimeOffsetJsonConverter Newtonsoft: Implements a type converter for DateTimeOffset using the culture invariant yyyy-MM-ddTHH:mm:ss.fffzzz format. IntegerEnumConverter<TEnum> Newtonsoft: Implements a type converter that converts between integers and an enum type. NotifyPropertyChanged A common implementation of INotifyPropertyChanged . RoundtripDataFactory Used to instantiate code generated classes that implement IRoundtripData as generated by the Neon.ModelGen assembly. RoundtripDataHelper Serialization related helpers used by the code generated by the Neon.ModelGen library. TimeSpanJsonConverter Implements a type converter for TimeSpan using the culture invariant \"c\" format. This serializes TimeSpan instances as: [-][d'.']hh':'mm':'ss['.'fffffff] VersionJsonConverter Implements a type converter for Version . Interfaces IEnhancedJsonConverter Newtonsoft: Extends the standard Newtonsoft.Json.JsonConverter by returning the type handled by the converter. note Newtonsoft.Json.JsonConverter classes need to implement this interface to be automatically supported by classes generated by Neon.ModelGen . IGeneratedServiceClient Used to identify a generated ASP.NET service client. IPersistableType Non generic interface describing an entity that can be persisted to a database. See IPersistableType<T> for more information. IPersistableType<T> Generic interface describing an entity that can be persisted to a database. IRoundtripData Used by the Neon.ModelGen assembly to indicate that a class was generated as a round-trip data model."
  },
  "neonsdk/api/Neon.Data.IEnhancedJsonConverter.html": {
    "href": "neonsdk/api/Neon.Data.IEnhancedJsonConverter.html",
    "title": "Interface IEnhancedJsonConverter | NeonSDK documentation",
    "keywords": "Interface IEnhancedJsonConverter Newtonsoft: Extends the standard Newtonsoft.Json.JsonConverter by returning the type handled by the converter. note Newtonsoft.Json.JsonConverter classes need to implement this interface to be automatically supported by classes generated by Neon.ModelGen . Namespace : Neon.Data Assembly : Neon.Common.dll Syntax public interface IEnhancedJsonConverter Properties Type Returns the type handled by the converter. Declaration Type Type { get; } Property Value Type Description Type Methods ToSimpleString(Object) Converts an object instance to a simple (non-JSON) string. Declaration string ToSimpleString(object instance) Parameters Type Name Description Object instance The object instance. Returns Type Description String The rendered string."
  },
  "neonsdk/api/Neon.Data.IGeneratedServiceClient.html": {
    "href": "neonsdk/api/Neon.Data.IGeneratedServiceClient.html",
    "title": "Interface IGeneratedServiceClient | NeonSDK documentation",
    "keywords": "Interface IGeneratedServiceClient Used to identify a generated ASP.NET service client. Namespace : Neon.Data Assembly : Neon.Common.dll Syntax public interface IGeneratedServiceClient Properties GeneratorVersion Returns the version of the Neon.ModelGen assembly that generated this code plus the generated code schema version. This is formatted like: SEMANTIC-VERSION:SCHEMA where SCHEMA-VERSION is the Neon.ModelGen assembly version and SCHEMA is a simple integer schema version number. The version will be incremented if or when the code generated by future versions of the Neon.ModelGen assembly changes enough to become incompatible with older versions of the Neon.Xunit.XunitExtensions.ValidateController() method. This is likely to never change, but future proofing is always a good idea. Declaration string GeneratorVersion { get; } Property Value Type Description String Extension Methods XunitExtensions.ValidateController<TServiceController>(IGeneratedServiceClient)"
  },
  "neonsdk/api/Neon.Data.IntegerEnumConverter-1.html": {
    "href": "neonsdk/api/Neon.Data.IntegerEnumConverter-1.html",
    "title": "Class IntegerEnumConverter<TEnum> | NeonSDK documentation",
    "keywords": "Class IntegerEnumConverter<TEnum> Newtonsoft: Implements a type converter that converts between integers and an enum type. Inheritance Object Newtonsoft.Json.JsonConverter IntegerEnumConverter<TEnum> Namespace : Neon.Data Assembly : Neon.Common.dll Syntax public class IntegerEnumConverter<TEnum> : JsonConverter where TEnum : struct, Enum Type Parameters Name Description TEnum The enumation type being converted. Remarks note This works for both string and integer values and we don't ensure that an integer input value actually corresponds to an enum value, we just cast the integer. Methods CanConvert(Type) Determines whether the converter is able to convert a value of a specific type. Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description Type objectType The value type. Returns Type Description Boolean true if the type can be converted. Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Reads an integer or enum value as a enum. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader The reader. Type objectType The value type. Object existingValue The existing value. Newtonsoft.Json.JsonSerializer serializer The serializer. Returns Type Description Object The value read. Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) Remarks note The serializer parameter is ignored. WriteJson(JsonWriter, Object, JsonSerializer) Writes an integer or enum value as an integer. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer The writer. Object value The value. Newtonsoft.Json.JsonSerializer serializer The serializer. Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer) Remarks note The serializer parameter is ignored."
  },
  "neonsdk/api/Neon.Data.IPersistableType.html": {
    "href": "neonsdk/api/Neon.Data.IPersistableType.html",
    "title": "Interface IPersistableType | NeonSDK documentation",
    "keywords": "Interface IPersistableType Non generic interface describing an entity that can be persisted to a database. See IPersistableType<T> for more information. Namespace : Neon.Data Assembly : Neon.Common.dll Syntax public interface IPersistableType Properties __T Identifies the entity type. Declaration string __T { get; } Property Value Type Description String Methods __Load(JObject, Boolean) Loads the entity properties from the backing Newtonsoft.Json.Linq.JObject or from the optional Newtonsoft.Json.Linq.JObject passed. Declaration void __Load(JObject source = null, bool isDerived = false) Parameters Type Name Description Newtonsoft.Json.Linq.JObject source Optional source object. Boolean isDerived Optionally indicates that were deserializing a derived class. __Save() Persists the object properties to the backing Newtonsoft.Json.Linq.JObject . Declaration JObject __Save() Returns Type Description Newtonsoft.Json.Linq.JObject The backing Newtonsoft.Json.Linq.JObject . GetKey() Returns the Couchbase or other database key to be used to persist or retrieve the entity. By convention for Couchbase, this key includes the entity type plus the unique key formatted like entity-type :: unique-key . For example: user::122330 This identifies the document as a user with unique ID as 122330 . Document IDs are formatted like this so that we'll be able to take advantage of document filtering by type when we've enabled Couchbase cross datacenter replication. Declaration string GetKey() Returns Type Description String The database key for the entity."
  },
  "neonsdk/api/Neon.Data.IPersistableType-1.html": {
    "href": "neonsdk/api/Neon.Data.IPersistableType-1.html",
    "title": "Interface IPersistableType<T> | NeonSDK documentation",
    "keywords": "Interface IPersistableType<T> Generic interface describing an entity that can be persisted to a database. Inherited Members IPersistableType.GetKey() IPersistableType.__Load(JObject, Boolean) IPersistableType.__Save() IPersistableType.__T Namespace : Neon.Data Assembly : Neon.Common.dll Syntax public interface IPersistableType<T> : IPersistableType where T : class, IRoundtripData, new() Type Parameters Name Description T Specifies the data type being persisted. Remarks All entities must implement the __T property such that it returns the bucket unique string that identifies the entity type. This string will be used to distinguish entity types within a Couchbase bucket. This interface supports the related concepts of entity key and ref . The entity key is the string used to persist an entity instance to Couchbase. By convention, this string is generally prefixed by the entity type and then is followed by instance specific properties, a UUID, or a singleton name. Entity ref is the value that other entities can use to reference an entity instance. This could be the same as the entity key but typically without the entity type prefix for brevity, As a convention, many IPersistableType<T> implementations also have a static GetKey(...) method that returns the Couchbase key for an entity based on parameters passed."
  },
  "neonsdk/api/Neon.Data.IRoundtripData.html": {
    "href": "neonsdk/api/Neon.Data.IRoundtripData.html",
    "title": "Interface IRoundtripData | NeonSDK documentation",
    "keywords": "Interface IRoundtripData Used by the Neon.ModelGen assembly to indicate that a class was generated as a round-trip data model. Namespace : Neon.Data Assembly : Neon.Common.dll Syntax public interface IRoundtripData Methods __Load(JObject, Boolean) Loads the instance properties from the backing Newtonsoft.Json.Linq.JObject or the optional source parameter. Declaration void __Load(JObject source = null, bool isDerived = false) Parameters Type Name Description Newtonsoft.Json.Linq.JObject source The optional source Newtonsoft.Json.Linq.JObject . Boolean isDerived Optionally indicates that were deserializing a derived class. __Save() Persists the instance properties to the backing Newtonsoft.Json.Linq.JObject . Declaration JObject __Save() Returns Type Description Newtonsoft.Json.Linq.JObject The backing Newtonsoft.Json.Linq.JObject . ToBytes() Renders the instance as UTF-8 encoded JSON. Declaration byte[] ToBytes() Returns Type Description Byte [] The serialized JSON bytes. ToJObject() Renders the instance as a Newtonsoft.Json.Linq.JObject . Declaration JObject ToJObject() Returns Type Description Newtonsoft.Json.Linq.JObject The new Newtonsoft.Json.Linq.JObject . ToString(Boolean) Renders the instance as JSON text, optionally formatting the output. Declaration string ToString(bool indented) Parameters Type Name Description Boolean indented Optionally pass true to format the output. Returns Type Description String The serialized JSON string. WriteJsonTo(Stream) Writes the instance as JSON to a Stream . Declaration void WriteJsonTo(Stream stream) Parameters Type Name Description Stream stream The output stream. WriteJsonToAsync(Stream) Asynchronously writes the instance as JSON to a Stream . Declaration Task WriteJsonToAsync(Stream stream) Parameters Type Name Description Stream stream The output stream. Returns Type Description Task The tracking Task ."
  },
  "neonsdk/api/Neon.Data.NotifyPropertyChanged.html": {
    "href": "neonsdk/api/Neon.Data.NotifyPropertyChanged.html",
    "title": "Class NotifyPropertyChanged | NeonSDK documentation",
    "keywords": "Class NotifyPropertyChanged A common implementation of INotifyPropertyChanged . Inheritance Object NotifyPropertyChanged Namespace : Neon.Data Assembly : Neon.Common.dll Syntax public abstract class NotifyPropertyChanged : INotifyPropertyChanged Methods RaisePropertyChanged(String) Derived classes will call this when a property instance property value has changed. Declaration protected void RaisePropertyChanged(string propertyName = null) Parameters Type Name Description String propertyName The optional property name. This defaults to the name of the caller, typically the property's setter. This may also be passed as null signalling that all instance properties may have changed. Events PropertyChanged Raised when an instance property value has changed. Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description PropertyChangedEventHandler"
  },
  "neonsdk/api/Neon.Data.RoundtripDataFactory.html": {
    "href": "neonsdk/api/Neon.Data.RoundtripDataFactory.html",
    "title": "Class RoundtripDataFactory | NeonSDK documentation",
    "keywords": "Class RoundtripDataFactory Used to instantiate code generated classes that implement IRoundtripData as generated by the Neon.ModelGen assembly. Inheritance Object RoundtripDataFactory Namespace : Neon.Data Assembly : Neon.Common.dll Syntax public static class RoundtripDataFactory Methods CreateFrom(Type, JObject) Constructs an instance of resultType from a Newtonsoft.Json.Linq.JObject . Declaration public static object CreateFrom(Type resultType, JObject jObject) Parameters Type Name Description Type resultType The result type. Newtonsoft.Json.Linq.JObject jObject The source Newtonsoft.Json.Linq.JObject . Returns Type Description Object The new instance as an Object . CreateFrom(Type, Byte[]) Constructs an instance of resultType from a byte array. Declaration public static object CreateFrom(Type resultType, byte[] bytes) Parameters Type Name Description Type resultType The result type. Byte [] bytes The source bytes. Returns Type Description Object The new instance as an Object . CreateFrom<TResult>(JObject) Constructs an instance of TResult from a Newtonsoft.Json.Linq.JObject . Declaration public static TResult CreateFrom<TResult>(JObject jObject) Parameters Type Name Description Newtonsoft.Json.Linq.JObject jObject The source Newtonsoft.Json.Linq.JObject . Returns Type Description TResult The new TResult instance. Type Parameters Name Description TResult The result type. CreateFrom<TResult>(Byte[]) Constructs an instance of TResult from a byte array. Declaration public static TResult CreateFrom<TResult>(byte[] bytes) Parameters Type Name Description Byte [] bytes The source bytes. Returns Type Description TResult The new TResult instance. Type Parameters Name Description TResult The result type. CreateFromAsync(Type, Stream, Encoding) Constructs an instance of resultType from a Stream . Declaration public static async Task<object> CreateFromAsync(Type resultType, Stream stream, Encoding encoding = null) Parameters Type Name Description Type resultType The result type. Stream stream The source Stream . Encoding encoding Optionally specifies the encoding (defaults to UTF-8). Returns Type Description Task < Object > The new instance as an Object . TryCreateFromAsync(Type, Stream, Encoding) Attempts to construct an instance of resultType from a Stream . Declaration public static async Task<Tuple<bool, object>> TryCreateFromAsync(Type resultType, Stream stream, Encoding encoding) Parameters Type Name Description Type resultType The result type. Stream stream The source Stream . Encoding encoding Optionally specifies the encoding (defaults to UTF-8). Returns Type Description Task < Tuple < Boolean , Object >> true if the object type implements IRoundtripData and the object was successfully deserialized."
  },
  "neonsdk/api/Neon.Data.RoundtripDataHelper.html": {
    "href": "neonsdk/api/Neon.Data.RoundtripDataHelper.html",
    "title": "Class RoundtripDataHelper | NeonSDK documentation",
    "keywords": "Class RoundtripDataHelper Serialization related helpers used by the code generated by the Neon.ModelGen library. Inheritance Object RoundtripDataHelper Namespace : Neon.Data Assembly : Neon.Common.dll Syntax public static class RoundtripDataHelper Fields NoHashPropertiesError The error message used when GetHashCode() is called on a generated data model that has no properties tagged with [HashSource]. Declaration public const string NoHashPropertiesError = \"At least one data model property must be tagged by [HashSourceAttribute].\" Field Value Type Description String Properties Serializer Returns the Json global serializer. Declaration public static JsonSerializer Serializer { get; } Property Value Type Description Newtonsoft.Json.JsonSerializer Methods DeepClone(JObject) Returns a deep clone of a Newtonsoft.Json.Linq.JObject . Declaration public static JObject DeepClone(JObject jObject) Parameters Type Name Description Newtonsoft.Json.Linq.JObject jObject The Newtonsoft.Json.Linq.JObject or null . Returns Type Description Newtonsoft.Json.Linq.JObject The cloned instance. Deserialize<T>(String) Deserializes a value from JSON text. Declaration public static T Deserialize<T>(string jsonText) Parameters Type Name Description String jsonText The JSON text. Returns Type Description T The deserialized value. Type Parameters Name Description T The result type. FromObject(Object, Type, String) Used to convert a value into a Newtonsoft.Json.Linq.JToken suitable for assigning as a property to the backing Newtonsoft.Json.Linq.JObject of a generated data model Declaration public static JToken FromObject(object value, Type objectType, string propertyName) Parameters Type Name Description Object value The value being assigned. Type objectType The generated data model type. String propertyName The property name. Returns Type Description Newtonsoft.Json.Linq.JToken The Newtonsoft.Json.Linq.JToken . GetPersistedKey(String, Object[]) Generates an database key for a persisted entity from one or more arguments. Declaration public static string GetPersistedKey(string persistedType, params object[] args) Parameters Type Name Description String persistedType The entity type string. Object [] args Arguments identifying the entity. Returns Type Description String The generated database key. PersistableInitialize() This examines all loaded assemblies, looking for classes that implement IPersistableType and then calling each matching type's static PersistableInitialize() method to ensure that the class' type filter is registered with Linq2Couchbase . note This method scans the assemblies only the first time the method is called. Subsequent calls will jsut return without doing anything. Declaration public static void PersistableInitialize() Serialize(Object, Formatting) Serializes a value to JSON text. Declaration public static string Serialize(object value, Formatting format = Formatting.None) Parameters Type Name Description Object value The the value to be serialized. Newtonsoft.Json.Formatting format Optionally format the output. Returns Type Description String The JSON text."
  },
  "neonsdk/api/Neon.Data.TimeSpanJsonConverter.html": {
    "href": "neonsdk/api/Neon.Data.TimeSpanJsonConverter.html",
    "title": "Class TimeSpanJsonConverter | NeonSDK documentation",
    "keywords": "Class TimeSpanJsonConverter Implements a type converter for TimeSpan using the culture invariant \"c\" format. This serializes TimeSpan instances as: [-][d'.']hh':'mm':'ss['.'fffffff] Inheritance Object Newtonsoft.Json.JsonConverter Newtonsoft.Json.JsonConverter < TimeSpan > TimeSpanJsonConverter Implements IEnhancedJsonConverter Namespace : Neon.Data Assembly : Neon.Common.dll Syntax public class TimeSpanJsonConverter : JsonConverter<TimeSpan>, IEnhancedJsonConverter Properties Type Returns the type handled by the converter. Declaration public Type Type { get; } Property Value Type Description Type Methods ReadJson(JsonReader, Type, TimeSpan, Boolean, JsonSerializer) Declaration public override TimeSpan ReadJson(JsonReader reader, Type objectType, TimeSpan existingValue, bool hasExistingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader Type objectType TimeSpan existingValue Boolean hasExistingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description TimeSpan Overrides Newtonsoft.Json.JsonConverter<System.TimeSpan>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.TimeSpan, System.Boolean, Newtonsoft.Json.JsonSerializer) ToSimpleString(Object) Converts an object instance to a simple (non-JSON) string. Declaration public string ToSimpleString(object instance) Parameters Type Name Description Object instance The object instance. Returns Type Description String The rendered string. WriteJson(JsonWriter, TimeSpan, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, TimeSpan value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer TimeSpan value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter<System.TimeSpan>.WriteJson(Newtonsoft.Json.JsonWriter, System.TimeSpan, Newtonsoft.Json.JsonSerializer) Implements IEnhancedJsonConverter"
  },
  "neonsdk/api/Neon.Data.VersionJsonConverter.html": {
    "href": "neonsdk/api/Neon.Data.VersionJsonConverter.html",
    "title": "Class VersionJsonConverter | NeonSDK documentation",
    "keywords": "Class VersionJsonConverter Implements a type converter for Version . Inheritance Object Newtonsoft.Json.JsonConverter Newtonsoft.Json.JsonConverter < Version > VersionJsonConverter Implements IEnhancedJsonConverter Namespace : Neon.Data Assembly : Neon.Common.dll Syntax public class VersionJsonConverter : JsonConverter<Version>, IEnhancedJsonConverter Properties Type Returns the type handled by the converter. Declaration public Type Type { get; } Property Value Type Description Type Methods ReadJson(JsonReader, Type, Version, Boolean, JsonSerializer) Declaration public override Version ReadJson(JsonReader reader, Type objectType, Version existingValue, bool hasExistingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader Type objectType Version existingValue Boolean hasExistingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description Version Overrides Newtonsoft.Json.JsonConverter<System.Version>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Version, System.Boolean, Newtonsoft.Json.JsonSerializer) ToSimpleString(Object) Converts an object instance to a simple (non-JSON) string. Declaration public string ToSimpleString(object instance) Parameters Type Name Description Object instance The object instance. Returns Type Description String The rendered string. WriteJson(JsonWriter, Version, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, Version value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer Version value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter<System.Version>.WriteJson(Newtonsoft.Json.JsonWriter, System.Version, Newtonsoft.Json.JsonSerializer) Implements IEnhancedJsonConverter"
  },
  "neonsdk/api/Neon.Deployment.AwsCli.html": {
    "href": "neonsdk/api/Neon.Deployment.AwsCli.html",
    "title": "Class AwsCli | NeonSDK documentation",
    "keywords": "Class AwsCli Wraps the AWS-CLI with methods for common operations. note The class methods require that the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables be already set with the required AWS credentials. Inheritance Object AwsCli Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public static class AwsCli Methods ExecuteSafe(String[]) Executes an AWS-CLI command, ensuring that it completed without error. Declaration public static void ExecuteSafe(params string[] args) Parameters Type Name Description String [] args The command and arguments. Exceptions Type Condition ExecuteException Thrown for command errors. RemoveCredentials() Removes the AWS credential environment variables. Declaration public static void RemoveCredentials() S3Download(String, String) Downloads a file from S3. Declaration public static void S3Download(string sourceUri, string targetPath) Parameters Type Name Description String sourceUri The target S3 URI. This may be either an s3://BUCKET/KEY or a https://s3.REGION.amazonaws.com/BUCKET/KEY URI referencing an S3 bucket and key. String targetPath The target file path. S3DownloadBytes(String) Downloads a file from S3 as a byte array. Declaration public static byte[] S3DownloadBytes(string sourceUri) Parameters Type Name Description String sourceUri The target S3 URI. This may be either an s3://BUCKET/KEY or a https://s3.REGION.amazonaws.com/BUCKET/KEY URI referencing an S3 bucket and key. Returns Type Description Byte [] S3DownloadText(String, Encoding) Downloads a file from S3 as text. Declaration public static string S3DownloadText(string sourceUri, Encoding encoding = null) Parameters Type Name Description String sourceUri The target S3 URI. This may be either an s3://BUCKET/KEY or a https://s3.REGION.amazonaws.com/BUCKET/KEY URI referencing an S3 bucket and key. Encoding encoding Optionally specifies the character encoding. This defaults to UTF8 . Returns Type Description String S3Remove(String, Boolean, String, String) Removes one S3 objects. Declaration public static void S3Remove(string targetUri, bool recursive = false, string include = null, string exclude = null) Parameters Type Name Description String targetUri The target S3 URI or prefix for the object(s) to be removed. This may be either an s3://BUCKET[/KEY] or a https://s3.REGION.amazonaws.com/BUCKET[/KEY] URI referencing an S3 bucket and key. Note that the key is optional which means that all objects in the bucket are eligible for removal. Boolean recursive Optionally indicates targetUri specifies a folder prefix and that all objects within the folder are eligble for removal. String include Optionally specifies a pattern specifying the objects to be removed. String exclude Optionally specifies a pattern specifying objects to be excluded from removal. S3Upload(Stream, String, Boolean, String, Boolean) Uploads the contents of a stream to an S3 bucket. Declaration public static void S3Upload(Stream input, string targetUri, bool gzip = false, string metadata = null, bool publicReadAccess = false) Parameters Type Name Description Stream input The input stream. String targetUri The target S3 URI. This may be either an s3://BUCKET/KEY or a https://s3.REGION.amazonaws.com/BUCKET/KEY URI referencing an S3 bucket and key. Boolean gzip Optionally indicates that the target content encoding should be set to gzip . String metadata Optionally specifies HTTP metadata headers to be returned when the object is downloaded from S3. This formatted as as comma separated a list of key/value pairs like: Content-Type=text,app-version=1.0.0 note AWS supports system as well as custom headers. System headers include standard HTTP headers such as Content-Type and Content-Encoding . Custom headers are required to include the x-amz-meta- prefix. You don't need to specify the x-amz-meta- prefix for setting custom headers; the AWS-CLI detects custom header names and adds the prefix automatically. This method will strip the prefix if present before calling the AWS-CLI to ensure the prefix doesn't end up being duplicated. Boolean publicReadAccess Optionally grant the upload public read access. S3Upload(String, String, Boolean, String, Boolean) Uploads a file from the local workstation to S3. Declaration public static void S3Upload(string sourcePath, string targetUri, bool gzip = false, string metadata = null, bool publicReadAccess = false) Parameters Type Name Description String sourcePath The source file path. String targetUri The target S3 URI. This may be either an s3://BUCKET/KEY or a https://s3.REGION.amazonaws.com/BUCKET/KEY URI referencing an S3 bucket and key. Boolean gzip Optionally indicates that the target content encoding should be set to gzip . String metadata Optionally specifies HTTP metadata headers to be returned when the object is downloaded from S3. This formatted as as comma separated a list of key/value pairs like: Content-Type=text,app-version=1.0.0 note AWS supports system as well as custom headers. System headers include standard HTTP headers such as Content-Type and Content-Encoding . Custom headers are required to include the x-amz-meta- prefix. You don't need to specify the x-amz-meta- prefix for setting custom headers; the AWS-CLI detects custom header names and adds the prefix automatically. This method will strip the prefix if present before calling the AWS-CLI to ensure the prefix doesn't end up being duplicated. Boolean publicReadAccess Optionally grant the upload public read access. S3UploadBytes(Byte[], String, Boolean, String, Boolean) Uploads a byte array to an S3 bucket. Declaration public static void S3UploadBytes(byte[] bytes, string targetUri, bool gzip = false, string metadata = null, bool publicReadAccess = false) Parameters Type Name Description Byte [] bytes The byte array being uploaded. String targetUri The target S3 URI. This may be either an s3://BUCKET/KEY or a https://s3.REGION.amazonaws.com/BUCKET/KEY URI referencing an S3 bucket and key. Boolean gzip Optionally indicates that the target content encoding should be set to gzip . String metadata Optionally specifies HTTP metadata headers to be returned when the object is downloaded from S3. This formatted as as comma separated a list of key/value pairs like: Content-Type=text,app-version=1.0.0 note AWS supports system as well as custom headers. System headers include standard HTTP headers such as Content-Type and Content-Encoding . Custom headers are required to include the x-amz-meta- prefix. You don't need to specify the x-amz-meta- prefix for setting custom headers; the AWS-CLI detects custom header names and adds the prefix automatically. This method will strip the prefix if present before calling the AWS-CLI to ensure the prefix doesn't end up being duplicated. Boolean publicReadAccess Optionally grant the upload public read access. S3UploadMultiPart(String, String, String, String, String, Boolean, Int64, Boolean, Action<Int64>) Uploads a file in multiple parts from the local workstation to S3, returning the DownloadManifest details. required by DownloadMultiPart(DownloadManifest, String, DownloadProgressDelegate, IRetryPolicy, TimeSpan, Boolean) and DownloadMultiPartAsync(DownloadManifest, String, DownloadProgressDelegate, TimeSpan, IRetryPolicy, Boolean, CancellationToken) to actually download the entire file. The URI to the uploaded DownloadManifest details is also returned. See the remarks for details about how this works. Declaration public static (DownloadManifest manifest, string manifestUri) S3UploadMultiPart(string sourcePath, string targetFolderUri, string version = null, string name = null, string filename = null, bool noMd5File = false, long maxPartSize = 78643200L, bool publicReadAccess = false, Action<long> progressAction = null) Parameters Type Name Description String sourcePath Path to the file being uploaded. String targetFolderUri The target S3 URI structured like https://s3.REGION.amazonaws.com/BUCKET/ ... URI referencing an S3 bucket and the optional folder where the file's download information and parts will be uploaded. note The s3:// URI scheme is not supported. String version Optionally specifies the download file version. String name Optionally overrides the download file name specified by sourcePath to initialize Name . String filename Optionally overrides the download file name specified by sourcePath to initialize Filename . Boolean noMd5File This method creates a file named [ sourcePath .md5] with the MD5 hash for the entire uploaded file by default. You may override this behavior by passing noMd5File = true . Int64 maxPartSize Optionally overrides the maximum part size (defaults to 75 MiB). Boolean publicReadAccess Optionally grant the upload public read access. Action < Int64 > progressAction Optional action called as the file is uploaded, passing the long percent complete. Returns Type Description (T1, T2) < DownloadManifest , String > The DownloadManifest information. Remarks This method works by splitting the sourcePath file into parts no larger than maxPartSize bytes each and the uploading these parts to the specified bucket and path along with a file holding DownloadManifest information describing the download and its constituent parts. This information includes details about the download including the overall MD5 and size as well records describing each part including their URIs, sizes and MD5. The DownloadManifest details returned include all of the information required by DownloadMultiPart(DownloadManifest, String, DownloadProgressDelegate, IRetryPolicy, TimeSpan, Boolean) and DownloadMultiPartAsync(DownloadManifest, String, DownloadProgressDelegate, TimeSpan, IRetryPolicy, Boolean, CancellationToken) to actually download the entire file and the URI returned references these msame details as uploaded to S3. You'll need to pass sourcePath as the path to the file being uploaded and targetFolderUri as the S3 location where the download information and the file parts will be uploaded. targetFolderUri may use with the https:// or s3:// URI scheme. By default the uploaded file and parts names will be based on the filename part of sourcePath , but this can be overridden via filename . The DownloadManifest information for the file will be uploaded as FILENAME.manifest and the parts will be written to a subfolder named FILENAME.parts . For example, uploading a large file named myfile.json to https://s3.uswest.amazonaws.com/mybucket will result S3 file layout like: https://s3.uswest.amazonaws.com/mybucket myfile.json.manifest myfile.json.parts/ part-0000 part-0001 part-0002 ... The URI returned in this case will be https://s3.uswest.amazonaws.com/mybucket/myfile.json.manifest . S3UploadText(String, String, Boolean, String, Boolean, Encoding) Uploads text to an S3 bucket. Declaration public static void S3UploadText(string text, string targetUri, bool gzip = false, string metadata = null, bool publicReadAccess = false, Encoding encoding = null) Parameters Type Name Description String text The text being uploaded. String targetUri The target S3 URI. This may be either an s3://BUCKET/KEY or a https://s3.REGION.amazonaws.com/BUCKET/KEY URI referencing an S3 bucket and key. Boolean gzip Optionally indicates that the target content encoding should be set to gzip . String metadata Optionally specifies HTTP metadata headers to be returned when the object is downloaded from S3. This formatted as as comma separated a list of key/value pairs like: Content-Type=text,app-version=1.0.0 note AWS supports system as well as custom headers. System headers include standard HTTP headers such as Content-Type and Content-Encoding . Custom headers are required to include the x-amz-meta- prefix. You don't need to specify the x-amz-meta- prefix for setting custom headers; the AWS-CLI detects custom header names and adds the prefix automatically. This method will strip the prefix if present before calling the AWS-CLI to ensure the prefix doesn't end up being duplicated. Boolean publicReadAccess Optionally grant the upload public read access. Encoding encoding Optionally specifies the text encoding. This defaults to UTF8 . SetCredentials(String, String, String, String) Sets the AWS credential environment variables by loading them from 1Password. Declaration public static void SetCredentials(string awsAccessKeyId = \"AWS_NEONFORGE[ACCESS_KEY_ID]\", string awsSecretAccessKey = \"AWS_NEONFORGE[SECRET_ACCESS_KEY]\", string vault = null, string masterPassword = null) Parameters Type Name Description String awsAccessKeyId Optionally overrides the AWS access key ID 1Password secret name. String awsSecretAccessKey Optionally overrides the AWS access key 1Password secret name. String vault Optionally overrides the current user's 1Password vault. String masterPassword Optionally specifies the master 1Password."
  },
  "neonsdk/api/Neon.Deployment.CodeSigner.html": {
    "href": "neonsdk/api/Neon.Deployment.CodeSigner.html",
    "title": "Class CodeSigner | NeonSDK documentation",
    "keywords": "Class CodeSigner Implements code signing. Inheritance Object CodeSigner Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public static class CodeSigner Methods IsReady(String, String, String, String, String) Declaration public static bool IsReady(string provider, string certBase64, string container, string timestampUri, string password) Parameters Type Name Description String provider Specifies the certificate provider, like: \"eToken Base Cryptographic Provider\" String certBase64 Specifies the base64 encoded public certificate (multi-line values are allowed). String container Specifies the certificate container, like: \"Sectigo_20220830143311\" String timestampUri Specifies the URI for the certificate timestamp service, like: http://timestamp.sectigo.com String password Specifies the certificate password. Returns Type Description Boolean true when signing is available. Remarks note WARNING! Be very careful when using this method with Extended Validation (EV) code signing USB tokens. Using an incorrect password can brick EV tokens since thay typically allow only a very limited number of signing attempts with invalid passwords. note This method uses the Windows version of signtool.exe embedded into the the Neon.Deployment library and to perform the code signing and this tool runs only on Windows. Exceptions Type Condition PlatformNotSupportedException Thrown when executed on a non 64-bit Windows machine. SignBinary(String, String, String, String, String, String) Signs an EXE or MSI file using a code signing certificate and the Windows signtool.exe program. Declaration public static void SignBinary(string targetPath, string provider, string certBase64, string container, string timestampUri, string password) Parameters Type Name Description String targetPath Specifies the path to the file being signed. String provider Specifies the certificate provider, like: \"eToken Base Cryptographic Provider\" String certBase64 Specifies the base64 encoded public certificate (multi-line values are allowed). String container Specifies the certificate container, like: \"Sectigo_20220830143311\" String timestampUri Specifies the URI for the certificate timestamp service, like: http://timestamp.sectigo.com String password Specifies the certificate password. Remarks note WARNING! Be very careful when using this method with Extended Validation (EV) code signing USB tokens. Using an incorrect password can brick EV tokens since thay typically allow only a very limited number of signing attempts with invalid passwords. note This method uses the Windows version of signtool.exe embedded into the the Neon.Deployment library and to perform the code signing and this tool runs only on Windows. Exceptions Type Condition PlatformNotSupportedException Thrown when executed on a non 64-bit Windows machine."
  },
  "neonsdk/api/Neon.Deployment.DeploymentException.html": {
    "href": "neonsdk/api/Neon.Deployment.DeploymentException.html",
    "title": "Class DeploymentException | NeonSDK documentation",
    "keywords": "Class DeploymentException Thrown for deployement related problems. Inheritance Object Exception DeploymentException Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public class DeploymentException : Exception, ISerializable Constructors DeploymentException(String, Exception) Constructor. Declaration public DeploymentException(string message, Exception innerException = null) Parameters Type Name Description String message The exception message. Exception innerException Optionally specifies an inner exception. Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Deployment.DeploymentHelper.html": {
    "href": "neonsdk/api/Neon.Deployment.DeploymentHelper.html",
    "title": "Class DeploymentHelper | NeonSDK documentation",
    "keywords": "Class DeploymentHelper Deployment related defintions and utilities. Inheritance Object DeploymentHelper Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public static class DeploymentHelper Fields DownloadManifestContentType The HTTP Content-Type used for multi-part download manifest. Declaration public const string DownloadManifestContentType = \"application/vnd+neonforge.download+manifest+json\" Field Value Type Description String NeonProfileServicePipe Identifies the named pipe used to communicate with the Neon profile service running on the local workstation to query for user profile information as well as secrets. Declaration public const string NeonProfileServicePipe = \"neon-profile-service\" Field Value Type Description String Methods ClearPowershellHistory() Clears the Powershell command history. It's possible that scripts and GitHub workflow runs may leave sensitive information in the command history which could become a security vunerability. Declaration public static void ClearPowershellHistory() DownloadMultiPart(DownloadManifest, String, DownloadProgressDelegate, IRetryPolicy, TimeSpan, Boolean) Synchronously downloads and assembles a multi-part file as specified by a DownloadManifest . Declaration public static void DownloadMultiPart(DownloadManifest download, string targetPath, DownloadProgressDelegate progressAction = null, IRetryPolicy retry = null, TimeSpan partTimeout = default(TimeSpan), bool strictCheck = false) Parameters Type Name Description DownloadManifest download The download details. String targetPath The target file path. DownloadProgressDelegate progressAction Optionally specifies an action to be called with the the percentage downloaded. IRetryPolicy retry Optionally specifies the retry policy. This defaults to a reasonable policy. TimeSpan partTimeout Optionally specifies the HTTP download timeout for each part (defaults to 10 minutes). Boolean strictCheck Optionally used to enable a slow but more comprehensive check of any existing file. When this is enabled and the download file already exists along with its MD5 hash file, the method will assume that the existing file matches when the file size is the same as specified in the manifest and manifest overall MD5 matches the local MD5 file. Otherwise, this method will need to compute the MD5 hashes for the existing file parts and compare those to the part MD5 hashes in the manifest, which can take quite a while for large files. This defaults to false . Exceptions Type Condition IOException Thrown when the download is corrupt. SocketException Thrown for network errors. HttpException Thrown for HTTP network errors. OperationCanceledException Thrown when the operation was cancelled. DownloadMultiPart(String, String, DownloadProgressDelegate, IRetryPolicy, TimeSpan, Boolean) Asynchronously downloads and assembles a multi-part file as specified by a source URI. Declaration public static void DownloadMultiPart(string uri, string targetPath, DownloadProgressDelegate progressAction = null, IRetryPolicy retry = null, TimeSpan partTimeout = default(TimeSpan), bool strictCheck = true) Parameters Type Name Description String uri The URI for the source URI holding the DownloadManifest details as JSON. String targetPath The target file path. DownloadProgressDelegate progressAction Optionally specifies an action to be called with the the percentage downloaded. IRetryPolicy retry Optionally specifies the retry policy. This defaults to a reasonable policy. TimeSpan partTimeout Optionally specifies the HTTP download timeout for each part (defaults to 10 minutes). Boolean strictCheck Optionally used to enable a slow but more comprehensive check of any existing file. When this is enabled and the download file already exists along with its MD5 hash file, the method will assume that the existing file matches when the file size is the same as specified in the manifest and manifest overall MD5 matches the local MD5 file. Otherwise, this method will need to compute the MD5 hashes for the existing file parts and compare those to the part MD5 hashes in the manifest, which can take quite a while for large files. This defaults to false . Exceptions Type Condition IOException Thrown when the download is corrupt. SocketException Thrown for network errors. HttpException Thrown for HTTP network errors. OperationCanceledException Thrown when the operation was cancelled. FormatException Thrown when the object retrieved from uri doesn't have the DownloadManifestContentType content type. DownloadMultiPartAsync(DownloadManifest, String, DownloadProgressDelegate, TimeSpan, IRetryPolicy, Boolean, CancellationToken) Asynchronously downloads and assembles a multi-part file as specified by a DownloadManifest . Declaration public static async Task<string> DownloadMultiPartAsync(DownloadManifest manifest, string targetPath, DownloadProgressDelegate progressAction = null, TimeSpan partTimeout = default(TimeSpan), IRetryPolicy retry = null, bool strictCheck = false, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description DownloadManifest manifest The download details. String targetPath The target file path. DownloadProgressDelegate progressAction Optionally specifies an action to be called with the the percentage downloaded. TimeSpan partTimeout Optionally specifies the HTTP download timeout for each part (defaults to 10 minutes). IRetryPolicy retry Optionally specifies the retry policy. This defaults to a reasonable policy. Boolean strictCheck Optionally used to disable a slow but more comprehensive check of any existing file. When this is disabled and the download file already exists along with its MD5 hash file, the method will assume that the existing file matches when the file size is the same as specified in the manifest and manifest overall MD5 matches the local MD5 file. Otherwise when strictCheck is true , this method will need to compute the MD5 hashes for the existing file parts and compare those to the part MD5 hashes in the manifest, which can take quite a while for large files. This defaults to true . CancellationToken cancellationToken Optionally specifies the operation cancellation token. Returns Type Description Task < String > The path to the downloaded file. Remarks This method downloads the file specified by manifest to the folder specified, creating the folder first when required. The file will be downloaded in parts, where each part will be validated by comparing the part's MD5 hash (when present) with the computed value. The output file will be named Name and the overall MD5 hash will also be saved using the same file name but adding the .md5 extension. This method will continue downloading a partially downloaded file. This works by validating the already downloaded parts against their MD5 hashes and then continuing part downloads after the last valid part. Nothing will be downloaded when the existing file is fully formed. note The target files (output and MD5) will be deleted when download appears to be corrupt. Exceptions Type Condition IOException Thrown when the download is corrupt. SocketException Thrown for network errors. HttpException Thrown for HTTP network errors. OperationCanceledException Thrown when the operation was cancelled. DownloadMultiPartAsync(String, String, DownloadProgressDelegate, TimeSpan, IRetryPolicy, Boolean, CancellationToken) Asynchronously downloads and assembles a multi-part file as specified by a DownloadManifest . Declaration public static async Task<string> DownloadMultiPartAsync(string uri, string targetPath, DownloadProgressDelegate progressAction = null, TimeSpan partTimeout = default(TimeSpan), IRetryPolicy retry = null, bool strictCheck = false, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The URI for the source URI holding the DownloadManifest details as JSON. String targetPath The target file path. DownloadProgressDelegate progressAction Optionally specifies an action to be called with the the percentage downloaded. TimeSpan partTimeout Optionally specifies the HTTP download timeout for each part (defaults to 10 minutes). IRetryPolicy retry Optionally specifies the retry policy. This defaults to a reasonable policy. Boolean strictCheck Optionally used to enable a slow but more comprehensive check of any existing file. When this is enabled and the download file already exists along with its MD5 hash file, the method will assume that the existing file matches when the file size is the same as specified in the manifest and manifest overall MD5 matches the local MD5 file. Otherwise, this method will need to compute the MD5 hashes for the existing file parts and compare those to the part MD5 hashes in the manifest, which can take quite a while for large files. This defaults to false . CancellationToken cancellationToken Optionally specifies the operation cancellation token. Returns Type Description Task < String > The path to the downloaded file. Remarks This method downloads the file specified by uri to the folder specified, creating the folder first when required. The file will be downloaded in parts, where each part will be validated by comparing the part's MD5 hash (when present) with the computed value. The output file will be named Name and the overall MD5 hash will also be saved using the same file name but adding the .md5 extension. This method will continue downloading a partially downloaded file. This works by validating the already downloaded parts against their MD5 hashes and then continuing part downloads after the last valid part. Nothing will be downloaded when the existing file is fully formed. note The target files (output and MD5) will be deleted when download appears to be corrupt. Exceptions Type Condition IOException Thrown when the download is corrupt. SocketException Thrown for network errors. HttpException Thrown for HTTP network errors. OperationCanceledException Thrown when the operation was cancelled. FormatException Thrown when the object retrieved from uri doesn't have the DownloadManifestContentType content type."
  },
  "neonsdk/api/Neon.Deployment.DownloadManifest.html": {
    "href": "neonsdk/api/Neon.Deployment.DownloadManifest.html",
    "title": "Class DownloadManifest | NeonSDK documentation",
    "keywords": "Class DownloadManifest Describes a download including its parts Inheritance Object DownloadManifest Namespace : Neon.Deployment Assembly : Neon.Common.dll Syntax public class DownloadManifest Constructors DownloadManifest() Default constructor. Declaration public DownloadManifest() Properties Filename The download file name. Declaration [JsonProperty(PropertyName = \"Filename\", Required = Required.AllowNull)] public string Filename { get; set; } Property Value Type Description String Md5 The MD5 hash for the entire download. Declaration [JsonProperty(PropertyName = \"Md5\", Required = Required.Always)] public string Md5 { get; set; } Property Value Type Description String Name Identifies the download. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Always)] public string Name { get; set; } Property Value Type Description String Parts The download parts. Declaration [JsonProperty(PropertyName = \"Parts\", Required = Required.Always)] public List<DownloadPart> Parts { get; set; } Property Value Type Description List < DownloadPart > Size The overall size of the download. Declaration [JsonProperty(PropertyName = \"Size\", Required = Required.Always)] public long Size { get; set; } Property Value Type Description Int64 Version The download version (this may be null ). Declaration [JsonProperty(PropertyName = \"Version\", Required = Required.Always)] public string Version { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Deployment.DownloadPart.html": {
    "href": "neonsdk/api/Neon.Deployment.DownloadPart.html",
    "title": "Class DownloadPart | NeonSDK documentation",
    "keywords": "Class DownloadPart Downloads may be split into one or more parts. This class includes the zero-based part Number which specifies the order in which this part will be assembled back into the reconsitituted download. The class also includes the Uri used to retrieve the part, the part Size , as well as the optional Md5 has for the part. Inheritance Object DownloadPart Namespace : Neon.Deployment Assembly : Neon.Common.dll Syntax public class DownloadPart Constructors DownloadPart() Default constructor. Declaration public DownloadPart() Properties Md5 Optionally set to the MD5 hash of the part data (without any compression). Declaration [JsonProperty(PropertyName = \"Md5\", Required = Required.Always)] public string Md5 { get; set; } Property Value Type Description String Number The zero-based index specifying where this part will be assembled back into the reconsitituted download. Declaration [JsonProperty(PropertyName = \"Number\", Required = Required.Always)] public int Number { get; set; } Property Value Type Description Int32 Size Actual size of the part in bytes after being downloaded. Declaration [JsonProperty(PropertyName = \"Size\", Required = Required.Always)] public long Size { get; set; } Property Value Type Description Int64 Uri The URI to the part data. Declaration [JsonProperty(PropertyName = \"Uri\", Required = Required.Always)] public string Uri { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Deployment.DownloadProgressDelegate.html": {
    "href": "neonsdk/api/Neon.Deployment.DownloadProgressDelegate.html",
    "title": "Delegate DownloadProgressDelegate | NeonSDK documentation",
    "keywords": "Delegate DownloadProgressDelegate Describes the callback used to monitor and possibly cancel the download of file composed of one or more parts specified by a DownloadManifest . Namespace : Neon.Deployment Assembly : Neon.Common.dll Syntax public delegate bool DownloadProgressDelegate(DownloadProgressType progressType, int percentComplete); Parameters Type Name Description DownloadProgressType progressType Passed indicating the current operation being performed. Int32 percentComplete Passed as the approximate percentage of the file downloaded (between 0..100). Returns Type Description Boolean true if the download is to continue or false to cancel it."
  },
  "neonsdk/api/Neon.Deployment.DownloadProgressType.html": {
    "href": "neonsdk/api/Neon.Deployment.DownloadProgressType.html",
    "title": "Enum DownloadProgressType | NeonSDK documentation",
    "keywords": "Enum DownloadProgressType Enumerates the types of progress indications raised when downloading a multi-part file specified by a DownloadManifest . Namespace : Neon.Deployment Assembly : Neon.Common.dll Syntax public enum DownloadProgressType Fields Name Description Check An existing local file is being verified. Download The file is being downloaded. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Deployment.GitHub.html": {
    "href": "neonsdk/api/Neon.Deployment.GitHub.html",
    "title": "Class GitHub | NeonSDK documentation",
    "keywords": "Class GitHub Implements common GitHub operations via the GitHub REST API. Inheritance Object GitHub Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public static class GitHub Remarks To use this class, first call GetCredentials() to load the necessary credentials from 1Password and the call the desired APIs. When you're done, it's a good practice to call ClearCredentials() . note This class currently requires that the GITHUB_PAT (personal access token) and GITHUB_LOGIN variables be available via 1Password for the current user. We need GITHUB_LOGIN right now so we can login and screen-scrap the GitHub website for package operations that don't have REST endpoints yet. Fields UserAgent Specifies the User-Agent string used when submitting REST API requests to GitHub. This defaults to neon-sdk but may be customized. Declaration public static string UserAgent Field Value Type Description String Properties Actions Returns the API class for managing GitHub Actions. Declaration public static GitHubActionsApi Actions { get; } Property Value Type Description GitHubActionsApi Packages Returns the API class for managing GitHub packages. Declaration public static GitHubPackageApi Packages { get; } Property Value Type Description GitHubPackageApi Releases Returns the API class for managing GitHub releases. Declaration public static GitHubReleaseApi Releases { get; } Property Value Type Description GitHubReleaseApi Tags Returns the API class for managing GutHub tags. Declaration public static GitHubTagApi Tags { get; } Property Value Type Description GitHubTagApi Methods ClearCredentials() Clears any cached credentials. Declaration public static void ClearCredentials() CreateClient(String) Creates a REST client that can be used to manage GitHub. Declaration public static GitHubClient CreateClient(string userAgent = null) Parameters Type Name Description String userAgent Optionally identifies the user agent. This defaults to \"neon-sdk\" . Returns Type Description Octokit.GitHubClient The Octokit.GitHubClient instance. GetCredentials() Retrieves the necessary credentials from 1Password when necessary and caches them locally as well as in environment variables. Declaration public static void GetCredentials()"
  },
  "neonsdk/api/Neon.Deployment.GitHubActionsApi.html": {
    "href": "neonsdk/api/Neon.Deployment.GitHubActionsApi.html",
    "title": "Class GitHubActionsApi | NeonSDK documentation",
    "keywords": "Class GitHubActionsApi Implements GitHub Actions operations. Inheritance Object GitHubActionsApi Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public class GitHubActionsApi Methods DeleteRuns(String, String, TimeSpan) Deletes workflow runs from a GitHub repo. note Only completed runs will be deleted. Declaration public int DeleteRuns(string repo, string workflowName = null, TimeSpan maxAge = default(TimeSpan)) Parameters Type Name Description String repo Identifies the target repository. String workflowName Optionally specifies the workflow whose runs are to be deleted otherwise runs from all workflows in the repo will be deleted. TimeSpan maxAge Optionally specifies the age at which workflow runs are to be deleted. This defaults to deleting all runs. Returns Type Description Int32 The number of runs deleted. DeleteRunsAsync(String, String, TimeSpan) Deletes workflow runs from a GitHub repo. note Only completed runs will be deleted. Declaration public async Task<int> DeleteRunsAsync(string repo, string workflowName = null, TimeSpan maxAge = default(TimeSpan)) Parameters Type Name Description String repo Identifies the target repository. String workflowName Optionally specifies the workflow whose runs are to be deleted otherwise runs from all workflows in the repo will be deleted. TimeSpan maxAge Optionally specifies the maximum age for retained workflow runs. This defaults to Zero which deletes all runs. Returns Type Description Task < Int32 > The number of runs deleted."
  },
  "neonsdk/api/Neon.Deployment.GitHubPackage.html": {
    "href": "neonsdk/api/Neon.Deployment.GitHubPackage.html",
    "title": "Class GitHubPackage | NeonSDK documentation",
    "keywords": "Class GitHubPackage Describes a GitHub package. Inheritance Object GitHubPackage Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public class GitHubPackage Constructors GitHubPackage() Default constructor. Declaration public GitHubPackage() Properties Name Specifies the package name. Declaration public string Name { get; set; } Property Value Type Description String Type Specifies the package type (one of the GitHubPackageType values. Declaration public GitHubPackageType Type { get; set; } Property Value Type Description GitHubPackageType Versions Specifies the known versions for the package. Declaration public List<GitHubPackageVersion> Versions { get; set; } Property Value Type Description List < GitHubPackageVersion > Visibility Specifies the package visibility. Declaration public GitHubPackageVisibility Visibility { get; set; } Property Value Type Description GitHubPackageVisibility"
  },
  "neonsdk/api/Neon.Deployment.GitHubPackageApi.html": {
    "href": "neonsdk/api/Neon.Deployment.GitHubPackageApi.html",
    "title": "Class GitHubPackageApi | NeonSDK documentation",
    "keywords": "Class GitHubPackageApi Implements GitHub Packages operations. Inheritance Object GitHubPackageApi Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public class GitHubPackageApi Constructors GitHubPackageApi() Constructor. Declaration public GitHubPackageApi() Methods Delete(String, String, GitHubPackageType) Deletes a specific named package or the packages that match a file pattern using \"*\" and \"?\" wildcards (see FileWildcardRegex(String) ). Declaration public void Delete(string organization, string nameOrPattern, GitHubPackageType packageType = GitHubPackageType.Container) Parameters Type Name Description String organization The GitHub organization name. String nameOrPattern The package name or matching pattern (see FileWildcardRegex(String) ). GitHubPackageType packageType Optionally specifies the package type. This defaults to Container . DeleteAsync(String, String, GitHubPackageType) Deletes a specific named package or the packages that match a file pattern using \"*\" and \"?\" wildcards (see FileWildcardRegex(String) ). Declaration public async Task DeleteAsync(string organization, string nameOrPattern, GitHubPackageType packageType = GitHubPackageType.Container) Parameters Type Name Description String organization The GitHub organization name. String nameOrPattern The package name or matching pattern (see FileWildcardRegex(String) ). GitHubPackageType packageType Optionally specifies the package type. This defaults to Container . Returns Type Description Task List(String, String, GitHubPackageType, GitHubPackageVisibility) Lists the packages for an organization. Declaration public List<GitHubPackage> List(string organization, string nameOrPattern = null, GitHubPackageType packageType = GitHubPackageType.Container, GitHubPackageVisibility visibility = GitHubPackageVisibility.All) Parameters Type Name Description String organization The GitHub organization name. String nameOrPattern The matching pattern (see FileWildcardRegex(String) ). GitHubPackageType packageType Optionally specifies the package type. This defaults to Container . GitHubPackageVisibility visibility Optionally specifies the visibility of the package. This defaults to All Returns Type Description List < GitHubPackage > The list of package information as a list of GitHubPackage instance. ListAsync(String, String, GitHubPackageType, GitHubPackageVisibility, Boolean) Lists the packages for an organization. Declaration public async Task<List<GitHubPackage>> ListAsync(string organization, string nameOrPattern = null, GitHubPackageType packageType = GitHubPackageType.Container, GitHubPackageVisibility visibility = GitHubPackageVisibility.All, bool includeVersions = false) Parameters Type Name Description String organization The GitHub organization name. String nameOrPattern The matching pattern (see FileWildcardRegex(String) ). GitHubPackageType packageType Optionally specifies the package type. This defaults to Container . GitHubPackageVisibility visibility Optionally specifies the visibility of the package. This defaults to All Boolean includeVersions Optionally queries for the package versions as well. This defaults to false . Returns Type Description Task < List < GitHubPackage >> The list of package information as a list of GitHubPackage instance. SetVisibility(String, String, GitHubPackageType, GitHubPackageVisibility) Makes public a specific named package or the packages that match a file pattern using \"*\" and \"?\" wildcards (see FileWildcardRegex(String) ). note This is not currently implemented due to the lack of a proper GitHub REST API. Declaration public void SetVisibility(string organization, string nameOrPattern, GitHubPackageType packageType = GitHubPackageType.Container, GitHubPackageVisibility visibility = GitHubPackageVisibility.All) Parameters Type Name Description String organization The GitHub organization name. String nameOrPattern The package name or matching pattern. GitHubPackageType packageType Optionally specifies the package type. This defaults to Container . GitHubPackageVisibility visibility The new package visibility. Exceptions Type Condition NotImplementedException Currently thrown always. SetVisibilityAsync(String, String, GitHubPackageType, GitHubPackageVisibility) Makes public a specific named package or the packages that match a file pattern using \"*\" and \"?\" wildcards (see FileWildcardRegex(String) ). note This is not currently implemented due to the lack of a proper GitHub REST API. Declaration public async Task SetVisibilityAsync(string organization, string nameOrPattern, GitHubPackageType packageType = GitHubPackageType.Container, GitHubPackageVisibility visibility = GitHubPackageVisibility.All) Parameters Type Name Description String organization The GitHub organization name. String nameOrPattern The package name or matching pattern. GitHubPackageType packageType Optionally specifies the package type. This defaults to Container . GitHubPackageVisibility visibility The visibility to set the package to. Returns Type Description Task Exceptions Type Condition NotImplementedException Currently thrown always."
  },
  "neonsdk/api/Neon.Deployment.GitHubPackageType.html": {
    "href": "neonsdk/api/Neon.Deployment.GitHubPackageType.html",
    "title": "Enum GitHubPackageType | NeonSDK documentation",
    "keywords": "Enum GitHubPackageType Enumerates the supported GitHub package types. Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public enum GitHubPackageType Fields Name Description Container Container image. Docker Docker package (use Container for packages with namespace https://ghcr.io/owner/package-name ). Maven Maven package. Npm NPM package. Nuget Nuget package. RubyGems Ruby Gem. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Deployment.GitHubPackageVersion.html": {
    "href": "neonsdk/api/Neon.Deployment.GitHubPackageVersion.html",
    "title": "Class GitHubPackageVersion | NeonSDK documentation",
    "keywords": "Class GitHubPackageVersion Describes a package version. Inheritance Object GitHubPackageVersion Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public class GitHubPackageVersion Constructors GitHubPackageVersion() Constructor. Declaration public GitHubPackageVersion() Properties Id The package version ID. Declaration public string Id { get; set; } Property Value Type Description String Name The package version name. This will be the SHA256 for container images. Declaration public string Name { get; set; } Property Value Type Description String Tags The assigned tags for container images. Declaration public List<string> Tags { get; set; } Property Value Type Description List < String >"
  },
  "neonsdk/api/Neon.Deployment.GitHubPackageVisibility.html": {
    "href": "neonsdk/api/Neon.Deployment.GitHubPackageVisibility.html",
    "title": "Enum GitHubPackageVisibility | NeonSDK documentation",
    "keywords": "Enum GitHubPackageVisibility Enumerates the supported GitHub package visibility types. Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public enum GitHubPackageVisibility Fields Name Description All All packages. Internal Internal packages. Private Private packages. Public Public packages. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Deployment.GitHubReleaseApi.html": {
    "href": "neonsdk/api/Neon.Deployment.GitHubReleaseApi.html",
    "title": "Class GitHubReleaseApi | NeonSDK documentation",
    "keywords": "Class GitHubReleaseApi Used to publish and manage GitHub releases. Inheritance Object GitHubReleaseApi Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public class GitHubReleaseApi Remarks note This API doesn't currently support modifying assets of of published releases although GitHub does support this. We may add this functionality in the future. Methods Create(String, String, String, String, Boolean, Boolean, String) Creates a GitHub release. Declaration public Release Create(string repo, string tagName, string releaseName = null, string body = null, bool draft = false, bool prerelease = false, string branch = null) Parameters Type Name Description String repo Identifies the target repo. String tagName Specifies the tag to be referenced by the release. String releaseName Optionally specifies the release name (defaults to tagName ). String body Optionally specifies the markdown formatted release notes. Boolean draft Optionally indicates that the release won't be published immediately. Boolean prerelease Optionally indicates that the release is not production ready. String branch Optionally identifies the branch to be tagged. This defaults to master or main when either of those branches are already present. Returns Type Description Octokit.Release The newly created Octokit.Release . Remarks If the tagName doesn't already exist in the repo, this method will tag the latest commit on the specified branch or else the defailt branch in the target repo and before creating the release. Find(String, Func<Release, Boolean>) Returns the releases that satisfies a predicate. Declaration public List<Release> Find(string repo, Func<Release, bool> predicate) Parameters Type Name Description String repo Identifies the target repository. Func < Octokit.Release , Boolean > predicate The predicate. Returns Type Description List < Octokit.Release > The list of matching releases. Get(String, String) Retrieves a specific GitHub release. Declaration public Release Get(string repo, string tagName) Parameters Type Name Description String repo Identifies the target repository. String tagName Specifies the tag for the target release. Returns Type Description Octokit.Release The release information or null when the requested release doesn't exist. GetAssetUri(Release, ReleaseAsset) Returns the URI that can be used to download a GitHub release asset. note This works only for published releases. Declaration public string GetAssetUri(Release release, ReleaseAsset asset) Parameters Type Name Description Octokit.Release release The target release. Octokit.ReleaseAsset asset The target asset. Returns Type Description String The asset URI. List(String) List the releases for a GitHub repo. Declaration public IReadOnlyList<Release> List(string repo) Parameters Type Name Description String repo Returns Type Description IReadOnlyList < Octokit.Release > The list of releases. Remove(String, Release) Deletes a GitHub release. Declaration public void Remove(string repo, Release release) Parameters Type Name Description String repo Identifies the target repository. Octokit.Release release The target release. Remarks note This fails silently if the release doesn't exist. Update(String, Release, ReleaseUpdate) Updates a GitHub release. Declaration public Release Update(string repo, Release release, ReleaseUpdate releaseUpdate) Parameters Type Name Description String repo Identifies the target repository. Octokit.Release release Specifies the release being updated. Octokit.ReleaseUpdate releaseUpdate Specifies the revisions. Returns Type Description Octokit.Release The updated release. Remarks To update a release, you'll first need to: Obtain a Octokit.Release referencing the target release returned from Create(String, String, String, String, Boolean, Boolean, String) or by listing or getting releases. Obtain a Octokit.ReleaseUpdate by calling Octokit.Release.ToUpdate . Make your changes to the release update. Call Update(String, Release, ReleaseUpdate) , passing the original release along with the update. UploadAsset(String, Release, Stream, String, String) Uploads an asset stream to a GitHub release. Any existing asset with same name will be replaced. Declaration public ReleaseAsset UploadAsset(string repo, Release release, Stream assetStream, string assetName, string contentType = \"application/octet-stream\") Parameters Type Name Description String repo Identifies the target repository. Octokit.Release release The target release. Stream assetStream The asset source stream. String assetName Specifies the file name to assign to the asset. String contentType Optionally specifies the asset's Content-Type . This defaults to: application/octet-stream Returns Type Description Octokit.ReleaseAsset The new Octokit.ReleaseAsset . UploadAsset(String, Release, String, String, String) Uploads an asset file to a GitHub release. Any existing asset with same name will be replaced. Declaration public ReleaseAsset UploadAsset(string repo, Release release, string assetPath, string assetName = null, string contentType = \"application/octet-stream\") Parameters Type Name Description String repo Identifies the target repository. Octokit.Release release The target release. String assetPath Path to the source asset file. String assetName Optionally specifies the file name to assign to the asset. This defaults to the file name in assetPath . String contentType Optionally specifies the asset's Content-Type . This defaults to: application/octet-stream Returns Type Description Octokit.ReleaseAsset The new Octokit.ReleaseAsset . Remarks note The current implementation only works for unpublished releases where Draft=true . Exceptions Type Condition NotSupportedException Thrown when the releas has already been published. UploadMultipartAsset(String, Release, String, String, String, String, Boolean, Int64) Uploads a multi-part download to a release and then publishes the release. Declaration public DownloadManifest UploadMultipartAsset(string repo, Release release, string sourcePath, string version, string name = null, string filename = null, bool noMd5File = false, long maxPartSize = 78643200L) Parameters Type Name Description String repo Identifies the target repository. Octokit.Release release The target release. String sourcePath Path to the file being uploaded. String version The download version. String name Optionally overrides the download file name specified by sourcePath to initialize Name . String filename Optionally overrides the download file name specified by sourcePath to initialize Filename . Boolean noMd5File This method creates a file named [ sourcePath .md5] with the MD5 hash for the entire uploaded file by default. You may override this behavior by passing noMd5File = true . Int64 maxPartSize Optionally overrides the maximum part size (defaults to 75 MiB). Returns Type Description DownloadManifest The DownloadManifest . Remarks The release passed must be unpublished and you may upload other assets before calling this. note Take care that any assets already published have names that won't conflict with the asset part names, which will be formatted like: part-##"
  },
  "neonsdk/api/Neon.Deployment.GitHubRepoPath.html": {
    "href": "neonsdk/api/Neon.Deployment.GitHubRepoPath.html",
    "title": "Class GitHubRepoPath | NeonSDK documentation",
    "keywords": "Class GitHubRepoPath Abstracts GitHub repo paths like: github.com/owner/repo or github.com/owner/repo , where github.com is the implied server. Inheritance Object GitHubRepoPath Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public class GitHubRepoPath Properties Owner Returns the owner part of the path. Declaration public string Owner { get; } Property Value Type Description String Repo Returns the repo part of the path. Declaration public string Repo { get; } Property Value Type Description String Server Returns the server part of the path. Declaration public string Server { get; } Property Value Type Description String Methods Parse(String) Parses a GitHub repository path. Declaration public static GitHubRepoPath Parse(string path) Parameters Type Name Description String path The path, like: [SERVER/]OWNER/REPO Returns Type Description GitHubRepoPath The parsed GitHubRepoPath . Remarks note github.com will be assumed when no server is specified. Exceptions Type Condition FormatException Thrown when the input is invalid. ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "neonsdk/api/Neon.Deployment.GitHubTagApi.html": {
    "href": "neonsdk/api/Neon.Deployment.GitHubTagApi.html",
    "title": "Class GitHubTagApi | NeonSDK documentation",
    "keywords": "Class GitHubTagApi Used to manage GitHub repo tags. Inheritance Object GitHubTagApi Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public class GitHubTagApi Methods List(String) Lists the current tags for a GitHub repo. Declaration public IReadOnlyList<RepositoryTag> List(string repo) Parameters Type Name Description String repo Identifies the target repo. Returns Type Description IReadOnlyList < Octokit.RepositoryTag > The list of Octokit.RepositoryTag instances."
  },
  "neonsdk/api/Neon.Deployment.html": {
    "href": "neonsdk/api/Neon.Deployment.html",
    "title": "Namespace Neon.Deployment | NeonSDK documentation",
    "keywords": "Namespace Neon.Deployment Classes AwsCli Wraps the AWS-CLI with methods for common operations. note The class methods require that the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables be already set with the required AWS credentials. CodeSigner Implements code signing. DeploymentException Thrown for deployement related problems. DeploymentHelper Deployment related defintions and utilities. DownloadManifest Describes a download including its parts DownloadPart Downloads may be split into one or more parts. This class includes the zero-based part Number which specifies the order in which this part will be assembled back into the reconsitituted download. The class also includes the Uri used to retrieve the part, the part Size , as well as the optional Md5 has for the part. GitHub Implements common GitHub operations via the GitHub REST API. GitHubActionsApi Implements GitHub Actions operations. GitHubPackage Describes a GitHub package. GitHubPackageApi Implements GitHub Packages operations. GitHubPackageVersion Describes a package version. GitHubReleaseApi Used to publish and manage GitHub releases. GitHubRepoPath Abstracts GitHub repo paths like: github.com/owner/repo or github.com/owner/repo , where github.com is the implied server. GitHubTagApi Used to manage GitHub repo tags. MaintainerProfile Provides the IProfileClient implementation used by NEONFORGE maintainers to obtain 1Password secrets via our internal neon-assistant tool. NotifyClient Implements notification operations like sending an email or a Microsoft Teams message. note These notifications will be sent from the devbot@neonforge.com user because that user doesn't enable multi-factor authentication (MFA) whereas our developer Office accounts do enable MFA. MFA prevents basic authentication from working. OnePassword Wraps the 1Password CLI. OnePasswordException Thrown by the OnePassword for errors. ProfileException Thrown by IProfileClient instance when the profile server returned an error. ProfileHandlerResult Describes the results returned by ProfileServer handlers. ProfileRequest Abstracts Neon Profile Service named pipe command requests. ProfileResponse Abstracts Neon Profile Service named pipe command responses. ProfileServer Implements a named-pipe based server that will be used to receive requests from MaintainerProfile . This server listens on a named pipe and only allows connections from other processes running on behalf of the current user. ProfileStatus Enumerates the profile error code strings. XenServer XenServer/XCP-ng related deployment utilities. Interfaces IProfileClient Defines the interface for the client used to communicate with the Neon Assistant or a custom service. These services provides access to user and workstation specific settings including secrets and general properties. This is used for activities such as CI/CD automation and integration testing. This solves the following problems: Gaining access to secrets. NEONFORGE has standardized on 1Password for password management and the Neon Profile Service abstracts the details of authenticating with 1Password and accessing secrets. This interface supports two kinds of secrets: passwords and values. These are somewhat of an artifact of how we implemented this using 1Password. Secret passwords are values retrieved from a 1Password item's password field and secret values correspond to a 1Password item value field. We found this distinction useful because 1Password reports when passwords are insecure or duplicated but we have other secrets where these checks can be distracting. Custom implementation can choose to follow this pattern or just treat both types of secret the same. You can also obtain a specific property from a secret password or value by using this syntax: SECRETNAME[PROPERTY] This is useful for obtaining both the username and password from a login, or all of the different properties from a credit card, etc. This blurs the difference between secret passwords and secret values a bit but we're going to retain both concepts anyway. Profile values are also supported. These are non-secret name/value pairs used for describing the local environment as required for CI/CD. For example, we use this for describing the IP addresses available for deploying a test neonKUBE cluster. Each developer will often need distict node IP addresses that work on the local LAN and also don't conflict with addresses assigned to other developers. NEONFORGE's internal implementation simply persists profile values on the local workstation as a YAML file which is referenced by our profile service. Abstracting access to the user's master password. NEONFORGE has implemented an internal Windows application that implements a profile service that prompts the developer for their master 1Password, optionally caching it for a period of time so the user won't be prompted as often. This server also handles profile and secret lookup. Caching: IProfileClient implementations should implement caching of secret and profile values and should enable this by default. Callers can disable caching by setting CacheEnabled to false and the cached can be cleared via ClearCache() The Neon.Deployment.MaintainerProfile implementation communicates with the neon-assistant to retrieve profile values and secrets. neon-assistant manages profile values directly but communicates with 1Password.com to obtain secrets, which can take a second or two. Caching will improve performance and also take some load off of 1Password. Caching may be used to solve the problem where a tool like neon-assistant is signed-in when a long running operation starts but signs-out automatically before the operation completes, potentially failing when a secret is requested after that point. This can be mitigated by having your operations request all required secrets and profiles up front and then cache them so these will be available later. Some IProfileClient implementations may also cache secrets elsewhere, like process environment variables such that other profile instances constructed by the process or subprocesses can also take advantage of the cached values. IProfileRequest Abstracts Neon Profile Service named pipe command requests. IProfileResponse Abstracts Neon Profile Service named pipe command responses. Enums DownloadProgressType Enumerates the types of progress indications raised when downloading a multi-part file specified by a DownloadManifest . GitHubPackageType Enumerates the supported GitHub package types. GitHubPackageVisibility Enumerates the supported GitHub package visibility types. Delegates DownloadProgressDelegate Describes the callback used to monitor and possibly cancel the download of file composed of one or more parts specified by a DownloadManifest ."
  },
  "neonsdk/api/Neon.Deployment.IProfileClient.html": {
    "href": "neonsdk/api/Neon.Deployment.IProfileClient.html",
    "title": "Interface IProfileClient | NeonSDK documentation",
    "keywords": "Interface IProfileClient Defines the interface for the client used to communicate with the Neon Assistant or a custom service. These services provides access to user and workstation specific settings including secrets and general properties. This is used for activities such as CI/CD automation and integration testing. This solves the following problems: Gaining access to secrets. NEONFORGE has standardized on 1Password for password management and the Neon Profile Service abstracts the details of authenticating with 1Password and accessing secrets. This interface supports two kinds of secrets: passwords and values. These are somewhat of an artifact of how we implemented this using 1Password. Secret passwords are values retrieved from a 1Password item's password field and secret values correspond to a 1Password item value field. We found this distinction useful because 1Password reports when passwords are insecure or duplicated but we have other secrets where these checks can be distracting. Custom implementation can choose to follow this pattern or just treat both types of secret the same. You can also obtain a specific property from a secret password or value by using this syntax: SECRETNAME[PROPERTY] This is useful for obtaining both the username and password from a login, or all of the different properties from a credit card, etc. This blurs the difference between secret passwords and secret values a bit but we're going to retain both concepts anyway. Profile values are also supported. These are non-secret name/value pairs used for describing the local environment as required for CI/CD. For example, we use this for describing the IP addresses available for deploying a test neonKUBE cluster. Each developer will often need distict node IP addresses that work on the local LAN and also don't conflict with addresses assigned to other developers. NEONFORGE's internal implementation simply persists profile values on the local workstation as a YAML file which is referenced by our profile service. Abstracting access to the user's master password. NEONFORGE has implemented an internal Windows application that implements a profile service that prompts the developer for their master 1Password, optionally caching it for a period of time so the user won't be prompted as often. This server also handles profile and secret lookup. Caching: IProfileClient implementations should implement caching of secret and profile values and should enable this by default. Callers can disable caching by setting CacheEnabled to false and the cached can be cleared via ClearCache() The Neon.Deployment.MaintainerProfile implementation communicates with the neon-assistant to retrieve profile values and secrets. neon-assistant manages profile values directly but communicates with 1Password.com to obtain secrets, which can take a second or two. Caching will improve performance and also take some load off of 1Password. Caching may be used to solve the problem where a tool like neon-assistant is signed-in when a long running operation starts but signs-out automatically before the operation completes, potentially failing when a secret is requested after that point. This can be mitigated by having your operations request all required secrets and profiles up front and then cache them so these will be available later. Some IProfileClient implementations may also cache secrets elsewhere, like process environment variables such that other profile instances constructed by the process or subprocesses can also take advantage of the cached values. Namespace : Neon.Deployment Assembly : Neon.Common.dll Syntax public interface IProfileClient Remarks The IProfileClient is used to submit requests to the Neon Assistant application running on the local workstation including retrieving the user's master 1Password, secrets, as well as user profile values. Properties CacheEnabled Controls whether the client caches secrets and profile values. This should enabled by default by all implementations. Declaration bool CacheEnabled { get; set; } Property Value Type Description Boolean Methods Call(Dictionary<String, String>) Submits a low-level request to the profile provider, passing a command and optional arguments. This is temporarily used by the Neon.Deployment.GitHub APIs to workaround the lack of a complete REST API for GHCR. note Implementation of this is optional and you may throw a NotImplementedException . Declaration string Call(Dictionary<string, string> args) Parameters Type Name Description Dictionary < String , String > args The request arguments. Returns Type Description String The command result. ClearCache() Clears any cached values. Declaration void ClearCache() GetProfileValue(String, Boolean) Requests a profile value from the assistant. Declaration string GetProfileValue(string name, bool nullOnNotFound = false) Parameters Type Name Description String name Identifies the profile value. Boolean nullOnNotFound Optionally specifies that null should be returned rather than throwing an exception when the profile value does not exist. Returns Type Description String The password value. Exceptions Type Condition ProfileException Thrown if the profile server returns an error. GetSecretPassword(String, String, String, Boolean) Requests the value of a secret password from 1Password via the assistant. Declaration string GetSecretPassword(string name, string vault = null, string masterPassword = null, bool nullOnNotFound = false) Parameters Type Name Description String name Specifies the secret name. String vault Optionally specifies the 1Password vault. This defaults to the current user (as managed by the IProfileClient implementaton). String masterPassword Optionally specifies the master 1Password when it is already known. Boolean nullOnNotFound Optionally specifies that null should be returned rather than throwing an exception when the secret does not exist. Returns Type Description String The password value. Exceptions Type Condition ProfileException Thrown if the profile server returns an error. GetSecretValue(String, String, String, Boolean) Requests the value of a secret value from 1Password via the assistant. Declaration string GetSecretValue(string name, string vault = null, string masterPassword = null, bool nullOnNotFound = false) Parameters Type Name Description String name Specifies the secret name. String vault Optionally specifies the 1Password vault. This defaults to the current user (as managed by the IProfileClient implementaton). String masterPassword Optionally specifies the master 1Password when it is already known. Boolean nullOnNotFound Optionally specifies that null should be returned rather than throwing an exception when the secret does not exist. Returns Type Description String The password value. Exceptions Type Condition ProfileException Thrown if the profile server returns an error."
  },
  "neonsdk/api/Neon.Deployment.IProfileRequest.html": {
    "href": "neonsdk/api/Neon.Deployment.IProfileRequest.html",
    "title": "Interface IProfileRequest | NeonSDK documentation",
    "keywords": "Interface IProfileRequest Abstracts Neon Profile Service named pipe command requests. Namespace : Neon.Deployment Assembly : Neon.Common.dll Syntax public interface IProfileRequest Properties Args Returns the standard command arguments. Declaration Dictionary<string, string> Args { get; } Property Value Type Description Dictionary < String , String > Command Returns the command. Declaration string Command { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Deployment.IProfileResponse.html": {
    "href": "neonsdk/api/Neon.Deployment.IProfileResponse.html",
    "title": "Interface IProfileResponse | NeonSDK documentation",
    "keywords": "Interface IProfileResponse Abstracts Neon Profile Service named pipe command responses. Namespace : Neon.Deployment Assembly : Neon.Common.dll Syntax public interface IProfileResponse Properties Error Returns the error message for failed requests. Declaration string Error { get; } Property Value Type Description String JObject Returns the JObject for JSON responses. Declaration JObject JObject { get; } Property Value Type Description Newtonsoft.Json.Linq.JObject Success Retrurns true for successful requests, false for failed ones. Declaration bool Success { get; } Property Value Type Description Boolean Value Returns the simply response string (for non-JSON responses). Declaration string Value { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Deployment.MaintainerProfile.html": {
    "href": "neonsdk/api/Neon.Deployment.MaintainerProfile.html",
    "title": "Class MaintainerProfile | NeonSDK documentation",
    "keywords": "Class MaintainerProfile Provides the IProfileClient implementation used by NEONFORGE maintainers to obtain 1Password secrets via our internal neon-assistant tool. Inheritance Object MaintainerProfile Implements IProfileClient Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public class MaintainerProfile : IProfileClient Remarks note This class uses process environment variables like NEONASSISTANT_CACHE_PROFILE_[name=value and NEONASSISTANT_CACHE_SECRET_name=value to cache profile and secret values such that other MaintainerProfile instances within the current process and subprocesses can take advantage of cached values as well. Constructors MaintainerProfile() Constructs a profile client with default parameters. This is suitable for constructing from Powershell scripts. note MaintainerProfile currently only supports Windows. Declaration public MaintainerProfile() Exceptions Type Condition NotSupportedException Thrown when not running on Windows. MaintainerProfile(String, TimeSpan) Constructor with optional client timeout. note MaintainerProfile currently supports only Windows. Declaration public MaintainerProfile(string pipeName, TimeSpan connectTimeout = default(TimeSpan)) Parameters Type Name Description String pipeName Specifies the server pipe name. TimeSpan connectTimeout Optionally specifies the connection timeout. This defaults to 10 seconds . Exceptions Type Condition NotSupportedException Thrown when not running on Windows. Properties CacheEnabled Controls whether the client caches secrets and profile values. This should enabled by default by all implementations. Declaration public bool CacheEnabled { get; set; } Property Value Type Description Boolean Methods Call(Dictionary<String, String>) Submits a low-level request to the profile provider, passing a command and optional arguments. This is temporarily used by the Neon.Deployment.GitHub APIs to workaround the lack of a complete REST API for GHCR. note Implementation of this is optional and you may throw a NotImplementedException . Declaration public string Call(Dictionary<string, string> args) Parameters Type Name Description Dictionary < String , String > args The request arguments. Returns Type Description String The command result. ClearAwsCredentials() Removes the AWS-CLI credential environment variables if present: AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY Declaration public void ClearAwsCredentials() ClearCache() Clears any cached values. Declaration public void ClearCache() GetAwsCredentials(String) Retrieves the AWS access key ID and secret access key from 1Password and sets these enviroment variables for use by the AWS-CLI: AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY Declaration public void GetAwsCredentials(string secretName = \"AWS_NEONFORGE\") Parameters Type Name Description String secretName Optionally specifies a custom name for the 1Password secret holding the credentials. Remarks The AWS credentials are persisted to a 1Password secret for each maintainer, where each user should be granted individual credentials so they can be easy to revoke if necessary. We use a single secret to hold these individual fields: ACCESS_KEY_ID Identifies the AWS access key. SECRET_ACCESS_KEY The AWS access key secret. GetCommonSecrets() Proactively used to retrieve secrets commonly used for CI/CD operations so they'll be available even after neon-assistant has signed out some time later. Currently, AWS and GitHub credentials are retrieved. Declaration public void GetCommonSecrets() GetProfileValue(String, Boolean) Requests a profile value from the assistant. Declaration public string GetProfileValue(string name, bool nullOnNotFound = false) Parameters Type Name Description String name Identifies the profile value. Boolean nullOnNotFound Optionally specifies that null should be returned rather than throwing an exception when the profile value does not exist. Returns Type Description String The password value. Exceptions Type Condition ProfileException Thrown if the profile server returns an error. GetSecretPassword(String, String, String, Boolean) Requests the value of a secret password from 1Password via the assistant. Declaration public string GetSecretPassword(string name, string vault = null, string masterPassword = null, bool nullOnNotFound = false) Parameters Type Name Description String name Specifies the secret name. String vault Optionally specifies the 1Password vault. This defaults to the current user (as managed by the IProfileClient implementaton). String masterPassword Optionally specifies the master 1Password when it is already known. Boolean nullOnNotFound Optionally specifies that null should be returned rather than throwing an exception when the secret does not exist. Returns Type Description String The password value. Exceptions Type Condition ProfileException Thrown if the profile server returns an error. GetSecretValue(String, String, String, Boolean) Requests the value of a secret value from 1Password via the assistant. Declaration public string GetSecretValue(string name, string vault = null, string masterPassword = null, bool nullOnNotFound = false) Parameters Type Name Description String name Specifies the secret name. String vault Optionally specifies the 1Password vault. This defaults to the current user (as managed by the IProfileClient implementaton). String masterPassword Optionally specifies the master 1Password when it is already known. Boolean nullOnNotFound Optionally specifies that null should be returned rather than throwing an exception when the secret does not exist. Returns Type Description String The password value. Exceptions Type Condition ProfileException Thrown if the profile server returns an error. Implements IProfileClient"
  },
  "neonsdk/api/Neon.Deployment.NotifyClient.html": {
    "href": "neonsdk/api/Neon.Deployment.NotifyClient.html",
    "title": "Class NotifyClient | NeonSDK documentation",
    "keywords": "Class NotifyClient Implements notification operations like sending an email or a Microsoft Teams message. note These notifications will be sent from the devbot@neonforge.com user because that user doesn't enable multi-factor authentication (MFA) whereas our developer Office accounts do enable MFA. MFA prevents basic authentication from working. Inheritance Object NotifyClient Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public class NotifyClient Constructors NotifyClient(String, String) Constructor. Declaration public NotifyClient(string username = null, string password = null) Parameters Type Name Description String username Optionally specifies the Office 365 username (like: &quot;sally@neonforge.com\"). String password Optionally specifies the password. Remarks This constructor obtains these values from neon-assistant from the devbot@neonforge.com user's NEONFORGE_LOGIN secret when not specified explicitly. Methods SendMail(String, String, String, Boolean, String, String, IEnumerable<String>) Sends an email via the devbot@neonforge.com Office 356 account. Declaration public void SendMail(string to, string subject, string body = null, bool bodyAsHtml = false, string cc = null, string bcc = null, IEnumerable<string> attachmentPaths = null) Parameters Type Name Description String to Specifies the target email addresses separated with commas. String subject Specifies the subject line. String body Optionally specifies the message body text. Boolean bodyAsHtml Optionally indicates that the body text is HTML. String cc Optionally specifies the target CC (carbon copy) addresses separated with commas. String bcc Optionally specifies the target BCC (blind carbon copy) addresses separated with commas. IEnumerable < String > attachmentPaths Specifies the file paths to any attachments to be included. SendTeamsMessage(String, String) Sends a message to a Office 365 Teams channel. Declaration public void SendTeamsMessage(string channelUri, string cardJson) Parameters Type Name Description String channelUri Specifies the target Teams channel URI. String cardJson Specifies the message as the legancy MessageCard format: https://learn.microsoft.com/en-us/outlook/actionable-messages/message-card-reference https://messagecardplayground.azurewebsites.net/ note Adaptive Cards are not supported by the Teams Connector at this time."
  },
  "neonsdk/api/Neon.Deployment.OnePassword.html": {
    "href": "neonsdk/api/Neon.Deployment.OnePassword.html",
    "title": "Class OnePassword | NeonSDK documentation",
    "keywords": "Class OnePassword Wraps the 1Password CLI. Inheritance Object OnePassword Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public static class OnePassword Properties CliConfigRequired Returns true if the 1Password CLI needs to be configured by setting the OP_DEVICE environment variable. note The CLI requires OP_DEVICE to be set when the 1Password application is not installed on the current machine. Declaration public static bool CliConfigRequired { get; } Property Value Type Description Boolean Signedin Returns true if the class is signed-in. Declaration public static bool Signedin { get; } Property Value Type Description Boolean Methods CheckInstallation() This class requires that a op.exe v1 client be installed and if the 1Password app is installed that it be version 8.0 or greater. Declaration public static void CheckInstallation() Exceptions Type Condition NotSupportedException Thrown when any of the checks failed. Configure(String, String, String, String, String) Configures and signs into 1Password for the first time on a machine. This must be called once before Signin(String, String, String) will work. Declaration public static void Configure(string signinAddress, string account, string secretKey, string masterPassword, string defaultVault) Parameters Type Name Description String signinAddress Specifies the 1Password signin address. String account Specifies the 1Password shorthand name to use for the account (e.g. &quot;sally@neonforge.com\"). String secretKey The 1Password secret key for the account. String masterPassword Specified the master 1Password. String defaultVault Specifies the default 1Password vault. Remarks Typically, you'll first call Configure(String, String, String, String, String) once for a workstation to configure the signin address and 1Password secret key during manual configuration. The account shorthand name used for that operation can then be used thereafter for calls to Signin(String, String, String) which don't require the additional information. This two-stage process enhances security because both the master password and secret key are required to authenticate and the only time the secret key will need to be presented for the full login which will typically done manually once. 1Password securely stores the secret key on the workstation and it will never need to be present as plaintext again on the machine. GetSecretPassword(String, String) Returns a named password from the current user's standard 1Password vault like user-sally by default or a custom named vault. Declaration public static string GetSecretPassword(string name, string vault = null) Parameters Type Name Description String name The password name with optional property. String vault Optionally specifies a specific vault. Returns Type Description String The requested password (from the password's [password] field). Remarks The name parameter may optionally specify the desired 1Password property to override the default \"password\" for this method. Properties are specified like: SECRETNAME[PROPERTY] Exceptions Type Condition OnePasswordException Thrown for 1Password related problems. GetSecretValue(String, String) Returns a named value from the current user's standard 1Password vault like user-sally by default or a custom named vault. Declaration public static string GetSecretValue(string name, string vault = null) Parameters Type Name Description String name The password name with optional property. String vault Optionally specifies a specific vault. Returns Type Description String The requested value (from the password's value field). Remarks The name parameter may optionally specify the desired 1Password property to override the default \"value\" for this method. Properties are specified like: SECRETNAME[PROPERTY] Exceptions Type Condition OnePasswordException Thrown for 1Password related problems. Signin(String, String, String) Signs into 1Password using just the account, master password, and default vault. You'll typically call this rather than Configure(String, String, String, String, String) which also requires the signin address as well as the secret key. Declaration public static void Signin(string account, string masterPassword, string defaultVault) Parameters Type Name Description String account The account's shorthand name (e.g. (e.g. &quot;sally@neonforge.com\"). String masterPassword The master password. String defaultVault The default vault. Remarks Typically, you'll first call Configure(String, String, String, String, String) once for a workstation to configure the signin address and 1Password secret key during manual configuration. The account shorthand name used for that operation can then be used thereafter for calls to this method which don't require the additional information. This two-stage process enhances security because both the master password and secret key are required to authenticate and the only time the secret key will need to be presented for the full login which will typically done manually once. 1Password securely stores the secret key on the workstation and it will never need to be present as plaintext again on the machine. Signout() Signs out. Declaration public static void Signout()"
  },
  "neonsdk/api/Neon.Deployment.OnePasswordException.html": {
    "href": "neonsdk/api/Neon.Deployment.OnePasswordException.html",
    "title": "Class OnePasswordException | NeonSDK documentation",
    "keywords": "Class OnePasswordException Thrown by the OnePassword for errors. Inheritance Object Exception OnePasswordException Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public class OnePasswordException : Exception, ISerializable Constructors OnePasswordException(String, Exception) Constructor. Declaration public OnePasswordException(string message = null, Exception innerException = null) Parameters Type Name Description String message Optionally specifies the exception message. Exception innerException Optionally specifies an inner exception. Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Deployment.ProfileException.html": {
    "href": "neonsdk/api/Neon.Deployment.ProfileException.html",
    "title": "Class ProfileException | NeonSDK documentation",
    "keywords": "Class ProfileException Thrown by IProfileClient instance when the profile server returned an error. Inheritance Object Exception ProfileException Namespace : Neon.Deployment Assembly : Neon.Common.dll Syntax public class ProfileException : Exception, ISerializable Constructors ProfileException(String, String, Exception) Constructor. Declaration public ProfileException(string message, string status, Exception inner = null) Parameters Type Name Description String message The error message. String status Pass as one of the ProfileStatus values indicating the reason for the failure. Exception inner Optionally specifies an inner exception. Properties Status Returns one of the ProfileStatus values indicating the reason for the failure. Declaration public string Status { get; } Property Value Type Description String Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Deployment.ProfileHandlerResult.html": {
    "href": "neonsdk/api/Neon.Deployment.ProfileHandlerResult.html",
    "title": "Class ProfileHandlerResult | NeonSDK documentation",
    "keywords": "Class ProfileHandlerResult Describes the results returned by ProfileServer handlers. Inheritance Object ProfileHandlerResult Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public class ProfileHandlerResult Properties Error Returns a human readable error message. Declaration public string Error { get; } Property Value Type Description String Status Specifies one of the ProfileStatus values. This defaults to OK . Declaration public string Status { get; } Property Value Type Description String Value Specifies the value returned by the handler. Declaration public string Value { get; } Property Value Type Description String Methods Create(String) Constructs a handler value result. Declaration public static ProfileHandlerResult Create(string value) Parameters Type Name Description String value The handler result. Returns Type Description ProfileHandlerResult The ProfileHandlerResult . CreateError(ProfileRequest, String, String) Constructs an error result. Declaration public static ProfileHandlerResult CreateError(ProfileRequest request, string status, string message) Parameters Type Name Description ProfileRequest request Specifies the profile request or null when this isn't relevant. String status One of the ProfileStatus codes. String message The error message. Returns Type Description ProfileHandlerResult The ProfileHandlerResult . Remarks note This method will examine the message , looking for underlying 1Password errors and will potentially override the status passed."
  },
  "neonsdk/api/Neon.Deployment.ProfileRequest.html": {
    "href": "neonsdk/api/Neon.Deployment.ProfileRequest.html",
    "title": "Class ProfileRequest | NeonSDK documentation",
    "keywords": "Class ProfileRequest Abstracts Neon Profile Service named pipe command requests. Inheritance Object ProfileRequest Implements IProfileRequest Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public class ProfileRequest : IProfileRequest Properties Args Returns the standard command arguments. Declaration public Dictionary<string, string> Args { get; } Property Value Type Description Dictionary < String , String > Command Returns the command. Declaration public string Command { get; } Property Value Type Description String Methods Create(String, Dictionary<String, String>) Creates a command with optional arguments. Declaration public static ProfileRequest Create(string command, Dictionary<string, string> args = null) Parameters Type Name Description String command The command name. note Argument names and values may not include commas. Dictionary < String , String > args The optional arguments. Returns Type Description ProfileRequest The ProfileRequest . Parse(String) Parses a request from a line of text read from the named pipe. Declaration public static ProfileRequest Parse(string commandLine) Parameters Type Name Description String commandLine The command line. Returns Type Description ProfileRequest The ProfileRequest . Exceptions Type Condition FormatException Thrown for invalid command lines. ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Implements IProfileRequest"
  },
  "neonsdk/api/Neon.Deployment.ProfileResponse.html": {
    "href": "neonsdk/api/Neon.Deployment.ProfileResponse.html",
    "title": "Class ProfileResponse | NeonSDK documentation",
    "keywords": "Class ProfileResponse Abstracts Neon Profile Service named pipe command responses. Inheritance Object ProfileResponse Implements IProfileResponse Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public class ProfileResponse : IProfileResponse Properties Error Returns the error message for failed requests. Declaration public string Error { get; } Property Value Type Description String JObject Returns the JObject for JSON responses. Declaration public JObject JObject { get; } Property Value Type Description Newtonsoft.Json.Linq.JObject Status One of the ProfileStatus values. This defaults to OK . Declaration public string Status { get; } Property Value Type Description String Success Returns true for successful requests, false for failed ones. Declaration public bool Success { get; } Property Value Type Description Boolean Value Returns the simply response string (for non-JSON responses). Declaration public string Value { get; } Property Value Type Description String Methods Create(JObject) Creates a successful command response with with a JSON value. Declaration public static ProfileResponse Create(JObject jObject) Parameters Type Name Description Newtonsoft.Json.Linq.JObject jObject The JSON value. Returns Type Description ProfileResponse The ProfileResponse . Create(String) Creates a successful command response with with a simple string value. Declaration public static ProfileResponse Create(string value) Parameters Type Name Description String value The optional command arguments. Returns Type Description ProfileResponse The ProfileResponse . CreateError(String, String) Creates a failed command response with an error message. Declaration public static ProfileResponse CreateError(string status, string message) Parameters Type Name Description String status The status code (one of the ProfileStatus values). String message The error message. Returns Type Description ProfileResponse The ProfileResponse . Parse(String) Parses a request from a line of text read from the named pipe. Declaration public static ProfileResponse Parse(string responseLine) Parameters Type Name Description String responseLine The response line. Returns Type Description ProfileResponse The ProfileResponse . Exceptions Type Condition FormatException Thrown for invalid response lines. ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Implements IProfileResponse"
  },
  "neonsdk/api/Neon.Deployment.ProfileServer.html": {
    "href": "neonsdk/api/Neon.Deployment.ProfileServer.html",
    "title": "Class ProfileServer | NeonSDK documentation",
    "keywords": "Class ProfileServer Implements a named-pipe based server that will be used to receive requests from MaintainerProfile . This server listens on a named pipe and only allows connections from other processes running on behalf of the current user. Inheritance Object ProfileServer Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public sealed class ProfileServer : IDisposable Remarks note This class currently supports only Windows. This server implements simple string based request response protocol, where the client writes a line of text with the request and the server sends a line of text as the response. Only one request/response per client pipe connection is allowed. Requests are formatted like: COMMAND: [ ARG1=VALUE1, ARG2=VALUE2,... ] where COMMAND is one of the values below with one or more comma separated arguments formatted as name/value pairs. Response lines are formatted like: OK: OK: RESULT OK-JSON: JSON ERROR: MESSAGE where the \"OK:\" and \"OK-JSON:\" prefixes indicate that the operation succeeded. Some operations like password or value lookups simply return the request result as the string after the prefix. Future operations may return a JSON result. The ERROR[STATUS]: prefix indicates an error occured. STATUS identifies the specific error and the response will typically include an message describing what happened. The supported status codes are defined by ProfileStatus . Here are the supported commands: GET-SECRET-PASSWORD (name, [vault], [masterpassword]) This requests a password from 1Password by name and vault , which is optional and defaults to the user name as defined by the userVault Neon Assistant setting. The password is returned as the response. masterpassword is optional. This is passed in circumstances where the caller already knows the master password, such as for fully automated CI/CD operations. note The value returned by the protocol is value encoded as UTF-8 and then converted to base64. This allows for multi-line results. GET-SECRET-VALUE (name, [vault], [masterpassword]) This requests a secret value from 1Password by name and vault , which is optional and defaults to the user name as defined by the userVault Neon Assistant setting. The value is returned as the response. masterpassword is optional. This is passed in circumstances where the caller already knows the master password, such as for fully automated CI/CD operations. note The value returned by the protocol is value encoded as UTF-8 and then converted to base64. This allows for multi-line results. GET-PROFILE-VALUE (name) This requests a profile value the user's local profile by NAME . he value is returned as the response. note The value returned by the protocol is value encoded as UTF-8 and then converted to base64. This allows for multi-line results. CALL This submits an arbitrary operation to the server, passing arguments and returning a result string. We're using this to workaround some limitations with the GHCR REST API by locating the implementation in neon-assistant. We may use this in the future for other neon-assistant interactions. note The value returned by the protocol is value encoded as UTF-8 and then converted to base64. This allows for multi-line results. Constructors ProfileServer(String, Int32) Constructor. note ProfileServer currently supports only Windows. Declaration public ProfileServer(string pipeName = \"neon-profile-service\", int threadCount = 10) Parameters Type Name Description String pipeName The server named pipe name. This defaults to NeonProfileServicePipe . Int32 threadCount Optionally specifies the number of threads to create to handle inbound requests. This defaults to 10 . Properties CallHandler Callback that performs an arbitrary operation. note This must be initalized before calling Start() . Declaration public Func<ProfileRequest, ProfileHandlerResult> CallHandler { get; set; } Property Value Type Description Func < ProfileRequest , ProfileHandlerResult > GetIsReady Optional callback used to determine whether the profile server implementation is ready for requests. The handler returns null when ready or a ProfileHandlerResult error to be returned to the caller. Declaration public Func<ProfileHandlerResult> GetIsReady { get; set; } Property Value Type Description Func < ProfileHandlerResult > GetProfileValueHandler Callback that retrieves a profile value. The parameters is the profile value name. note This must be initalized before calling Start() . Declaration public Func<ProfileRequest, string, ProfileHandlerResult> GetProfileValueHandler { get; set; } Property Value Type Description Func < ProfileRequest , String , ProfileHandlerResult > GetSecretPasswordHandler Callback that retrieves a secret password. The parameters are the secret name optional vault and master password. note This must be initalized before calling Start() . Declaration public Func<ProfileRequest, string, string, string, ProfileHandlerResult> GetSecretPasswordHandler { get; set; } Property Value Type Description Func < ProfileRequest , String , String , String , ProfileHandlerResult > GetSecretValueHandler Callback that retrieves a secret value. The parameters are the secret name optional vault, and master password. note This must be initalized before calling Start() . Declaration public Func<ProfileRequest, string, string, string, ProfileHandlerResult> GetSecretValueHandler { get; set; } Property Value Type Description Func < ProfileRequest , String , String , String , ProfileHandlerResult > Methods Dispose() Declaration public void Dispose() ParseSecretName(String) Parses a secret name by extracting the name and property components. secret names can be formatted like: NAME or NAME[PROPERTY] . note When the property syntax passed is malformed, we're just going to return the entire input string as the name rather than throwing an exception here. This will probably result in a failed lookup which will be reported to the user who will have a good chance then of figuring out what happened. Declaration public static (string Name, string Property) ParseSecretName(string secretName) Parameters Type Name Description String secretName The secret name. Returns Type Description (T1, T2) < String , String > An anonymous structure including the name and property (if specified). Start() Starts the server. You should call this after configuring the handler callbacks. Declaration public void Start() Exceptions Type Condition InvalidOperationException Thrown if any of the handlers are not initialized."
  },
  "neonsdk/api/Neon.Deployment.ProfileStatus.html": {
    "href": "neonsdk/api/Neon.Deployment.ProfileStatus.html",
    "title": "Class ProfileStatus | NeonSDK documentation",
    "keywords": "Class ProfileStatus Enumerates the profile error code strings. Inheritance Object ProfileStatus Namespace : Neon.Deployment Assembly : Neon.Common.dll Syntax public static class ProfileStatus Fields Aborted The user aborted the operation. Declaration public const string Aborted = \"ABORTED\" Field Value Type Description String BadCommand The request command is unknown. Declaration public const string BadCommand = \"BAD-COMMAND\" Field Value Type Description String BadReference The profile or secret reference is malformed. Declaration public const string BadReference = \"BAD-REFERENCE\" Field Value Type Description String BadRequest The request is malformed. Declaration public const string BadRequest = \"BAD-REQUEST\" Field Value Type Description String CallError An arbitrary call to the profile server failed. Declaration public const string CallError = \"CALL-ERROR\" Field Value Type Description String Connect Unable to establish a connection with to the profile server. Declaration public const string Connect = \"CONNECT\" Field Value Type Description String MissingArg The request is missing one or more required arguments. Declaration public const string MissingArg = \"MISSING-ARG\" Field Value Type Description String NotFound A secret or profile value could not be found. Declaration public const string NotFound = \"NOT-FOUND\" Field Value Type Description String NotReady The profile server is running but it's not ready to accept requests. Declaration public const string NotReady = \"NOT-READY\" Field Value Type Description String OK The request completed successfully. Declaration public const string OK = \"OK\" Field Value Type Description String OnePasswordUnavailable The 1Password backend service is not available. Declaration public const string OnePasswordUnavailable = \"1PASSWORD-UNAVAILABLE\" Field Value Type Description String Other An onspecified error occurred. Declaration public const string Other = \"OTHER\" Field Value Type Description String Timeout The operation timed-out. Declaration public const string Timeout = \"TIMEOUT\" Field Value Type Description String"
  },
  "neonsdk/api/Neon.Deployment.XenServer.html": {
    "href": "neonsdk/api/Neon.Deployment.XenServer.html",
    "title": "Class XenServer | NeonSDK documentation",
    "keywords": "Class XenServer XenServer/XCP-ng related deployment utilities. Inheritance Object XenServer Namespace : Neon.Deployment Assembly : Neon.Deployment.dll Syntax public static class XenServer Methods IsRunning(String, String, String) Determines whether a specific XenServer/XCP-ng host machine is running by logging into it. Declaration public static bool IsRunning(string addressOrFQDN, string username, string password) Parameters Type Name Description String addressOrFQDN Specifies the IP address or hostname for the target XenServer host machine. String username Specifies the username to be used to connect to the host. String password Specifies the host password. Returns Type Description Boolean true if the host machine is running. RemoveVMs(String, String, String, String) Connects to a XenServer/XCP-ng host and removes any VMs matching the name or file wildcard pattern, forceably shutting the VMs down when necessary. Note that the VM's drives will also be removed. Declaration public static void RemoveVMs(string addressOrFQDN, string username, string password, string nameOrPattern) Parameters Type Name Description String addressOrFQDN Specifies the IP address or hostname for the target XenServer host machine. String username Specifies the username to be used to connect to the host. String password Specifies the host password. String nameOrPattern Specifies the VM name or pattern including '*' or '?' wildcards to be used to remove VMs."
  },
  "neonsdk/api/Neon.Diagnostics.AssertException.html": {
    "href": "neonsdk/api/Neon.Diagnostics.AssertException.html",
    "title": "Class AssertException | NeonSDK documentation",
    "keywords": "Class AssertException Thrown by System.Diagnostics.Contracts.Covenant.Assert(System.Boolean,System.String) to signal logic failures. Inheritance Object Exception AssertException Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public class AssertException : Exception, ISerializable Constructors AssertException() Default constructor. Declaration public AssertException() AssertException(String, Exception) Constructs an assertion with a specific message and optional inner exception. Declaration public AssertException(string message, Exception innerException = null) Parameters Type Name Description String message The custom message. Exception innerException Optional inner exception. Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Diagnostics.ConfigExtensions.html": {
    "href": "neonsdk/api/Neon.Diagnostics.ConfigExtensions.html",
    "title": "Class ConfigExtensions | NeonSDK documentation",
    "keywords": "Class ConfigExtensions Implements extension methods used for configuring Neon.Diagnostics related exporters and processors. Inheritance Object ConfigExtensions Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public static class ConfigExtensions Methods AddConsoleJsonExporter(OpenTelemetryLoggerOptions, Action<ConsoleJsonLogExporterOptions>) Adds a ConsoleJsonLogExporter to a OpenTelemetry.Logs.OpenTelemetryLoggerOptions instance when configuring a OpenTelemetry pipeline. Declaration public static OpenTelemetryLoggerOptions AddConsoleJsonExporter(this OpenTelemetryLoggerOptions loggerOptions, Action<ConsoleJsonLogExporterOptions> configure = null) Parameters Type Name Description OpenTelemetry.Logs.OpenTelemetryLoggerOptions loggerOptions The OpenTelemetry.Logs.OpenTelemetryLoggerOptions options to where the exporter will be added. Action < ConsoleJsonLogExporterOptions > configure Exporter configuration options. Returns Type Description OpenTelemetry.Logs.OpenTelemetryLoggerOptions The loggerOptions to enable fluent style programming. AddFileExporter(OpenTelemetryLoggerOptions, Action<FileLogExporterOptions>) Adds a FileLogExporter to a OpenTelemetry.Logs.OpenTelemetryLoggerOptions instance when configuring a OpenTelemetry pipeline. Declaration public static OpenTelemetryLoggerOptions AddFileExporter(this OpenTelemetryLoggerOptions loggerOptions, Action<FileLogExporterOptions> configure = null) Parameters Type Name Description OpenTelemetry.Logs.OpenTelemetryLoggerOptions loggerOptions The OpenTelemetry.Logs.OpenTelemetryLoggerOptions options to where the exporter will be added. Action < FileLogExporterOptions > configure Exporter configuration options. Returns Type Description OpenTelemetry.Logs.OpenTelemetryLoggerOptions The loggerOptions to enable fluent style programming. AddLogAsTraceProcessor(OpenTelemetryLoggerOptions, Action<LogAsTraceProcessorOptions>) Adds a ConsoleJsonLogExporter to a OpenTelemetry.Logs.OpenTelemetryLoggerOptions instance when configuring a OpenTelemetry pipeline. Declaration public static OpenTelemetryLoggerOptions AddLogAsTraceProcessor(this OpenTelemetryLoggerOptions loggerOptions, Action<LogAsTraceProcessorOptions> configure = null) Parameters Type Name Description OpenTelemetry.Logs.OpenTelemetryLoggerOptions loggerOptions The OpenTelemetry.Logs.OpenTelemetryLoggerOptions options to where the exporter will be added. Action < LogAsTraceProcessorOptions > configure Exporter configuration options. Returns Type Description OpenTelemetry.Logs.OpenTelemetryLoggerOptions The loggerOptions to enable fluent style programming."
  },
  "neonsdk/api/Neon.Diagnostics.ConsoleJsonLogExporter.html": {
    "href": "neonsdk/api/Neon.Diagnostics.ConsoleJsonLogExporter.html",
    "title": "Class ConsoleJsonLogExporter | NeonSDK documentation",
    "keywords": "Class ConsoleJsonLogExporter Exports log records to the console where each record will be written as a line of JSON text to standard output and/or standard error when configured. This is suitable for production environments like Kubernetes, Docker, etc. where logs are captured from the program output. Inheritance Object OpenTelemetry.BaseExporter < OpenTelemetry.Logs.LogRecord > ConsoleJsonLogExporter Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public class ConsoleJsonLogExporter : BaseExporter<LogRecord>, IDisposable Remarks IMPORTANT: To enable the inclusion of log tags in the output JSON, you must set OpenTelemetry.Logs.OpenTelemetryLoggerOptions.ParseStateValues =true when configuring your OpenTelemetry options. This is is false by default. var loggerFactory = LoggerFactory.Create( builder => { builder.AddOpenTelemetry( options => { options.ParseStateValues = true; // <--- SET THIS TO TRUE options.SetResourceBuilder(ResourceBuilder.CreateDefault().AddService(serviceName: ServiceName, serviceVersion: ServiceVersion)); options.AddLogAsTraceProcessor(options => options.LogLevel = LogLevel.Warning); options.AddConsoleJsonExporter(); }); }); Constructors ConsoleJsonLogExporter(ConsoleJsonLogExporterOptions) Constructs a log exporter that writes log records to standard output and/or standard error as single line JSON objects. Declaration public ConsoleJsonLogExporter(ConsoleJsonLogExporterOptions options = null) Parameters Type Name Description ConsoleJsonLogExporterOptions options Optionally specifies the exporter options. Methods Export(in Batch<LogRecord>) Declaration public override ExportResult Export(in Batch<LogRecord> batch) Parameters Type Name Description OpenTelemetry.Batch < OpenTelemetry.Logs.LogRecord > batch Returns Type Description OpenTelemetry.ExportResult Overrides OpenTelemetry.BaseExporter<OpenTelemetry.Logs.LogRecord>.Export(OpenTelemetry.Batch<OpenTelemetry.Logs.LogRecord>)"
  },
  "neonsdk/api/Neon.Diagnostics.ConsoleJsonLogExporterOptions.html": {
    "href": "neonsdk/api/Neon.Diagnostics.ConsoleJsonLogExporterOptions.html",
    "title": "Class ConsoleJsonLogExporterOptions | NeonSDK documentation",
    "keywords": "Class ConsoleJsonLogExporterOptions Specifies the options used to configure a ConsoleJsonLogExporter . Inheritance Object ConsoleJsonLogExporterOptions Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public class ConsoleJsonLogExporterOptions Constructors ConsoleJsonLogExporterOptions() Constructs an instance with reasonable settings. Declaration public ConsoleJsonLogExporterOptions() Properties Emit Used to disable writing events to the output stream. This can be useful for unit testing. note Any configured LogEventInterceptor actions will still be called event when Emit is configured as false . Declaration public bool Emit { get; set; } Property Value Type Description Boolean ExceptionStackTraces Specifies whether exception stack traces should be included in logged events. This defaults to true . Declaration public bool ExceptionStackTraces { get; set; } Property Value Type Description Boolean LogEventInterceptor Used to intercept log events just before they are emitted by the exporter. You can use this for implementing logging related unit tests or modifying other event properties like the timestamp, labels, tags, etc. note IMPORTANT: LogEvent record instances are reused by the Neon telemetry code, so you'll need to call Clone() when you're using the interceptor to collected logged events for later analysis (i.e. when unit testing). Declaration public LogEventInterceptor LogEventInterceptor { get; set; } Property Value Type Description LogEventInterceptor SingleLine Specifies whether the log event JSON written to the console should be formatted as single lines of JSON (the default) or render these as indented multi-line JSON separated by a blank line. note This may be useful for debugging but should probably never be used for production. This defaults to true . Declaration public bool SingleLine { get; set; } Property Value Type Description Boolean StandardErrorLevel Used to direct log output for events to standard error based on the event log level. Declaration public LogLevel StandardErrorLevel { get; set; } Property Value Type Description LogLevel Remarks By default, ConsoleJsonLogExporter writes logs to standard output because this property defaults to None . You may override this by setting this to another level; then events with log levels >= this property will be written to standard error instead. Set this to Critical to send all logs to standard output ."
  },
  "neonsdk/api/Neon.Diagnostics.ExceptionInfo.html": {
    "href": "neonsdk/api/Neon.Diagnostics.ExceptionInfo.html",
    "title": "Struct ExceptionInfo | NeonSDK documentation",
    "keywords": "Struct ExceptionInfo Used for serializing exception information. Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public struct ExceptionInfo Properties Message The fully qualified exception name. Declaration [JsonProperty(PropertyName = \"message\", DefaultValueHandling = DefaultValueHandling.Ignore)] public string Message { readonly get; set; } Property Value Type Description String Stack The stack trace. Declaration [JsonProperty(PropertyName = \"stack\", DefaultValueHandling = DefaultValueHandling.Ignore)] public string Stack { readonly get; set; } Property Value Type Description String Type The fully qualified exception type name. Declaration [JsonProperty(PropertyName = \"type\", DefaultValueHandling = DefaultValueHandling.Ignore)] public string Type { readonly get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Diagnostics.FileLogExporter.html": {
    "href": "neonsdk/api/Neon.Diagnostics.FileLogExporter.html",
    "title": "Class FileLogExporter | NeonSDK documentation",
    "keywords": "Class FileLogExporter Exports log records to a file as specified by FileLogExporterOptions . Inheritance Object OpenTelemetry.BaseExporter < OpenTelemetry.Logs.LogRecord > FileLogExporter Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public class FileLogExporter : BaseExporter<LogRecord>, IDisposable Remarks This exporter currently supports writing logs as JSON or a bespoke human readable format (the default). You can customize this by using options with the Format to one of the FileLogExporterFormat values (as shown below). IMPORTANT: To enable the inclusion of log tags in the output, you must set OpenTelemetry.Logs.OpenTelemetryLoggerOptions.ParseStateValues =true when configuring your OpenTelemetry options. This is is false by default. var loggerFactory = LoggerFactory.Create( builder => { builder.AddOpenTelemetry( options => { options.ParseStateValues = true; // <--- SET THIS TO TRUE options.SetResourceBuilder(ResourceBuilder.CreateDefault().AddService(serviceName: ServiceName, serviceVersion: ServiceVersion)); options.AddFileExporter( options => { options.Format = FileLogExporterFormat.Human; options.LogFolder = NeonHelper.GetBaseDirtectory(); options.LogFileName = \"MyProgram.log\"; }); }); }); This exporter supports log file rotation. This is controlled by the FileLimit and MaxLogFiles options. When the current log file's size equals or exceeds FileLimit after writing a log event, the exporter will close and rename the current file by appending a timestamp and start logging to a new file named LogFileName . FileLimit defaults to 10 MiB and MaxLogFiles defaults to retain 10 log files. The rotated files will be named like \"LOGFILENAME-YYYY-MM-ddTHH-mm-ss.fffZ.EXT\", where LOGFILENAME is the filename part of LogFileName and EXT is the extension. MaxLogFiles controls how many log files will be retained. Constructors FileLogExporter(FileLogExporterOptions) Constructs a log exporter that writes log records to standard output and/or standard error as single line JSON objects. Declaration public FileLogExporter(FileLogExporterOptions options = null) Parameters Type Name Description FileLogExporterOptions options Optionally specifies the exporter options. Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides OpenTelemetry.BaseExporter<OpenTelemetry.Logs.LogRecord>.Dispose(System.Boolean) Export(in Batch<LogRecord>) Declaration public override ExportResult Export(in Batch<LogRecord> batch) Parameters Type Name Description OpenTelemetry.Batch < OpenTelemetry.Logs.LogRecord > batch Returns Type Description OpenTelemetry.ExportResult Overrides OpenTelemetry.BaseExporter<OpenTelemetry.Logs.LogRecord>.Export(OpenTelemetry.Batch<OpenTelemetry.Logs.LogRecord>) OnForceFlush(Int32) Declaration protected override bool OnForceFlush(int timeoutMilliseconds) Parameters Type Name Description Int32 timeoutMilliseconds Returns Type Description Boolean Overrides OpenTelemetry.BaseExporter<OpenTelemetry.Logs.LogRecord>.OnForceFlush(System.Int32) OnShutdown(Int32) Declaration protected override bool OnShutdown(int timeoutMilliseconds) Parameters Type Name Description Int32 timeoutMilliseconds Returns Type Description Boolean Overrides OpenTelemetry.BaseExporter<OpenTelemetry.Logs.LogRecord>.OnShutdown(System.Int32)"
  },
  "neonsdk/api/Neon.Diagnostics.FileLogExporterFormat.html": {
    "href": "neonsdk/api/Neon.Diagnostics.FileLogExporterFormat.html",
    "title": "Enum FileLogExporterFormat | NeonSDK documentation",
    "keywords": "Enum FileLogExporterFormat Enumerates FileLogExporter output formats. Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public enum FileLogExporterFormat Fields Name Description Human Outputs logs in a human readable format. This is the default. Json Outputs logs as single-line JSON. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Diagnostics.FileLogExporterOptions.html": {
    "href": "neonsdk/api/Neon.Diagnostics.FileLogExporterOptions.html",
    "title": "Class FileLogExporterOptions | NeonSDK documentation",
    "keywords": "Class FileLogExporterOptions Specifies the options used to configure a ConsoleJsonLogExporter . Inheritance Object FileLogExporterOptions Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public class FileLogExporterOptions Constructors FileLogExporterOptions() Constructs an instance with reasonable settings. Declaration public FileLogExporterOptions() Properties FileLimit Used to limit the size of log files. The current log file will be rotated when its size reaches or exceeds this value. This defaults to 10 MiB and cannot be less than 10KiB Declaration public long FileLimit { get; set; } Property Value Type Description Int64 FlushAgressively Controls whether the target log file will be flushed to disk after writing log event batch. This defaults to true . Declaration public bool FlushAgressively { get; set; } Property Value Type Description Boolean Format Specifies the export format. This defaults to Human . Declaration public FileLogExporterFormat Format { get; set; } Property Value Type Description FileLogExporterFormat LogEventInterceptor Used to intercept log events just before they are emitted by the exporter. You can use this for implementing logging related unit tests or modifying other event properties like the timestamp, labels, tags, etc. Declaration public LogEventInterceptor LogEventInterceptor { get; set; } Property Value Type Description LogEventInterceptor LogFileName Specifies the name to use for the log file. This must be specified. Declaration public string LogFileName { get; set; } Property Value Type Description String LogFolder Specifies the folder where the log file will be written. This must be specified. Declaration public string LogFolder { get; set; } Property Value Type Description String MaxLogFiles Used to limit how many log files are retained. This must be greater than zero. A value of one indicates that log rotation will be disabled and the current log file will simply be cleared when its size exceeds FileLimit , effectively starting over. This defaults to 10 log files. Declaration public int MaxLogFiles { get; set; } Property Value Type Description Int32"
  },
  "neonsdk/api/Neon.Diagnostics.html": {
    "href": "neonsdk/api/Neon.Diagnostics.html",
    "title": "Namespace Neon.Diagnostics | NeonSDK documentation",
    "keywords": "Namespace Neon.Diagnostics Classes AssertException Thrown by System.Diagnostics.Contracts.Covenant.Assert(System.Boolean,System.String) to signal logic failures. ConfigExtensions Implements extension methods used for configuring Neon.Diagnostics related exporters and processors. ConsoleJsonLogExporter Exports log records to the console where each record will be written as a line of JSON text to standard output and/or standard error when configured. This is suitable for production environments like Kubernetes, Docker, etc. where logs are captured from the program output. ConsoleJsonLogExporterOptions Specifies the options used to configure a ConsoleJsonLogExporter . FileLogExporter Exports log records to a file as specified by FileLogExporterOptions . FileLogExporterOptions Specifies the options used to configure a ConsoleJsonLogExporter . LogAsTraceProcessor This OpenTelemetry processor submits any logged events that satisfy a log level as trace events to the current trace span (if any). This is an easy way to converge logging any tracing while we're waiting for the OpenTelemetry folks support this natively. LogAsTraceProcessorOptions Specifies the options used to configure a LogAsTraceProcessor . LogAttributeNames Defines attributes names used when emitting log records. LogAttributes Holds attributes to be included in log events recorded by ILogger LoggerExtensions . LogEvent Used for serializing the log records. LoggerExtensions Extends ILogger with additional handy logging methods. We recommend that users standardize on calling these logger extensions as opposed to using Microsoft's standard LoggerExtensions . NullLogger Implements a do-nothing ILogger . TelemetryHub Provides a standard global place where libraries and applications can gain access to the application's ActivitySource and LoggerFactory for recording traces and logs. Applications that enable tracing and logging and want to enable logging and tracing by Neon libraries set LoggerFactory and ActivitySource immediately after configuring telemetry using the OpenTelemetry and Microsoft.Extensions.Logging APIs. note The Neon.Service.NeonService class initializes these properties by default when used by applications based on this class. CreateLogger<T>(LogAttributes, Boolean, Boolean) , CreateLogger(Type, LogAttributes, Boolean, Boolean) , or CreateLogger(String, LogAttributes, Boolean, Boolean) are helper methods for obtaining loggers. You can also set the LogAttributes property to attributes you'd like to include in the loggers returned by the CreateLogger() methods. This is a handy way to include a common set of attributes with all logged events. The ParseLogLevel(String, LogLevel) utility can be used to parse a log level string obtained from an environment variable or elsewhere. This returns the parsed log level and also sets the Logging__LogLevel__Microsoft environment variable which will be honored by any created loggers. TelemetrySpanEventNames NeonSDK related trace/span event names. TelemetrySpanExtensions Extends the OpenTelemetry.Trace.TelemetrySpan class. Structs ExceptionInfo Used for serializing exception information. Enums FileLogExporterFormat Enumerates FileLogExporter output formats. Delegates LogEventInterceptor Use this delegate for filtering, inspecting, or modifying log events immediately before they are emitted by ConsoleJsonLogExporter or one of the other log exporters in the Neon.Diagnostics namespace."
  },
  "neonsdk/api/Neon.Diagnostics.LogAsTraceProcessor.html": {
    "href": "neonsdk/api/Neon.Diagnostics.LogAsTraceProcessor.html",
    "title": "Class LogAsTraceProcessor | NeonSDK documentation",
    "keywords": "Class LogAsTraceProcessor This OpenTelemetry processor submits any logged events that satisfy a log level as trace events to the current trace span (if any). This is an easy way to converge logging any tracing while we're waiting for the OpenTelemetry folks support this natively. Inheritance Object OpenTelemetry.BaseProcessor < OpenTelemetry.Logs.LogRecord > LogAsTraceProcessor Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public class LogAsTraceProcessor : BaseProcessor<LogRecord>, IDisposable Remarks This is very easy to use. Simply call AddLogAsTraceProcessor(OpenTelemetryLoggerOptions, Action<LogAsTraceProcessorOptions>) , optionally passing options that specify the log level for events to be added as trace events. Constructors LogAsTraceProcessor(LogAsTraceProcessorOptions) Constructs a processor that forwards logged events to the current trace as trace events. Declaration public LogAsTraceProcessor(LogAsTraceProcessorOptions options) Parameters Type Name Description LogAsTraceProcessorOptions options Optionally specifies the processor options. This is used to filter the events logged to as trace events by LogLevel . This defaults to forwarding events with log levels greater than or equal to Information . Remarks All log events added as events in the current span will have their name set to Log and will also include the log event tags but with their names prefixed by \"neon.log.\" to avoid conflicts with unrelated tags. Methods OnEnd(LogRecord) Handles the event forwarding. Declaration public override void OnEnd(LogRecord logRecord) Parameters Type Name Description OpenTelemetry.Logs.LogRecord logRecord The log record. Overrides OpenTelemetry.BaseProcessor<OpenTelemetry.Logs.LogRecord>.OnEnd(OpenTelemetry.Logs.LogRecord)"
  },
  "neonsdk/api/Neon.Diagnostics.LogAsTraceProcessorOptions.html": {
    "href": "neonsdk/api/Neon.Diagnostics.LogAsTraceProcessorOptions.html",
    "title": "Class LogAsTraceProcessorOptions | NeonSDK documentation",
    "keywords": "Class LogAsTraceProcessorOptions Specifies the options used to configure a LogAsTraceProcessor . Inheritance Object LogAsTraceProcessorOptions Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public class LogAsTraceProcessorOptions Constructors LogAsTraceProcessorOptions() Constructs an instance with reasonable settings. Declaration public LogAsTraceProcessorOptions() Properties LogLevel Used to filter the log events that are forwarded. Only events with log levels greater than or equal to this value will be also logged as trace events. This defaults to Information . Declaration public LogLevel LogLevel { get; set; } Property Value Type Description LogLevel"
  },
  "neonsdk/api/Neon.Diagnostics.LogAttributeNames.html": {
    "href": "neonsdk/api/Neon.Diagnostics.LogAttributeNames.html",
    "title": "Class LogAttributeNames | NeonSDK documentation",
    "keywords": "Class LogAttributeNames Defines attributes names used when emitting log records. Inheritance Object LogAttributeNames Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public class LogAttributeNames Fields CategoryName Identifies the MSFT logger implementation's attribute that holds the category name. Declaration public const string CategoryName = \"dotnet.ilogger.category\" Field Value Type Description String Exception Identifies a related exception. Declaration public const string Exception = \"exception\" Field Value Type Description String InternalBody Identifies our internal message body. Declaration public const string InternalBody = \"{Body}\" Field Value Type Description String InternalOriginalFormat Identifies the MSFT logger implementation's attribute that holds the message format string. Declaration public const string InternalOriginalFormat = \"{OriginalFormat}\" Field Value Type Description String Labels Identifies the event labels (also know as tags or attributes). Declaration public const string Labels = \"labels\" Field Value Type Description String NeonIndex Indicates the position of the log event in the stream of logs emitted by the application. The first event emitted by the application will have a zero index, and then this is incremented after every logged event. This attribute is useful for listing events in the order they were actually logged. Timestamps often don't have enough resolution to distinguish between to events logged logged very quickly in sequence. Declaration public const string NeonIndex = \"neon.index\" Field Value Type Description String NeonTransient bool: Indicates that the log event is related to a transient error. Declaration public const string NeonTransient = \"neon.transient\" Field Value Type Description String Resources Identifies resources related to the event. Declaration public const string Resources = \"resources\" Field Value Type Description String Severity Identifies the event severity by OpenTelemetry secerity name. Declaration public const string Severity = \"severity\" Field Value Type Description String SeverityNumber Identifies the event severity by OpenTelemetry severity number. Declaration public const string SeverityNumber = \"severityNumber\" Field Value Type Description String SpanId Identifies the current span. Declaration public const string SpanId = \"spanid\" Field Value Type Description String TraceId Identifies the current trace. Declaration public const string TraceId = \"traceid\" Field Value Type Description String TsNs Identifies the event timetamp formatted as Unix Epoc nanoseconds. Declaration public const string TsNs = \"tsNs\" Field Value Type Description String"
  },
  "neonsdk/api/Neon.Diagnostics.LogAttributes.html": {
    "href": "neonsdk/api/Neon.Diagnostics.LogAttributes.html",
    "title": "Class LogAttributes | NeonSDK documentation",
    "keywords": "Class LogAttributes Holds attributes to be included in log events recorded by ILogger LoggerExtensions . Inheritance Object LogAttributes Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public class LogAttributes Constructors LogAttributes() Initializes a new instance of the LogAttributes class. Declaration public LogAttributes() LogAttributes(LogAttributes) Initializes a new instance of the LogAttributes class by cloning another LogAttributes instance. Declaration public LogAttributes(LogAttributes attributes) Parameters Type Name Description LogAttributes attributes Initial attributes to store in the collection. LogAttributes(IEnumerable<KeyValuePair<String, Object>>) Initializes a new instance of the LogAttributes class from a attributes enumerable. Declaration public LogAttributes(IEnumerable<KeyValuePair<string, object>> attributes) Parameters Type Name Description IEnumerable < KeyValuePair < String , Object >> attributes Initial attributes to store in the collection. Properties Count Returns the number of attributes in the collection. Declaration public int Count { get; } Property Value Type Description Int32 Methods Add(String, Boolean) Adds a bool attribute. Declaration public void Add(string key, bool value) Parameters Type Name Description String key Attribute key. Boolean value Attribute value. Add(String, Double) Adds a double attribute. Declaration public void Add(string key, double value) Parameters Type Name Description String key Attribute key. Double value Attribute value. Add(String, Int64) Adds a long attribute. Declaration public void Add(string key, long value) Parameters Type Name Description String key Attribute key. Int64 value Attribute value. Add(String, Object) Adds an arbitrary object attribute. Declaration public void Add(string key, object value) Parameters Type Name Description String key Attribute key. Object value Attribute value. Add(String, String) Adds a string attribute. Declaration public void Add(string key, string value) Parameters Type Name Description String key Attribute key. String value Attribute value. Clear() Clears the attributes collection. Declaration public void Clear()"
  },
  "neonsdk/api/Neon.Diagnostics.LogEvent.html": {
    "href": "neonsdk/api/Neon.Diagnostics.LogEvent.html",
    "title": "Class LogEvent | NeonSDK documentation",
    "keywords": "Class LogEvent Used for serializing the log records. Inheritance Object LogEvent Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public class LogEvent Properties Attributes The event tags. Declaration [JsonProperty(PropertyName = \"attributes\", DefaultValueHandling = DefaultValueHandling.Ignore)] public IReadOnlyDictionary<string, object> Attributes { get; } Property Value Type Description IReadOnlyDictionary < String , Object > Body The event message. Declaration [JsonProperty(PropertyName = \"body\", DefaultValueHandling = DefaultValueHandling.Ignore)] public string Body { get; set; } Property Value Type Description String CategoryName The event source category name. Declaration [JsonProperty(PropertyName = \"categoryName\", DefaultValueHandling = DefaultValueHandling.Ignore)] public string CategoryName { get; set; } Property Value Type Description String Resources The related event resources. Declaration [JsonProperty(PropertyName = \"resources\", DefaultValueHandling = DefaultValueHandling.Ignore)] public IReadOnlyDictionary<string, object> Resources { get; } Property Value Type Description IReadOnlyDictionary < String , Object > Severity The human readable event severity level. Declaration [JsonProperty(PropertyName = \"severity\", DefaultValueHandling = DefaultValueHandling.Ignore)] public string Severity { get; } Property Value Type Description String SeverityNumber The standard OpenTelemetry event severity number. Declaration [JsonProperty(PropertyName = \"severityNumber\", DefaultValueHandling = DefaultValueHandling.Ignore)] public int SeverityNumber { get; } Property Value Type Description Int32 SpanId The associated trace span ID. Declaration [JsonProperty(PropertyName = \"spanId\", DefaultValueHandling = DefaultValueHandling.Ignore)] public string SpanId { get; set; } Property Value Type Description String TraceId The associated trace ID. Declaration [JsonProperty(PropertyName = \"traceId\", DefaultValueHandling = DefaultValueHandling.Ignore)] public string TraceId { get; set; } Property Value Type Description String TsNs The event timestamp expressed as Unix Epoch nanoseconds. Declaration [JsonProperty(PropertyName = \"tsNs\")] public long TsNs { get; set; } Property Value Type Description Int64 Methods Clone() Clones the current instance. This is used internally when passing instances to a LogEventInterceptor because our logging code reused LogEvent instances to reduce GC pressure. Declaration public LogEvent Clone() Returns Type Description LogEvent The cloned instance."
  },
  "neonsdk/api/Neon.Diagnostics.LogEventInterceptor.html": {
    "href": "neonsdk/api/Neon.Diagnostics.LogEventInterceptor.html",
    "title": "Delegate LogEventInterceptor | NeonSDK documentation",
    "keywords": "Delegate LogEventInterceptor Use this delegate for filtering, inspecting, or modifying log events immediately before they are emitted by ConsoleJsonLogExporter or one of the other log exporters in the Neon.Diagnostics namespace. Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public delegate void LogEventInterceptor(LogEvent logEvent); Parameters Type Name Description LogEvent logEvent The log event. Remarks note IMPORTANT: LogEvent record instances are reused by the Neon telemetry code, so you'll need to call Clone() when you're using the interceptor to collected logged events for later analysis (i.e. when unit testing). You can configure an interceptor in ConsoleJsonLogExporterOptions or the options for other log exporters in the Neon.Diagnostics namespace. This is useful for unit tests that verify that code is logging events correctly. You can also use this to modify the event in other ways like modifing the body, timestamp, labels, resources, etc. before the event is emitted."
  },
  "neonsdk/api/Neon.Diagnostics.LoggerExtensions.html": {
    "href": "neonsdk/api/Neon.Diagnostics.LoggerExtensions.html",
    "title": "Class LoggerExtensions | NeonSDK documentation",
    "keywords": "Class LoggerExtensions Extends ILogger with additional handy logging methods. We recommend that users standardize on calling these logger extensions as opposed to using Microsoft's standard LoggerExtensions . Inheritance Object LoggerExtensions Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public static class LoggerExtensions Remarks EVENT LOGGING: This class extends ILogger with methods intended to be somewhat easier to use than Microsoft's extensions. Our logging method names end with \"Ex\" and we provide methods for logging critical, error, warning, information, debug and trace events. We have overrides for each log level that can be used for different purposes. We'll discuss the information methods below. The methods for the other log levels folow the same pattern. The first thing to note, is that all logging methods include an optional attributeSetter parameter. This can be set to an Action that adds arbitrary tags to the event when logged. This is an easy and clean way to specify attributes, much cleaner than specifying a message format string as required by the LoggerExtensions (e.g. there's no way to include an attribute without having it appear in the event message). Here's how this works: logger.LogInformationEx(\"Test message\", attributes => { attributes.Add(\"my-attr-0\", \"test-0\"); attributes.Add(\"my-attr-1\", \"test-1\"); }); note The attributes lambda function is only called when the event is actually going to be logged, based on the current log level. Some of our extensions accept the message as a string and others accept a lambda function that returns the message string. The general rule is that you should pass constant strings directly to the logging methods but strings generated at runtime via interpolation or other mechanisms should be specified by passing a message lambda function. note The message lambda function is only called when the event is actually going to be logged, based on the current log level. The latter recomendation will improve performance because the lambda function won't be called when the event won't actually be logged due to the current log level, avoiding the overhead of generating the string. Imagine if your program logged a lot of TRACE events with dynamically generated messages. This means that when running at the INFORMATION log level, all of those trace messages would be created at runtime and then be immediately discarded, resulting in wasted CPU used to generate the message as well as extra heap allocations (all for nothing). // Log a static message: logger.LogInformationEx(\"Hello World!\"); // Log a dynamic message: var name = \"Sally\"; logger.LogInformation(() => $\"Hello: {name}\"); // YOU DON'T WANT TO DO THIS because the message string will always be generated at runtime, // even when the event won't be logged due to the current log level: logger.LogInformation($\"Hello: {name}\"); LogInformationEx(ILogger, String, Action<LogAttributes>) : Used for logging a constant message string. Avoid calling this for dynamically generated messages. LogInformationEx(ILogger, Func<String>, Action<LogAttributes>) : Used for logging a dynamically generated message. This will be much more efficient when the event isn't going to be logged due to the current log level setting. LogInformationEx(ILogger, Exception, String, Action<LogAttributes>) : Used for logging an exception with a constant or null message. When message is passed as empty or null , a message generated from exception will be used. LogInformationEx(ILogger, Exception, Func<String>, Action<LogAttributes>) : Used for logging an exception with a dynamic message. When the message function is passed null , a message generated from exception will be used. LOGGER ATTRIBUTES Use the AddAttributes(ILogger, Action<LogAttributes>) method to create a new ILogger with new attributes such that these attributes will be included in subsequent events emitted by the logger. Note that attributes logged with the event will override logger attributes with the same name. Here's how this works: var logger = TelemetryHub.CreateLogger(\"my-logger\"); var attributes = new LogAttributes(); attributes.Add(\"my-attr-0\", \"test-0\"); attributes.Add(\"my-attr-1\", \"test-1\"); logger = logger.AddAttributes(attributes); // Creates a new logger including the attributes passed. logger.LogInformationEx(\"Test message\"); // This event will include the new attributes // This example overrides the logger's \"test-1\" attribute with the \"OVERRIDE\" value: logger.LogInformationEx(\"Test message\", attributes => attributes.Add(\"test-1\", \"OVERRIDE\")); note IMPORTANT: Any additional attributes added to the logger returned will only be recognized by the neondSDK logger extensions LoggerExtensions with logging method names ending in \"Ex\" , like: LogInformationEx(ILogger, Func<String>, Action<LogAttributes>) . The standard Microsoft logger extension methods implemented by LoggerExtensions will ignore these logger attributes. Methods AddAttributes(ILogger, Action<LogAttributes>) This wraps the logger passed with another logger that adds a colection of attributes to every logged event. note IMPORTANT: Any additional attributes added to the logger returned will only be recognized by the neondSDK logger extensions LoggerExtensions with logging method names ending in \"Ex\" , like: LogInformationEx(ILogger, Func<String>, Action<LogAttributes>) . The standard Microsoft logger extension methods implemented by LoggerExtensions will ignore these logger attributes. Declaration public static ILogger AddAttributes(this ILogger logger, Action<LogAttributes> attributeSetter) Parameters Type Name Description ILogger logger The logger being wrapped. Action < LogAttributes > attributeSetter Action used to add attributes to the logger. Returns Type Description ILogger An ILogger that will include the attributes in every event it logs. Remarks This method returns a new logger that includes the attributes added by the attributeSetter action. LogCriticalEx(ILogger, Exception, Func<String>, Action<LogAttributes>) Logs a critical exception with a message returned by a custom message function. Declaration public static void LogCriticalEx(this ILogger logger, Exception exception, Func<string> messageFunc, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Exception exception The exception. Func < String > messageFunc Specifies the message function. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing attributes when the current log level prevents any log from being emitted, for better performance. LogCriticalEx(ILogger, Exception, String, Action<LogAttributes>) Logs a critical exception. Declaration public static void LogCriticalEx(this ILogger logger, Exception exception, string message = null, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Exception exception Specifies the exception. String message Optionally specifies the event message. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing attributes when the current log level prevents any log from being emitted, for better performance. LogCriticalEx(ILogger, Func<String>, Action<LogAttributes>) Logs a critical message retrieved via a message function. Declaration public static void LogCriticalEx(this ILogger logger, Func<string> messageFunc, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Func < String > messageFunc The message function. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing interpolated strings and attributes when the current log level prevents any log from being emitted, for better performance. LogCriticalEx(ILogger, String, Action<LogAttributes>) Logs a critical message. Declaration public static void LogCriticalEx(this ILogger logger, string message, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. String message Specifies the message. Action < LogAttributes > attributeSetter Specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing interpolated strings and attributes when the current log level prevents any log from being emitted, for better performance. LogDebugEx(ILogger, Exception, Func<String>, Action<LogAttributes>) Logs a debug exception with a message returned by a custom message function.. Declaration public static void LogDebugEx(this ILogger logger, Exception exception, Func<string> messageFunc, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Exception exception Specifies exception. Func < String > messageFunc Specifies message function. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing attributes when the current log level prevents any log from being emitted, for better performance. LogDebugEx(ILogger, Exception, String, Action<LogAttributes>) Logs a debug exception. Declaration public static void LogDebugEx(this ILogger logger, Exception exception, string message = null, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Exception exception Specifies exception. String message Optionally specifies the event message. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing attributes when the current log level prevents any log from being emitted, for better performance. LogDebugEx(ILogger, Func<String>, Action<LogAttributes>) Logs a debug message retrieved via a message function. Declaration public static void LogDebugEx(this ILogger logger, Func<string> messageFunc, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Func < String > messageFunc Specifies message function. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing interpolated strings and attributes when the current log level prevents any log from being emitted, for better performance. LogDebugEx(ILogger, String, Action<LogAttributes>) Logs a debug message. Declaration public static void LogDebugEx(this ILogger logger, string message, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. String message Specifies message. Action < LogAttributes > attributeSetter Specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing interpolated strings and attributes when the current log level prevents any log from being emitted, for better performance. LogErrorEx(ILogger, Exception, Func<String>, Action<LogAttributes>) Logs an error exception with a message returned by a custom message function.. Declaration public static void LogErrorEx(this ILogger logger, Exception exception, Func<string> messageFunc, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Exception exception Specifies exception. Func < String > messageFunc Specifies message function. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing attributes when the current log level prevents any log from being emitted, for better performance. LogErrorEx(ILogger, Exception, String, Action<LogAttributes>) Logs an error exception. Declaration public static void LogErrorEx(this ILogger logger, Exception exception, string message = null, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Exception exception Specifies exception. String message Optionally specifies the event message. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing attributes when the current log level prevents any log from being emitted, for better performance. LogErrorEx(ILogger, Func<String>, Action<LogAttributes>) Logs an error message retrieved via a message function. Declaration public static void LogErrorEx(this ILogger logger, Func<string> messageFunc, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Func < String > messageFunc Specifies message function. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing interpolated strings and attributes when the current log level prevents any log from being emitted, for better performance. LogErrorEx(ILogger, String, Action<LogAttributes>) Logs an error message. Declaration public static void LogErrorEx(this ILogger logger, string message, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. String message Specifies message. Action < LogAttributes > attributeSetter Specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing interpolated strings and attributes when the current log level prevents any log from being emitted, for better performance. LogInformationEx(ILogger, Exception, Func<String>, Action<LogAttributes>) Logs a information exception with a message returned by a custom message function.. Declaration public static void LogInformationEx(this ILogger logger, Exception exception, Func<string> messageFunc, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Exception exception Specifies exception. Func < String > messageFunc Specifies message function. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing attributes when the current log level prevents any log from being emitted, for better performance. LogInformationEx(ILogger, Exception, String, Action<LogAttributes>) Logs an information exception. Declaration public static void LogInformationEx(this ILogger logger, Exception exception, string message = null, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Exception exception Specifies exception. String message Optionally specifies the event message. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing attributes when the current log level prevents any log from being emitted, for better performance. LogInformationEx(ILogger, Func<String>, Action<LogAttributes>) Logs an information message retrieved via a message function. Declaration public static void LogInformationEx(this ILogger logger, Func<string> messageFunc, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Func < String > messageFunc Specifies message function. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing interpolated strings and attributes when the current log level prevents any log from being emitted, for better performance. LogInformationEx(ILogger, String, Action<LogAttributes>) Logs an information message. Declaration public static void LogInformationEx(this ILogger logger, string message, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. String message Specifies message. Action < LogAttributes > attributeSetter Specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing interpolated strings and attributes when the current log level prevents any log from being emitted, for better performance. LogTraceEx(ILogger, Exception, Func<String>, Action<LogAttributes>) Logs a trace exception with a message returned by a custom message function.. Declaration public static void LogTraceEx(this ILogger logger, Exception exception, Func<string> messageFunc, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Exception exception Specifies exception. Func < String > messageFunc Specifies message function. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing attributes when the current log level prevents any log from being emitted, for better performance. LogTraceEx(ILogger, Exception, String, Action<LogAttributes>) Logs a trace exception. Declaration public static void LogTraceEx(this ILogger logger, Exception exception, string message = null, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Exception exception Specifies exception. String message Optionally specifies the event message. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing attributes when the current log level prevents any log from being emitted, for better performance. LogTraceEx(ILogger, Func<String>, Action<LogAttributes>) Logs a trace message retrieved via a message function. Declaration public static void LogTraceEx(this ILogger logger, Func<string> messageFunc, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Func < String > messageFunc Specifies message function. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing interpolated strings and attributes when the current log level prevents any log from being emitted, for better performance. LogTraceEx(ILogger, String, Action<LogAttributes>) Logs a trace message. Declaration public static void LogTraceEx(this ILogger logger, string message, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. String message Specifies message. Action < LogAttributes > attributeSetter Specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing interpolated strings and attributes when the current log level prevents any log from being emitted, for better performance. LogWarningEx(ILogger, Exception, Func<String>, Action<LogAttributes>) Logs a warning exception with a message returned by a custom message function.. Declaration public static void LogWarningEx(this ILogger logger, Exception exception, Func<string> messageFunc, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Exception exception Specifies exception. Func < String > messageFunc Specifies message function. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing attributes when the current log level prevents any log from being emitted, for better performance. LogWarningEx(ILogger, Exception, String, Action<LogAttributes>) Logs a warning exception. Declaration public static void LogWarningEx(this ILogger logger, Exception exception, string message = null, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Exception exception Specifies exception. String message Optionally specifies the event message. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing attributes when the current log level prevents any log from being emitted, for better performance. LogWarningEx(ILogger, Func<String>, Action<LogAttributes>) Logs a warning message retrieved via a message function. Declaration public static void LogWarningEx(this ILogger logger, Func<string> messageFunc, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. Func < String > messageFunc Specifies message function. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing interpolated strings and attributes when the current log level prevents any log from being emitted, for better performance. LogWarningEx(ILogger, String, Action<LogAttributes>) Logs a warning message. Declaration public static void LogWarningEx(this ILogger logger, string message, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. String message Specifies message. Action < LogAttributes > attributeSetter Specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing interpolated strings and attributes when the current log level prevents any log from being emitted, for better performance. LogWithLevelEx(ILogger, LogLevel, Exception, Func<String>, Action<LogAttributes>) Logs an exception with a message returned by a custom message function with the specified LogLevel . Declaration public static void LogWithLevelEx(this ILogger logger, LogLevel logLevel, Exception exception, Func<string> messageFunc, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. LogLevel logLevel Specifies the LogLevel . Exception exception The exception. Func < String > messageFunc Specifies the message function. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing attributes when the current log level prevents any log from being emitted, for better performance. LogWithLevelEx(ILogger, LogLevel, Exception, String, Action<LogAttributes>) Logs an exception retrieved via a message function with the specified LogLevel . Declaration public static void LogWithLevelEx(this ILogger logger, LogLevel logLevel, Exception exception, string message = null, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. LogLevel logLevel Specifies the LogLevel . Exception exception Specifies the exception. String message Optionally specifies the event message. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing attributes when the current log level prevents any log from being emitted, for better performance. LogWithLevelEx(ILogger, LogLevel, Func<String>, Action<LogAttributes>) Logs a message retrieved via a message function with the specified LogLevel . Declaration public static void LogWithLevelEx(this ILogger logger, LogLevel logLevel, Func<string> messageFunc, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. LogLevel logLevel Specifies the LogLevel . Func < String > messageFunc The message function. Action < LogAttributes > attributeSetter Optionally specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing interpolated strings and attributes when the current log level prevents any log from being emitted, for better performance. LogWithLevelEx(ILogger, LogLevel, String, Action<LogAttributes>) Logs a message with the specified LogLevel . Declaration public static void LogWithLevelEx(this ILogger logger, LogLevel logLevel, string message, Action<LogAttributes> attributeSetter = null) Parameters Type Name Description ILogger logger Specifies the logger. LogLevel logLevel Specifies the LogLevel . String message Specifies the message. Action < LogAttributes > attributeSetter Specifies an action that can be used to add attributes to the event being logged. Remarks This method is intended mostly to avoid processing interpolated strings and attributes when the current log level prevents any log from being emitted, for better performance."
  },
  "neonsdk/api/Neon.Diagnostics.NullLogger.html": {
    "href": "neonsdk/api/Neon.Diagnostics.NullLogger.html",
    "title": "Class NullLogger | NeonSDK documentation",
    "keywords": "Class NullLogger Implements a do-nothing ILogger . Inheritance Object NullLogger Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public class NullLogger : ILogger Properties Instance Returns a NullLogger instance. Declaration public static ILogger Instance { get; } Property Value Type Description ILogger Methods BeginScope<TState>(TState) Declaration public IDisposable BeginScope<TState>(TState state) Parameters Type Name Description TState state Returns Type Description IDisposable Type Parameters Name Description TState IsEnabled(LogLevel) Declaration public bool IsEnabled(LogLevel logLevel) Parameters Type Name Description LogLevel logLevel Returns Type Description Boolean Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>) Declaration public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter) Parameters Type Name Description LogLevel logLevel EventId eventId TState state Exception exception Func <TState, Exception , String > formatter Type Parameters Name Description TState Extension Methods LoggerExtensions.AddAttributes(ILogger, Action<LogAttributes>) LoggerExtensions.LogWithLevelEx(ILogger, LogLevel, String, Action<LogAttributes>) LoggerExtensions.LogWithLevelEx(ILogger, LogLevel, Func<String>, Action<LogAttributes>) LoggerExtensions.LogWithLevelEx(ILogger, LogLevel, Exception, String, Action<LogAttributes>) LoggerExtensions.LogWithLevelEx(ILogger, LogLevel, Exception, Func<String>, Action<LogAttributes>) LoggerExtensions.LogCriticalEx(ILogger, String, Action<LogAttributes>) LoggerExtensions.LogCriticalEx(ILogger, Func<String>, Action<LogAttributes>) LoggerExtensions.LogCriticalEx(ILogger, Exception, String, Action<LogAttributes>) LoggerExtensions.LogCriticalEx(ILogger, Exception, Func<String>, Action<LogAttributes>) LoggerExtensions.LogErrorEx(ILogger, String, Action<LogAttributes>) LoggerExtensions.LogErrorEx(ILogger, Func<String>, Action<LogAttributes>) LoggerExtensions.LogErrorEx(ILogger, Exception, String, Action<LogAttributes>) LoggerExtensions.LogErrorEx(ILogger, Exception, Func<String>, Action<LogAttributes>) LoggerExtensions.LogWarningEx(ILogger, String, Action<LogAttributes>) LoggerExtensions.LogWarningEx(ILogger, Func<String>, Action<LogAttributes>) LoggerExtensions.LogWarningEx(ILogger, Exception, String, Action<LogAttributes>) LoggerExtensions.LogWarningEx(ILogger, Exception, Func<String>, Action<LogAttributes>) LoggerExtensions.LogInformationEx(ILogger, String, Action<LogAttributes>) LoggerExtensions.LogInformationEx(ILogger, Func<String>, Action<LogAttributes>) LoggerExtensions.LogInformationEx(ILogger, Exception, String, Action<LogAttributes>) LoggerExtensions.LogInformationEx(ILogger, Exception, Func<String>, Action<LogAttributes>) LoggerExtensions.LogDebugEx(ILogger, String, Action<LogAttributes>) LoggerExtensions.LogDebugEx(ILogger, Func<String>, Action<LogAttributes>) LoggerExtensions.LogDebugEx(ILogger, Exception, String, Action<LogAttributes>) LoggerExtensions.LogDebugEx(ILogger, Exception, Func<String>, Action<LogAttributes>) LoggerExtensions.LogTraceEx(ILogger, String, Action<LogAttributes>) LoggerExtensions.LogTraceEx(ILogger, Func<String>, Action<LogAttributes>) LoggerExtensions.LogTraceEx(ILogger, Exception, String, Action<LogAttributes>) LoggerExtensions.LogTraceEx(ILogger, Exception, Func<String>, Action<LogAttributes>)"
  },
  "neonsdk/api/Neon.Diagnostics.TelemetryHub.html": {
    "href": "neonsdk/api/Neon.Diagnostics.TelemetryHub.html",
    "title": "Class TelemetryHub | NeonSDK documentation",
    "keywords": "Class TelemetryHub Provides a standard global place where libraries and applications can gain access to the application's ActivitySource and LoggerFactory for recording traces and logs. Applications that enable tracing and logging and want to enable logging and tracing by Neon libraries set LoggerFactory and ActivitySource immediately after configuring telemetry using the OpenTelemetry and Microsoft.Extensions.Logging APIs. note The Neon.Service.NeonService class initializes these properties by default when used by applications based on this class. CreateLogger<T>(LogAttributes, Boolean, Boolean) , CreateLogger(Type, LogAttributes, Boolean, Boolean) , or CreateLogger(String, LogAttributes, Boolean, Boolean) are helper methods for obtaining loggers. You can also set the LogAttributes property to attributes you'd like to include in the loggers returned by the CreateLogger() methods. This is a handy way to include a common set of attributes with all logged events. The ParseLogLevel(String, LogLevel) utility can be used to parse a log level string obtained from an environment variable or elsewhere. This returns the parsed log level and also sets the Logging__LogLevel__Microsoft environment variable which will be honored by any created loggers. Inheritance Object TelemetryHub Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public static class TelemetryHub Properties ActivitySource Holds the global activity source used by Neon and perhaps other libraries for emitting traces. This defaults to null which means that libraries won't emit any traces by default. Programs should set this after configuring tracing. Declaration public static ActivitySource ActivitySource { get; set; } Property Value Type Description ActivitySource LogAttributes Optionally holds any LogAttributes that will be added to ILogger instances returned by CreateLogger(String, LogAttributes, Boolean, Boolean) , CreateLogger(Type, LogAttributes, Boolean, Boolean) , or CreateLogger<T>(LogAttributes, Boolean, Boolean) . Declaration public static LogAttributes LogAttributes { get; set; } Property Value Type Description LogAttributes LoggerFactory Holds the global ILoggerFactory used by the Neon and perhaps other libraries for emitting logs. This defaults to null which means that libraries won't emit any logs by default. Programs should set this after configuring logging. Declaration public static ILoggerFactory LoggerFactory { get; set; } Property Value Type Description ILoggerFactory Methods CreateLogger(String, LogAttributes, Boolean, Boolean) Returns an ILogger using the category name passed. Declaration public static ILogger CreateLogger(string categoryName, LogAttributes attributes = null, bool noAttributes = false, bool nullLogger = false) Parameters Type Name Description String categoryName Specifies the logger's category name. LogAttributes attributes Optionally specifies attributes to be included in every event logged. Boolean noAttributes Optionally indicates that the LogAttributes should not be added to the logger returned. Boolean nullLogger Optionally specifies that a do-nothing logger should be returned. This defaults to false . Returns Type Description ILogger The ILogger . CreateLogger(Type, LogAttributes, Boolean, Boolean) Returns an ILogger using the fully qualified name from type . type as the logger's category name. Declaration public static ILogger CreateLogger(Type type, LogAttributes attributes = null, bool noAttributes = false, bool nullLogger = false) Parameters Type Name Description Type type LogAttributes attributes Optionally specifies attributes to be included in every event logged. Boolean noAttributes Optionally indicates that the LogAttributes should not be added to the logger returned. Boolean nullLogger Optionally specifies that a do-nothing logger should be returned. This defaults to false . Returns Type Description ILogger The ILogger . CreateLogger<T>(LogAttributes, Boolean, Boolean) Returns an ILogger using the fully qualified name of the T type as the logger's category name. Declaration public static ILogger CreateLogger<T>(LogAttributes attributes = null, bool noAttributes = false, bool nullLogger = false) Parameters Type Name Description LogAttributes attributes Optionally specifies attributes to be included in every event logged. Boolean noAttributes Optionally indicates that the LogAttributes should not be added to the logger returned. Boolean nullLogger Optionally specifies that a do-nothing logger should be returned. This defaults to false . Returns Type Description ILogger The ILogger . Type Parameters Name Description T Identifies the type whose fully-qualified name is to be used as the logger's category name. ParseLogLevel(String, LogLevel) Parses a LogLevel from a string and also sets the Logging__LogLevel__Microsoft environment variable which is honored by any created ILogger instances. Declaration public static LogLevel ParseLogLevel(string input, LogLevel default = LogLevel.Information) Parameters Type Name Description String input The input string. LogLevel default The default value to return when input is null or invalid. Returns Type Description LogLevel The parsed LogLevel ."
  },
  "neonsdk/api/Neon.Diagnostics.TelemetrySpanEventNames.html": {
    "href": "neonsdk/api/Neon.Diagnostics.TelemetrySpanEventNames.html",
    "title": "Class TelemetrySpanEventNames | NeonSDK documentation",
    "keywords": "Class TelemetrySpanEventNames NeonSDK related trace/span event names. Inheritance Object TelemetrySpanEventNames Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public static class TelemetrySpanEventNames Fields Log The trace event originated as a logged event that was also emitted as trace event, probably via LogAsTraceProcessor or a Declaration public const string Log = \"neon.log-event\" Field Value Type Description String"
  },
  "neonsdk/api/Neon.Diagnostics.TelemetrySpanExtensions.html": {
    "href": "neonsdk/api/Neon.Diagnostics.TelemetrySpanExtensions.html",
    "title": "Class TelemetrySpanExtensions | NeonSDK documentation",
    "keywords": "Class TelemetrySpanExtensions Extends the OpenTelemetry.Trace.TelemetrySpan class. Inheritance Object TelemetrySpanExtensions Namespace : Neon.Diagnostics Assembly : Neon.Common.dll Syntax public static class TelemetrySpanExtensions Methods AddEvent(TelemetrySpan, String, Action<SpanAttributes>) Adds an event with tags ti a OpenTelemetry.Trace.TelemetrySpan . Declaration public static void AddEvent(this TelemetrySpan span, string name, Action<SpanAttributes> attributeSetter) Parameters Type Name Description OpenTelemetry.Trace.TelemetrySpan span The span. String name The event name. Action < OpenTelemetry.Trace.SpanAttributes > attributeSetter The action that sets any tags. Remarks note This method does nothing when the span is not recording."
  },
  "neonsdk/api/Neon.Docker.DockerClient.html": {
    "href": "neonsdk/api/Neon.Docker.DockerClient.html",
    "title": "Class DockerClient | NeonSDK documentation",
    "keywords": "Class DockerClient Implements a client that can submit commands to a Docker engine via the Docker Remote API. Inheritance Object DockerClient Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class DockerClient : IDisposable Constructors DockerClient(DockerSettings) Constructor. Declaration public DockerClient(DockerSettings settings) Parameters Type Name Description DockerSettings settings The settings Properties ApiVersion Returns the version of the Docker Remote API implemented by this class. Declaration public Version ApiVersion { get; } Property Value Type Description Version JsonClient Returns the underlying JsonClient . Declaration public JsonClient JsonClient { get; } Property Value Type Description JsonClient Settings Returns the DockerSettings . Declaration public DockerSettings Settings { get; } Property Value Type Description DockerSettings Methods Dispose() Releases all resources associated with the instance. Declaration public void Dispose() Dispose(Boolean) Releases all associated resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. NetworkCreateAsync(DockerNetwork, CancellationToken) Creates a Docker network. Declaration public async Task<NetworkCreateResponse> NetworkCreateAsync(DockerNetwork network, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description DockerNetwork network The network details. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < NetworkCreateResponse > A NetworkCreateResponse . NetworkInspect(String, CancellationToken) Returns details about a specific Docker network. Declaration public async Task<DockerNetwork> NetworkInspect(string nameOrId, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String nameOrId The network name or ID. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < DockerNetwork > A DockerNetwork instance. NetworkListAsync(CancellationToken) Lists the networks managed by the Docker engine. Declaration public async Task<List<DockerNetwork>> NetworkListAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < List < DockerNetwork >> A list of DockerNetwork instances. NetworkRemove(String, CancellationToken) Removes a Docker network. Declaration public async Task NetworkRemove(string nameOrId, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String nameOrId The network name or ID. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task The tracking Task . NodeListAsync(CancellationToken) Lists the swarm nodes. Declaration public async Task<List<DockerNode>> NodeListAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < List < DockerNode >> The node list. ParseObject<T>(JObject) Parses a Newtonsoft.Json.Linq.JObject value into an instance of the specified type by converting it to JSON and then parsing that. Declaration public static T ParseObject<T>(JObject value) where T : class, new() Parameters Type Name Description Newtonsoft.Json.Linq.JObject value The input dynamic. Returns Type Description T The parsed value. Type Parameters Name Description T The desired output type. PingAsync(CancellationToken) Ping the remote Docker engine to verify that it's ready. Declaration public async Task<bool> PingAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > true if ready. Remarks note This method does not use a IRetryPolicy . ServiceListAsync(CancellationToken) Lists the services deployed to a Docker Swarm. Declaration public async Task<ServiceListResponse> ServiceListAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < ServiceListResponse > A ServiceListResponse VolumeCreate(String, String, CancellationToken, KeyValuePair<String, String>[]) Creates a Docker volume. Declaration public async Task<DockerVolume> VolumeCreate(string name = null, string driver = null, CancellationToken cancellationToken = default(CancellationToken), params KeyValuePair<string, string>[] driverOpts) Parameters Type Name Description String name The optional volume name (Docker will generate a name if this is not specified). String driver The optional volume driver name (defaults to local) CancellationToken cancellationToken Optional cancellation token. KeyValuePair < String , String >[] driverOpts The custom driver options. Returns Type Description Task < DockerVolume > The docker volume. VolumeInspect(String, CancellationToken) Returns information about a Docker volume. Declaration public async Task<DockerVolume> VolumeInspect(string nameOrId, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String nameOrId The volume name or ID. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < DockerVolume > The DockerVolume . VolumeListAsync(CancellationToken) Lists the volumes managed by the Docker engine. Declaration public async Task<VolumeListResponse> VolumeListAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < VolumeListResponse > A VolumeListResponse VolumeRemove(String, CancellationToken) Removes a Docker volume. Declaration public async Task VolumeRemove(string nameOrId, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String nameOrId The volume name or ID. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task The tracking Task . WaitUntilReadyAsync(Nullable<TimeSpan>, CancellationToken) Waits for the Docker engine or Swarm manager to be ready to accept requests. Declaration public async Task WaitUntilReadyAsync(TimeSpan? timeout = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Nullable < TimeSpan > timeout The maximum timne to wait (defaults to 120 seconds). CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task The tracking Task . Remarks The Swarm Manager can return unexpected HTTP response codes when it is not ready to accept requests. For example, a request to /volumes may return a 404: Not Found response rather than the 503: Service Unavailable that one would expect. The server can return this even when PingAsync(CancellationToken) return successfully. This method attempts to ensure that the server is really ready."
  },
  "neonsdk/api/Neon.Docker.DockerNetwork.html": {
    "href": "neonsdk/api/Neon.Docker.DockerNetwork.html",
    "title": "Class DockerNetwork | NeonSDK documentation",
    "keywords": "Class DockerNetwork Describes a Docker network. Inheritance Object DockerNetwork Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class DockerNetwork Constructors DockerNetwork() Default constructor. Declaration public DockerNetwork() Properties CheckDuplicate Used when creating a network to have the Docker Engine verify that network does not already exist. This defaults to false . Declaration public bool CheckDuplicate { get; set; } Property Value Type Description Boolean Containers Lists the containers attached to the network. Declaration public List<DockerNetworkContainer> Containers { get; } Property Value Type Description List < DockerNetworkContainer > Driver The network driver. Declaration public string Driver { get; set; } Property Value Type Description String EnableIPv6 Indicates if the network is IPv6 enabled. Declaration public bool EnableIPv6 { get; set; } Property Value Type Description Boolean Id Returns the network ID. Declaration public string Id { get; } Property Value Type Description String Inner Returns the raw dynamic object actually returned by Docker. You may use this to access newer Docker properties that have not yet been wrapped by this class. Declaration public dynamic Inner { get; } Property Value Type Description Object Internal Indicates if the network is internal. Declaration public bool Internal { get; set; } Property Value Type Description Boolean Ipam The network's IPAM configuration. Declaration public DockerNetworkIpam Ipam { get; } Property Value Type Description DockerNetworkIpam Labels Lists the network labels. Declaration public Dictionary<string, string> Labels { get; } Property Value Type Description Dictionary < String , String > Name The network name. Declaration public string Name { get; set; } Property Value Type Description String Options Lists the network options. Declaration public Dictionary<string, string> Options { get; } Property Value Type Description Dictionary < String , String > Scope Returns the network scope. Declaration public string Scope { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Docker.DockerNetworkContainer.html": {
    "href": "neonsdk/api/Neon.Docker.DockerNetworkContainer.html",
    "title": "Class DockerNetworkContainer | NeonSDK documentation",
    "keywords": "Class DockerNetworkContainer Describes a container attached to a Docker network. Inheritance Object DockerNetworkContainer Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class DockerNetworkContainer Constructors DockerNetworkContainer(Object) Constructs an instance from the dynamic attached container information returned by docker. Declaration public DockerNetworkContainer(dynamic source) Parameters Type Name Description Object source The dynamic source value. Properties EndpointId Returns the container's endpoint ID. Declaration public string EndpointId { get; } Property Value Type Description String Id Returns the container's ID. Declaration public string Id { get; } Property Value Type Description String Inner Returns the raw dynamic object actually returned by Docker. You may use this to access newer Docker properties that have not yet been wrapped by this class. Declaration public dynamic Inner { get; } Property Value Type Description Object IPv4Address Returns the container's IPv4 address. Declaration public string IPv4Address { get; } Property Value Type Description String IPv6Address Returns the container's IPv6 address. Declaration public string IPv6Address { get; } Property Value Type Description String MacAddress Returns the container's MAC address. Declaration public string MacAddress { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Docker.DockerNetworkIpam.html": {
    "href": "neonsdk/api/Neon.Docker.DockerNetworkIpam.html",
    "title": "Class DockerNetworkIpam | NeonSDK documentation",
    "keywords": "Class DockerNetworkIpam Describes a Docker network's IPAM configuration. Inheritance Object DockerNetworkIpam Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class DockerNetworkIpam Constructors DockerNetworkIpam(Object) Constructs an instance from the dynamic network IPAM information returned by docker. Declaration public DockerNetworkIpam(dynamic source) Parameters Type Name Description Object source The dynamic source value. Properties Config Returns the IPAM configuration settings. Declaration public Dictionary<string, string> Config { get; } Property Value Type Description Dictionary < String , String > Driver Returns the IPAM driver. Declaration public string Driver { get; } Property Value Type Description String Inner Returns the raw dynamic object actually returned by Docker. You may use this to access newer Docker properties that have not yet been wrapped by this class. Declaration public dynamic Inner { get; } Property Value Type Description Object"
  },
  "neonsdk/api/Neon.Docker.DockerNode.html": {
    "href": "neonsdk/api/Neon.Docker.DockerNode.html",
    "title": "Class DockerNode | NeonSDK documentation",
    "keywords": "Class DockerNode Describes a cluster node. Inheritance Object DockerNode Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class DockerNode Properties Addr Returns the node IP address. Declaration public string Addr { get; } Property Value Type Description String Architecture Returns the node CPU architecture. Declaration public string Architecture { get; } Property Value Type Description String Availability Returns the node availability. Declaration public string Availability { get; } Property Value Type Description String CreatedAt Returns the time the node was created. Declaration public DateTimeOffset CreatedAt { get; } Property Value Type Description DateTimeOffset EngineVersion Returns the Docker engine version. Declaration public string EngineVersion { get; } Property Value Type Description String Hostname Returns the node hostname. Declaration public string Hostname { get; } Property Value Type Description String ID Returns the node ID. Declaration public string ID { get; } Property Value Type Description String Inner Returns the raw dynamic object actually returned by Docker. You may use this to access newer Docker properties that have not yet been wrapped by this class. Declaration public dynamic Inner { get; } Property Value Type Description Object Labels Returns the node labels. Declaration public Dictionary<string, string> Labels { get; } Property Value Type Description Dictionary < String , String > ManagerStatus Returns management status for cluster control-plane nodes. Declaration public DockerNodeManagerStatus ManagerStatus { get; } Property Value Type Description DockerNodeManagerStatus MemoryBytes Returns the bytes of available memory. Declaration public long MemoryBytes { get; } Property Value Type Description Int64 NanoCPUs Returns the available CPU capacity, Declaration public long NanoCPUs { get; } Property Value Type Description Int64 OS Returns the node operating system. Declaration public string OS { get; } Property Value Type Description String Role Returns the node role (currently one of \"control-plane\" or \"worker\" ). Declaration public string Role { get; } Property Value Type Description String State Returns the node state. Declaration public string State { get; } Property Value Type Description String UpdatedAt Returns the time the node was updated. Declaration public DateTimeOffset UpdatedAt { get; } Property Value Type Description DateTimeOffset"
  },
  "neonsdk/api/Neon.Docker.DockerNodeManagerStatus.html": {
    "href": "neonsdk/api/Neon.Docker.DockerNodeManagerStatus.html",
    "title": "Class DockerNodeManagerStatus | NeonSDK documentation",
    "keywords": "Class DockerNodeManagerStatus Describes a Docker manager node's status. Inheritance Object DockerNodeManagerStatus Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class DockerNodeManagerStatus Properties Addr Returns the address and port of the current lead manager node. Declaration public string Addr { get; } Property Value Type Description String Inner Returns the raw dynamic object actually returned by Docker. You may use this to access newer Docker properties that have not yet been wrapped by this class. Declaration public dynamic Inner { get; } Property Value Type Description Object Leader Indicates whether the parent node is currently the swarm leader. Declaration public bool Leader { get; } Property Value Type Description Boolean Reachability Provides an indication of this manager node is able to communicate with a quorum of other managers. Declaration public string Reachability { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Docker.DockerResponse.html": {
    "href": "neonsdk/api/Neon.Docker.DockerResponse.html",
    "title": "Class DockerResponse | NeonSDK documentation",
    "keywords": "Class DockerResponse The base Docker API response class. Inheritance Object DockerResponse NetworkCreateResponse ServiceListResponse VolumeListResponse Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class DockerResponse Properties Warnings Lists any warnings returned by the Docker engine. Declaration public List<string> Warnings { get; } Property Value Type Description List < String >"
  },
  "neonsdk/api/Neon.Docker.DockerSettings.html": {
    "href": "neonsdk/api/Neon.Docker.DockerSettings.html",
    "title": "Class DockerSettings | NeonSDK documentation",
    "keywords": "Class DockerSettings Specifies the configuration settings for a DockerClient . Inheritance Object DockerSettings Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class DockerSettings Constructors DockerSettings(IPAddress, Int32, Boolean) Constructs settings using an IPAddress for the Docker engine. Declaration public DockerSettings(IPAddress address, int port = 2375, bool secure = false) Parameters Type Name Description IPAddress address The engine IP address. Int32 port Optional TCP port (defaults to Docker [ 2375 ]). Boolean secure Optionally specifies that the connection will be secured via TLS (defaults to false ). DockerSettings(String) Constructs settings from a URI. Note that you may specify a Unix domain socket like: unix:///var/run/docker/sock . Declaration public DockerSettings(string uri) Parameters Type Name Description String uri The URI. DockerSettings(String, Int32, Boolean) Constructs settings using a DNS hostname for the Docker engine. Declaration public DockerSettings(string host, int port = 2375, bool secure = false) Parameters Type Name Description String host Engine hostname. Int32 port Optional TCP port (defaults to Docker [ 2375 ]). Boolean secure Optionally specifies that the connection will be secured via TLS (defaults to false ). Properties RetryPolicy The IRetryPolicy to be used when submitting requests to docker. This defaults to a reasonable ExponentialRetryPolicy using the NetworkOrHttp(Exception) transient detector. Declaration public IRetryPolicy RetryPolicy { get; set; } Property Value Type Description IRetryPolicy Uri Returns the target engine's base URI. Declaration public Uri Uri { get; } Property Value Type Description Uri Methods CreateClient() Creates a DockerClient using the settings. Declaration public DockerClient CreateClient() Returns Type Description DockerClient The created DockerClient ."
  },
  "neonsdk/api/Neon.Docker.DockerVolume.html": {
    "href": "neonsdk/api/Neon.Docker.DockerVolume.html",
    "title": "Class DockerVolume | NeonSDK documentation",
    "keywords": "Class DockerVolume Describes a Docker volume. Inheritance Object DockerVolume Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class DockerVolume Properties Driver Returns the volume driver. Declaration public string Driver { get; } Property Value Type Description String Inner Returns the raw dynamic object actually returned by Docker. You may use this to access newer Docker properties that have not yet been wrapped by this class. Declaration public dynamic Inner { get; } Property Value Type Description Object Mountpoint Returns the volume mount point on the host node. Declaration public string Mountpoint { get; } Property Value Type Description String Name Returns the volume name. Declaration public string Name { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Docker.html": {
    "href": "neonsdk/api/Neon.Docker.html",
    "title": "Namespace Neon.Docker | NeonSDK documentation",
    "keywords": "Namespace Neon.Docker Classes DockerClient Implements a client that can submit commands to a Docker engine via the Docker Remote API. DockerNetwork Describes a Docker network. DockerNetworkContainer Describes a container attached to a Docker network. DockerNetworkIpam Describes a Docker network's IPAM configuration. DockerNode Describes a cluster node. DockerNodeManagerStatus Describes a Docker manager node's status. DockerResponse The base Docker API response class. DockerSettings Specifies the configuration settings for a DockerClient . DockerVolume Describes a Docker volume. NetworkCreateResponse The response from a NetworkCreateAsync(DockerNetwork, CancellationToken) command. ServiceBindOptions Mounted directory bind options. ServiceConfig Service config. ServiceContainerSpec Service container/task specification. ServiceCredentialSpec Windows-only: Specifies how Windows credentials are to be loaded for the container. ServiceDetails Holds the details describing a running Docker swarm service from the service list or inspection REST APIs. note This type matches the Docker API v1.35. ServiceDiscreteResourceSpec Describes name-valued user-defined resource setting. ServiceDnsConfig Specifies service container DNS related options. ServiceEndpoint Service endpoint and network settings. ServiceEndpointPortConfig Service port publication specification. ServiceEndpointSpec Service endpoint specification. ServiceFile Configuration information for a Docker secret or config that is mapped into a service container. ServiceGenericResources Describes user-defined resource settings. ServiceGlobalSchedulingMode Global scheduling mode options. ServiceHealthCheck Specifies a custom service logging driver. ServiceListResponse The response from a ServiceListAsync(CancellationToken) command. ServiceLogDriver Specifies a custom service logging driver. ServiceMount Service mount specification. ServiceNamedResourceSpec Describes name-valued user-defined resource setting. ServiceNetwork Service container spread placement settings. ServicePlacement Service container placement options. ServicePlacementPreferences Service container placement preferences. ServicePlacementSpreadSettings Service container spread placement settings. ServicePlatform Service container spread placement settings. ServicePrivileges Security options for service containers. ServiceReplicatedSchedulingMode Replicated scheduling mode options. ServiceResources Specifies the service resource requirements and limits. ServiceResourceSettings Describes system resource consumption settings. ServiceRestartPolicy Specifies the restart policy for service containers. ServiceRollbackConfig Specifies the rollback strategy for a service. ServiceSchedulingMode Orchestration scheduling mode for the service. ServiceSecret Service secret. ServiceSELinuxContext SELinux labels for the container. ServiceSpec User modifiable service configuration. ServiceTaskTemplate User modifiable service task configuration. ServiceTmpfsOptions Volume Tempfs options. ServiceUpdateConfig Specifies the update strategy for a service. ServiceUpdateStatus Describes the virtual IP address assigned to the service on a specific attached network. ServiceVersion Windows-only: Specifies how Windows credentials are to be loaded for the container. ServiceVirtualIP Describes the virtual IP address assigned to the service on a specific attached network. ServiceVolumeDriverConfig Volume driver configuration options. ServiceVolumeOptions Volume options for volume service mounts. VolumeListResponse The response from a VolumeListAsync(CancellationToken) command. Enums ServiceEndpointMode Service endpoint mode. ServiceIsolationMode Windows Only: Enumerates the isolation technologies to be used for the service containers. ServiceMode Enumerates the service modes. ServiceMountBindPropagation Enumerates the mount propagation options. ServiceMountConsistency Enumerates the service mount consistency options ServiceMountType Enumerates the service mount types. ServicePortMode Enumerates the service port modes. ServicePortProtocol Enumerates the service port protocols. ServiceRestartCondition Enumerates the service restart conditions. ServiceRollbackFailureAction Enumerates the service rollback failure actions. ServiceRollbackOrder Enumerates the service task rollback order options. ServiceUpdateFailureAction Enumerates the service update failure actions. ServiceUpdateOrder Enumerates the service taek update rollback order options. ServiceUpdateState Enumerates the service update states."
  },
  "neonsdk/api/Neon.Docker.NetworkCreateResponse.html": {
    "href": "neonsdk/api/Neon.Docker.NetworkCreateResponse.html",
    "title": "Class NetworkCreateResponse | NeonSDK documentation",
    "keywords": "Class NetworkCreateResponse The response from a NetworkCreateAsync(DockerNetwork, CancellationToken) command. Inheritance Object DockerResponse NetworkCreateResponse Inherited Members DockerResponse.Warnings Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class NetworkCreateResponse : DockerResponse Properties Id Returns the ID for the created network. Declaration public string Id { get; } Property Value Type Description String Inner Returns the raw dynamic object actually returned by Docker. You may use this to access newer Docker properties that have not yet been wrapped by this class. Declaration public dynamic Inner { get; } Property Value Type Description Object"
  },
  "neonsdk/api/Neon.Docker.ServiceBindOptions.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceBindOptions.html",
    "title": "Class ServiceBindOptions | NeonSDK documentation",
    "keywords": "Class ServiceBindOptions Mounted directory bind options. Inheritance Object ServiceBindOptions Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceBindOptions Properties Propagation Named setting for a resource. Declaration [JsonProperty(PropertyName = \"Propagation\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Propagation\", ApplyNamingConventions = false)] public ServiceMountBindPropagation Propagation { get; set; } Property Value Type Description ServiceMountBindPropagation Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceConfig.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceConfig.html",
    "title": "Class ServiceConfig | NeonSDK documentation",
    "keywords": "Class ServiceConfig Service config. Inheritance Object ServiceConfig Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceConfig Properties ConfigID The Docker secret ID. Declaration [JsonProperty(PropertyName = \"ConfigID\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"ConfigID\", ApplyNamingConventions = false)] public string ConfigID { get; set; } Property Value Type Description String ConfigName The secret name. Declaration [JsonProperty(PropertyName = \"ConfigName\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"ConfigName\", ApplyNamingConventions = false)] public string ConfigName { get; set; } Property Value Type Description String File Secret file information. Declaration [JsonProperty(PropertyName = \"File\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"File\", ApplyNamingConventions = false)] public ServiceFile File { get; set; } Property Value Type Description ServiceFile Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceContainerSpec.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceContainerSpec.html",
    "title": "Class ServiceContainerSpec | NeonSDK documentation",
    "keywords": "Class ServiceContainerSpec Service container/task specification. Inheritance Object ServiceContainerSpec Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceContainerSpec Properties Args Arguments to the command. Declaration [JsonProperty(PropertyName = \"Args\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Args\", ApplyNamingConventions = false)] public List<string> Args { get; set; } Property Value Type Description List < String > Command The command to be run in the image. Declaration [JsonProperty(PropertyName = \"Command\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Command\", ApplyNamingConventions = false)] public List<string> Command { get; set; } Property Value Type Description List < String > Configs Specifies the configs to be exposed to the service containers. Declaration [JsonProperty(PropertyName = \"Configs\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Configs\", ApplyNamingConventions = false)] public List<ServiceConfig> Configs { get; set; } Property Value Type Description List < ServiceConfig > Dir The container working directory where commands will run. Declaration [JsonProperty(PropertyName = \"Dir\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Dir\", ApplyNamingConventions = false)] public string Dir { get; set; } Property Value Type Description String DNSConfig DNS resolver configuration. Declaration [JsonProperty(PropertyName = \"DNSConfig\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"DNSConfig\", ApplyNamingConventions = false)] public ServiceDnsConfig DNSConfig { get; set; } Property Value Type Description ServiceDnsConfig Env Environment variables of the form VARIABLE=VALUE or VARIABLE to pass environment variables from the Docker host. Declaration [JsonProperty(PropertyName = \"Env\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Env\", ApplyNamingConventions = false)] public List<string> Env { get; set; } Property Value Type Description List < String > Groups The list of additional groups that the command will run as. Declaration [JsonProperty(PropertyName = \"Groups\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Groups\", ApplyNamingConventions = false)] public List<string> Groups { get; set; } Property Value Type Description List < String > HealthCheck Specifies how service container health check are to be performed. Declaration [JsonProperty(PropertyName = \"HealthCheck\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"HealthCheck\", ApplyNamingConventions = false)] public ServiceHealthCheck HealthCheck { get; set; } Property Value Type Description ServiceHealthCheck Hostname Hostname for the container. Declaration [JsonProperty(PropertyName = \"Hostname\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Hostname\", ApplyNamingConventions = false)] public string Hostname { get; set; } Property Value Type Description String Hosts Lists the hostname/IP address mappings to add to the service container [/etc/hosts] file. Each entry is formatted like: IP_address canonical_hostname [aliases...] Declaration [JsonProperty(PropertyName = \"Hosts\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Hosts\", ApplyNamingConventions = false)] public List<string> Hosts { get; set; } Property Value Type Description List < String > Image The image used to provision the service container. note This may include the image's @sha256:... appended to the tag. Declaration [JsonProperty(PropertyName = \"Image\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Image\", ApplyNamingConventions = false)] public string Image { get; set; } Property Value Type Description String ImageWithoutSHA Returns the Image without any SHA hash appended to the tag. Declaration [JsonIgnore] [YamlIgnore] public string ImageWithoutSHA { get; } Property Value Type Description String Isolation Windows Only: Specifies the isolation technology to be used for the service containers. Declaration [JsonProperty(PropertyName = \"Isolation\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Isolation\", ApplyNamingConventions = false)] public ServiceIsolationMode Isolation { get; set; } Property Value Type Description ServiceIsolationMode Labels The container labels formatted as LABEL=VALUE . Declaration [JsonProperty(PropertyName = \"Labels\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Labels\", ApplyNamingConventions = false)] public Dictionary<string, string> Labels { get; set; } Property Value Type Description Dictionary < String , String > Mounts Specifies file system mounts to be added to the service containers. Declaration [JsonProperty(PropertyName = \"Mounts\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Mounts\", ApplyNamingConventions = false)] public List<ServiceMount> Mounts { get; set; } Property Value Type Description List < ServiceMount > OpenStdin Open STDIN. Declaration [JsonProperty(PropertyName = \"OpenStdin\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"OpenStdin\", ApplyNamingConventions = false)] public bool OpenStdin { get; set; } Property Value Type Description Boolean Privileges Security options for the container. Declaration [JsonProperty(PropertyName = \"Privileges\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Privileges\", ApplyNamingConventions = false)] public ServicePrivileges Privileges { get; set; } Property Value Type Description ServicePrivileges ReadOnly Optionally mount the service container file system as read-only. Declaration [JsonProperty(PropertyName = \"ReadOnly\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"ReadOnly\", ApplyNamingConventions = false)] public bool ReadOnly { get; set; } Property Value Type Description Boolean Secrets Specifies the secrets to be exposed to the service containers. Declaration [JsonProperty(PropertyName = \"Secrets\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Secrets\", ApplyNamingConventions = false)] public List<ServiceSecret> Secrets { get; set; } Property Value Type Description List < ServiceSecret > StopGracePeriod Time to wait for a service container to stop gracefully before killing it forcefully (in nanoseconds). Declaration [JsonProperty(PropertyName = \"StopGracePeriod\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"StopGracePeriod\", ApplyNamingConventions = false)] public long StopGracePeriod { get; set; } Property Value Type Description Int64 StopSignal Signal to be used to gracefully stop the service containers. Declaration [JsonProperty(PropertyName = \"StopSignal\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"StopSignal\", ApplyNamingConventions = false)] public string StopSignal { get; set; } Property Value Type Description String TTY Optionally create a pseudo TTY. Declaration [JsonProperty(PropertyName = \"TTY\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"TTY\", ApplyNamingConventions = false)] public bool TTY { get; set; } Property Value Type Description Boolean User The user within the container. Declaration [JsonProperty(PropertyName = \"User\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"User\", ApplyNamingConventions = false)] public string User { get; set; } Property Value Type Description String Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceCredentialSpec.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceCredentialSpec.html",
    "title": "Class ServiceCredentialSpec | NeonSDK documentation",
    "keywords": "Class ServiceCredentialSpec Windows-only: Specifies how Windows credentials are to be loaded for the container. Inheritance Object ServiceCredentialSpec Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceCredentialSpec Properties File Specifies the file on the Docker host with the credentials. Declaration [JsonProperty(PropertyName = \"File\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"File\", ApplyNamingConventions = false)] public string File { get; set; } Property Value Type Description String Registry Specifies the Windows registry location on the Docker host with the credentials. Declaration [JsonProperty(PropertyName = \"Registry\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Registry\", ApplyNamingConventions = false)] public string Registry { get; set; } Property Value Type Description String Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceDetails.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceDetails.html",
    "title": "Class ServiceDetails | NeonSDK documentation",
    "keywords": "Class ServiceDetails Holds the details describing a running Docker swarm service from the service list or inspection REST APIs. note This type matches the Docker API v1.35. Inheritance Object ServiceDetails Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceDetails Properties CreatedAt Time when the service was created (as a string). Declaration [JsonProperty(PropertyName = \"CreatedAt\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"CreatedAt\", ApplyNamingConventions = false)] public string CreatedAt { get; set; } Property Value Type Description String CreatedAtUtc Returns the time (UTC) the service was created (as a DateTime ). Declaration [JsonIgnore] [YamlIgnore] public DateTime CreatedAtUtc { get; } Property Value Type Description DateTime Endpoint Describes the service's current endpoint state. Declaration [JsonProperty(PropertyName = \"Endpoint\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Endpoint\", ApplyNamingConventions = false)] public ServiceEndpoint Endpoint { get; set; } Property Value Type Description ServiceEndpoint ID The service ID. Declaration [JsonProperty(PropertyName = \"ID\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"ID\", ApplyNamingConventions = false)] public string ID { get; set; } Property Value Type Description String PreviousSpec Optionally describes the service's state before the last update. This is the state the service will revert to when it's rolled back. Declaration [JsonProperty(PropertyName = \"PreviousSpec\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"PreviousSpec\", ApplyNamingConventions = false)] public ServiceSpec PreviousSpec { get; set; } Property Value Type Description ServiceSpec Spec The service specification. Declaration [JsonProperty(PropertyName = \"Spec\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Spec\", ApplyNamingConventions = false)] public ServiceSpec Spec { get; set; } Property Value Type Description ServiceSpec UpdatedAt Time when the service was last created or updated (as a string). Declaration [JsonProperty(PropertyName = \"UpdatedAt\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"UpdatedAt\", ApplyNamingConventions = false)] public string UpdatedAt { get; set; } Property Value Type Description String UpdatedAtUtc Returns the time (UTC) the service was last created or updated (as a DateTime ). Declaration [JsonIgnore] [YamlIgnore] public DateTime UpdatedAtUtc { get; } Property Value Type Description DateTime UpdateStatus Describes the service update status. Declaration [JsonProperty(PropertyName = \"UpdateStatus\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"UpdateStatus\", ApplyNamingConventions = false)] public ServiceUpdateStatus UpdateStatus { get; set; } Property Value Type Description ServiceUpdateStatus Version Service update version information. Declaration [JsonProperty(PropertyName = \"Version\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Version\", ApplyNamingConventions = false)] public ServiceVersion Version { get; set; } Property Value Type Description ServiceVersion Methods GetEnv(String) Returns the value of an environment variable for the current service deployment. Declaration public string GetEnv(string variable) Parameters Type Name Description String variable The variable name (case insensitive). Returns Type Description String The value of the variable or null if the variable doesn't exist. Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceDiscreteResourceSpec.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceDiscreteResourceSpec.html",
    "title": "Class ServiceDiscreteResourceSpec | NeonSDK documentation",
    "keywords": "Class ServiceDiscreteResourceSpec Describes name-valued user-defined resource setting. Inheritance Object ServiceDiscreteResourceSpec Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceDiscreteResourceSpec Properties Kind Identifies the setting. Declaration [JsonProperty(PropertyName = \"Kind\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Kind\", ApplyNamingConventions = false)] public string Kind { get; set; } Property Value Type Description String Value The setting value long . Declaration [JsonProperty(PropertyName = \"Value\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Value\", ApplyNamingConventions = false)] public long Value { get; set; } Property Value Type Description Int64 Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceDnsConfig.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceDnsConfig.html",
    "title": "Class ServiceDnsConfig | NeonSDK documentation",
    "keywords": "Class ServiceDnsConfig Specifies service container DNS related options. Inheritance Object ServiceDnsConfig Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceDnsConfig Properties Nameservers IP addresses of the nameservers. Declaration [JsonProperty(PropertyName = \"Nameservers\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Nameservers\", ApplyNamingConventions = false)] public List<string> Nameservers { get; set; } Property Value Type Description List < String > Options Low-level internal resolver options. See: http://manpages.ubuntu.com/manpages/precise/man5/resolvconf.conf.5.html Declaration [JsonProperty(PropertyName = \"Options\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Options\", ApplyNamingConventions = false)] public List<string> Options { get; set; } Property Value Type Description List < String > Search Domain search list for hostname lookups. Declaration [JsonProperty(PropertyName = \"Search\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Search\", ApplyNamingConventions = false)] public List<string> Search { get; set; } Property Value Type Description List < String > Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceEndpoint.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceEndpoint.html",
    "title": "Class ServiceEndpoint | NeonSDK documentation",
    "keywords": "Class ServiceEndpoint Service endpoint and network settings. Inheritance Object ServiceEndpoint Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceEndpoint Properties Ports Details the network ports actually exposed by the service tasks. Declaration [JsonProperty(PropertyName = \"Ports\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Ports\", ApplyNamingConventions = false)] public List<ServiceEndpointPortConfig> Ports { get; set; } Property Value Type Description List < ServiceEndpointPortConfig > Spec Specifies the service endpoint mode and ports to be exposed. Declaration [JsonProperty(PropertyName = \"Spec\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Spec\", ApplyNamingConventions = false)] public ServiceEndpointSpec Spec { get; set; } Property Value Type Description ServiceEndpointSpec VirtualIPs Lists the virtual IP addresses assigned to this service on the attached networks. Declaration [JsonProperty(PropertyName = \"VirtualIPs\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"VirtualIPs\", ApplyNamingConventions = false)] public List<ServiceVirtualIP> VirtualIPs { get; set; } Property Value Type Description List < ServiceVirtualIP > Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceEndpointMode.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceEndpointMode.html",
    "title": "Enum ServiceEndpointMode | NeonSDK documentation",
    "keywords": "Enum ServiceEndpointMode Service endpoint mode. Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public enum ServiceEndpointMode Fields Name Description DnsRR Returns DNS resource records for the active service instances. Vip Assign a virtual IP address to the service and provide a load balancer. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Docker.ServiceEndpointPortConfig.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceEndpointPortConfig.html",
    "title": "Class ServiceEndpointPortConfig | NeonSDK documentation",
    "keywords": "Class ServiceEndpointPortConfig Service port publication specification. Inheritance Object ServiceEndpointPortConfig Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceEndpointPortConfig Properties Name The port name. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String Protocol Specifies the port protocol. Declaration [JsonProperty(PropertyName = \"Protocol\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Protocol\", ApplyNamingConventions = false)] public ServicePortProtocol Protocol { get; set; } Property Value Type Description ServicePortProtocol PublishedPort Specifies the port where the service receives traffic on the external network. Declaration [JsonProperty(PropertyName = \"PublishedPort\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"PublishedPort\", ApplyNamingConventions = false)] public int PublishedPort { get; set; } Property Value Type Description Int32 PublishMode Specifies the port mode. Declaration [JsonProperty(PropertyName = \"PublishMode\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"PublishMode\", ApplyNamingConventions = false)] public ServicePortMode PublishMode { get; set; } Property Value Type Description ServicePortMode TargetPort Specifies the internal port where external traffic will be forwarded within the service containers. Declaration [JsonProperty(PropertyName = \"TargetPort\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"TargetPort\", ApplyNamingConventions = false)] public int TargetPort { get; set; } Property Value Type Description Int32 Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceEndpointSpec.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceEndpointSpec.html",
    "title": "Class ServiceEndpointSpec | NeonSDK documentation",
    "keywords": "Class ServiceEndpointSpec Service endpoint specification. Inheritance Object ServiceEndpointSpec Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceEndpointSpec Properties Mode Specifies how the Docker swarm will load balance traffic to the service tasks. Declaration [JsonProperty(PropertyName = \"Mode\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Mode\", ApplyNamingConventions = false)] public ServiceEndpointMode Mode { get; set; } Property Value Type Description ServiceEndpointMode Ports Details the network ports exposed by the service tasks. Declaration [JsonProperty(PropertyName = \"Ports\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Ports\", ApplyNamingConventions = false)] public List<ServiceEndpointPortConfig> Ports { get; set; } Property Value Type Description List < ServiceEndpointPortConfig > Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceFile.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceFile.html",
    "title": "Class ServiceFile | NeonSDK documentation",
    "keywords": "Class ServiceFile Configuration information for a Docker secret or config that is mapped into a service container. Inheritance Object ServiceFile Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceFile Properties GID Identifies the group that owns the file. Declaration [JsonProperty(PropertyName = \"GID\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"GID\", ApplyNamingConventions = false)] public string GID { get; set; } Property Value Type Description String Mode The Linux file mode for the file. note This value is encoded as decimal. You'll need to convert to octal to see what it looks like as standard Linux permissions. Declaration [JsonProperty(PropertyName = \"Mode\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Mode\", ApplyNamingConventions = false)] public int Mode { get; set; } Property Value Type Description Int32 Name Path to the target file within the container. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String UID Identifies the user that owns the file. Declaration [JsonProperty(PropertyName = \"UID\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"UID\", ApplyNamingConventions = false)] public string UID { get; set; } Property Value Type Description String Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceGenericResources.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceGenericResources.html",
    "title": "Class ServiceGenericResources | NeonSDK documentation",
    "keywords": "Class ServiceGenericResources Describes user-defined resource settings. Inheritance Object ServiceGenericResources Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceGenericResources Properties DiscreteResourceSpec Discrete setting for a resource. Declaration [JsonProperty(PropertyName = \"DiscreteResourceSpec\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"DiscreteResourceSpec\", ApplyNamingConventions = false)] public ServiceDiscreteResourceSpec DiscreteResourceSpec { get; set; } Property Value Type Description ServiceDiscreteResourceSpec NamedResourceSpec Named setting for a resource. Declaration [JsonProperty(PropertyName = \"NamedResourceSpec\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"NamedResourceSpec\", ApplyNamingConventions = false)] public ServiceNamedResourceSpec NamedResourceSpec { get; set; } Property Value Type Description ServiceNamedResourceSpec Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceGlobalSchedulingMode.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceGlobalSchedulingMode.html",
    "title": "Class ServiceGlobalSchedulingMode | NeonSDK documentation",
    "keywords": "Class ServiceGlobalSchedulingMode Global scheduling mode options. Inheritance Object ServiceGlobalSchedulingMode Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceGlobalSchedulingMode Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceHealthCheck.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceHealthCheck.html",
    "title": "Class ServiceHealthCheck | NeonSDK documentation",
    "keywords": "Class ServiceHealthCheck Specifies a custom service logging driver. Inheritance Object ServiceHealthCheck Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceHealthCheck Properties Interval Time to wait between health checks (in nanoseconds). Declaration [JsonProperty(PropertyName = \"Interval\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Interval\", ApplyNamingConventions = false)] public long? Interval { get; set; } Property Value Type Description Nullable < Int64 > Retries Number of consecutive health check failures required to consider the container to be unhealhy. Declaration [JsonProperty(PropertyName = \"Retries\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Retries\", ApplyNamingConventions = false)] public long? Retries { get; set; } Property Value Type Description Nullable < Int64 > StartPeriod Time to wait for the container to start ands initialize before enforcing health check failures. Declaration [JsonProperty(PropertyName = \"StartPeriod\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"StartPeriod\", ApplyNamingConventions = false)] public long? StartPeriod { get; set; } Property Value Type Description Nullable < Int64 > Test Specifies the health test to be performed. Declaration [JsonProperty(PropertyName = \"Test\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Test\", ApplyNamingConventions = false)] public List<string> Test { get; set; } Property Value Type Description List < String > Timeout Time to wait before considering a health check to have hung (in nanoseconds). Declaration [JsonProperty(PropertyName = \"Timeout\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Timeout\", ApplyNamingConventions = false)] public long? Timeout { get; set; } Property Value Type Description Nullable < Int64 > Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceIsolationMode.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceIsolationMode.html",
    "title": "Enum ServiceIsolationMode | NeonSDK documentation",
    "keywords": "Enum ServiceIsolationMode Windows Only: Enumerates the isolation technologies to be used for the service containers. Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public enum ServiceIsolationMode Fields Name Description Default Use the default mode. HyperV User Hyper-V isolation. Process Use process isolation. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Docker.ServiceListResponse.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceListResponse.html",
    "title": "Class ServiceListResponse | NeonSDK documentation",
    "keywords": "Class ServiceListResponse The response from a ServiceListAsync(CancellationToken) command. Inheritance Object DockerResponse ServiceListResponse Inherited Members DockerResponse.Warnings Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceListResponse : DockerResponse Properties Inner Returns the raw dynamic object actually returned by Docker. You may use this to access newer Docker properties that have not yet been wrapped by this class. Declaration public dynamic Inner { get; } Property Value Type Description Object Services Returns the list of service details returned by the Docker engine. Declaration public List<ServiceDetails> Services { get; } Property Value Type Description List < ServiceDetails >"
  },
  "neonsdk/api/Neon.Docker.ServiceLogDriver.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceLogDriver.html",
    "title": "Class ServiceLogDriver | NeonSDK documentation",
    "keywords": "Class ServiceLogDriver Specifies a custom service logging driver. Inheritance Object ServiceLogDriver Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceLogDriver Properties Name Specifies the driver name. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String Options Specifies the driver options. Declaration [JsonProperty(PropertyName = \"Options\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Options\", ApplyNamingConventions = false)] public Dictionary<string, string> Options { get; set; } Property Value Type Description Dictionary < String , String > Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceMode.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceMode.html",
    "title": "Enum ServiceMode | NeonSDK documentation",
    "keywords": "Enum ServiceMode Enumerates the service modes. Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public enum ServiceMode Fields Name Description Global Service should deploy on all hosts that satisfy the constraints. Replicated Service should deploy a specified number of replicas on nodes that satisfy the constraints. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Docker.ServiceMount.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceMount.html",
    "title": "Class ServiceMount | NeonSDK documentation",
    "keywords": "Class ServiceMount Service mount specification. Inheritance Object ServiceMount Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceMount Properties BindOptions Specifies the bind propagation mode. Declaration [JsonProperty(PropertyName = \"BindOptions\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"BindOptions\", ApplyNamingConventions = false)] public ServiceBindOptions BindOptions { get; set; } Property Value Type Description ServiceBindOptions Consistency Specifies the mount consistency. Declaration [JsonProperty(PropertyName = \"Consistency\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Consistency\", ApplyNamingConventions = false)] public ServiceMountConsistency Consistency { get; set; } Property Value Type Description ServiceMountConsistency ReadOnly Specifies whether the mount is to be read-only within the service containers. Declaration [JsonProperty(PropertyName = \"ReadOnly\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"ReadOnly\", ApplyNamingConventions = false)] public bool ReadOnly { get; set; } Property Value Type Description Boolean Source Specifies the external mount source Declaration [JsonProperty(PropertyName = \"Source\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Source\", ApplyNamingConventions = false)] public string Source { get; set; } Property Value Type Description String Target Specifies where the mount will appear within the service containers. Declaration [JsonProperty(PropertyName = \"Target\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Target\", ApplyNamingConventions = false)] public string Target { get; set; } Property Value Type Description String TmpfsOptions Optionally specifies Tempfs mount configuration options. Declaration [JsonProperty(PropertyName = \"TmpfsOptions\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"TmpfsOptions\", ApplyNamingConventions = false)] public ServiceTmpfsOptions TmpfsOptions { get; set; } Property Value Type Description ServiceTmpfsOptions Type The mount type. Declaration [JsonProperty(PropertyName = \"Type\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Type\", ApplyNamingConventions = false)] public ServiceMountType Type { get; set; } Property Value Type Description ServiceMountType VolumeOptions Optionally specifies volume mount configuration options. Declaration [JsonProperty(PropertyName = \"VolumeOptions\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"VolumeOptions\", ApplyNamingConventions = false)] public ServiceVolumeOptions VolumeOptions { get; set; } Property Value Type Description ServiceVolumeOptions Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceMountBindPropagation.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceMountBindPropagation.html",
    "title": "Enum ServiceMountBindPropagation | NeonSDK documentation",
    "keywords": "Enum ServiceMountBindPropagation Enumerates the mount propagation options. Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public enum ServiceMountBindPropagation Fields Name Description Private Private. RPrivate RPrivate. RShared RShared. RSlave RSlave. Shared Shared. Slave Slave. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Docker.ServiceMountConsistency.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceMountConsistency.html",
    "title": "Enum ServiceMountConsistency | NeonSDK documentation",
    "keywords": "Enum ServiceMountConsistency Enumerates the service mount consistency options Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public enum ServiceMountConsistency Fields Name Description Cached Cached. Consistent Consistent. Default Default consistency. Delegated Delegated. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Docker.ServiceMountType.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceMountType.html",
    "title": "Enum ServiceMountType | NeonSDK documentation",
    "keywords": "Enum ServiceMountType Enumerates the service mount types. Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public enum ServiceMountType Fields Name Description Bind Mount a directory from the Docker host. Tmpfs Create and mount a tmpfs. Volume Mount a Docker volume. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Docker.ServiceNamedResourceSpec.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceNamedResourceSpec.html",
    "title": "Class ServiceNamedResourceSpec | NeonSDK documentation",
    "keywords": "Class ServiceNamedResourceSpec Describes name-valued user-defined resource setting. Inheritance Object ServiceNamedResourceSpec Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceNamedResourceSpec Properties Kind Identifies the setting. Declaration [JsonProperty(PropertyName = \"Kind\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Kind\", ApplyNamingConventions = false)] public string Kind { get; set; } Property Value Type Description String Value The setting value string. Declaration [JsonProperty(PropertyName = \"Value\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Value\", ApplyNamingConventions = false)] public string Value { get; set; } Property Value Type Description String Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceNetwork.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceNetwork.html",
    "title": "Class ServiceNetwork | NeonSDK documentation",
    "keywords": "Class ServiceNetwork Service container spread placement settings. Inheritance Object ServiceNetwork Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceNetwork Properties Aliases Network aliases (network IDs). Declaration [JsonProperty(PropertyName = \"Aliases\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Aliases\", ApplyNamingConventions = false)] public List<string> Aliases { get; set; } Property Value Type Description List < String > Target Target network ID. Declaration [JsonProperty(PropertyName = \"Target\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Target\", ApplyNamingConventions = false)] public string Target { get; set; } Property Value Type Description String Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServicePlacement.html": {
    "href": "neonsdk/api/Neon.Docker.ServicePlacement.html",
    "title": "Class ServicePlacement | NeonSDK documentation",
    "keywords": "Class ServicePlacement Service container placement options. Inheritance Object ServicePlacement Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServicePlacement Properties Constraints Service constraints formatted as CONSTRAINT==VALUE or CONSTRAINT!=VALUE . Declaration [JsonProperty(PropertyName = \"Constraints\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Constraints\", ApplyNamingConventions = false)] public List<string> Constraints { get; set; } Property Value Type Description List < String > Platforms Specifies the platforms where the service containers may be deployed or empty when there is no constraints. Declaration [JsonProperty(PropertyName = \"Platforms\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Platforms\", ApplyNamingConventions = false)] public List<ServicePlatform> Platforms { get; set; } Property Value Type Description List < ServicePlatform > Preferences Service placement preferences. Declaration [JsonProperty(PropertyName = \"Preferences\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Preferences\", ApplyNamingConventions = false)] public ServicePlacementPreferences Preferences { get; set; } Property Value Type Description ServicePlacementPreferences Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServicePlacementPreferences.html": {
    "href": "neonsdk/api/Neon.Docker.ServicePlacementPreferences.html",
    "title": "Class ServicePlacementPreferences | NeonSDK documentation",
    "keywords": "Class ServicePlacementPreferences Service container placement preferences. Inheritance Object ServicePlacementPreferences Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServicePlacementPreferences Properties Spread Spread swarm orchestrator options. Declaration [JsonProperty(PropertyName = \"Spread\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Spread\", ApplyNamingConventions = false)] public List<ServicePlacementSpreadSettings> Spread { get; set; } Property Value Type Description List < ServicePlacementSpreadSettings > Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServicePlacementSpreadSettings.html": {
    "href": "neonsdk/api/Neon.Docker.ServicePlacementSpreadSettings.html",
    "title": "Class ServicePlacementSpreadSettings | NeonSDK documentation",
    "keywords": "Class ServicePlacementSpreadSettings Service container spread placement settings. Inheritance Object ServicePlacementSpreadSettings Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServicePlacementSpreadSettings Properties SpreadDescriptor Label descriptor, such as: engine.labels.az Declaration [JsonProperty(PropertyName = \"SpreadDescriptor\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"SpreadDescriptor\", ApplyNamingConventions = false)] public string SpreadDescriptor { get; set; } Property Value Type Description String Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServicePlatform.html": {
    "href": "neonsdk/api/Neon.Docker.ServicePlatform.html",
    "title": "Class ServicePlatform | NeonSDK documentation",
    "keywords": "Class ServicePlatform Service container spread placement settings. Inheritance Object ServicePlatform Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServicePlatform Properties Architecture Specifies the hardware architecture (like: x86_64 ). Declaration [JsonProperty(PropertyName = \"Architecture\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Architecture\", ApplyNamingConventions = false)] public string Architecture { get; set; } Property Value Type Description String OS Specifies the operating system (like: linux or windows ). Declaration [JsonProperty(PropertyName = \"OS\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"OS\", ApplyNamingConventions = false)] public string OS { get; set; } Property Value Type Description String Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServicePortMode.html": {
    "href": "neonsdk/api/Neon.Docker.ServicePortMode.html",
    "title": "Enum ServicePortMode | NeonSDK documentation",
    "keywords": "Enum ServicePortMode Enumerates the service port modes. Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public enum ServicePortMode Fields Name Description Host Publish service ports to the local Docker host network. Ingress Publish service ports to the Docker Swarm ingress mesh network. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Docker.ServicePortProtocol.html": {
    "href": "neonsdk/api/Neon.Docker.ServicePortProtocol.html",
    "title": "Enum ServicePortProtocol | NeonSDK documentation",
    "keywords": "Enum ServicePortProtocol Enumerates the service port protocols. Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public enum ServicePortProtocol Fields Name Description Tcp TCP Udp UDP Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Docker.ServicePrivileges.html": {
    "href": "neonsdk/api/Neon.Docker.ServicePrivileges.html",
    "title": "Class ServicePrivileges | NeonSDK documentation",
    "keywords": "Class ServicePrivileges Security options for service containers. Inheritance Object ServicePrivileges Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServicePrivileges Properties CredentialSpec Windows Only: Windows container credential specification. Declaration [JsonProperty(PropertyName = \"CredentialSpec\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"CredentialSpec\", ApplyNamingConventions = false)] public ServiceCredentialSpec CredentialSpec { get; set; } Property Value Type Description ServiceCredentialSpec SELinuxContext SELinux labels for the container. Declaration [JsonProperty(PropertyName = \"SELinuxContext\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"SELinuxContext\", ApplyNamingConventions = false)] public ServiceSELinuxContext SELinuxContext { get; set; } Property Value Type Description ServiceSELinuxContext Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceReplicatedSchedulingMode.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceReplicatedSchedulingMode.html",
    "title": "Class ServiceReplicatedSchedulingMode | NeonSDK documentation",
    "keywords": "Class ServiceReplicatedSchedulingMode Replicated scheduling mode options. Inheritance Object ServiceReplicatedSchedulingMode Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceReplicatedSchedulingMode Properties Replicas The number of service replicas (tasks/containers). Declaration [JsonProperty(PropertyName = \"Replicas\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Replicas\", ApplyNamingConventions = false)] public int Replicas { get; set; } Property Value Type Description Int32 Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceResources.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceResources.html",
    "title": "Class ServiceResources | NeonSDK documentation",
    "keywords": "Class ServiceResources Specifies the service resource requirements and limits. Inheritance Object ServiceResources Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceResources Properties Limits Specifies resource limits for service containers. Declaration [JsonProperty(PropertyName = \"Limits\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Limits\", ApplyNamingConventions = false)] public ServiceResourceSettings Limits { get; set; } Property Value Type Description ServiceResourceSettings Reservations Specifies resource reservations for service containers. Declaration [JsonProperty(PropertyName = \"Reservations\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Reservations\", ApplyNamingConventions = false)] public ServiceResourceSettings Reservations { get; set; } Property Value Type Description ServiceResourceSettings Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceResourceSettings.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceResourceSettings.html",
    "title": "Class ServiceResourceSettings | NeonSDK documentation",
    "keywords": "Class ServiceResourceSettings Describes system resource consumption settings. Inheritance Object ServiceResourceSettings Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceResourceSettings Properties GenericResources User-defined generic resource settings. Declaration [JsonProperty(PropertyName = \"GenericResources\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"GenericResources\", ApplyNamingConventions = false)] public List<ServiceGenericResources> GenericResources { get; set; } Property Value Type Description List < ServiceGenericResources > MemoryBytes Memory utilization as bytes. Declaration [JsonProperty(PropertyName = \"MemoryBytes\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"MemoryBytes\", ApplyNamingConventions = false)] public long? MemoryBytes { get; set; } Property Value Type Description Nullable < Int64 > NanoCPUs CPU utilization expressed as billionths of a CPU. Declaration [JsonProperty(PropertyName = \"NanoCPUs\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"NanoCPUs\", ApplyNamingConventions = false)] public long? NanoCPUs { get; set; } Property Value Type Description Nullable < Int64 > Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceRestartCondition.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceRestartCondition.html",
    "title": "Enum ServiceRestartCondition | NeonSDK documentation",
    "keywords": "Enum ServiceRestartCondition Enumerates the service restart conditions. Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public enum ServiceRestartCondition Fields Name Description Any Restart whenever a service task exits for any reason. None Never restart. OnFailure Restart only when a service task returns a non zero exit code. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Docker.ServiceRestartPolicy.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceRestartPolicy.html",
    "title": "Class ServiceRestartPolicy | NeonSDK documentation",
    "keywords": "Class ServiceRestartPolicy Specifies the restart policy for service containers. Inheritance Object ServiceRestartPolicy Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceRestartPolicy Properties Condition Specifies the condition under which a service container should be restarted. Declaration [JsonProperty(PropertyName = \"Condition\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Condition\", ApplyNamingConventions = false)] public ServiceRestartCondition Condition { get; set; } Property Value Type Description ServiceRestartCondition Delay Deplay between restart attempts (nanoseconds). Declaration [JsonProperty(PropertyName = \"Delay\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Delay\", ApplyNamingConventions = false)] public long? Delay { get; set; } Property Value Type Description Nullable < Int64 > MaxAttempts Specifies the maximum number of container restart attempts before giving up. Declaration [JsonProperty(PropertyName = \"MaxAttempts\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"MaxAttempts\", ApplyNamingConventions = false)] public long? MaxAttempts { get; set; } Property Value Type Description Nullable < Int64 > Window Specifies the window of time during which the restart policy will be enavluated (nanoseconds). Declaration [JsonProperty(PropertyName = \"Window\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Window\", ApplyNamingConventions = false)] public long? Window { get; set; } Property Value Type Description Nullable < Int64 > Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceRollbackConfig.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceRollbackConfig.html",
    "title": "Class ServiceRollbackConfig | NeonSDK documentation",
    "keywords": "Class ServiceRollbackConfig Specifies the rollback strategy for a service. Inheritance Object ServiceRollbackConfig Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceRollbackConfig Properties Delay Time between rollback iterations (in nanoseconds). Declaration [JsonProperty(PropertyName = \"Delay\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Delay\", ApplyNamingConventions = false)] public long? Delay { get; set; } Property Value Type Description Nullable < Int64 > FailureAction Action to take if an rolled back task fails to run or stops running during the rollback. Declaration [JsonProperty(PropertyName = \"FailureAction\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"FailureAction\", ApplyNamingConventions = false)] public ServiceRollbackFailureAction? FailureAction { get; set; } Property Value Type Description Nullable < ServiceRollbackFailureAction > MaxFailureRatio The fraction of tasks that may fail during an rollback before the failure '] action is invoked, specified as a floating point number between 0 and 1. Declaration [JsonProperty(PropertyName = \"MaxFailureRatio\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"MaxFailureRatio\", ApplyNamingConventions = false)] public double? MaxFailureRatio { get; set; } Property Value Type Description Nullable < Double > Monitor Time to monitor rolled back tasks for failure (in nanoseconds). Declaration [JsonProperty(PropertyName = \"Monitor\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Monitor\", ApplyNamingConventions = false)] public long? Monitor { get; set; } Property Value Type Description Nullable < Int64 > Order Specifies the order in which the running task is stopped and the rolledback task is started. Declaration [JsonProperty(PropertyName = \"Order\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Order\", ApplyNamingConventions = false)] public ServiceRollbackOrder? Order { get; set; } Property Value Type Description Nullable < ServiceRollbackOrder > Parallelism Maximum number of tasks to be rolled back in parallel during an rollback interation. Declaration [JsonProperty(PropertyName = \"Parallelism\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Parallelism\", ApplyNamingConventions = false)] public long? Parallelism { get; set; } Property Value Type Description Nullable < Int64 > Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceRollbackFailureAction.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceRollbackFailureAction.html",
    "title": "Enum ServiceRollbackFailureAction | NeonSDK documentation",
    "keywords": "Enum ServiceRollbackFailureAction Enumerates the service rollback failure actions. Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public enum ServiceRollbackFailureAction Fields Name Description Continue Continue the service task rollback on failure. Pause Pause the service task rollback on failure. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Docker.ServiceRollbackOrder.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceRollbackOrder.html",
    "title": "Enum ServiceRollbackOrder | NeonSDK documentation",
    "keywords": "Enum ServiceRollbackOrder Enumerates the service task rollback order options. Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public enum ServiceRollbackOrder Fields Name Description StartFirst Rollback a current service task to the previous setting first before stopping the current task. StopFirst Stop the current service task before rolling back to the previous settings. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Docker.ServiceSchedulingMode.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceSchedulingMode.html",
    "title": "Class ServiceSchedulingMode | NeonSDK documentation",
    "keywords": "Class ServiceSchedulingMode Orchestration scheduling mode for the service. Inheritance Object ServiceSchedulingMode Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceSchedulingMode Properties Global Global scheduling mode options. Declaration [JsonProperty(PropertyName = \"Global\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] public ServiceGlobalSchedulingMode Global { get; set; } Property Value Type Description ServiceGlobalSchedulingMode Replicated Replicated scheduling mode options. Declaration [JsonProperty(PropertyName = \"Replicated\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] public ServiceReplicatedSchedulingMode Replicated { get; set; } Property Value Type Description ServiceReplicatedSchedulingMode Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceSecret.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceSecret.html",
    "title": "Class ServiceSecret | NeonSDK documentation",
    "keywords": "Class ServiceSecret Service secret. Inheritance Object ServiceSecret Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceSecret Properties File Secret file information. Declaration [JsonProperty(PropertyName = \"File\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"File\", ApplyNamingConventions = false)] public ServiceFile File { get; set; } Property Value Type Description ServiceFile SecretID The Docker secret ID. Declaration [JsonProperty(PropertyName = \"SecretID\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"SecretID\", ApplyNamingConventions = false)] public string SecretID { get; set; } Property Value Type Description String SecretName The secret name. Declaration [JsonProperty(PropertyName = \"SecretName\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"SecretName\", ApplyNamingConventions = false)] public string SecretName { get; set; } Property Value Type Description String Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceSELinuxContext.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceSELinuxContext.html",
    "title": "Class ServiceSELinuxContext | NeonSDK documentation",
    "keywords": "Class ServiceSELinuxContext SELinux labels for the container. Inheritance Object ServiceSELinuxContext Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceSELinuxContext Properties Disable Disable SELinux. Declaration [JsonProperty(PropertyName = \"Disable\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Disable\", ApplyNamingConventions = false)] public bool Disable { get; set; } Property Value Type Description Boolean Level SELinux level label. Declaration [JsonProperty(PropertyName = \"Level\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Level\", ApplyNamingConventions = false)] public string Level { get; set; } Property Value Type Description String Role SELinux role label. Declaration [JsonProperty(PropertyName = \"Role\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Role\", ApplyNamingConventions = false)] public string Role { get; set; } Property Value Type Description String Type SELinux type label. Declaration [JsonProperty(PropertyName = \"Type\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Type\", ApplyNamingConventions = false)] public string Type { get; set; } Property Value Type Description String User SELinux user label. Declaration [JsonProperty(PropertyName = \"User\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"User\", ApplyNamingConventions = false)] public string User { get; set; } Property Value Type Description String Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceSpec.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceSpec.html",
    "title": "Class ServiceSpec | NeonSDK documentation",
    "keywords": "Class ServiceSpec User modifiable service configuration. Inheritance Object ServiceSpec Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceSpec Properties EndpointSpec Service endpoint and Docker load balancer settings. Declaration [JsonProperty(PropertyName = \"EndpointSpec\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"EndpointSpec\", ApplyNamingConventions = false)] public ServiceEndpointSpec EndpointSpec { get; set; } Property Value Type Description ServiceEndpointSpec Labels Service labels. Declaration [JsonProperty(PropertyName = \"Labels\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Labels\", ApplyNamingConventions = false)] public Dictionary<string, string> Labels { get; set; } Property Value Type Description Dictionary < String , String > Mode Service scheduling mode details. Declaration [JsonProperty(PropertyName = \"Mode\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Mode\", ApplyNamingConventions = false)] public ServiceSchedulingMode Mode { get; set; } Property Value Type Description ServiceSchedulingMode Name The service Name. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String Networks Specifies attached networks. Declaration [JsonProperty(PropertyName = \"Networks\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Networks\", ApplyNamingConventions = false)] public List<ServiceNetwork> Networks { get; set; } Property Value Type Description List < ServiceNetwork > RollbackConfig Specifies the service update strategy. Declaration [JsonProperty(PropertyName = \"RollbackConfig\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"RollbackConfig\", ApplyNamingConventions = false)] public ServiceRollbackConfig RollbackConfig { get; set; } Property Value Type Description ServiceRollbackConfig TaskTemplate User modifiable service task configuration. Declaration [JsonProperty(PropertyName = \"TaskTemplate\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"TaskTemplate\", ApplyNamingConventions = false)] public ServiceTaskTemplate TaskTemplate { get; set; } Property Value Type Description ServiceTaskTemplate UpdateConfig Specifies the service update strategy. Declaration [JsonProperty(PropertyName = \"UpdateConfig\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"UpdateConfig\", ApplyNamingConventions = false)] public ServiceUpdateConfig UpdateConfig { get; set; } Property Value Type Description ServiceUpdateConfig Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceTaskTemplate.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceTaskTemplate.html",
    "title": "Class ServiceTaskTemplate | NeonSDK documentation",
    "keywords": "Class ServiceTaskTemplate User modifiable service task configuration. Inheritance Object ServiceTaskTemplate Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceTaskTemplate Properties ContainerSpec Service container settings. Declaration [JsonProperty(PropertyName = \"ContainerSpec\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"ContainerSpec\", ApplyNamingConventions = false)] public ServiceContainerSpec ContainerSpec { get; set; } Property Value Type Description ServiceContainerSpec EndpointSpec Optionally specifies the network endpoints for the service containers. Declaration [JsonProperty(PropertyName = \"EndpointSpec\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"EndpointSpec\", ApplyNamingConventions = false)] public ServiceEndpointSpec EndpointSpec { get; set; } Property Value Type Description ServiceEndpointSpec ForceUpdate Counter that triggers an update even if no relevant service properties have changed. Declaration [JsonProperty(PropertyName = \"ForceUpdate\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"ForceUpdate\", ApplyNamingConventions = false)] public long ForceUpdate { get; set; } Property Value Type Description Int64 LogDriver Optionally specifies the log driver to use for the service containers. Declaration [JsonProperty(PropertyName = \"LogDriver\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"LogDriver\", ApplyNamingConventions = false)] public ServiceLogDriver LogDriver { get; set; } Property Value Type Description ServiceLogDriver Networks Specifies the networks to be attached to the service containers. Declaration [JsonProperty(PropertyName = \"Networks\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Networks\", ApplyNamingConventions = false)] public List<ServiceNetwork> Networks { get; set; } Property Value Type Description List < ServiceNetwork > Placement Service container placement options. Declaration [JsonProperty(PropertyName = \"Placement\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Placement\", ApplyNamingConventions = false)] public ServicePlacement Placement { get; set; } Property Value Type Description ServicePlacement Resources Specifies resource requirements for each service container. Declaration [JsonProperty(PropertyName = \"Resources\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Resources\", ApplyNamingConventions = false)] public ServiceResources Resources { get; set; } Property Value Type Description ServiceResources RestartPolicy Restart policy for service containers. Declaration [JsonProperty(PropertyName = \"RestartPolicy\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"RestartPolicy\", ApplyNamingConventions = false)] public ServiceRestartPolicy RestartPolicy { get; set; } Property Value Type Description ServiceRestartPolicy Runtime Specifies the runtime for the service task executor. Declaration [JsonProperty(PropertyName = \"Runtime\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Runtime\", ApplyNamingConventions = false)] public string Runtime { get; set; } Property Value Type Description String Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceTmpfsOptions.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceTmpfsOptions.html",
    "title": "Class ServiceTmpfsOptions | NeonSDK documentation",
    "keywords": "Class ServiceTmpfsOptions Volume Tempfs options. Inheritance Object ServiceTmpfsOptions Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceTmpfsOptions Properties Mode Specifies the tmpfs file permission mode encoded as an integer. Declaration [JsonProperty(PropertyName = \"Mode\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Mode\", ApplyNamingConventions = false)] public int Mode { get; set; } Property Value Type Description Int32 SizeBytes Specifies the tmpfs size in bytes. Declaration [JsonProperty(PropertyName = \"SizeBytes\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"SizeBytes\", ApplyNamingConventions = false)] public long? SizeBytes { get; set; } Property Value Type Description Nullable < Int64 > Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceUpdateConfig.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceUpdateConfig.html",
    "title": "Class ServiceUpdateConfig | NeonSDK documentation",
    "keywords": "Class ServiceUpdateConfig Specifies the update strategy for a service. Inheritance Object ServiceUpdateConfig Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceUpdateConfig Properties Delay Time between update interations (in nanoseconds). Declaration [JsonProperty(PropertyName = \"Delay\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Delay\", ApplyNamingConventions = false)] public long? Delay { get; set; } Property Value Type Description Nullable < Int64 > FailureAction Action to take if an updated task fails to run or stops running during the update. Declaration [JsonProperty(PropertyName = \"FailureAction\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"FailureAction\", ApplyNamingConventions = false)] public ServiceUpdateFailureAction FailureAction { get; set; } Property Value Type Description ServiceUpdateFailureAction MaxFailureRatio The fraction of tasks that may fail during an update before the failure '] action is invoked, specified as a floating point number between 0 and 1. Declaration [JsonProperty(PropertyName = \"MaxFailureRatio\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"MaxFailureRatio\", ApplyNamingConventions = false)] public double? MaxFailureRatio { get; set; } Property Value Type Description Nullable < Double > Monitor Time to monitor updated tasks for failure (in nanoseconds). Declaration [JsonProperty(PropertyName = \"Monitor\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Monitor\", ApplyNamingConventions = false)] public long? Monitor { get; set; } Property Value Type Description Nullable < Int64 > Order Specifies the order in which the running task is stopped and the new task is started. Declaration [JsonProperty(PropertyName = \"Order\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Order\", ApplyNamingConventions = false)] public ServiceUpdateOrder Order { get; set; } Property Value Type Description ServiceUpdateOrder Parallelism Maximum number of tasks to be updated in parallel during an update interation. Declaration [JsonProperty(PropertyName = \"Parallelism\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Parallelism\", ApplyNamingConventions = false)] public long? Parallelism { get; set; } Property Value Type Description Nullable < Int64 > Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceUpdateFailureAction.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceUpdateFailureAction.html",
    "title": "Enum ServiceUpdateFailureAction | NeonSDK documentation",
    "keywords": "Enum ServiceUpdateFailureAction Enumerates the service update failure actions. Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public enum ServiceUpdateFailureAction Fields Name Description Continue Continue scheduling updated service tasks on failure. Pause Pause scheduling updated service tasks on failure. Rollback Rollback the service to the previous state on failure. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Docker.ServiceUpdateOrder.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceUpdateOrder.html",
    "title": "Enum ServiceUpdateOrder | NeonSDK documentation",
    "keywords": "Enum ServiceUpdateOrder Enumerates the service taek update rollback order options. Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public enum ServiceUpdateOrder Fields Name Description StartFirst Start a service replacement task first and before stopping the original task. StopFirst Stop a service task first and then start its replacement. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Docker.ServiceUpdateState.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceUpdateState.html",
    "title": "Enum ServiceUpdateState | NeonSDK documentation",
    "keywords": "Enum ServiceUpdateState Enumerates the service update states. Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public enum ServiceUpdateState Fields Name Description Completed Service update has completed. Paused Service update is paused. RollbackCompleted Service update has completed. Updating Service is actively being updated. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Docker.ServiceUpdateStatus.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceUpdateStatus.html",
    "title": "Class ServiceUpdateStatus | NeonSDK documentation",
    "keywords": "Class ServiceUpdateStatus Describes the virtual IP address assigned to the service on a specific attached network. Inheritance Object ServiceUpdateStatus Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceUpdateStatus Properties CompletedAt Indicates when the service update was completed. Declaration [JsonProperty(PropertyName = \"CompletedAt\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"CompletedAt\", ApplyNamingConventions = false)] public string CompletedAt { get; set; } Property Value Type Description String CompletedAtUtc Returns the time (UTC) the service update was completed (as a DateTime ). Declaration [JsonIgnore] [YamlIgnore] public DateTime CompletedAtUtc { get; } Property Value Type Description DateTime Message A textual message describing the update. Declaration [JsonProperty(PropertyName = \"Message\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Message\", ApplyNamingConventions = false)] public string Message { get; set; } Property Value Type Description String StartedAt Indicates when the service update was started. Declaration [JsonProperty(PropertyName = \"StartedAt\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"StartedAt\", ApplyNamingConventions = false)] public string StartedAt { get; set; } Property Value Type Description String StartedAtUtc Returns the time (UTC) the service was started (as a DateTime ). Declaration [JsonIgnore] [YamlIgnore] public DateTime StartedAtUtc { get; } Property Value Type Description DateTime State Indicates the saervice updating state. Declaration [JsonProperty(PropertyName = \"State\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"State\", ApplyNamingConventions = false)] public ServiceUpdateState State { get; set; } Property Value Type Description ServiceUpdateState Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceVersion.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceVersion.html",
    "title": "Class ServiceVersion | NeonSDK documentation",
    "keywords": "Class ServiceVersion Windows-only: Specifies how Windows credentials are to be loaded for the container. Inheritance Object ServiceVersion Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceVersion Properties Index Update index for the service when the ServiceDetails snapshot was taken. Declaration [JsonProperty(PropertyName = \"Index\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Index\", ApplyNamingConventions = false)] public long Index { get; set; } Property Value Type Description Int64 Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceVirtualIP.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceVirtualIP.html",
    "title": "Class ServiceVirtualIP | NeonSDK documentation",
    "keywords": "Class ServiceVirtualIP Describes the virtual IP address assigned to the service on a specific attached network. Inheritance Object ServiceVirtualIP Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceVirtualIP Properties Addr Specifies assigned IP address. Declaration [JsonProperty(PropertyName = \"Addr\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Addr\", ApplyNamingConventions = false)] public string Addr { get; set; } Property Value Type Description String NetworkID Specifies the attached network ID. Declaration [JsonProperty(PropertyName = \"NetworkID\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"NetworkID\", ApplyNamingConventions = false)] public string NetworkID { get; set; } Property Value Type Description String Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceVolumeDriverConfig.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceVolumeDriverConfig.html",
    "title": "Class ServiceVolumeDriverConfig | NeonSDK documentation",
    "keywords": "Class ServiceVolumeDriverConfig Volume driver configuration options. Inheritance Object ServiceVolumeDriverConfig Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceVolumeDriverConfig Properties Name Name of the volume driver. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String Options Volume driver options. Declaration [JsonProperty(PropertyName = \"Options\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Options\", ApplyNamingConventions = false)] public Dictionary<string, string> Options { get; set; } Property Value Type Description Dictionary < String , String > Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.ServiceVolumeOptions.html": {
    "href": "neonsdk/api/Neon.Docker.ServiceVolumeOptions.html",
    "title": "Class ServiceVolumeOptions | NeonSDK documentation",
    "keywords": "Class ServiceVolumeOptions Volume options for volume service mounts. Inheritance Object ServiceVolumeOptions Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class ServiceVolumeOptions Properties DriverConfig Optionally specifies volume driver and options. Declaration [JsonProperty(PropertyName = \"DriverConfig\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"DriverConfig\", ApplyNamingConventions = false)] public ServiceVolumeDriverConfig DriverConfig { get; set; } Property Value Type Description ServiceVolumeDriverConfig Labels Volume driver labels. Declaration [JsonProperty(PropertyName = \"Labels\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"Labels\", ApplyNamingConventions = false)] public Dictionary<string, string> Labels { get; set; } Property Value Type Description Dictionary < String , String > NoCopy Enables populating the volume with data from the container target. Declaration [JsonProperty(PropertyName = \"NoCopy\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)] [YamlMember(Alias = \"NoCopy\", ApplyNamingConventions = false)] public bool NoCopy { get; set; } Property Value Type Description Boolean Methods Normalize() Declaration public void Normalize()"
  },
  "neonsdk/api/Neon.Docker.VolumeListResponse.html": {
    "href": "neonsdk/api/Neon.Docker.VolumeListResponse.html",
    "title": "Class VolumeListResponse | NeonSDK documentation",
    "keywords": "Class VolumeListResponse The response from a VolumeListAsync(CancellationToken) command. Inheritance Object DockerResponse VolumeListResponse Inherited Members DockerResponse.Warnings Namespace : Neon.Docker Assembly : Neon.Docker.dll Syntax public class VolumeListResponse : DockerResponse Properties Inner Returns the raw dynamic object actually returned by Docker. You may use this to access newer Docker properties that have not yet been wrapped by this class. Declaration public dynamic Inner { get; } Property Value Type Description Object Volumes Returns the list of volumes returned by the Docker engine. Declaration public List<DockerVolume> Volumes { get; } Property Value Type Description List < DockerVolume >"
  },
  "neonsdk/api/Neon.GitHub.GitHubCredentials.html": {
    "href": "neonsdk/api/Neon.GitHub.GitHubCredentials.html",
    "title": "Class GitHubCredentials | NeonSDK documentation",
    "keywords": "Class GitHubCredentials Used internally to obtain the current user's GitHub from enviroment variables or a secret manager like 1Password via an IProfileClient implementation. Inheritance Object GitHubCredentials Namespace : Neon.GitHub Assembly : Neon.GitHub.dll Syntax public class GitHubCredentials Properties AccessToken Returns the user's GitHub Personal Access Token (PAT). Declaration public string AccessToken { get; } Property Value Type Description String Email Returns the user's GitHub email address. Declaration public string Email { get; } Property Value Type Description String Username Returns the user's GitHub username. Declaration public string Username { get; } Property Value Type Description String Methods Load(String, String, String, IProfileClient) Loads the current user's GitHub credentials and email address. These area secret manager like 1Password via an IProfileClient implementation. Declaration public static GitHubCredentials Load(string username = null, string accessToken = null, string email = null, IProfileClient profileClient = null) Parameters Type Name Description String username Optionally specifies the GitHub username. String accessToken Optionally specifies the GitHub Personal Access Token (PAT). String email Optionally specifies the GitHub email address for the current user. IProfileClient profileClient Optionally specifies the IProfileClient instance to be used for retrieving secrets. You may also add your IProfileClient to ServiceContainer and the instance will use that if this parameter is null . Secrets will be queried only when a profile client is available. Returns Type Description GitHubCredentials The GitHubCredentials . Remarks This works by first trying to obtain each part of the credentials via environment variables: GITHUB_USERNAME , GITHUB_PAT , and GITHIB_EMAIL . For any credential parts that couldn't be located as environment variables, the method will attempt to load the missing parts as via an IProfileClient implementation, if available. The method extracts the credentials from the GITHUB_PAT secret in the current user's vault as GITHUB_PAT[username] , GITHUB_PAT[password] (the token), and GITHUB_PAT[email] ."
  },
  "neonsdk/api/Neon.GitHub.GitHubRepo.html": {
    "href": "neonsdk/api/Neon.GitHub.GitHubRepo.html",
    "title": "Class GitHubRepo | NeonSDK documentation",
    "keywords": "Class GitHubRepo Wraps a Octokit.GitHubClient and LibGit2Sharp.Repository into a single object that provides easy to use high-level methods while also including properties for the GitHub server, remote GitHub repository, as well as the local git repository, note GitHubRepo implements IDisposable and instances should be disposed when you're done with them. Inheritance Object GitHubRepo Namespace : Neon.GitHub Assembly : Neon.GitHub.dll Syntax public class GitHubRepo : IDisposable Remarks To clone a GitHub repository , call the static CloneAsync(String, String, String, String, String, String, String, IProfileClient) method, passing the GitHub repository path, path the the local folder and optionally the branch to be checked out as well as the GitHub credentials. This returns the GitHubRepo that you'll use for subsequent operations. To manage a GitHub repository that doesn't have a local clone , call ConnectAsync(String, String, String, String, String, IProfileClient) . To open an existing local repository , call OpenAsync(String, String, String, String, String, IProfileClient) . To perform only GitHub account operations Call the static ConnectAsync(String, String, String, String, String, IProfileClient) method to construct an instance without a local repository reference. The Local property provides some easy-to-use methods for managing the associated local git repository. The Remote property provides some easy-to-use methods for managing the associated GitHub repository. These implement some common operations and are easier to use than the stock Octokit implementations. The lower-level GitHubApi can be used to manage GitHub assets directly and GitApi is the lower-level API that can be used to manage the local git repository. Properties Credentials Returns the associated GitHub credentials. Declaration public GitHubCredentials Credentials { get; set; } Property Value Type Description GitHubCredentials Exceptions Type Condition ObjectDisposedException Thrown when the instance is disposed. GitApi Returns the lower level LibGit2Sharp.Repository API for managing the associated local git repository. Declaration public Repository GitApi { get; set; } Property Value Type Description LibGit2Sharp.Repository Exceptions Type Condition ObjectDisposedException Thrown when the instance is disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. GitHubApi Returns the lower-level OctoKit Octokit.GitHubClient API that can be used to manage GitGub assets. Declaration public GitHubClient GitHubApi { get; set; } Property Value Type Description Octokit.GitHubClient Exceptions Type Condition ObjectDisposedException Thrown when the instance is disposed. Local Returns the friendly API methods used to manage the local git repository. Declaration public LocalRepoApi Local { get; set; } Property Value Type Description LocalRepoApi Exceptions Type Condition ObjectDisposedException Thrown when the instance is disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. Origin Returns the repository's remote GitHub remote origin. Declaration public Remote Origin { get; } Property Value Type Description LibGit2Sharp.Remote Exceptions Type Condition ObjectDisposedException Thrown when the instance is disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. LibGit2Sharp.LibGit2SharpException Thrown if the repository doesn't have a remote origin. Remote Returns the friendly API methods used to manage the remote GitHub repository. Declaration public RemoteRepoApi Remote { get; set; } Property Value Type Description RemoteRepoApi Exceptions Type Condition ObjectDisposedException Thrown when the instance is disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. Methods CloneAsync(String, String, String, String, String, String, String, IProfileClient) Clones a GitHub repository to a local folder. Declaration public static async Task<GitHubRepo> CloneAsync(string remoteRepoPath, string localRepoFolder, string branchName = null, string username = null, string accessToken = null, string email = null, string userAgent = null, IProfileClient profileClient = null) Parameters Type Name Description String remoteRepoPath Specifies the GitHub remote repository path, like: [SERVER/]OWNER/REPO String localRepoFolder Specifies the folder where the local git repository will be created or where it already exists. String branchName Optionally specifies the branch to be checked out after the clone operation completes. This defaults to the GitHub remote repository's default branch (typically main or master ). String username Optionally specifies the GitHub username. String accessToken Optionally specifies the GitHub Personal Access Token (PAT). String email Optionally specifies the GitHub email address for the current user. String userAgent Optionally specifies the user-agent to be submitted with GitHub REST API calls. This defaults to \"unknown\" . IProfileClient profileClient Optionally specifies the IProfileClient instance to be used for retrieving secrets. You may also add your IProfileClient to ServiceContainer and the instance will use that if this parameter is null . Secrets will be queried only when a profile client is available. Returns Type Description Task < GitHubRepo > The new GitHubRepo instance. Exceptions Type Condition LibGit2Sharp.LibGit2SharpException Thrown when the local folder already exists. ConnectAsync(String, String, String, String, String, IProfileClient) Creates a GitHubRepo instance that's connected to GitHub account but is not associated with a local git repository. This is useful when you only need to perform GitHub operations. Declaration public static async Task<GitHubRepo> ConnectAsync(string remoteRepoPath, string username = null, string accessToken = null, string email = null, string userAgent = null, IProfileClient profileClient = null) Parameters Type Name Description String remoteRepoPath Specifies the GitHub remote repository path, like: [SERVER/]OWNER/REPO String username Optionally specifies the GitHub username. String accessToken Optionally specifies the GitHub Personal Access Token (PAT). String email Optionally specifies the GitHub email address for the current user. String userAgent Optionally specifies the user-agent to be submitted with GitHub REST API calls. This defaults to \"unknown\" . IProfileClient profileClient Optionally specifies the IProfileClient instance to be used for retrieving secrets. You may also add your IProfileClient to ServiceContainer and the instance will use that if this parameter is null . Secrets will be queried only when a profile client is available. Returns Type Description Task < GitHubRepo > The new GitHubRepo instance. Remarks note NoLocalRepositoryException will be thrown whenever operations on the non-existent repository are attempted for GitHubRepo instance returned by this method. Dispose() Declaration public void Dispose() Dispose(Boolean) Provides a way for subclasses to handle disposal of any additional objects or resources. Not that any overrides should be sure to call this base method. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Passed as true when disposing, false when finalizing. Finalize() Finalizer. Declaration protected void Finalize() OpenAsync(String, String, String, String, String, IProfileClient) Creates a GitHubRepo that references an existing local git repository as well as the associated GitHub remote repository API. This requires GitHub credentials. These can be passed explicitly as parameters or can be retrieved automatically from the GITHUB_USERNAME and GITHUB_PAT environment variables or from the GITHUB_PAT[username] and GITHUB_PAT[password] secrets via an optional IProfileClient implementation. Declaration public static async Task<GitHubRepo> OpenAsync(string localRepoFolder, string username = null, string accessToken = null, string email = null, string userAgent = null, IProfileClient profileClient = null) Parameters Type Name Description String localRepoFolder Specifies the folder where the local git repository will be created or where it already exists. String username Optionally specifies the GitHub username. String accessToken Optionally specifies the GitHub Personal Access Token (PAT). String email Optionally specifies the GitHub email address for the current user. String userAgent Optionally specifies the user-agent to be submitted with GitHub REST API calls. This defaults to \"unknown\" . IProfileClient profileClient Optionally specifies the IProfileClient instance to be used for retrieving secrets. You may also add your IProfileClient to ServiceContainer and the instance will use that if this parameter is null . Secrets will be queried only when a profile client is available. Returns Type Description Task < GitHubRepo > Exceptions Type Condition LibGit2Sharp.RepositoryNotFoundException Thrown when the local repository doesn't exist."
  },
  "neonsdk/api/Neon.GitHub.GitRepositoryExtensions.html": {
    "href": "neonsdk/api/Neon.GitHub.GitRepositoryExtensions.html",
    "title": "Class GitRepositoryExtensions | NeonSDK documentation",
    "keywords": "Class GitRepositoryExtensions Implements handy LibGit2Sharp.Repository extension methods. Inheritance Object GitRepositoryExtensions Namespace : Neon.GitHub Assembly : Neon.GitHub.dll Syntax public static class GitRepositoryExtensions Methods CurrentBranch(Repository) Returns the current checked-out branch for the local git repository. Declaration public static Branch CurrentBranch(this Repository localRepo) Parameters Type Name Description LibGit2Sharp.Repository localRepo The local git repository. Returns Type Description LibGit2Sharp.Branch The current LibGit2Sharp.Branch . IsDirty(Repository) Returns a local git repository is changes pending a commit. Declaration public static bool IsDirty(this Repository localRepo) Parameters Type Name Description LibGit2Sharp.Repository localRepo The local git repository. Returns Type Description Boolean true when the repository has pending changes."
  },
  "neonsdk/api/Neon.GitHub.html": {
    "href": "neonsdk/api/Neon.GitHub.html",
    "title": "Namespace Neon.GitHub | NeonSDK documentation",
    "keywords": "Namespace Neon.GitHub Classes GitHubCredentials Used internally to obtain the current user's GitHub from enviroment variables or a secret manager like 1Password via an IProfileClient implementation. GitHubRepo Wraps a Octokit.GitHubClient and LibGit2Sharp.Repository into a single object that provides easy to use high-level methods while also including properties for the GitHub server, remote GitHub repository, as well as the local git repository, note GitHubRepo implements IDisposable and instances should be disposed when you're done with them. GitRepositoryExtensions Implements handy LibGit2Sharp.Repository extension methods. LocalRepoApi Implements easy-to-use local git repository related APIs. NoLocalRepositoryException Thrown when a local repository operation is performed on a GitHubRepo that has no association with a local git repository. RemoteRepoApi Implements easy-to-use remote GitHub repository related APIs. RemoteRepoBranchApi Implements friendly GitHub repository branch related APIs. RemoteRepoIssueApi Implements the friendly GitHub repository issue related APIs. RemoteRepoPath Abstracts GitHub origin repository paths formatted like: [SERVER/]OWNER/REPO . Examples: github.com/owner/repo or owner/repo (where github.com is the implied server). RemoteRepoReleaseApi Implements the friendly GitHub repository release related APIs. RemoteRepoTagApi Implements friendly GitHub repository tag related APIs."
  },
  "neonsdk/api/Neon.GitHub.LocalRepoApi.html": {
    "href": "neonsdk/api/Neon.GitHub.LocalRepoApi.html",
    "title": "Class LocalRepoApi | NeonSDK documentation",
    "keywords": "Class LocalRepoApi Implements easy-to-use local git repository related APIs. Inheritance Object LocalRepoApi Namespace : Neon.GitHub Assembly : Neon.GitHub.dll Syntax public class LocalRepoApi Properties CurrentBranch Returns the current branch. Declaration public Branch CurrentBranch { get; } Property Value Type Description LibGit2Sharp.Branch Folder Returns the path to the local repository folder. Declaration public string Folder { get; } Property Value Type Description String Exceptions Type Condition ObjectDisposedException Thrown when the instance is disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. IsDirty Returns true when the local repos has uncommitted changes. Declaration public bool IsDirty { get; } Property Value Type Description Boolean Exceptions Type Condition ObjectDisposedException Thrown when the instance is disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. Methods CheckoutAsync(String) Checks out a local repository branch. Declaration public async Task CheckoutAsync(string branchName) Parameters Type Name Description String branchName Specifies the local branch to be checked out. Returns Type Description Task The tracking Task . Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. LibGit2Sharp.LibGit2SharpException Thrown if the operation fails. CheckoutOriginAsync(String, String) Creates a local branch from a named GitHub repository origin branch and then checks out the branch. By default, the local branch will have the same name as the origin, but this can be customized. Declaration public async Task<bool> CheckoutOriginAsync(string originBranchName, string branchName = null) Parameters Type Name Description String originBranchName Specifies the GitHub origin repository branch name. String branchName Optionally specifies the local branch name. This defaults to originBranchName . Returns Type Description Task < Boolean > true if the local branch didn't already exist and was created from the GitHib origin repository, false otherwise. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. LibGit2Sharp.LibGit2SharpException Thrown if the operation fails. CommitAsync(String) Commits any staged and pending changes to the local git repository. Declaration public async Task<bool> CommitAsync(string message = null) Parameters Type Name Description String message Optionally specifies the commit message. This defaults to unspecified changes\" . Returns Type Description Task < Boolean > true when changes were comitted, false when there were no pending changes. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. LibGit2Sharp.LibGit2SharpException Thrown if the operation fails. CreateBranchAsync(String, String) Creates a new local branch from the tip of a source branch if the new branch doesn't already exist and then checks out the new branch. Declaration public async Task<bool> CreateBranchAsync(string branchName, string sourceBranchName) Parameters Type Name Description String branchName Identifies the branch to being created. String sourceBranchName Identifies the source branch. Returns Type Description Task < Boolean > true if the branch didn't already exist and was created, false otherwise. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. LibGit2Sharp.LibGit2SharpException Thrown if the operation fails. CreatePushOptions() Returns a LibGit2Sharp.PushOptions instance initialized with the credentials provider. Declaration public PushOptions CreatePushOptions() Returns Type Description LibGit2Sharp.PushOptions The new LibGit2Sharp.PushOptions . Exceptions Type Condition ObjectDisposedException Thrown when the instance is disposed. CreateSignature() Creates a LibGit2Sharp.Signature from the repository's credentials. Declaration public Signature CreateSignature() Returns Type Description LibGit2Sharp.Signature The new LibGit2Sharp.Signature . Exceptions Type Condition ObjectDisposedException Thrown when the instance is disposed. FetchAsync() Fetches information from the associated GitHub origin repository. Declaration public async Task FetchAsync() Returns Type Description Task The tracking Task . Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. LibGit2Sharp.LibGit2SharpException Thrown if the operation fails. GetLocalFilePathAsync(String) Converts a relative local repository file path like \"/my-folder/test.txt\" or \"my-folder/test.txt into the actual local file system path for the file. note The local file doesn't need to actually exist. Declaration public async Task<string> GetLocalFilePathAsync(string relativePath) Parameters Type Name Description String relativePath Specifies the path to the file relative to the local repository root folder. This may include a leading slash and both forward and backslashes are allowed as path separators. Returns Type Description Task < String > The fully qualified file system path to the specified repo file. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. GetRemoteFileUriAsync(String) Converts a relative local repository file path like \"/my-folder/test.txt\" or \"my-folder/test.txt to the remote GitHub URI for the file within the the currently checked out branch. note The local or remote file doesn't need to actually exist. Declaration public async Task<string> GetRemoteFileUriAsync(string relativePath) Parameters Type Name Description String relativePath Specifies the path to the file relative to the local repository root folder. This may include a leading slash (which is assumed when not present) and both forward and backslashes are allowed as path separators. Returns Type Description Task < String > The GitHub URI for the file from the current branch. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. MergeAsync(String, Boolean) Merges another local branch into the current branch. note The checked out branch must not included an non-committed changes. Declaration public async Task<MergeResult> MergeAsync(string branchName, bool throwOnConflict = true) Parameters Type Name Description String branchName Identifies the branch to be merged into the current branch. Boolean throwOnConflict Optionally specifies that the method should not throw an exception for conflicts. Returns Type Description Task < LibGit2Sharp.MergeResult > A LibGit2Sharp.MergeResult for successful merges or when the merged failed and throwOnConflict is false . Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. LibGit2Sharp.LibGit2SharpException Thrown if the operation fails. PullAsync() Fetches and pulls the changes from GitHub into the current checked-out branch within a local git repository. note The pull operation will be aborted and rolled back for merge conflicts. Check the result status to understand what happened. Declaration public async Task<MergeStatus> PullAsync() Returns Type Description Task < LibGit2Sharp.MergeStatus > The LibGit2Sharp.MergeStatus for the operation. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. LibGit2Sharp.LibGit2SharpException Thrown if the operation fails. PushAsync() Pushes any pending local commits from the checked out branch to GitHub, creating the branch on GitHub and associating the local branch when the branch doesn't already exist on GitHub. Any GitHub origin repository branch created will have the same name as the local branch. Declaration public async Task<bool> PushAsync() Returns Type Description Task < Boolean > true when commits were pushed, false when there were no pending commits. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. LibGit2Sharp.LibGit2SharpException Thrown if the operation fails. RemoveBranchAsync(String) Removes a branch from local repository as well as the from the GitHub origin repository, if they exist. Declaration public async Task RemoveBranchAsync(string branchName) Parameters Type Name Description String branchName Specifies the branch to be removed. Returns Type Description Task true if the branch existed and was removed, false otherwise. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. LibGit2Sharp.LibGit2SharpException Thrown if the operation fails. UndoAsync() Reverts any uncommitted changes in the current local repository branch. Declaration public async Task UndoAsync() Returns Type Description Task The tracking Task . Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. NoLocalRepositoryException Thrown when the GitHubRepo is not associated with a local git repository. LibGit2Sharp.LibGit2SharpException Thrown if the operation fails."
  },
  "neonsdk/api/Neon.GitHub.NoLocalRepositoryException.html": {
    "href": "neonsdk/api/Neon.GitHub.NoLocalRepositoryException.html",
    "title": "Class NoLocalRepositoryException | NeonSDK documentation",
    "keywords": "Class NoLocalRepositoryException Thrown when a local repository operation is performed on a GitHubRepo that has no association with a local git repository. Inheritance Object Exception LibGit2Sharp.LibGit2SharpException NoLocalRepositoryException Namespace : Neon.GitHub Assembly : Neon.GitHub.dll Syntax public class NoLocalRepositoryException : LibGit2SharpException, ISerializable Constructors NoLocalRepositoryException() Constructor. Declaration public NoLocalRepositoryException()"
  },
  "neonsdk/api/Neon.GitHub.RemoteRepoApi.html": {
    "href": "neonsdk/api/Neon.GitHub.RemoteRepoApi.html",
    "title": "Class RemoteRepoApi | NeonSDK documentation",
    "keywords": "Class RemoteRepoApi Implements easy-to-use remote GitHub repository related APIs. Inheritance Object RemoteRepoApi Namespace : Neon.GitHub Assembly : Neon.GitHub.dll Syntax public class RemoteRepoApi Properties BaseUri Returns the base URI for the repository on GitHub. note This includes the trailing slash. Declaration public string BaseUri { get; } Property Value Type Description String Branch Returns the friendly GitHub branch related APIs. Declaration public RemoteRepoBranchApi Branch { get; } Property Value Type Description RemoteRepoBranchApi Id Returns the remote repository's ID. Declaration public long Id { get; } Property Value Type Description Int64 Issue Returns the friendly GitHub issue related APIs. Declaration public RemoteRepoIssueApi Issue { get; } Property Value Type Description RemoteRepoIssueApi Path Returns the GitHub repository path. Declaration public RemoteRepoPath Path { get; } Property Value Type Description RemoteRepoPath Release Returns the friendly GitHub release related APIs. Declaration public RemoteRepoReleaseApi Release { get; } Property Value Type Description RemoteRepoReleaseApi Tag Returns the friendly GitHub release related APIs. Declaration public RemoteRepoTagApi Tag { get; } Property Value Type Description RemoteRepoTagApi Methods CreateComitter() Creates a LibGit2Sharp.Signature from the repository's credentials. Declaration public Committer CreateComitter() Returns Type Description Octokit.Committer The new Octokit.Committer . Exceptions Type Condition ObjectDisposedException Thrown when the instance is disposed. GetAsync() Returns the current Octokit.Repository for the orgin repository assocated with the parent GitHubRepo instance. Declaration public async Task<Repository> GetAsync() Returns Type Description Task < Octokit.Repository > The associated Octokit.Repository ."
  },
  "neonsdk/api/Neon.GitHub.RemoteRepoBranchApi.html": {
    "href": "neonsdk/api/Neon.GitHub.RemoteRepoBranchApi.html",
    "title": "Class RemoteRepoBranchApi | NeonSDK documentation",
    "keywords": "Class RemoteRepoBranchApi Implements friendly GitHub repository branch related APIs. Inheritance Object RemoteRepoBranchApi Namespace : Neon.GitHub Assembly : Neon.GitHub.dll Syntax public class RemoteRepoBranchApi Methods FindAsync(String) Searches for a specific GitHub origin repository branch. Declaration public async Task<Branch> FindAsync(string branchName) Parameters Type Name Description String branchName Specifies the origin repository branch name. Returns Type Description Task < Octokit.Branch > The requested Octokit.Branch or null when it doesn't exist. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. Octokit.NotFoundException Thrown when the branch does not exist. GetAllAsync() Returns all branches from the GitHub origin repository. Declaration public async Task<IReadOnlyList<Branch>> GetAllAsync() Returns Type Description Task < IReadOnlyList < Octokit.Branch >> The list of branches. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. GetAsync(String) Returns a specific GitHub origin repository branch. Declaration public async Task<Branch> GetAsync(string branchName) Parameters Type Name Description String branchName Specifies the origin repository branch name. Returns Type Description Task < Octokit.Branch > The requested Octokit.Branch . Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. Octokit.NotFoundException Thrown when the branch does not exist. RemoveAsync(String) Removes an origin branch, if it exists. Declaration public async Task<bool> RemoveAsync(string branchName) Parameters Type Name Description String branchName Specifies the origin repository branch name. Returns Type Description Task < Boolean > true if the branch existed and was removed, false otherwise. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed."
  },
  "neonsdk/api/Neon.GitHub.RemoteRepoIssueApi.html": {
    "href": "neonsdk/api/Neon.GitHub.RemoteRepoIssueApi.html",
    "title": "Class RemoteRepoIssueApi | NeonSDK documentation",
    "keywords": "Class RemoteRepoIssueApi Implements the friendly GitHub repository issue related APIs. Inheritance Object RemoteRepoIssueApi Namespace : Neon.GitHub Assembly : Neon.GitHub.dll Syntax public class RemoteRepoIssueApi Methods CreateAsync(NewIssue) Creates a new repo issue. Declaration public async Task<Issue> CreateAsync(NewIssue newIssue) Parameters Type Name Description Octokit.NewIssue newIssue Specifies the new issue. Returns Type Description Task < Octokit.Issue > The new Octokit.Issue . Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. GetAsync(Int32) Returns an issue by number. Declaration public async Task<Issue> GetAsync(int number) Parameters Type Name Description Int32 number Specifies the issue number. Returns Type Description Task < Octokit.Issue > The Octokit.Issue . Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. Octokit.NotFoundException Thrown when the issue doesn't exist UpdateAsync(Int32, IssueUpdate) Updates an existing issue. Declaration public async Task<Issue> UpdateAsync(int number, IssueUpdate issueUpdate) Parameters Type Name Description Int32 number Specifies the issue number. Octokit.IssueUpdate issueUpdate Specifies the issue update. Returns Type Description Task < Octokit.Issue > The updated Octokit.Issue . Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed."
  },
  "neonsdk/api/Neon.GitHub.RemoteRepoPath.html": {
    "href": "neonsdk/api/Neon.GitHub.RemoteRepoPath.html",
    "title": "Class RemoteRepoPath | NeonSDK documentation",
    "keywords": "Class RemoteRepoPath Abstracts GitHub origin repository paths formatted like: [SERVER/]OWNER/REPO . Examples: github.com/owner/repo or owner/repo (where github.com is the implied server). Inheritance Object RemoteRepoPath Namespace : Neon.GitHub Assembly : Neon.GitHub.dll Syntax public class RemoteRepoPath Properties Name Returns the name of the repository. Declaration public string Name { get; } Property Value Type Description String Owner Returns the owner part of the path. Declaration public string Owner { get; } Property Value Type Description String Server Returns the server part of the path. Declaration public string Server { get; } Property Value Type Description String Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() Parse(String) Parses a GitHub repository path. Declaration public static RemoteRepoPath Parse(string path) Parameters Type Name Description String path The path, like: [SERVER/]OWNER/REPO Returns Type Description RemoteRepoPath The parsed RemoteRepoPath . Remarks note github.com will be assumed when no server is specified. Exceptions Type Condition FormatException Thrown when the input is invalid. ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators Equality(RemoteRepoPath, RemoteRepoPath) Equality operator. Declaration public static bool operator ==(RemoteRepoPath v1, RemoteRepoPath v2) Parameters Type Name Description RemoteRepoPath v1 Specifies the first value. RemoteRepoPath v2 Specifies the second value. Returns Type Description Boolean true when the valuea are the same. Inequality(RemoteRepoPath, RemoteRepoPath) Inequality operator. Declaration public static bool operator !=(RemoteRepoPath v1, RemoteRepoPath v2) Parameters Type Name Description RemoteRepoPath v1 Specifies the first value. RemoteRepoPath v2 Specifies the second value. Returns Type Description Boolean true when the valuea are different."
  },
  "neonsdk/api/Neon.GitHub.RemoteRepoReleaseApi.html": {
    "href": "neonsdk/api/Neon.GitHub.RemoteRepoReleaseApi.html",
    "title": "Class RemoteRepoReleaseApi | NeonSDK documentation",
    "keywords": "Class RemoteRepoReleaseApi Implements the friendly GitHub repository release related APIs. Inheritance Object RemoteRepoReleaseApi Namespace : Neon.GitHub Assembly : Neon.GitHub.dll Syntax public class RemoteRepoReleaseApi Methods AddAssetAsync(Release, Stream, String, String) Uploads an asset stream to a GitHub release. Any existing asset with same name will be replaced. note This only works for unpublished releases where Draft=true . Declaration public async Task<ReleaseAsset> AddAssetAsync(Release release, Stream stream, string assetName, string contentType = \"application/octet-stream\") Parameters Type Name Description Octokit.Release release The target release. Stream stream The asset source stream. String assetName Specifies the file name to assign to the asset. String contentType Optionally specifies the asset's Content-Type . This defaults to: application/octet-stream Returns Type Description Task < Octokit.ReleaseAsset > The new Octokit.ReleaseAsset . Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. AddAssetAsync(Release, String, String, String) Uploads an asset file to a GitHub release. Any existing asset with same name will be replaced. note This only works for unpublished releases where Draft=true . Declaration public async Task<ReleaseAsset> AddAssetAsync(Release release, string assetPath, string assetName = null, string contentType = \"application/octet-stream\") Parameters Type Name Description Octokit.Release release The target release. String assetPath Path to the source asset file. String assetName Optionally specifies the file name to assign to the asset. This defaults to the file name in assetPath . String contentType Optionally specifies the asset's Content-Type . This defaults to: application/octet-stream Returns Type Description Task < Octokit.ReleaseAsset > The new Octokit.ReleaseAsset . Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. NotSupportedException Thrown when the releas has already been published. AddMultipartAssetAsync(Release, String, String, String, String, Boolean, Int64) Uploads a multi-part download to a release as an asset and then publishes the release. Declaration public async Task<DownloadManifest> AddMultipartAssetAsync(Release release, string sourcePath, string version, string name = null, string filename = null, bool noMd5File = false, long maxPartSize = 78643200L) Parameters Type Name Description Octokit.Release release The target release. String sourcePath Path to the file being uploaded. String version The download version. String name Optionally overrides the download file name specified by sourcePath to initialize Name . String filename Optionally overrides the download file name specified by sourcePath to initialize Filename . Boolean noMd5File This method creates a file named [ sourcePath .md5] with the MD5 hash for the entire uploaded file by default. You may override this behavior by passing noMd5File = true . Int64 maxPartSize Optionally overrides the maximum part size (defaults to 75 MiB). Returns Type Description Task < DownloadManifest > The DownloadManifest . Remarks The release passed must be unpublished and you may upload other assets before calling this. note Take care that any assets already published have names that won't conflict with the asset part names, which will be formatted like: part-## Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. CreateAsync(String, String, String, Boolean, Boolean) Creates a GitHub release. Declaration public async Task<Release> CreateAsync(string tagName, string releaseName = null, string body = null, bool draft = false, bool prerelease = false) Parameters Type Name Description String tagName Specifies the release name. String releaseName Optionally specifies the release name (defaults to tagName ). String body Optionally specifies the markdown formatted release notes. Boolean draft Optionally indicates that the release won't be published immediately. Boolean prerelease Optionally indicates that the release is not production ready. Returns Type Description Task < Octokit.Release > The new release. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. DownloadZipballAsync(String, Stream) Returns the zipped source code (Zipball) for a published release. note The repository files in the Zipball are are persisted to a root folder named like REPONAME-COMMIT where REPONAME is the name of the GitHub repository and COMMIT is the latest commit for the repo. Declaration public async Task DownloadZipballAsync(string releaseName, Stream output) Parameters Type Name Description String releaseName Specifies the release name. Stream output Specifies the stream where the Zipball will be written. Returns Type Description Task The tracking Task . Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. InvalidOperationException Thrown if the release does not exist or it has not been published. FindAsync(String) Searches for a specific GitHub origin repository release. Declaration public async Task<Release> FindAsync(string releaseName) Parameters Type Name Description String releaseName Specifies the origin repository release name. Returns Type Description Task < Octokit.Release > The requested Octokit.Release or null when it doesn't exist. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. GetAllAsync() Returns all releases from the GitHub origin repository. Declaration public async Task<IReadOnlyList<Release>> GetAllAsync() Returns Type Description Task < IReadOnlyList < Octokit.Release >> The list of releases. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. GetAssetUri(Release, ReleaseAsset) Returns the URI that can be used to download a GitHub release asset. note This works only for published releases. Declaration public string GetAssetUri(Release release, ReleaseAsset asset) Parameters Type Name Description Octokit.Release release The target release. Octokit.ReleaseAsset asset The target asset. Returns Type Description String The asset URI. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. InvalidOperationException Thrown when the asset passed doesn't exist in the release. GetAsync(String) Returns a specific GitHub origin repository release. Declaration public async Task<Release> GetAsync(string releaseName) Parameters Type Name Description String releaseName Specifies the origin repository release name. Returns Type Description Task < Octokit.Release > The requested Octokit.Release . Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. Octokit.NotFoundException Thrown when the release does not exist. GetZipballUri(String) Returns the URI for the zipped source code (Zipball) for a published release. Declaration public async Task<string> GetZipballUri(string releaseName) Parameters Type Name Description String releaseName Specifies the release name. Returns Type Description Task < String > The zipball URI. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. InvalidOperationException Thrown if the release does not exist or it has not been published. PublishAsync(String) Publishes a release. Declaration public async Task<Release> PublishAsync(string releaseName) Parameters Type Name Description String releaseName Specifies the release name. Returns Type Description Task < Octokit.Release > The published release. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. InvalidOperationException Thrown if the release doesn't exist or when it's already published. RefreshAsync(Release) Returns the latest version of a release. Declaration public async Task<Release> RefreshAsync(Release release) Parameters Type Name Description Octokit.Release release The release being refreshed. Returns Type Description Task < Octokit.Release > The updated release. Exceptions Type Condition InvalidOperationException Thrown when the relase no longer exists. RemoveAsync(String) Removes an origin release, if it exists. Declaration public async Task<bool> RemoveAsync(string releaseName) Parameters Type Name Description String releaseName Specifies the release name. Returns Type Description Task < Boolean > true when the release existed and was removed, false otherwise. UpdateAsync(Release, ReleaseUpdate) Updates an existing GitHub release. Declaration public async Task<Release> UpdateAsync(Release release, ReleaseUpdate releaseUpdate) Parameters Type Name Description Octokit.Release release Specifies the release being changed. Octokit.ReleaseUpdate releaseUpdate Specifies the release revisions. Returns Type Description Task < Octokit.Release > The updated release. Remarks To update a release, you'll first need to: Create a new release or get and existing one. Obtain a Octokit.ReleaseUpdate by calling Octokit.Release.ToUpdate . Make your changes to the release update. Call UpdateAsync(Release, ReleaseUpdate) , passing the original release along with the update. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed."
  },
  "neonsdk/api/Neon.GitHub.RemoteRepoTagApi.html": {
    "href": "neonsdk/api/Neon.GitHub.RemoteRepoTagApi.html",
    "title": "Class RemoteRepoTagApi | NeonSDK documentation",
    "keywords": "Class RemoteRepoTagApi Implements friendly GitHub repository tag related APIs. Inheritance Object RemoteRepoTagApi Namespace : Neon.GitHub Assembly : Neon.GitHub.dll Syntax public class RemoteRepoTagApi Methods FindAsync(String) Searches for a specific GitHub origin repository tag. Declaration public async Task<RepositoryTag> FindAsync(string tagName) Parameters Type Name Description String tagName Specifies the origin repository tag name. Returns Type Description Task < Octokit.RepositoryTag > The requested Octokit.RepositoryTag or null when the tag doesn't exist. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. GetAllAsync() Returns all tags from the GitHub origin repository. Declaration public async Task<IReadOnlyList<RepositoryTag>> GetAllAsync() Returns Type Description Task < IReadOnlyList < Octokit.RepositoryTag >> The list of tags. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed. RemoveAsync(String) Removes an origin repository tag, if it exists. Declaration public async Task<bool> RemoveAsync(string tagName) Parameters Type Name Description String tagName Specifies the origin repository tag name. Returns Type Description Task < Boolean > true if the tag existed and was removed, false otherwise. Exceptions Type Condition ObjectDisposedException Thrown then the GitHubRepo has been disposed."
  },
  "neonsdk/api/Neon.html": {
    "href": "neonsdk/api/Neon.html",
    "title": "Namespace Neon | NeonSDK documentation",
    "keywords": "Namespace Neon Classes Build Neon build constants."
  },
  "neonsdk/api/Neon.HyperV.html": {
    "href": "neonsdk/api/Neon.HyperV.html",
    "title": "Namespace Neon.HyperV | NeonSDK documentation",
    "keywords": "Namespace Neon.HyperV Classes HyperVClient Abstracts management of local Hyper-V virtual machines and components on Windows via PowerShell. note This class requires elevated administrative rights. HyperVException Thrown by HyperVClient when an error is detected. VirtualDrive Specifies virtual drive creation parameters. VirtualIPAddress Describes a virtual Hyper-V IP address. VirtualMachine Describes the state of a Hyper-V virtual machine. VirtualNat Describes a virtual NAT. VirtualNetworkAdapter Describes a Hyper-V virtual network adapter attached to a virtual machine. VirtualSwitch Describes the a Hyper-V virtual network switch. Enums VirtualMachineState Enumerates the known Hyper-V virtual machine states. VirtualSwitchType Enumerates the known Hyper-V virtual machine states."
  },
  "neonsdk/api/Neon.HyperV.HyperVClient.html": {
    "href": "neonsdk/api/Neon.HyperV.HyperVClient.html",
    "title": "Class HyperVClient | NeonSDK documentation",
    "keywords": "Class HyperVClient Abstracts management of local Hyper-V virtual machines and components on Windows via PowerShell. note This class requires elevated administrative rights. Inheritance Object HyperVClient Namespace : Neon.HyperV Assembly : Neon.HyperV.dll Syntax public class HyperVClient : IDisposable Constructors HyperVClient() Default constructor to be used to manage Hyper-V objects on the local Windows machine. Declaration public HyperVClient() Properties DefaultDriveFolder Returns the path to the user's default Hyper-V virtual drive folder. Declaration public static string DefaultDriveFolder { get; } Property Value Type Description String IsNestedVirtualization Determines whether the current machine is already running as a Hyper-V virtual machine and that any Hyper-V VMs deployed on this machine can be considered to be nested. Declaration public bool IsNestedVirtualization { get; } Property Value Type Description Boolean Remarks We use the presence of this registry value to detect VM nesting: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Virtual Machine\\Auto\\OSName Methods AddVm(String, String, Int32, String, String, Boolean, String, String, IEnumerable<VirtualDrive>) Creates a virtual machine. Declaration public void AddVm(string machineName, string memorySize = \"2GiB\", int processorCount = 4, string driveSize = null, string drivePath = null, bool checkpointDrives = false, string templateDrivePath = null, string switchName = null, IEnumerable<VirtualDrive> extraDrives = null) Parameters Type Name Description String machineName The machine name. String memorySize A string specifying the memory size. This can be a long byte count or a byte count or a number with units like 512MiB , 0.5GiB , 2GiB , or 1TiB . This defaults to 2GiB . Int32 processorCount The number of virutal processors to assign to the machine. This defaults to 4 . String driveSize A string specifying the primary disk size. This can be a long byte count or a byte count or a number with units like 512MB , 0.5GiB , 2GiB , or 1TiB . Pass null to leave the disk alone. This defaults to null . String drivePath Optionally specifies the path where the virtual hard drive will be located. Pass null or empty to default to MACHINE-NAME.vhdx located in the default Hyper-V virtual machine drive folder. Boolean checkpointDrives Optionally enables drive checkpoints. This defaults to false . String templateDrivePath If this is specified and drivePath is not null then the hard drive template at templateDrivePath will be copied to drivePath before creating the machine. String switchName Optional name of the virtual switch. IEnumerable < VirtualDrive > extraDrives Optionally specifies any additional virtual drives to be created and then attached to the new virtual machine. Remarks note The Path property of extraDrives may be passed as null or empty. In this case, the drive name will default to being located in the standard Hyper-V virtual drivers folder and will be named MACHINE-NAME-#.vhdx , where # is the one-based index of the drive in the enumeration. Exceptions Type Condition HyperVException Thrown for errors. AddVmDrive(String, VirtualDrive) Creates a new virtual drive and adds it to a virtual machine. Declaration public void AddVmDrive(string machineName, VirtualDrive drive) Parameters Type Name Description String machineName The target virtual machine name. VirtualDrive drive The new drive information. Exceptions Type Condition HyperVException Thrown for errors. CompactDrive(String) Compacts a dynamic VHD or VHDX virtual disk file. note The disk may be mounted to a VM but the VM cannot be running. Declaration public void CompactDrive(string drivePath) Parameters Type Name Description String drivePath Path to the virtual drive file. Exceptions Type Condition HyperVException Thrown for errors. Dispose() Releases all resources associated with the instance. Declaration public void Dispose() Dispose(Boolean) Releases all associated resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. EjectVmDvd(String) Ejects any DVD/CD that's currently inserted into a virtual machine. Declaration public void EjectVmDvd(string machineName) Parameters Type Name Description String machineName The machine name. Exceptions Type Condition HyperVException Thrown for errors. GetIPAddress(String) Returns information about a virtual IP address. Declaration public VirtualIPAddress GetIPAddress(string address) Parameters Type Name Description String address The desired IP address. Returns Type Description VirtualIPAddress The VirtualIPAddress or null when it doesn't exist. Exceptions Type Condition HyperVException Thrown for errors. GetNatByName(String) Looks for a virtual NAT by name. Declaration public VirtualNat GetNatByName(string name) Parameters Type Name Description String name The desired NAT name. Returns Type Description VirtualNat The VirtualNat or null if the NAT doesn't exist. Exceptions Type Condition HyperVException Thrown for errors. GetNatBySubnet(String) Looks for a virtual NAT by subnet. Declaration public VirtualNat GetNatBySubnet(string subnet) Parameters Type Name Description String subnet The desired NAT subnet. Returns Type Description VirtualNat The VirtualNat or null if the NAT doesn't exist. Exceptions Type Condition HyperVException Thrown for errors. GetSwitch(String) Returns information for a Hyper-V switch by name. Declaration public VirtualSwitch GetSwitch(string switchName) Parameters Type Name Description String switchName The switch name. Returns Type Description VirtualSwitch The VirtualSwitch when present or null . Exceptions Type Condition HyperVException Thrown for errors. GetVm(String) Gets the current status for a named virtual machine. Declaration public VirtualMachine GetVm(string machineName) Parameters Type Name Description String machineName The machine name. Returns Type Description VirtualMachine The VirtualMachine or null when the virtual machine doesn't exist. Exceptions Type Condition HyperVException Thrown for errors. GetVmDrives(String) Returns host file system paths to any virtual drives attached to the named virtual machine. Declaration public List<string> GetVmDrives(string machineName) Parameters Type Name Description String machineName The machine name. Returns Type Description List < String > The list of fully qualified virtual drive file paths. Exceptions Type Condition HyperVException Thrown for errors. GetVmNetworkAdapters(String, Boolean) Returns the virtual network adapters attached to the named virtual machine. Declaration public List<VirtualNetworkAdapter> GetVmNetworkAdapters(string machineName, bool waitForAddresses = false) Parameters Type Name Description String machineName The machine name. Boolean waitForAddresses Optionally wait until at least one adapter has been able to acquire at least one IPv4 address. Returns Type Description List < VirtualNetworkAdapter > The list of network adapters. Exceptions Type Condition HyperVException Thrown for errors. InsertVmDvd(String, String) Inserts an ISO file as the DVD/CD for a virtual machine, ejecting any existing disc. Declaration public void InsertVmDvd(string machineName, string isoPath) Parameters Type Name Description String machineName The machine name. String isoPath Path to the ISO file. Exceptions Type Condition HyperVException Thrown for errors. ListIPAddresses() Lists the virtual IPv4 addresses. note Only IPv4 addresses are returned. IPv6 and any other address types will be ignored. Declaration public List<VirtualIPAddress> ListIPAddresses() Returns Type Description List < VirtualIPAddress > A list of VirtualIPAddress . Exceptions Type Condition HyperVException Thrown for errors. ListNats() Lists the virtual NATs. Declaration public List<VirtualNat> ListNats() Returns Type Description List < VirtualNat > A list of VirtualNat . Exceptions Type Condition HyperVException Thrown for errors. ListSwitches() Lists any virtual network switches. Declaration public List<VirtualSwitch> ListSwitches() Returns Type Description List < VirtualSwitch > The list of switches. Exceptions Type Condition HyperVException Thrown for errors. ListVms() Lists the virtual machines. Declaration public IEnumerable<VirtualMachine> ListVms() Returns Type Description IEnumerable < VirtualMachine > IEnumerable<T> . Exceptions Type Condition HyperVException Thrown for errors. NewExternalSwitch(String, IPAddress) Adds a virtual Hyper-V switch that has external connectivity. Declaration public void NewExternalSwitch(string switchName, IPAddress gateway) Parameters Type Name Description String switchName The new switch name. IPAddress gateway Address of the LAN gateway, used to identify the connected network interface. Exceptions Type Condition HyperVException Thrown for errors. NewInternalSwitch(String, NetworkCidr, Boolean) Adds an internal Hyper-V switch configured for the specified subnet and gateway as well as an optional NAT enabling external connectivity. Declaration public void NewInternalSwitch(string switchName, NetworkCidr subnet, bool addNat = false) Parameters Type Name Description String switchName The new switch name. NetworkCidr subnet Specifies the internal subnet. Boolean addNat Optionally configure a NAT to support external routing. Exceptions Type Condition HyperVException Thrown for errors. RemoveSwitch(String, Boolean) Removes a named virtual switch, it it exists as well as any associated NAT (with the same name). Declaration public void RemoveSwitch(string switchName, bool ignoreMissing = false) Parameters Type Name Description String switchName The target switch name. Boolean ignoreMissing Optionally ignore missing items. Exceptions Type Condition HyperVException Thrown for errors. RemoveVm(String, Boolean) Removes a named virtual machine and all of its drives (by default). Declaration public void RemoveVm(string machineName, bool keepDrives = false) Parameters Type Name Description String machineName The machine name. Boolean keepDrives Optionally retains the VM disk files. Exceptions Type Condition HyperVException Thrown for errors. SaveVm(String) Persists the state of a running virtual machine and then stops it. This is equivalent to hibernation for a physical machine. Declaration public void SaveVm(string machineName) Parameters Type Name Description String machineName The machine name. Exceptions Type Condition HyperVException Thrown for errors. StartVm(String) Starts the named virtual machine. Declaration public void StartVm(string machineName) Parameters Type Name Description String machineName The machine name. Exceptions Type Condition HyperVException Thrown for errors. StopVm(String, Boolean) Stops the named virtual machine. Declaration public void StopVm(string machineName, bool turnOff = false) Parameters Type Name Description String machineName The machine name. Boolean turnOff Optionally just turns the VM off without performing a graceful shutdown first. note WARNING! This could result in corruption or the the loss of unsaved data. Exceptions Type Condition HyperVException Thrown for errors. VmExists(String) Determines whether a named virtual machine exists. Declaration public bool VmExists(string machineName) Parameters Type Name Description String machineName The machine name. Returns Type Description Boolean true if the machine exists. Exceptions Type Condition HyperVException Thrown for errors."
  },
  "neonsdk/api/Neon.HyperV.HyperVException.html": {
    "href": "neonsdk/api/Neon.HyperV.HyperVException.html",
    "title": "Class HyperVException | NeonSDK documentation",
    "keywords": "Class HyperVException Thrown by HyperVClient when an error is detected. Inheritance Object Exception HyperVException Namespace : Neon.HyperV Assembly : Neon.HyperV.dll Syntax public class HyperVException : Exception, ISerializable Constructors HyperVException(String, Exception) Constructor. Declaration public HyperVException(string message, Exception innerException = null) Parameters Type Name Description String message The exception message. Exception innerException Optionally specifies an inner exception. Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.HyperV.VirtualDrive.html": {
    "href": "neonsdk/api/Neon.HyperV.VirtualDrive.html",
    "title": "Class VirtualDrive | NeonSDK documentation",
    "keywords": "Class VirtualDrive Specifies virtual drive creation parameters. Inheritance Object VirtualDrive Namespace : Neon.HyperV Assembly : Neon.HyperV.dll Syntax public class VirtualDrive Properties IsDynamic Indicates whether a dynamic drive will be created as opposed to a pre-allocated fixed drive. This defaults to true . Declaration public bool IsDynamic { get; set; } Property Value Type Description Boolean Path Specifies the path where the drive is located. The drive format is indicated by the file type, either .vhd or .vhdx . Declaration public string Path { get; set; } Property Value Type Description String Size The drive size in bytes. Declaration public decimal Size { get; set; } Property Value Type Description Decimal"
  },
  "neonsdk/api/Neon.HyperV.VirtualIPAddress.html": {
    "href": "neonsdk/api/Neon.HyperV.VirtualIPAddress.html",
    "title": "Class VirtualIPAddress | NeonSDK documentation",
    "keywords": "Class VirtualIPAddress Describes a virtual Hyper-V IP address. Inheritance Object VirtualIPAddress Namespace : Neon.HyperV Assembly : Neon.HyperV.dll Syntax public class VirtualIPAddress Properties Address The associated IP address. Declaration public string Address { get; set; } Property Value Type Description String InterfaceName Identifies the network interface or switch to which this address is connected. Declaration public string InterfaceName { get; set; } Property Value Type Description String Subnet The network subnet. Declaration public NetworkCidr Subnet { get; set; } Property Value Type Description NetworkCidr"
  },
  "neonsdk/api/Neon.HyperV.VirtualMachine.html": {
    "href": "neonsdk/api/Neon.HyperV.VirtualMachine.html",
    "title": "Class VirtualMachine | NeonSDK documentation",
    "keywords": "Class VirtualMachine Describes the state of a Hyper-V virtual machine. Inheritance Object VirtualMachine Namespace : Neon.HyperV Assembly : Neon.HyperV.dll Syntax public class VirtualMachine Properties InterfaceName Identifies the network interface or switch to which the address is assigned (or null). Declaration public string InterfaceName { get; set; } Property Value Type Description String Name The machine name. Declaration public string Name { get; set; } Property Value Type Description String State The current machine state. Declaration public VirtualMachineState State { get; set; } Property Value Type Description VirtualMachineState SwitchName Identifies the virtual switch to which this virtual machine is attached (or null). Declaration public string SwitchName { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.HyperV.VirtualMachineState.html": {
    "href": "neonsdk/api/Neon.HyperV.VirtualMachineState.html",
    "title": "Enum VirtualMachineState | NeonSDK documentation",
    "keywords": "Enum VirtualMachineState Enumerates the known Hyper-V virtual machine states. Namespace : Neon.HyperV Assembly : Neon.HyperV.dll Syntax public enum VirtualMachineState Fields Name Description Off The machine is turned off. Paused The machine is paused. This can happen for Hyper-V instances running on Windows server due to the low available disk space: More Info Running The machine is running. Saved The machine has been saved. This is equivalent to hibernation of a physical machine. Starting The machine is starting. Unknown The current state cannot be determined or is not one of the known states below. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.HyperV.VirtualNat.html": {
    "href": "neonsdk/api/Neon.HyperV.VirtualNat.html",
    "title": "Class VirtualNat | NeonSDK documentation",
    "keywords": "Class VirtualNat Describes a virtual NAT. Inheritance Object VirtualNat Namespace : Neon.HyperV Assembly : Neon.HyperV.dll Syntax public class VirtualNat Properties Name The NAT's name. Declaration public string Name { get; set; } Property Value Type Description String Subnet The NAT source subnet. Declaration public string Subnet { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.HyperV.VirtualNetworkAdapter.html": {
    "href": "neonsdk/api/Neon.HyperV.VirtualNetworkAdapter.html",
    "title": "Class VirtualNetworkAdapter | NeonSDK documentation",
    "keywords": "Class VirtualNetworkAdapter Describes a Hyper-V virtual network adapter attached to a virtual machine. Inheritance Object VirtualNetworkAdapter Namespace : Neon.HyperV Assembly : Neon.HyperV.dll Syntax public class VirtualNetworkAdapter Properties Addresses The IP addresses assigned to the adapter. Declaration public List<IPAddress> Addresses { get; set; } Property Value Type Description List < IPAddress > IsManagementOs true if this adapter is attached to the management operating system. Declaration public bool IsManagementOs { get; set; } Property Value Type Description Boolean MacAddress The adapter's MAC address. Declaration public string MacAddress { get; set; } Property Value Type Description String Name The adapter name. Declaration public string Name { get; set; } Property Value Type Description String Status The adapter status. Declaration public string Status { get; set; } Property Value Type Description String SwitchName The attached switch name. Declaration public string SwitchName { get; set; } Property Value Type Description String VMName The name of the attached virtual machine. Declaration public string VMName { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.HyperV.VirtualSwitch.html": {
    "href": "neonsdk/api/Neon.HyperV.VirtualSwitch.html",
    "title": "Class VirtualSwitch | NeonSDK documentation",
    "keywords": "Class VirtualSwitch Describes the a Hyper-V virtual network switch. Inheritance Object VirtualSwitch Namespace : Neon.HyperV Assembly : Neon.HyperV.dll Syntax public class VirtualSwitch Properties Name The switch name. Declaration public string Name { get; set; } Property Value Type Description String Type The switch type. Declaration public VirtualSwitchType Type { get; set; } Property Value Type Description VirtualSwitchType"
  },
  "neonsdk/api/Neon.HyperV.VirtualSwitchType.html": {
    "href": "neonsdk/api/Neon.HyperV.VirtualSwitchType.html",
    "title": "Enum VirtualSwitchType | NeonSDK documentation",
    "keywords": "Enum VirtualSwitchType Enumerates the known Hyper-V virtual machine states. Namespace : Neon.HyperV Assembly : Neon.HyperV.dll Syntax public enum VirtualSwitchType Fields Name Description External The switch can communicate with the host operating system as well as any networks the host can reach. Internal The switch can communicate with the host operating system as well as any hosted virtual machines connected to an External or Internal switch. The switch cannot communicate with anything outside of the host until it's assigned an IP address and NAT is enabled. Private The switch can communicate only with virtual machines using the same switch. Unknown The current switch type cannot be determined or is not one of the known states below. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.IO.BlockStream.html": {
    "href": "neonsdk/api/Neon.IO.BlockStream.html",
    "title": "Class BlockStream | NeonSDK documentation",
    "keywords": "Class BlockStream Implements an in-memory stream based on a collection of Block buffers rather than a single byte buffer. This is more efficient than MemoryStream for large streams and also avoids allocations in the large object heap. Inheritance Object MarshalByRefObject Stream BlockStream Namespace : Neon.IO Assembly : Neon.Common.dll Syntax public sealed class BlockStream : Stream, IDisposable Remarks note Buffer array streams cannot be greater than or equal to 2GiB in length. Constructors BlockStream() Constructs a zero length stream with default block size. Declaration public BlockStream() BlockStream(Block[]) Constructs a stream from the blocks passed. Declaration public BlockStream(params Block[] blocks) Parameters Type Name Description Block [] blocks The blocks. Remarks The stream size will be set to the size of the blocks. BlockStream(BlockArray) Constructs a stream from the blocks passed. Declaration public BlockStream(BlockArray blocks) Parameters Type Name Description BlockArray blocks The blocks. Remarks The stream size will be set to the size of the blocks. BlockStream(Byte[]) Constructs a stream from a byte array. Declaration public BlockStream(byte[] buffer) Parameters Type Name Description Byte [] buffer The byte array. BlockStream(Int32) Constructs a stream of the specified size using the default block size. Declaration public BlockStream(int size) Parameters Type Name Description Int32 size The stream size in bytes. BlockStream(Int32, Int32) Constructs a stream of the specified size using the specified block size. Declaration public BlockStream(int size, int blockSize) Parameters Type Name Description Int32 size The stream size in bytes. Int32 blockSize The block size in bytes. BlockStream(Int32, Int32, Int32) Constructs a stream of the specified size using the specified block size and offset. Declaration public BlockStream(int size, int blockSize, int blockOffset) Parameters Type Name Description Int32 size The stream size in bytes. Int32 blockSize The block size in bytes. Int32 blockOffset Bytes to be reserved at the beginning of each new block. Remarks See BlockArray for more information on the value and use of the blockOffset prarmeter. Properties CanRead Returns true if the stream supports read operations. Declaration public override bool CanRead { get; } Property Value Type Description Boolean Overrides Stream.CanRead CanSeek Returns true if the stream supports seek operations. Declaration public override bool CanSeek { get; } Property Value Type Description Boolean Overrides Stream.CanSeek CanWrite Returns true if the stream supports write operations. Declaration public override bool CanWrite { get; } Property Value Type Description Boolean Overrides Stream.CanWrite Length Returns the current size of the stream in bytes. Declaration public override long Length { get; } Property Value Type Description Int64 Overrides Stream.Length Position The current stream position. Declaration public override long Position { get; set; } Property Value Type Description Int64 Overrides Stream.Position Remarks note It is valid to set a stream position beyond the current end of the stream. The stream will be extended to this position. The contents of the extended portion will be undefined. RawBlockArray Returns the underlying block array without modification. Declaration public BlockArray RawBlockArray { get; } Property Value Type Description BlockArray Methods Append(Block) Appends a block to the end of the underlying BlockArray. Declaration public void Append(Block block) Parameters Type Name Description Block block The block to append. Remarks The underyling block array's SetExactSize() method will be called before appending the block. The stream position will be set to the end of the stream before the method returns. This method is a performance improvement over writing the a buffer to the stream via one of the write methods. Append(BlockArray) Appends a block array to the end of the underlying BlockArray. Declaration public void Append(BlockArray blocks) Parameters Type Name Description BlockArray blocks The array to append. Remarks The underyling block array's SetExactSize() method will be called before appending the block. The stream position will be set to the end of the stream before the method returns. This method is a performance improvement over writing the a buffer to the stream via one of the write methods. Flush() Flushes any stream buffers. Declaration public override void Flush() Overrides Stream.Flush() Remarks This is a NOP for this implementation. Read(Byte[], Int32, Int32) Reads bytes from the current stream position, advancing the position past the data read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer The destination buffer. Int32 offset Offset where the read data is to be copied. Int32 count Number of bytes to read. Returns Type Description Int32 The number of bytes actually read. Overrides Stream.Read(Byte[], Int32, Int32) ReadAsync(Byte[], Int32, Int32, CancellationToken) Asynchronously reads from the stream. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description Byte [] buffer The destination buffer. Int32 offset Offset where the read data is to be copied. Int32 count Number of bytes to read. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < Int32 > The number of bytes actually read. Overrides Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken) ReadBlocks(Int32) Returns requested bytes from the underlying block array as as a new block array. Declaration public BlockArray ReadBlocks(int cb) Parameters Type Name Description Int32 cb The nunber of bytes to read. Returns Type Description BlockArray A new block array referencing the requested bytes in the same underlying buffers as managed by then stream. Remarks This provides a high performance way for code that knows how to handle block arrays to extract a portion of a stream. The array returned will be truncated to the length of the underlying stream. The stream position will be advanced past the requested bytes. ReadByte() Reads a byte from the current stream position, advancing the position by 1. Declaration public override int ReadByte() Returns Type Description Int32 The byte read or -1 if the end of the stream has been reached. Overrides Stream.ReadByte() Seek(Int64, SeekOrigin) Moves the current stream position relative to the specified origin. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset The positional offset. SeekOrigin origin Specifies the seek origin. Returns Type Description Int64 The stream position after the seek. Overrides Stream.Seek(Int64, SeekOrigin) Remarks It is valid to seek past the current stream length. In this case, the stream will be extended with the contents of the extended portion being undefined. SetLength(Int64) Sets the length of the stream. Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value The new length in bytes. Overrides Stream.SetLength(Int64) Remarks The stream will be truncated if the new length is less than the current length. The stream will be extended if the new length is greater than the current length. In this case, the contents of the extended portion will be undefined. SetLength(Int64, Boolean) Sets the length of the stream. Declaration public void SetLength(long value, bool modifyBlocks) Parameters Type Name Description Int64 value The new length in bytes. Boolean modifyBlocks true to modify the underlying block array if necessary. Remarks The modifyBlocks parameter specifies whether the underlying block array will be truncated or extended to the length specified. ToArray() Assembles a contiguous a byte array from the underlying buffer array. Declaration public byte[] ToArray() Returns Type Description Byte [] The assembled byte array. ToBlocks(Boolean) Returns the underlying buffer array. Declaration public BlockArray ToBlocks(bool truncate) Parameters Type Name Description Boolean truncate true if the method will truncate the underlying BlockArray to the actual length of the stream before returning the array. Returns Type Description BlockArray The BlockArray . Write(Byte[], Int32, Int32) Writes bytes to the stream at the current position, advancing the position past the data written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer The source buffer. Int32 offset Offset of the first byte to write. Int32 count Number of bytes to read. Overrides Stream.Write(Byte[], Int32, Int32) WriteAsync(Byte[], Int32, Int32, CancellationToken) Asynchronously writes bytes to the stream at the current position, advancing the position past the data written. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description Byte [] buffer The source buffer. Int32 offset Offset of the first byte to write. Int32 count Number of bytes to read. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The tracking Task . Overrides Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken) WriteByte(Byte) Writes a byte to the current stream position, advancing the position by 1. Declaration public override void WriteByte(byte value) Parameters Type Name Description Byte value The byte to write. Overrides Stream.WriteByte(Byte) Extension Methods IOExtensions.Write(Stream, Byte[]) IOExtensions.WriteAsync(Stream, Byte[]) IOExtensions.ReadBytes(Stream, Int32) IOExtensions.ReadToEnd(Stream) IOExtensions.ReadToEndAsync(Stream) IOExtensions.DeflateTo(Stream, Stream) IOExtensions.InflateTo(Stream, Stream) IOExtensions.GzipTo(Stream, Stream) IOExtensions.GunzipTo(Stream, Stream)"
  },
  "neonsdk/api/Neon.IO.FixedLengthStream.html": {
    "href": "neonsdk/api/Neon.IO.FixedLengthStream.html",
    "title": "Class FixedLengthStream | NeonSDK documentation",
    "keywords": "Class FixedLengthStream Implements a specialized stream that wraps another stream that does not support seeking such that the Length property will return a specific value. This is useful for situations such as a web request handler that needs to process the body stream which does not implement Length but where this length is required. To use, simply construct an instance, passing the source stream and its length (often obtained via an HTTP Content-Length header. note This stream is really intended just for reading data and does not support: writing seeking setting the length Inheritance Object MarshalByRefObject Stream FixedLengthStream Namespace : Neon.IO Assembly : Neon.Common.dll Syntax public class FixedLengthStream : Stream, IDisposable Constructors FixedLengthStream(Stream, Int64) Constructor. Declaration public FixedLengthStream(Stream stream, long length) Parameters Type Name Description Stream stream The source stream. Int64 length The stream length. Properties CanRead Declaration public override bool CanRead { get; } Property Value Type Description Boolean Overrides Stream.CanRead CanSeek Declaration public override bool CanSeek { get; } Property Value Type Description Boolean Overrides Stream.CanSeek CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description Boolean Overrides Stream.CanWrite Length Returns the fixed stream length passed to the constructor. Declaration public override long Length { get; } Property Value Type Description Int64 Overrides Stream.Length Position Declaration public override long Position { get; set; } Property Value Type Description Int64 Overrides Stream.Position Methods Flush() Declaration public override void Flush() Overrides Stream.Flush() Read(Byte[], Int32, Int32) Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count Returns Type Description Int32 Overrides Stream.Read(Byte[], Int32, Int32) Seek(Int64, SeekOrigin) Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset SeekOrigin origin Returns Type Description Int64 Overrides Stream.Seek(Int64, SeekOrigin) SetLength(Int64) Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value Overrides Stream.SetLength(Int64) Write(Byte[], Int32, Int32) Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count Overrides Stream.Write(Byte[], Int32, Int32) Extension Methods IOExtensions.Write(Stream, Byte[]) IOExtensions.WriteAsync(Stream, Byte[]) IOExtensions.ReadBytes(Stream, Int32) IOExtensions.ReadToEnd(Stream) IOExtensions.ReadToEndAsync(Stream) IOExtensions.DeflateTo(Stream, Stream) IOExtensions.InflateTo(Stream, Stream) IOExtensions.GzipTo(Stream, Stream) IOExtensions.GunzipTo(Stream, Stream)"
  },
  "neonsdk/api/Neon.IO.html": {
    "href": "neonsdk/api/Neon.IO.html",
    "title": "Namespace Neon.IO | NeonSDK documentation",
    "keywords": "Namespace Neon.IO Classes BlockStream Implements an in-memory stream based on a collection of Block buffers rather than a single byte buffer. This is more efficient than MemoryStream for large streams and also avoids allocations in the large object heap. FixedLengthStream Implements a specialized stream that wraps another stream that does not support seeking such that the Length property will return a specific value. This is useful for situations such as a web request handler that needs to process the body stream which does not implement Length but where this length is required. To use, simply construct an instance, passing the source stream and its length (often obtained via an HTTP Content-Length header. note This stream is really intended just for reading data and does not support: writing seeking setting the length LinuxPath Implements functionality much like Path , except for this class is oriented towards handling Linux-style paths on a remote (possibly a Windows) machine. PreprocessReader Preprocesses text returned by a TextReader by removing comments, expanding variables, and implementing simple conditionals. RelayStream Implements a stream that passes operations to another stream. This is mainly useful for controlling whether Dispose() and Dispose(Boolean) actually disposes the underlying stream or not when the stream is referenced by another class that always disposes the stream. StaticDirectoryBase Helper class that can be used by IStaticDirectory implementations. note Implementations derived from this class will use case insensitive file and directory name mapping. StaticFileBase Helper class that can be used by IStaticFile implementations. note Implementations derived from this class will use case insensitive file and directory name mapping. SubStream Implements a Stream that operates on a section of a parent stream. The parent stream must be able to CanSeek . note WARNING: Multi-threading operations simultaniously against the parent and substream is not supported and is likely to result in data corruption. TempFile Generates a globally unique temporary file name and then ensures that the file is removed when the instance is disposed. TempFolder Manages a temporary file system folder to be used for the duration of a unit test. Structs LinuxPermissions Manipulates Linux style file permissions. Interfaces IStaticDirectory Describes a logical file in a static file system. This is used to abstract access to static files read from an assembly's embedded resources or potentially from other sources using Linux style paths. This is currently used to emulate a tree of IStaticDirectory and IStaticFile instances loaded from an assembly's embedded resources via the GetResourceFileSystem(Assembly, String) extension method. note IMPORTANT: Implementations need to be thread-safe. note In general, file and directory name lookup case sensitivity should probably be case insensitive for most purposes but this is an implementation specific detail. IStaticFile Describes a logical file in a static file system. This is used to abstract access to static files read from an assembly's embedded resources or potentially from other sources using Linux style paths. This is currently used to emulate a tree of IStaticDirectory and IStaticFile instances loaded from an assembly's embedded resources via the GetResourceFileSystem(Assembly, String) extension method. note IMPORTANT: Implementations need to be thread-safe. note In general, file and directory name lookup case sensitivity should probably be case insensitive for most purposes but this is an implementation specific detail. Enums LineEnding Enumerates the possible line ending modes."
  },
  "neonsdk/api/Neon.IO.IStaticDirectory.html": {
    "href": "neonsdk/api/Neon.IO.IStaticDirectory.html",
    "title": "Interface IStaticDirectory | NeonSDK documentation",
    "keywords": "Interface IStaticDirectory Describes a logical file in a static file system. This is used to abstract access to static files read from an assembly's embedded resources or potentially from other sources using Linux style paths. This is currently used to emulate a tree of IStaticDirectory and IStaticFile instances loaded from an assembly's embedded resources via the GetResourceFileSystem(Assembly, String) extension method. note IMPORTANT: Implementations need to be thread-safe. note In general, file and directory name lookup case sensitivity should probably be case insensitive for most purposes but this is an implementation specific detail. Namespace : Neon.IO Assembly : Neon.Common.dll Syntax public interface IStaticDirectory Properties Name Returns the directory name. Declaration string Name { get; } Property Value Type Description String Parent Returns a reference to the parent directory or null if this is the root directory for a static file system. Declaration IStaticDirectory Parent { get; } Property Value Type Description IStaticDirectory Path Returns the fully qualified Linux style path for the static directory relative to the static root directory. Declaration string Path { get; } Property Value Type Description String Methods GetDirectories(String, SearchOption) Returns the directories beneath the current directory, optionally matching directories by name as well as optionally searching for directories recursively. Declaration IEnumerable<IStaticDirectory> GetDirectories(string searchPattern = null, SearchOption options = SearchOption.TopDirectoryOnly) Parameters Type Name Description String searchPattern Optionally specifies a directory name pattern using standard file system wildcards like [*] and [?] . This defaults to including all directories. SearchOption options Optionally require a recursive search. This defaults to TopDirectoryOnly . Returns Type Description IEnumerable < IStaticDirectory > The set of matching directories. GetDirectory(String) Gets a directory via a Linux style path. This path can be absolute relative to the root directory or it can be relative to the current directory. note Relative paths including /../ notation to move up a directory or ./ to specify the current directory are not supported. Declaration IStaticDirectory GetDirectory(string path) Parameters Type Name Description String path The file path (absolute or relative). Returns Type Description IStaticDirectory The directory. Exceptions Type Condition FileNotFoundException Thrown if the directory doesn't exist. GetFile(String) Gets a file via a Linux style path. This path can be absolute relative to the root directory or it can be relative to the current directory. note Relative paths including /../ notation to move up a directory or ./ to specify the current directory are not supported. Declaration IStaticFile GetFile(string path) Parameters Type Name Description String path The file path (absolute or relative). Returns Type Description IStaticFile The file. Exceptions Type Condition FileNotFoundException Thrown if the file doesn't exist. GetFiles(String, SearchOption) Returns the files beneath the current directory, optionally matching files by name as well as optionally searching recursively searching subdirectories.. Declaration IEnumerable<IStaticFile> GetFiles(string searchPattern = null, SearchOption options = SearchOption.TopDirectoryOnly) Parameters Type Name Description String searchPattern Optionally specifies a file name pattern using standard file system wildcards like [*] and [?] . This defaults to including all files. SearchOption options Optionally requires a recursive search. This defaults to TopDirectoryOnly . Returns Type Description IEnumerable < IStaticFile > The set of matching files. Extension Methods IStaticDirectoryExtensions.Zip(IStaticDirectory, String, String, SearchOption, StaticZipOptions) IStaticDirectoryExtensions.Zip(IStaticDirectory, Stream, String, SearchOption, StaticZipOptions)"
  },
  "neonsdk/api/Neon.IO.IStaticFile.html": {
    "href": "neonsdk/api/Neon.IO.IStaticFile.html",
    "title": "Interface IStaticFile | NeonSDK documentation",
    "keywords": "Interface IStaticFile Describes a logical file in a static file system. This is used to abstract access to static files read from an assembly's embedded resources or potentially from other sources using Linux style paths. This is currently used to emulate a tree of IStaticDirectory and IStaticFile instances loaded from an assembly's embedded resources via the GetResourceFileSystem(Assembly, String) extension method. note IMPORTANT: Implementations need to be thread-safe. note In general, file and directory name lookup case sensitivity should probably be case insensitive for most purposes but this is an implementation specific detail. Namespace : Neon.IO Assembly : Neon.Common.dll Syntax public interface IStaticFile Properties Name Returns the file name. Declaration string Name { get; } Property Value Type Description String Path Returns the fully qualified Linux style path for the static file relative to the static root directory. Declaration string Path { get; } Property Value Type Description String Methods OpenReader(Encoding) Opens a text reader for the file contents. note You are responsible disposing the reader returned when you're done with it. Declaration TextReader OpenReader(Encoding encoding = null) Parameters Type Name Description Encoding encoding Optionally specifies the text encoding. This defaults to UTF-8 , Returns Type Description TextReader The TextReader . OpenReaderAsync(Encoding) Asychronously opens a text reader for the file contents. note You are responsible disposing the reader returned when you're done with it. Declaration Task<TextReader> OpenReaderAsync(Encoding encoding = null) Parameters Type Name Description Encoding encoding Optionally specifies the text encoding. This defaults to UTF-8 , Returns Type Description Task < TextReader > The TextReader . OpenStream() Opens a stream on the file contents. note You are responsible disposing the reader returned when you're done with it. Declaration Stream OpenStream() Returns Type Description Stream The Stream . OpenStreamAsync() Asychronously opens a stream on the file contents. note You are responsible disposing the reader returned when you're done with it. Declaration Task<Stream> OpenStreamAsync() Returns Type Description Task < Stream > The Stream . ReadAllBytes() Reads the file contents as bytes. Declaration byte[] ReadAllBytes() Returns Type Description Byte [] The file contents. ReadAllBytesAsync() Asynchronously reads the file contents as bytes. Declaration Task<byte[]> ReadAllBytesAsync() Returns Type Description Task < Byte []> The file contents. ReadAllText(Encoding) Reads the file contents as a UTF-8 encoded string. Declaration string ReadAllText(Encoding encoding = null) Parameters Type Name Description Encoding encoding Optionally specifies the text encoding. This defaults to UTF-8 , Returns Type Description String The file contents. ReadAllTextAsync(Encoding) Asynchronously reads the file contents as a UTF-8 encoded string. Declaration Task<string> ReadAllTextAsync(Encoding encoding = null) Parameters Type Name Description Encoding encoding Optionally specifies the text encoding. This defaults to UTF-8 , Returns Type Description Task < String > The file contents."
  },
  "neonsdk/api/Neon.IO.LineEnding.html": {
    "href": "neonsdk/api/Neon.IO.LineEnding.html",
    "title": "Enum LineEnding | NeonSDK documentation",
    "keywords": "Enum LineEnding Enumerates the possible line ending modes. Namespace : Neon.IO Assembly : Neon.Common.dll Syntax public enum LineEnding Fields Name Description CRLF Windows style line endings using carriage return and line feed characters. LF Unix/Linux style line endings using just a line feed. Platform Use platform specific line endings. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.IO.LinuxPath.html": {
    "href": "neonsdk/api/Neon.IO.LinuxPath.html",
    "title": "Class LinuxPath | NeonSDK documentation",
    "keywords": "Class LinuxPath Implements functionality much like Path , except for this class is oriented towards handling Linux-style paths on a remote (possibly a Windows) machine. Inheritance Object LinuxPath Namespace : Neon.IO Assembly : Neon.Common.dll Syntax public static class LinuxPath Methods ChangeExtension(String, String) Changes the file extension. Declaration public static string ChangeExtension(string path, string extension) Parameters Type Name Description String path The file path. String extension The new extension. Returns Type Description String The modified path. Combine(String[]) Combines an array of strings into a path. Declaration public static string Combine(params string[] paths) Parameters Type Name Description String [] paths The paths. Returns Type Description String The combined paths. GetDirectoryName(String) Extracts the directory portion of a path. Declaration public static string GetDirectoryName(string path) Parameters Type Name Description String path The path. Returns Type Description String The directory portion. GetExtension(String) Returns the file extension from a path. Declaration public static string GetExtension(string path) Parameters Type Name Description String path The path. Returns Type Description String The file extension. GetFileName(String) Returns the file name and extension from a path. Declaration public static string GetFileName(string path) Parameters Type Name Description String path The path. Returns Type Description String The file name and extension. GetFileNameWithoutExtension(String) Returns the file name from a path without the extension. Declaration public static string GetFileNameWithoutExtension(string path) Parameters Type Name Description String path The path. Returns Type Description String The file name without the extension. HasExtension(String) Determines whether a path has a file extension. Declaration public static bool HasExtension(string path) Parameters Type Name Description String path The path. Returns Type Description Boolean true if the path has an extension. IsPathRooted(String) Determines whether the path is rooted. Declaration public static bool IsPathRooted(string path) Parameters Type Name Description String path The path. Returns Type Description Boolean true ifc the path is rooted."
  },
  "neonsdk/api/Neon.IO.LinuxPermissions.html": {
    "href": "neonsdk/api/Neon.IO.LinuxPermissions.html",
    "title": "Struct LinuxPermissions | NeonSDK documentation",
    "keywords": "Struct LinuxPermissions Manipulates Linux style file permissions. Namespace : Neon.IO Assembly : Neon.Common.dll Syntax public struct LinuxPermissions Constructors LinuxPermissions(String) Constructs permissions from an octal string. Declaration public LinuxPermissions(string input) Parameters Type Name Description String input The permissions string encoded in their octal form. Properties AllExecute Everyone can execute the file. Declaration public bool AllExecute { readonly get; set; } Property Value Type Description Boolean AllRead Everyone can read the file. Declaration public bool AllRead { readonly get; set; } Property Value Type Description Boolean AllWrite Everyone can modify the file. Declaration public bool AllWrite { readonly get; set; } Property Value Type Description Boolean GroupExecute The group can execute the file. Declaration public bool GroupExecute { readonly get; set; } Property Value Type Description Boolean GroupRead The group can read the file. Declaration public bool GroupRead { readonly get; set; } Property Value Type Description Boolean GroupWrite The group can modify the file. Declaration public bool GroupWrite { readonly get; set; } Property Value Type Description Boolean OwnerExecute The owner can execute the file. Declaration public bool OwnerExecute { readonly get; set; } Property Value Type Description Boolean OwnerRead The owner can read the file. Declaration public bool OwnerRead { readonly get; set; } Property Value Type Description Boolean OwnerWrite The owner can modify the file. Declaration public bool OwnerWrite { readonly get; set; } Property Value Type Description Boolean Methods IsValidDigit(Char) Verifies that the character passed is a valid permissions digit. Declaration [Pure] public static bool IsValidDigit(char digit) Parameters Type Name Description Char digit The permissions digit. Returns Type Description Boolean true if the digit is valid. Set(String, String, Boolean) Sets the Linux file permissions. Declaration public static void Set(string path, string mode, bool recursive = false) Parameters Type Name Description String path Path to the target file or directory. String mode Linux file permissions. Boolean recursive Optionally apply the permissions recursively. ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() TryParse(String, out LinuxPermissions) Attempts to parse permissions from an octal string. Declaration public static bool TryParse(string input, out LinuxPermissions permissions) Parameters Type Name Description String input The input string. LinuxPermissions permissions Returns as the parsed permissions. Returns Type Description Boolean true if valid permissions were parsed."
  },
  "neonsdk/api/Neon.IO.PreprocessReader.html": {
    "href": "neonsdk/api/Neon.IO.PreprocessReader.html",
    "title": "Class PreprocessReader | NeonSDK documentation",
    "keywords": "Class PreprocessReader Preprocesses text returned by a TextReader by removing comments, expanding variables, and implementing simple conditionals. Inheritance Object MarshalByRefObject TextReader PreprocessReader Namespace : Neon.IO Assembly : Neon.Common.dll Syntax public class PreprocessReader : TextReader, IDisposable Remarks note This class only implements ReadLine() , ReadLineAsync() , ReadToEnd() , and ReadToEndAsync() . The other methods will throw a NotImplementedException . The processor removes comment lines from the text returned. A comment line starts with zero or more whitespace characters followed by \" // \". note Comment lines are indicated by a \" // \" prefix by default but this can be modified via ClearCommentMarkers() and AddCommentMarker(String) . The processor implements simple macro definition and conditional statements. These statements are identifying by a line with the pound sign ( # ) as the first non-whitespace character. note The processor statement character defaults to the pound sign ( # ) but can be changed by setting StatementMarker . The following processing statements are supported: #define NAME [=VALUE] Defines a normal variable and setting an optional value. The empty string will be set by default. These variables can be referenced in processing statements or normal text lines as $<name> . Variable names are case sensitive and may include letter, number, dash, period, and underscore characters. By default, defined variables may be referenced like $<name> and environment variables like $<name> . #if EXPRESSION Conditionally includes text up to the next #else or #endif statement. The following expressions are supported: VALUE1 == VALUE2 VALUE1 != VALUE2 defined(NAME) undefined(NAME) The comparisions are performed after any variables are expanded. The values are trimmed on bothe ends and the string comparision is case sensitive. #else This can optionally be used within an #if statement to include lines when the condition is false. #endif This terminates an #if statement. #switch VALUE Provides an easy to conditionally include statements for multiple conditions. The subsequent #case and #default statements up to the next #endswitch statement will be processed. #case VALUE This command causes the lines up to the next #case , #default , or #endswitch to be outputed if the value matches that specified for the parent #switch statement. #default This command causes the lines up to the next #endswitch to be outputed if the value wasn't matched by any of the previous case statements. note #default must appear after all #case statements. #endswitch This command terminates a #switch statement. Normal variables can be defined within the source text itself using the #define command described above and variables may also be added in code using Set(String, String) . These variables can be referenced as $<NAME> . Environment variables can be referenced like $<env:NAME> , secrets like $<secret:NAME , and profile values like: $<profile:NAME . note You may encounter situations where the default ways of referencing variables conflicts with the syntax of the underlying source text being processed. In these cases, you can set VariableExpansionRegex to CurlyVariableExpansionRegex or ParenVariableExpansionRegex to change the format. Variables are always expanded in #if and switch statements and are expanded by default in the other source lines. Variables are expanded using the $<NAME> syntax by default. The syntax can be modified by setting VariableExpansionRegex and variable expansion can be disabled by setting ExpandVariables = false . note By default, the reader will throw a KeyNotFoundException if an undefined normal variable is encountered. This behavior can be modified by setting DefaultVariable to a non- null string. In this case, undefined variable references will always be replaced by the value set. DefaultVariable defaults to null . note By default, the reader will throw a KeyNotFoundException if an undefined environment variable is encountered. This behavior can be modified by setting DefaultEnvironmentVariable to a non- null string. In this case, undefined environment variable references will always be replaced by the value set. DefaultEnvironmentVariable defaults to null . Processing can also be customized via the StripComments , RemoveComments , RemoveBlank , ProcessStatements , Indent , TabStop , and StatementMarker properties. Secret and profile Values This class can integrate with a IProfileClient implementation added to ServiceContainer . This provides a way to abstract access to secrets and profile values from an external source. Three item types are supported: secret Secret passwords are often protected by a password manager. NEONFORGE has standardized internally on 1Password for example. Passwords are often required to satisfy complexity and other rules. Passwords are named by a string and are often persisted to a named location. 1Password stores to secrets in vaults . You'll need the password name and optionally, its location when referencing a password value. You may also request a specific secret property using an array syntax like: SECRETNAME[PROPERTY] Doing this overrides the default password property. profile-value Profile values are string name/value pairs that include non-secret definitions for the user, workstation, or overall environment such as the LAN. These can come in handy when implementing CI/CD where each server/user can be assigned unique profile values that reference specific test endpoints, etc. This is quite powerful. Profile values are simply named by a string. There is currently no concept of a source, location like secrets may have. Secrets and profile values can be referenced via <TYPE:NAME[:SOURCE]> where TYPE is one of env , secret (value), or profile and NAME identifies the secret or profile value and source optionally specifies the secret source (this is ignored for profile values). By default, a secret reference is replaced by the password property within the named secret. Use can use the square bracket syntax to select a different secret property. Examples: $<secret:my-secret;my-vault> # secret from specific source $<secret:my-secret> # secret password from default source $<secret:my-secret[username]> # retrieve [username] from secret $<secret:my-secret[password]> # retrieve [password] from secret $<profile:my-profile> # profile value This class will throw ProfileException when it encounters a secret/profile reference and there no injected IProfileClient implementation or if the implementation has trouble communicating with the profile server. This class also also throws a KeyNotFoundException when a named secret or profile value doesn't exist. Constructors PreprocessReader(Byte[]) Constructs an instance from UTF-8 encoded bytes. Declaration public PreprocessReader(byte[] bytes) Parameters Type Name Description Byte [] bytes The input data. PreprocessReader(Byte[], Dictionary<String, String>) Constructs an instance from UTF-8 encoded bytes, initializing some variables. Declaration public PreprocessReader(byte[] bytes, Dictionary<string, string> variables) Parameters Type Name Description Byte [] bytes The input data. Dictionary < String , String > variables The variables. PreprocessReader(TextReader) Constructs an over another TextReader . Declaration public PreprocessReader(TextReader reader) Parameters Type Name Description TextReader reader The source TextReader . PreprocessReader(TextReader, Dictionary<String, String>) Constructs an instance over another TextReader , initializing some variables. Declaration public PreprocessReader(TextReader reader, Dictionary<string, string> variables) Parameters Type Name Description TextReader reader The source TextReader . Dictionary < String , String > variables The variables. PreprocessReader(String) Constructs an instance from a string. Declaration public PreprocessReader(string input) Parameters Type Name Description String input The input string. PreprocessReader(String, Dictionary<String, String>) Constructs an instance from a string, initializing some variables. Declaration public PreprocessReader(string input, Dictionary<string, string> variables) Parameters Type Name Description String input The input string. Dictionary < String , String > variables The variables. Properties AngleVariableExpansionRegex A variable expansion Regex that matches normal variables like $<NAME> , environment variables like $<env:NAME> , profile value references like $<profile:NAME> and secret references like $<secret:NAME> , $<secret:NAME:SOURCE> , $<secret:NAME[PROPERTY]> or $<secret:NAME[PROPERTY]:SOURCE> You can set the VariableExpansionRegex property to this value to change the PreprocessReader behavior. Declaration public static Regex AngleVariableExpansionRegex { get; } Property Value Type Description Regex CurlyVariableExpansionRegex A variable expansion Regex that matches normal variables like ${NAME} , environment variables like ${env:NAME} , profile value references like ${profile:NAME} and secret references like ${secret:NAME} , ${secret:NAME:SOURCE} , ${secret:NAME[PROPERTY]} or ${secret:NAME[PROPERTY]:SOURCE} You can set the VariableExpansionRegex property to this value to change the PreprocessReader behavior. Declaration public static Regex CurlyVariableExpansionRegex { get; } Property Value Type Description Regex DefaultEnvironmentVariable The default value to use for an undefined environment variable or null if a KeyNotFoundException is to be thrown when a undefined environment variable is referenced. This defaults to null . Declaration public string DefaultEnvironmentVariable { get; set; } Property Value Type Description String DefaultVariable The default value to use for an undefined normal variable or null if a KeyNotFoundException is to be thrown when a undefined non-environment variable is referenced. This defaults to null . Declaration public string DefaultVariable { get; set; } Property Value Type Description String DefaultVariableExpansionRegex The default variable expansion Regex that matches normal variables like $<test> , environment variables like <env:test> , profile references like <profile:my-profile> , and secret references like <secret:NAME:SOURCE> . You can set the VariableExpansionRegex property to this value to change the PreprocessReader behavior. Declaration public static Regex DefaultVariableExpansionRegex { get; } Property Value Type Description Regex ExpandVariables Controls whether variables in the source are expanded. This defaults to true . Declaration public bool ExpandVariables { get; set; } Property Value Type Description Boolean Indent The number of spaces to indent the output. This defaults to 0 . Declaration public int Indent { get; set; } Property Value Type Description Int32 LineEnding Determines the line ending ReadToEnd() and ReadToEndAsync() will append to the lines they read. This defaults to Platform but may be changed to CRLF or LF . Declaration public LineEnding LineEnding { get; set; } Property Value Type Description LineEnding ParenVariableExpansionRegex A variable expansion Regex that matches normal variables like $(NAME) , environment variables like $(env:NAME) , profile value references like $(profile:NAME) and secret references like $(secret:NAME) , $(secret:NAME:SOURCE) , $(secret:NAME[PROPERTY]) or $(secret:NAME[PROPERTY]:SOURCE) You can set the VariableExpansionRegex property to this value to change the PreprocessReader behavior. Declaration public static Regex ParenVariableExpansionRegex { get; } Property Value Type Description Regex ProcessStatements Controls whether preprocessor statements are processed. This defaults to true . Declaration public bool ProcessStatements { get; set; } Property Value Type Description Boolean RemoveBlank Controls whether blank lines or lines with only whitespace are to be removed while reading. This defaults to false . Declaration public bool RemoveBlank { get; set; } Property Value Type Description Boolean RemoveComments Controls whether comments are removed while reading. This defaults to false . Declaration public bool RemoveComments { get; set; } Property Value Type Description Boolean Remarks note StripComments returns a blank line for comments and RemoveComments doesn't return a comment line at all. StatementMarker The leading character used to identify a preprocessing statement. This defaults to the pound sign ( # ). Declaration public char StatementMarker { get; set; } Property Value Type Description Char StripComments Controls whether comments are stripped out while reading. This defaults to true . Declaration public bool StripComments { get; set; } Property Value Type Description Boolean Remarks note StripComments returns a blank line for comments and RemoveComments doesn't return a comment line at all. TabStop Controls whether embedded TAB (\\t) characters will be converted into spaces to format tab stops correctly. This defaults to zero which will not process any tabs. Declaration public int TabStop { get; set; } Property Value Type Description Int32 VariableExpansionRegex The Regex used to match variable expansions. This defaults to matching variables of the form: ${NAME} . Declaration public Regex VariableExpansionRegex { get; set; } Property Value Type Description Regex Remarks note You may use set encounter situations where the default syntax would conflict with the source text being processed. You map use the CurlyVariableExpansionRegex or ParenVariableExpansionRegex patterns as an alternative. VariableValidationRegex INTERNAL USE ONLY: The Regex used to validate variable names. Declaration public static Regex VariableValidationRegex { get; } Property Value Type Description Regex Methods AddCommentMarker(String) Appends a comment marker prefix. This must be a non-empty string including only non-whitespace punctuation characters. Declaration public void AddCommentMarker(string marker) Parameters Type Name Description String marker The comment prefix. ClearCommentMarkers() Clears any comment markers, effectively disabling comment stripping. Declaration public void ClearCommentMarkers() Peek() Declaration public override int Peek() Returns Type Description Int32 Overrides TextReader.Peek() Read() Declaration public override int Read() Returns Type Description Int32 Overrides TextReader.Read() Read(Char[], Int32, Int32) Declaration public override int Read(char[] buffer, int index, int count) Parameters Type Name Description Char [] buffer Int32 index Int32 count Returns Type Description Int32 Overrides TextReader.Read(Char[], Int32, Int32) ReadAsync(Char[], Int32, Int32) Declaration public override Task<int> ReadAsync(char[] buffer, int index, int count) Parameters Type Name Description Char [] buffer Int32 index Int32 count Returns Type Description Task < Int32 > Overrides TextReader.ReadAsync(Char[], Int32, Int32) ReadBlock(Char[], Int32, Int32) Declaration public override int ReadBlock(char[] buffer, int index, int count) Parameters Type Name Description Char [] buffer Int32 index Int32 count Returns Type Description Int32 Overrides TextReader.ReadBlock(Char[], Int32, Int32) ReadBlockAsync(Char[], Int32, Int32) Declaration public override Task<int> ReadBlockAsync(char[] buffer, int index, int count) Parameters Type Name Description Char [] buffer Int32 index Int32 count Returns Type Description Task < Int32 > Overrides TextReader.ReadBlockAsync(Char[], Int32, Int32) ReadLine() Declaration public override string ReadLine() Returns Type Description String Overrides TextReader.ReadLine() ReadLineAsync() Declaration public override async Task<string> ReadLineAsync() Returns Type Description Task < String > Overrides TextReader.ReadLineAsync() ReadToEnd() Declaration public override string ReadToEnd() Returns Type Description String Overrides TextReader.ReadToEnd() ReadToEndAsync() Declaration public override async Task<string> ReadToEndAsync() Returns Type Description Task < String > Overrides TextReader.ReadToEndAsync() Set(String, Boolean) Sets a variable to an boolean value. Declaration public void Set(string name, bool value) Parameters Type Name Description String name The case sensitive variable name. Boolean value The option value. Remarks note The value set will be lowercase true or false . Set(String, Object) Sets a variable to an object value. Declaration public void Set(string name, object value = null) Parameters Type Name Description String name The case sensitive variable name. Object value The option value (defaults to the null). Set(String, String) Sets a variable to a string value. Declaration public void Set(string name, string value = \"\") Parameters Type Name Description String name The case sensitive variable name. String value The option value (defaults to the empty string). SetYamlMode() Configures the reader for parsing YAML by setting the StatementMarker to &quot;@\" and the comment marker to \"#\" . Declaration public void SetYamlMode() Extension Methods IOExtensions.Lines(TextReader, Boolean)"
  },
  "neonsdk/api/Neon.IO.RelayStream.html": {
    "href": "neonsdk/api/Neon.IO.RelayStream.html",
    "title": "Class RelayStream | NeonSDK documentation",
    "keywords": "Class RelayStream Implements a stream that passes operations to another stream. This is mainly useful for controlling whether Dispose() and Dispose(Boolean) actually disposes the underlying stream or not when the stream is referenced by another class that always disposes the stream. Inheritance Object MarshalByRefObject Stream RelayStream Namespace : Neon.IO Assembly : Neon.Common.dll Syntax public class RelayStream : Stream, IDisposable Constructors RelayStream(Stream, Boolean) Constructor. Declaration public RelayStream(Stream stream, bool leaveOpen = false) Parameters Type Name Description Stream stream The underlying stream being associated. Boolean leaveOpen Optionally leave the underlying stream open when this instance is disposed. Properties CanRead Declaration public override bool CanRead { get; } Property Value Type Description Boolean Overrides Stream.CanRead CanSeek Declaration public override bool CanSeek { get; } Property Value Type Description Boolean Overrides Stream.CanSeek CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description Boolean Overrides Stream.CanWrite Length Declaration public override long Length { get; } Property Value Type Description Int64 Overrides Stream.Length Position Declaration public override long Position { get; set; } Property Value Type Description Int64 Overrides Stream.Position Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides Stream.Dispose(Boolean) Flush() Declaration public override void Flush() Overrides Stream.Flush() Read(Byte[], Int32, Int32) Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count Returns Type Description Int32 Overrides Stream.Read(Byte[], Int32, Int32) Seek(Int64, SeekOrigin) Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset SeekOrigin origin Returns Type Description Int64 Overrides Stream.Seek(Int64, SeekOrigin) SetLength(Int64) Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value Overrides Stream.SetLength(Int64) Write(Byte[], Int32, Int32) Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count Overrides Stream.Write(Byte[], Int32, Int32) Extension Methods IOExtensions.Write(Stream, Byte[]) IOExtensions.WriteAsync(Stream, Byte[]) IOExtensions.ReadBytes(Stream, Int32) IOExtensions.ReadToEnd(Stream) IOExtensions.ReadToEndAsync(Stream) IOExtensions.DeflateTo(Stream, Stream) IOExtensions.InflateTo(Stream, Stream) IOExtensions.GzipTo(Stream, Stream) IOExtensions.GunzipTo(Stream, Stream)"
  },
  "neonsdk/api/Neon.IO.StaticDirectoryBase.html": {
    "href": "neonsdk/api/Neon.IO.StaticDirectoryBase.html",
    "title": "Class StaticDirectoryBase | NeonSDK documentation",
    "keywords": "Class StaticDirectoryBase Helper class that can be used by IStaticDirectory implementations. note Implementations derived from this class will use case insensitive file and directory name mapping. Inheritance Object StaticDirectoryBase Implements IStaticDirectory Namespace : Neon.IO Assembly : Neon.Common.dll Syntax public abstract class StaticDirectoryBase : IStaticDirectory Constructors StaticDirectoryBase(StaticDirectoryBase, StaticDirectoryBase, String) Protected constructor. Declaration protected StaticDirectoryBase(StaticDirectoryBase root, StaticDirectoryBase parent, string name) Parameters Type Name Description StaticDirectoryBase root The root directory or null if this is the root. StaticDirectoryBase parent The parent directory or null for the root directory. String name The directory name (this must be null for the root directory. Properties Directories Returns the subdirectories present in this directory. Declaration protected virtual IEnumerable<StaticDirectoryBase> Directories { get; } Property Value Type Description IEnumerable < StaticDirectoryBase > Files Returns the list of files present in this directory. Declaration protected virtual IEnumerable<StaticFileBase> Files { get; } Property Value Type Description IEnumerable < StaticFileBase > Name Returns the directory name. Declaration public virtual string Name { get; } Property Value Type Description String Parent Returns a reference to the parent directory or null if this is the root directory for a static file system. Declaration public virtual IStaticDirectory Parent { get; } Property Value Type Description IStaticDirectory Path Returns the fully qualified Linux style path for the static directory relative to the static root directory. Declaration public virtual string Path { get; } Property Value Type Description String Methods AddDirectory(StaticDirectoryBase) Adds a subdirectory if it doesn't already exist. Declaration public StaticDirectoryBase AddDirectory(StaticDirectoryBase directory) Parameters Type Name Description StaticDirectoryBase directory The child resource directory. Returns Type Description StaticDirectoryBase The existing Neon.IO.StaticResourceDirectory or directory if it was added AddFile(StaticFileBase) Adds a file. Declaration public void AddFile(StaticFileBase file) Parameters Type Name Description StaticFileBase file The subdirectory. GetDirectories(String, SearchOption) Returns the directories beneath the current directory, optionally matching directories by name as well as optionally searching for directories recursively. Declaration public virtual IEnumerable<IStaticDirectory> GetDirectories(string searchPattern = null, SearchOption options = SearchOption.TopDirectoryOnly) Parameters Type Name Description String searchPattern Optionally specifies a directory name pattern using standard file system wildcards like [*] and [?] . This defaults to including all directories. SearchOption options Optionally require a recursive search. This defaults to TopDirectoryOnly . Returns Type Description IEnumerable < IStaticDirectory > The set of matching directories. GetDirectory(String) Gets a directory via a Linux style path. This path can be absolute relative to the root directory or it can be relative to the current directory. note Relative paths including /../ notation to move up a directory or ./ to specify the current directory are not supported. Declaration public IStaticDirectory GetDirectory(string path) Parameters Type Name Description String path The file path (absolute or relative). Returns Type Description IStaticDirectory The directory. Exceptions Type Condition FileNotFoundException Thrown if the directory doesn't exist. GetFile(String) Gets a file via a Linux style path. This path can be absolute relative to the root directory or it can be relative to the current directory. note Relative paths including /../ notation to move up a directory or ./ to specify the current directory are not supported. Declaration public virtual IStaticFile GetFile(string path) Parameters Type Name Description String path The file path (absolute or relative). Returns Type Description IStaticFile The file. Exceptions Type Condition FileNotFoundException Thrown if the file doesn't exist. GetFiles(String, SearchOption) Returns the files beneath the current directory, optionally matching files by name as well as optionally searching recursively searching subdirectories.. Declaration public virtual IEnumerable<IStaticFile> GetFiles(string searchPattern = null, SearchOption options = SearchOption.TopDirectoryOnly) Parameters Type Name Description String searchPattern Optionally specifies a file name pattern using standard file system wildcards like [*] and [?] . This defaults to including all files. SearchOption options Optionally requires a recursive search. This defaults to TopDirectoryOnly . Returns Type Description IEnumerable < IStaticFile > The set of matching files. ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Implements IStaticDirectory Extension Methods IStaticDirectoryExtensions.Zip(IStaticDirectory, String, String, SearchOption, StaticZipOptions) IStaticDirectoryExtensions.Zip(IStaticDirectory, Stream, String, SearchOption, StaticZipOptions)"
  },
  "neonsdk/api/Neon.IO.StaticFileBase.html": {
    "href": "neonsdk/api/Neon.IO.StaticFileBase.html",
    "title": "Class StaticFileBase | NeonSDK documentation",
    "keywords": "Class StaticFileBase Helper class that can be used by IStaticFile implementations. note Implementations derived from this class will use case insensitive file and directory name mapping. Inheritance Object StaticFileBase Implements IStaticFile Namespace : Neon.IO Assembly : Neon.Common.dll Syntax public abstract class StaticFileBase : IStaticFile Constructors StaticFileBase(String) Protected constructor. Declaration protected StaticFileBase(string path) Parameters Type Name Description String path The logical path to this file. Properties Name Returns the file name. Declaration public virtual string Name { get; } Property Value Type Description String Path Returns the fully qualified Linux style path for the static file relative to the static root directory. Declaration public virtual string Path { get; } Property Value Type Description String Methods OpenReader(Encoding) Opens a text reader for the file contents. note You are responsible disposing the reader returned when you're done with it. Declaration public abstract TextReader OpenReader(Encoding encoding = null) Parameters Type Name Description Encoding encoding Optionally specifies the text encoding. This defaults to UTF-8 , Returns Type Description TextReader The TextReader . OpenReaderAsync(Encoding) Asychronously opens a text reader for the file contents. note You are responsible disposing the reader returned when you're done with it. Declaration public abstract Task<TextReader> OpenReaderAsync(Encoding encoding = null) Parameters Type Name Description Encoding encoding Optionally specifies the text encoding. This defaults to UTF-8 , Returns Type Description Task < TextReader > The TextReader . OpenStream() Opens a stream on the file contents. note You are responsible disposing the reader returned when you're done with it. Declaration public abstract Stream OpenStream() Returns Type Description Stream The Stream . OpenStreamAsync() Asychronously opens a stream on the file contents. note You are responsible disposing the reader returned when you're done with it. Declaration public abstract Task<Stream> OpenStreamAsync() Returns Type Description Task < Stream > The Stream . ReadAllBytes() Reads the file contents as bytes. Declaration public abstract byte[] ReadAllBytes() Returns Type Description Byte [] The file contents. ReadAllBytesAsync() Asynchronously reads the file contents as bytes. Declaration public abstract Task<byte[]> ReadAllBytesAsync() Returns Type Description Task < Byte []> The file contents. ReadAllText(Encoding) Reads the file contents as a UTF-8 encoded string. Declaration public abstract string ReadAllText(Encoding encoding = null) Parameters Type Name Description Encoding encoding Optionally specifies the text encoding. This defaults to UTF-8 , Returns Type Description String The file contents. ReadAllTextAsync(Encoding) Asynchronously reads the file contents as a UTF-8 encoded string. Declaration public abstract Task<string> ReadAllTextAsync(Encoding encoding = null) Parameters Type Name Description Encoding encoding Optionally specifies the text encoding. This defaults to UTF-8 , Returns Type Description Task < String > The file contents. ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Implements IStaticFile"
  },
  "neonsdk/api/Neon.IO.SubStream.html": {
    "href": "neonsdk/api/Neon.IO.SubStream.html",
    "title": "Class SubStream | NeonSDK documentation",
    "keywords": "Class SubStream Implements a Stream that operates on a section of a parent stream. The parent stream must be able to CanSeek . note WARNING: Multi-threading operations simultaniously against the parent and substream is not supported and is likely to result in data corruption. Inheritance Object MarshalByRefObject Stream SubStream Namespace : Neon.IO Assembly : Neon.Common.dll Syntax public class SubStream : Stream, IDisposable Remarks The SubStream instances save the position of the parent stream when constructed and restore the parent position when disposed. The current position of the substream will be set to the first byte of the substream data. note This class doesn't currently implement all of the Stream methods, especially asynchronous methods. This is something we may add in the future. Constructors SubStream(Stream, Int64, Int64) Constructs a substream that operates on a range of bytes within a parent stream. Declaration public SubStream(Stream parent, long start, long length) Parameters Type Name Description Stream parent The parent stream. Int64 start The zero-based index of the first byte within the parent stream to be managed by the substream. Int64 length The number of bytes to be managed. Exceptions Type Condition IOException Thrown if the parent stream doesn't support seek or the starting position or length is invalid. Properties CanRead Declaration public override bool CanRead { get; } Property Value Type Description Boolean Overrides Stream.CanRead CanSeek Declaration public override bool CanSeek { get; } Property Value Type Description Boolean Overrides Stream.CanSeek CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description Boolean Overrides Stream.CanWrite Length Declaration public override long Length { get; } Property Value Type Description Int64 Overrides Stream.Length Position Declaration public override long Position { get; set; } Property Value Type Description Int64 Overrides Stream.Position Methods BeginRead(Byte[], Int32, Int32, AsyncCallback, Object) Not Implemented Declaration public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count AsyncCallback callback Object state Returns Type Description IAsyncResult Overrides Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object) BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object) Not Implemented Declaration public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count AsyncCallback callback Object state Returns Type Description IAsyncResult Overrides Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object) CopyToAsync(Stream, Int32, CancellationToken) Declaration public override async Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken) Parameters Type Name Description Stream destination Int32 bufferSize CancellationToken cancellationToken Returns Type Description Task Overrides Stream.CopyToAsync(Stream, Int32, CancellationToken) Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides Stream.Dispose(Boolean) EndRead(IAsyncResult) Not Implemented Declaration public override int EndRead(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult Returns Type Description Int32 Overrides Stream.EndRead(IAsyncResult) EndWrite(IAsyncResult) Not Implemented Declaration public override void EndWrite(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult Overrides Stream.EndWrite(IAsyncResult) Flush() Declaration public override void Flush() Overrides Stream.Flush() FlushAsync(CancellationToken) Declaration public override async Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task Overrides Stream.FlushAsync(CancellationToken) Read(Byte[], Int32, Int32) Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count Returns Type Description Int32 Overrides Stream.Read(Byte[], Int32, Int32) ReadAsync(Byte[], Int32, Int32, CancellationToken) Declaration public override async Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count CancellationToken cancellationToken Returns Type Description Task < Int32 > Overrides Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken) ReadByte() Declaration public override int ReadByte() Returns Type Description Int32 Overrides Stream.ReadByte() Seek(Int64, SeekOrigin) Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset SeekOrigin origin Returns Type Description Int64 Overrides Stream.Seek(Int64, SeekOrigin) SetLength(Int64) Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value Overrides Stream.SetLength(Int64) Write(Byte[], Int32, Int32) Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count Overrides Stream.Write(Byte[], Int32, Int32) WriteByte(Byte) Declaration public override void WriteByte(byte value) Parameters Type Name Description Byte value Overrides Stream.WriteByte(Byte) Extension Methods IOExtensions.Write(Stream, Byte[]) IOExtensions.WriteAsync(Stream, Byte[]) IOExtensions.ReadBytes(Stream, Int32) IOExtensions.ReadToEnd(Stream) IOExtensions.ReadToEndAsync(Stream) IOExtensions.DeflateTo(Stream, Stream) IOExtensions.InflateTo(Stream, Stream) IOExtensions.GzipTo(Stream, Stream) IOExtensions.GunzipTo(Stream, Stream)"
  },
  "neonsdk/api/Neon.IO.TempFile.html": {
    "href": "neonsdk/api/Neon.IO.TempFile.html",
    "title": "Class TempFile | NeonSDK documentation",
    "keywords": "Class TempFile Generates a globally unique temporary file name and then ensures that the file is removed when the instance is disposed. Inheritance Object TempFile Namespace : Neon.IO Assembly : Neon.Common.dll Syntax public sealed class TempFile : IDisposable Constructors TempFile(String, String) Constructor. Declaration public TempFile(string suffix = null, string folder = null) Parameters Type Name Description String suffix Optionally specifies the file suffix (including the leading period) to be appended to the generated file name. This defaults to .tmp . String folder Optionally specifies the target folder. This defaults to the standard temporary directory for the current user. Properties Name Returns the file name only. Declaration public string Name { get; } Property Value Type Description String Path Returns the fully qualified path to the temporary file. Declaration public string Path { get; } Property Value Type Description String Root Optionally specifies the root directory where the temporary files will be created. This defaults to GetTempPath() when this is null or empty and can be overridden for specific instances by passing a folder path the the constructor. Declaration public static string Root { get; set; } Property Value Type Description String Methods Dispose() Declaration public void Dispose() ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "neonsdk/api/Neon.IO.TempFolder.html": {
    "href": "neonsdk/api/Neon.IO.TempFolder.html",
    "title": "Class TempFolder | NeonSDK documentation",
    "keywords": "Class TempFolder Manages a temporary file system folder to be used for the duration of a unit test. Inheritance Object TempFolder Namespace : Neon.IO Assembly : Neon.Common.dll Syntax public sealed class TempFolder : IDisposable Constructors TempFolder(String, String, Boolean) Creates a temporary folder. Declaration public TempFolder(string folder = null, string prefix = null, bool create = true) Parameters Type Name Description String folder Optionally overrides Root as the parent folder for this instance. String prefix Optionally specifies a prefix to be added to the temporary directory name. Boolean create Optionally controls whether the temporary folder should actuall be created. This defaults to true . Properties Path Returns the fully qualifed path to the temporary folder. Declaration public string Path { get; } Property Value Type Description String Root Optionally specifies the root directory where the temporary folders will be created. This defaults to GetTempPath() when this is null or empty. Declaration public static string Root { get; set; } Property Value Type Description String Methods Dispose() Deletes the temporary folder and all of its contents. Declaration public void Dispose() ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "neonsdk/api/Neon.JsonConverters.html": {
    "href": "neonsdk/api/Neon.JsonConverters.html",
    "title": "Namespace Neon.JsonConverters | NeonSDK documentation",
    "keywords": "Namespace Neon.JsonConverters Classes JsonDateTimeConverter Converts DateTime values for System.Text.Json based serialization. JsonGenericConverter<T> Converts generic types for System.Text.Json based serialization. JsonNullableDateTimeConverter Converts Nullable<T> values for System.Text.Json based serialization."
  },
  "neonsdk/api/Neon.JsonConverters.JsonDateTimeConverter.html": {
    "href": "neonsdk/api/Neon.JsonConverters.JsonDateTimeConverter.html",
    "title": "Class JsonDateTimeConverter | NeonSDK documentation",
    "keywords": "Class JsonDateTimeConverter Converts DateTime values for System.Text.Json based serialization. Inheritance Object JsonConverter JsonConverter < DateTime > JsonDateTimeConverter Namespace : Neon.JsonConverters Assembly : Neon.JsonConverters.dll Syntax public class JsonDateTimeConverter : JsonConverter<DateTime> Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override DateTime Read(ref Utf8JsonReader reader, Type type, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type type JsonSerializerOptions options Returns Type Description DateTime Overrides System.Text.Json.Serialization.JsonConverter<System.DateTime>.Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions) Write(Utf8JsonWriter, DateTime, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer DateTime value JsonSerializerOptions options Overrides System.Text.Json.Serialization.JsonConverter<System.DateTime>.Write(System.Text.Json.Utf8JsonWriter, System.DateTime, System.Text.Json.JsonSerializerOptions)"
  },
  "neonsdk/api/Neon.JsonConverters.JsonGenericConverter-1.html": {
    "href": "neonsdk/api/Neon.JsonConverters.JsonGenericConverter-1.html",
    "title": "Class JsonGenericConverter<T> | NeonSDK documentation",
    "keywords": "Class JsonGenericConverter<T> Converts generic types for System.Text.Json based serialization. Inheritance Object JsonConverter JsonConverter <T> JsonGenericConverter<T> Namespace : Neon.JsonConverters Assembly : Neon.JsonConverters.dll Syntax public class JsonGenericConverter<T> : JsonConverter<T> Type Parameters Name Description T Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override T Read(ref Utf8JsonReader reader, Type type, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type type JsonSerializerOptions options Returns Type Description T Overrides System.Text.Json.Serialization.JsonConverter<T>.Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions) Write(Utf8JsonWriter, T, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer T value JsonSerializerOptions options Overrides System.Text.Json.Serialization.JsonConverter<T>.Write(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)"
  },
  "neonsdk/api/Neon.JsonConverters.JsonNullableDateTimeConverter.html": {
    "href": "neonsdk/api/Neon.JsonConverters.JsonNullableDateTimeConverter.html",
    "title": "Class JsonNullableDateTimeConverter | NeonSDK documentation",
    "keywords": "Class JsonNullableDateTimeConverter Converts Nullable<T> values for System.Text.Json based serialization. Inheritance Object JsonConverter JsonConverter < Nullable < DateTime >> JsonNullableDateTimeConverter Namespace : Neon.JsonConverters Assembly : Neon.JsonConverters.dll Syntax public class JsonNullableDateTimeConverter : JsonConverter<DateTime?> Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override DateTime? Read(ref Utf8JsonReader reader, Type type, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type type JsonSerializerOptions options Returns Type Description Nullable < DateTime > Overrides System.Text.Json.Serialization.JsonConverter<System.Nullable<System.DateTime>>.Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions) Write(Utf8JsonWriter, Nullable<DateTime>, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, DateTime? value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer Nullable < DateTime > value JsonSerializerOptions options Overrides System.Text.Json.Serialization.JsonConverter<System.Nullable<System.DateTime>>.Write(System.Text.Json.Utf8JsonWriter, System.Nullable<System.DateTime>, System.Text.Json.JsonSerializerOptions)"
  },
  "neonsdk/api/Neon.ModelGen.ActionResult-1.html": {
    "href": "neonsdk/api/Neon.ModelGen.ActionResult-1.html",
    "title": "Interface ActionResult<T> | NeonSDK documentation",
    "keywords": "Interface ActionResult<T> Used to indicate that a service method uses the IActionResult pattern to return a T . Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax public interface ActionResult<T> Type Parameters Name Description T The type being returned."
  },
  "neonsdk/api/Neon.ModelGen.ApiVersion.html": {
    "href": "neonsdk/api/Neon.ModelGen.ApiVersion.html",
    "title": "Class ApiVersion | NeonSDK documentation",
    "keywords": "Class ApiVersion Used to manage an API version. Inheritance Object ApiVersion Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax public class ApiVersion : IComparable<ApiVersion> Properties Major Returns the major version number. note This returns as -1 when the parsed version string didn't include a major version. Declaration public int Major { get; } Property Value Type Description Int32 Minor Returns the minor version number. note This returns as -1 when the parsed version string didn't include a minor version. Declaration public int Minor { get; } Property Value Type Description Int32 Status Returns the status part. note This return an empty string when the parse version string didn't include status. Note also that versions with a Status are considered to be greater than a version without a Status when all other properties are the same. Declaration public string Status { get; } Property Value Type Description String VersionGroup Returns the version group date. note This returns as 0001-01-01 when the parsed version string didn't include a version group. Declaration public DateTime VersionGroup { get; } Property Value Type Description DateTime Methods CompareTo(ApiVersion) Declaration public int CompareTo(ApiVersion other) Parameters Type Name Description ApiVersion other Returns Type Description Int32 Parse(String) Parses a ApiVersion . Declaration public static ApiVersion Parse(string version) Parameters Type Name Description String version The version string, Returns Type Description ApiVersion The parsed ApiVersion . Exceptions Type Condition FormatException Thrown for invalid version strings. ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "neonsdk/api/Neon.ModelGen.ApiVersionAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.ApiVersionAttribute.html",
    "title": "Class ApiVersionAttribute | NeonSDK documentation",
    "keywords": "Class ApiVersionAttribute Used to tag an ASP.NET controller interface or method with an API version. Versions are formatted like: [VERSIONGROUP.]MAJOR.MINOR[-STATUS] or: VERSIONGROUP[MAJOR[.MINOR]][-STATUS] where VERSIONGROUP is a date formatted like YYYY-MM-DD , MAJOR and MINOR are non-negative integers and STATUS is a string of like alphs , preview , etc. consisting of the following characters: a-z , A-Z , 0-9 , \".\" and \"-\" . Inheritance Object Attribute ApiVersionAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Method | AttributeTargets.Interface, AllowMultiple = true, Inherited = false)] public class ApiVersionAttribute : Attribute Constructors ApiVersionAttribute(String) Constructor. Declaration public ApiVersionAttribute(string version) Parameters Type Name Description String version Specifies the API version string. Properties Version Returns parsed ApiVersion . Declaration public ApiVersion Version { get; } Property Value Type Description ApiVersion"
  },
  "neonsdk/api/Neon.ModelGen.BodyStreamAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.BodyStreamAttribute.html",
    "title": "Class BodyStreamAttribute | NeonSDK documentation",
    "keywords": "Class BodyStreamAttribute Used to indicate that clients generated by Neon.ModelGen should include a System.IO.Stream stream parameter holding the data to be included as the body of the request to the remote service. note You may not combine BodyStreamAttribute and FromBodyAttribute attributes on the same model method. See the remarks for additional details. Inheritance Object Attribute BodyStreamAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class BodyStreamAttribute : Attribute Remarks Model methods tagged with the BodyStreamAttribute will be generated with System.IO.Stream stream as the first parameter and the generated client method will transmit bytes from the current stream position up to the end of the stream up to the remote service. By default, this will be accomplished using a 8 KiB buffer but this can be customized via BufferSize . By default the request Content-Type header will be set to application/octet-stream . You can customize this via ContentType . For input streams that support CanSeek the generated method will also include the Content-Length header. This will be computed by subtracting the current stream position from the stream length. note For some situations, you may need to upload from a stream that doesn't support CanSeek but you already know how many bytes will be transmitted and the server method is expecting a Content-Length header. In this case, you can wrap your stream with a SubStream configured with the starting and ending positions of the data in the original stream and then pass the SubStream as the service client method's stream argument. Properties BufferSize Optionally specifies the size of the buffer in bytes that will be used by the generated API method for uploading the source stream to the server. This defaults to 8 KiB . Declaration public int BufferSize { get; set; } Property Value Type Description Int32 ContentType Optionally overrides the uploaded content's MIME type. This defaults to application/octet-stream . Declaration public string ContentType { get; set; } Property Value Type Description String IncludeContentSize Indicates that a Content-Size header will be included in the request, passing the size of the input stream. This defaults to false . Declaration public bool IncludeContentSize { get; set; } Property Value Type Description Boolean"
  },
  "neonsdk/api/Neon.ModelGen.ControllerValidationAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.ControllerValidationAttribute.html",
    "title": "Class ControllerValidationAttribute | NeonSDK documentation",
    "keywords": "Class ControllerValidationAttribute Used to have the Neon.Xunit.XunitExtensions.ValidateController<T>() method including the tagged method when validating the service controller against its definining interface. This is useful for rare situations where a service controller inherits from another class that implements some endpoints. note By default, Neon.Xunit.XunitExtensions.ValidateController<T>() only considers service methods implemented directly in the service controller during validation. Inheritance Object Attribute ControllerValidationAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class ControllerValidationAttribute : Attribute"
  },
  "neonsdk/api/Neon.ModelGen.DataModelAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.DataModelAttribute.html",
    "title": "Class DataModelAttribute | NeonSDK documentation",
    "keywords": "Class DataModelAttribute Used to provide the model code generator additional information about a specific data type. Use of this optional because the code generator assumes that all types that are not specifically tagged by ServiceModelAttribute are data types. Inheritance Object Attribute DataModelAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Interface)] public class DataModelAttribute : Attribute Constructors DataModelAttribute() Constructor. Declaration public DataModelAttribute() Properties Name Optionally specifies the type identifier that will be used by generated code to identify the object type at runtime. This will be used when deserializing the object. This defaults to the fully qualified name of the type as it appears in the source assembly as it is scanned by the code generator. You may want to set this to reduce the length or just to customize how your data is persistedd. Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.ModelGen.EnumMember.html": {
    "href": "neonsdk/api/Neon.ModelGen.EnumMember.html",
    "title": "Class EnumMember | NeonSDK documentation",
    "keywords": "Class EnumMember Describes an enum member. Inheritance Object EnumMember Namespace : Neon.ModelGen Assembly : Neon.ModelGen.dll Syntax public class EnumMember Constructors EnumMember() Constructor. Declaration public EnumMember() Properties Name The enumeration value name as it appears in code. Declaration public string Name { get; set; } Property Value Type Description String OrdinalValue The enumeration ordinal value. Declaration public string OrdinalValue { get; set; } Property Value Type Description String SerializedName The enumeration value name as it is serialized. Declaration public string SerializedName { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.ModelGen.FromBodyAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.FromBodyAttribute.html",
    "title": "Class FromBodyAttribute | NeonSDK documentation",
    "keywords": "Class FromBodyAttribute Used to indicate that a service endpoint parameter is to be obtained by parsing the request body as JSON. Inheritance Object Attribute FromBodyAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public class FromBodyAttribute : Attribute Constructors FromBodyAttribute() Constructor. Declaration public FromBodyAttribute() Properties Name This is ignored. Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.ModelGen.FromHeaderAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.FromHeaderAttribute.html",
    "title": "Class FromHeaderAttribute | NeonSDK documentation",
    "keywords": "Class FromHeaderAttribute Used to indicate that a service endpoint parameter is to be obtained by parsing a request header value. Inheritance Object Attribute FromHeaderAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public class FromHeaderAttribute : Attribute Remarks By default, this option will look for the HTTP header with the same name as the tagged endpoint parameter. This can be overriden by setting the Name property. Constructors FromHeaderAttribute() Constructor. Declaration public FromHeaderAttribute() Properties Name Optionally overrides the tagged service endpoint method property name when generating the client code. Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.ModelGen.FromQueryAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.FromQueryAttribute.html",
    "title": "Class FromQueryAttribute | NeonSDK documentation",
    "keywords": "Class FromQueryAttribute Used to indicate that a service endpoint parameter is to be obtained by parsing a request URI query parameter. Inheritance Object Attribute FromQueryAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public class FromQueryAttribute : Attribute Remarks By default, this option will look for the query parameter with the same name as the tagged endpoint parameter. This can be overriden by setting the Name property. Constructors FromQueryAttribute(String) Constructor. Declaration public FromQueryAttribute(string name = null) Parameters Type Name Description String name Optionally specifies URI query parameter name. This defaults to the actual parameter name. Properties Name Optionally overrides the tagged service endpoint method property name when generating the client code. Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.ModelGen.FromRouteAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.FromRouteAttribute.html",
    "title": "Class FromRouteAttribute | NeonSDK documentation",
    "keywords": "Class FromRouteAttribute Used to indicate that a service endpoint parameter is to be obtained by extracting it from the URI route template. Inheritance Object Attribute FromRouteAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public class FromRouteAttribute : Attribute Remarks By default, this option will look for the query parameter with the same name as the tagged endpoint parameter. This can be overriden by setting the Name property. Constructors FromRouteAttribute(String) Constructor. Declaration public FromRouteAttribute(string name = null) Parameters Type Name Description String name Optionally specifies URI query parameter name. This defaults to the actual parameter name. Properties Name Optionally overrides the tagged service endpoint method property name when generating the client code. Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.ModelGen.GeneratedClientAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.GeneratedClientAttribute.html",
    "title": "Class GeneratedClientAttribute | NeonSDK documentation",
    "keywords": "Class GeneratedClientAttribute Used to tag generated service client classes with additional metadata that will be used when validatating the a generated service client actually matches an ASP.NET service implementation. Inheritance Object Attribute GeneratedClientAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class GeneratedClientAttribute : Attribute Constructors GeneratedClientAttribute(String) Constructor. Declaration public GeneratedClientAttribute(string routeTemplate) Parameters Type Name Description String routeTemplate The controller's route template. Properties RouteTemplate The route template. Declaration public string RouteTemplate { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.ModelGen.GeneratedMethodAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.GeneratedMethodAttribute.html",
    "title": "Class GeneratedMethodAttribute | NeonSDK documentation",
    "keywords": "Class GeneratedMethodAttribute Used to tag generated service client methods with additional metadata that will be used when validatating the a generated service client actually matches an ASP.NET service implementation. Inheritance Object Attribute GeneratedMethodAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class GeneratedMethodAttribute : Attribute Constructors GeneratedMethodAttribute() Constructor. Declaration public GeneratedMethodAttribute() Properties ApiVersion The API version used when calling this method or null when no version is specified. Declaration public string ApiVersion { get; set; } Property Value Type Description String DefinedAs The method name from the service model definition. Declaration public string DefinedAs { get; set; } Property Value Type Description String HttpMethod The HTTP method for the endpoint. Declaration public string HttpMethod { get; set; } Property Value Type Description String Returns The method result type. Declaration public Type Returns { get; set; } Property Value Type Description Type RouteTemplate The route template. Declaration public string RouteTemplate { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.ModelGen.GeneratedParamAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.GeneratedParamAttribute.html",
    "title": "Class GeneratedParamAttribute | NeonSDK documentation",
    "keywords": "Class GeneratedParamAttribute Used to tag generated service client method parameters with additional metadata that will be used when validatating the a generated service client actually matches an ASP.NET service implementation. Inheritance Object Attribute GeneratedParamAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public class GeneratedParamAttribute : Attribute Constructors GeneratedParamAttribute(PassAs) Constructor. Declaration public GeneratedParamAttribute(PassAs passAs) Parameters Type Name Description PassAs passAs Indicates how the client passes the tagged parameter to the service. Properties Name Parameter name as it appears on the wire for parameters passed as a query, header, or route. Declaration public string Name { get; set; } Property Value Type Description String PassAs Indicates how the client passes the tagged parameter to the service. Declaration public PassAs PassAs { get; } Property Value Type Description PassAs"
  },
  "neonsdk/api/Neon.ModelGen.HashSourceAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.HashSourceAttribute.html",
    "title": "Class HashSourceAttribute | NeonSDK documentation",
    "keywords": "Class HashSourceAttribute Used to tag data model properties that should be included in the GetHashCode() computation. Inheritance Object Attribute HashSourceAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class HashSourceAttribute : Attribute Constructors HashSourceAttribute() Constructor. Declaration public HashSourceAttribute()"
  },
  "neonsdk/api/Neon.ModelGen.html": {
    "href": "neonsdk/api/Neon.ModelGen.html",
    "title": "Namespace Neon.ModelGen | NeonSDK documentation",
    "keywords": "Namespace Neon.ModelGen Classes ApiVersion Used to manage an API version. ApiVersionAttribute Used to tag an ASP.NET controller interface or method with an API version. Versions are formatted like: [VERSIONGROUP.]MAJOR.MINOR[-STATUS] or: VERSIONGROUP[MAJOR[.MINOR]][-STATUS] where VERSIONGROUP is a date formatted like YYYY-MM-DD , MAJOR and MINOR are non-negative integers and STATUS is a string of like alphs , preview , etc. consisting of the following characters: a-z , A-Z , 0-9 , \".\" and \"-\" . BodyStreamAttribute Used to indicate that clients generated by Neon.ModelGen should include a System.IO.Stream stream parameter holding the data to be included as the body of the request to the remote service. note You may not combine BodyStreamAttribute and FromBodyAttribute attributes on the same model method. See the remarks for additional details. ControllerValidationAttribute Used to have the Neon.Xunit.XunitExtensions.ValidateController<T>() method including the tagged method when validating the service controller against its definining interface. This is useful for rare situations where a service controller inherits from another class that implements some endpoints. note By default, Neon.Xunit.XunitExtensions.ValidateController<T>() only considers service methods implemented directly in the service controller during validation. DataModelAttribute Used to provide the model code generator additional information about a specific data type. Use of this optional because the code generator assumes that all types that are not specifically tagged by ServiceModelAttribute are data types. EnumMember Describes an enum member. FromBodyAttribute Used to indicate that a service endpoint parameter is to be obtained by parsing the request body as JSON. FromHeaderAttribute Used to indicate that a service endpoint parameter is to be obtained by parsing a request header value. FromQueryAttribute Used to indicate that a service endpoint parameter is to be obtained by parsing a request URI query parameter. FromRouteAttribute Used to indicate that a service endpoint parameter is to be obtained by extracting it from the URI route template. GeneratedClientAttribute Used to tag generated service client classes with additional metadata that will be used when validatating the a generated service client actually matches an ASP.NET service implementation. GeneratedMethodAttribute Used to tag generated service client methods with additional metadata that will be used when validatating the a generated service client actually matches an ASP.NET service implementation. GeneratedParamAttribute Used to tag generated service client method parameters with additional metadata that will be used when validatating the a generated service client actually matches an ASP.NET service implementation. HashSourceAttribute Used to tag data model properties that should be included in the GetHashCode() computation. HttpAttribute Base class for the HTTP related attributes below. HttpDeleteAttribute Used to identify a service endpoint that is triggered via the DELETE method. HttpGetAttribute Used to identify a service endpoint that is triggered via the GET method. HttpHeadAttribute Used to identify a service endpoint that is triggered via the HEAD method. HttpOptionsAttribute Used to identify a service endpoint that is triggered via the OPTIONS method. HttpPatchAttribute Used to identify a service endpoint that is triggered via the PATCH method. HttpPostAttribute Used to identify a service endpoint that is triggered via the POST method. HttpPutAttribute Used to identify a service endpoint that is triggered via the PUT method. ModelGenerator Handles data model and service client code generation. ModelGeneratorOutput Holds the output of a model code generation. ModelGeneratorSettings Specifies model code generator settings. NoCodeGenAttribute Used to indicate that a class or interface should be ignored during code generation. NoControllerValidationAttribute Used to prevent the Neon.Xunit.XunitExtensions.ValidateController<T>() method from including the tagged method when validating the service controller against its definining interface. This is useful for rare situations where a service controller implements some extra endpoints that are not covered by the generated client. PersistableAttribute Used to customize the database related code generated for the tagged data model interface. By default, a public static string GetKey(param object[] args) method is included in generated entity classes so that a database key for a specific entity can be easialy obtained. This method simply generates a string by calling ToString() on all of arguments or using \"NULL\" for null values which each of these being separated by a single colon and then prepending the entire thing with the entity type. The generated code will look something like this: public class PersonEntity : Entity<Person> { public static string GetKey(params object[] args) { if (args.Length == 0) { throw new ArgumentException(\"At least one argument is expected.\"); } var key = \"entity-type::\"; for (int i=0; i $lt; args.Length; i++) { var arg = args[i]; if (i > 0) { key += \":\"; } key += arg != null ? arg.ToString() : \"NULL\"; } return key; } ... } PersistableKeyAttribute Used to tag the property acting as the database key for an IRoundtripData . RouteAttribute Used to customize request routing at the service level. ServiceModelAttribute Used to indicate that an interface should be included when generating a service client class. TargetAttribute Used to group data models and service definitions so that the class included in the generated code can filtered. Interfaces ActionResult<T> Used to indicate that a service method uses the IActionResult pattern to return a T . IActionResult Used to indicate that a service method uses the IActionResult pattern to return void . Enums PassAs Identifies how a generated service client will pass a parameter to an ASP.NET service. UxFrameworks Enumerates the user interface frameworks that are supported with additional generated code."
  },
  "neonsdk/api/Neon.ModelGen.HttpAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.HttpAttribute.html",
    "title": "Class HttpAttribute | NeonSDK documentation",
    "keywords": "Class HttpAttribute Base class for the HTTP related attributes below. Inheritance Object Attribute HttpAttribute HttpDeleteAttribute HttpGetAttribute HttpHeadAttribute HttpOptionsAttribute HttpPatchAttribute HttpPostAttribute HttpPutAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Method)] public abstract class HttpAttribute : Attribute Properties HttpMethod Returns the HTTP method. Declaration public string HttpMethod { get; set; } Property Value Type Description String Name Optionally overrides the tagged service endpoint method name when generating the client code. Declaration public string Name { get; set; } Property Value Type Description String Order NOT SUPPORTED: The order in which the route is to be applied. Declaration public int Order { get; set; } Property Value Type Description Int32 Template The route template. Declaration public string Template { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.ModelGen.HttpDeleteAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.HttpDeleteAttribute.html",
    "title": "Class HttpDeleteAttribute | NeonSDK documentation",
    "keywords": "Class HttpDeleteAttribute Used to identify a service endpoint that is triggered via the DELETE method. Inheritance Object Attribute HttpAttribute HttpDeleteAttribute Inherited Members HttpAttribute.Template HttpAttribute.HttpMethod HttpAttribute.Name HttpAttribute.Order Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class HttpDeleteAttribute : HttpAttribute Constructors HttpDeleteAttribute(String) Constructor. Declaration public HttpDeleteAttribute(string template = null) Parameters Type Name Description String template The optional routing template."
  },
  "neonsdk/api/Neon.ModelGen.HttpGetAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.HttpGetAttribute.html",
    "title": "Class HttpGetAttribute | NeonSDK documentation",
    "keywords": "Class HttpGetAttribute Used to identify a service endpoint that is triggered via the GET method. Inheritance Object Attribute HttpAttribute HttpGetAttribute Inherited Members HttpAttribute.Template HttpAttribute.HttpMethod HttpAttribute.Name HttpAttribute.Order Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class HttpGetAttribute : HttpAttribute Constructors HttpGetAttribute(String) Constructor. Declaration public HttpGetAttribute(string template = null) Parameters Type Name Description String template The optional routing template."
  },
  "neonsdk/api/Neon.ModelGen.HttpHeadAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.HttpHeadAttribute.html",
    "title": "Class HttpHeadAttribute | NeonSDK documentation",
    "keywords": "Class HttpHeadAttribute Used to identify a service endpoint that is triggered via the HEAD method. Inheritance Object Attribute HttpAttribute HttpHeadAttribute Inherited Members HttpAttribute.Template HttpAttribute.HttpMethod HttpAttribute.Name HttpAttribute.Order Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class HttpHeadAttribute : HttpAttribute Constructors HttpHeadAttribute(String) Constructor. Declaration public HttpHeadAttribute(string template = null) Parameters Type Name Description String template The optional routing template."
  },
  "neonsdk/api/Neon.ModelGen.HttpOptionsAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.HttpOptionsAttribute.html",
    "title": "Class HttpOptionsAttribute | NeonSDK documentation",
    "keywords": "Class HttpOptionsAttribute Used to identify a service endpoint that is triggered via the OPTIONS method. Inheritance Object Attribute HttpAttribute HttpOptionsAttribute Inherited Members HttpAttribute.Template HttpAttribute.HttpMethod HttpAttribute.Name HttpAttribute.Order Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class HttpOptionsAttribute : HttpAttribute Constructors HttpOptionsAttribute(String) Constructor. Declaration public HttpOptionsAttribute(string template = null) Parameters Type Name Description String template The optional routing template."
  },
  "neonsdk/api/Neon.ModelGen.HttpPatchAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.HttpPatchAttribute.html",
    "title": "Class HttpPatchAttribute | NeonSDK documentation",
    "keywords": "Class HttpPatchAttribute Used to identify a service endpoint that is triggered via the PATCH method. Inheritance Object Attribute HttpAttribute HttpPatchAttribute Inherited Members HttpAttribute.Template HttpAttribute.HttpMethod HttpAttribute.Name HttpAttribute.Order Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class HttpPatchAttribute : HttpAttribute Constructors HttpPatchAttribute(String) Constructor. Declaration public HttpPatchAttribute(string template = null) Parameters Type Name Description String template The optional routing template."
  },
  "neonsdk/api/Neon.ModelGen.HttpPostAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.HttpPostAttribute.html",
    "title": "Class HttpPostAttribute | NeonSDK documentation",
    "keywords": "Class HttpPostAttribute Used to identify a service endpoint that is triggered via the POST method. Inheritance Object Attribute HttpAttribute HttpPostAttribute Inherited Members HttpAttribute.Template HttpAttribute.HttpMethod HttpAttribute.Name HttpAttribute.Order Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class HttpPostAttribute : HttpAttribute Constructors HttpPostAttribute(String) Constructor. Declaration public HttpPostAttribute(string template = null) Parameters Type Name Description String template The optional routing template."
  },
  "neonsdk/api/Neon.ModelGen.HttpPutAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.HttpPutAttribute.html",
    "title": "Class HttpPutAttribute | NeonSDK documentation",
    "keywords": "Class HttpPutAttribute Used to identify a service endpoint that is triggered via the PUT method. Inheritance Object Attribute HttpAttribute HttpPutAttribute Inherited Members HttpAttribute.Template HttpAttribute.HttpMethod HttpAttribute.Name HttpAttribute.Order Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class HttpPutAttribute : HttpAttribute Constructors HttpPutAttribute(String) Constructor. Declaration public HttpPutAttribute(string template = null) Parameters Type Name Description String template The optional routing template."
  },
  "neonsdk/api/Neon.ModelGen.IActionResult.html": {
    "href": "neonsdk/api/Neon.ModelGen.IActionResult.html",
    "title": "Interface IActionResult | NeonSDK documentation",
    "keywords": "Interface IActionResult Used to indicate that a service method uses the IActionResult pattern to return void . Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax public interface IActionResult"
  },
  "neonsdk/api/Neon.ModelGen.ModelGenerator.html": {
    "href": "neonsdk/api/Neon.ModelGen.ModelGenerator.html",
    "title": "Class ModelGenerator | NeonSDK documentation",
    "keywords": "Class ModelGenerator Handles data model and service client code generation. Inheritance Object ModelGenerator Namespace : Neon.ModelGen Assembly : Neon.ModelGen.dll Syntax public class ModelGenerator Constructors ModelGenerator(ModelGeneratorSettings) Constructs a code generator. Declaration public ModelGenerator(ModelGeneratorSettings settings = null) Parameters Type Name Description ModelGeneratorSettings settings Optional settings. Reasonable defaults will be used when this is null . Properties Output Returns the code generator output instance. Declaration public ModelGeneratorOutput Output { get; } Property Value Type Description ModelGeneratorOutput Settings Returns the code generation settings. Declaration public ModelGeneratorSettings Settings { get; } Property Value Type Description ModelGeneratorSettings Methods Generate(Assembly[]) Generates code from a set of source assemblies. Declaration public ModelGeneratorOutput Generate(params Assembly[] assemblies) Parameters Type Name Description Assembly [] assemblies The source assemblies. Returns Type Description ModelGeneratorOutput A ModelGeneratorOutput instance holding the results."
  },
  "neonsdk/api/Neon.ModelGen.ModelGeneratorOutput.html": {
    "href": "neonsdk/api/Neon.ModelGen.ModelGeneratorOutput.html",
    "title": "Class ModelGeneratorOutput | NeonSDK documentation",
    "keywords": "Class ModelGeneratorOutput Holds the output of a model code generation. Inheritance Object ModelGeneratorOutput Namespace : Neon.ModelGen Assembly : Neon.ModelGen.dll Syntax public class ModelGeneratorOutput Constructors ModelGeneratorOutput() Constructor. Declaration public ModelGeneratorOutput() Properties Errors Returns the list of code generator errors (if any). Declaration public List<string> Errors { get; } Property Value Type Description List < String > HasErrors Indicates whether the coder generator reported any errors. Declaration public bool HasErrors { get; } Property Value Type Description Boolean SourceCode Returns the generated source code. Declaration public string SourceCode { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.ModelGen.ModelGeneratorSettings.html": {
    "href": "neonsdk/api/Neon.ModelGen.ModelGeneratorSettings.html",
    "title": "Class ModelGeneratorSettings | NeonSDK documentation",
    "keywords": "Class ModelGeneratorSettings Specifies model code generator settings. Inheritance Object ModelGeneratorSettings Namespace : Neon.ModelGen Assembly : Neon.ModelGen.dll Syntax public class ModelGeneratorSettings Constructors ModelGeneratorSettings(String[]) Constructs an instance with reasonable settings. Declaration public ModelGeneratorSettings(params string[] targetGroups) Parameters Type Name Description String [] targetGroups Specifies the targets to be included in the generated output code. Properties AllowDebuggerStepInto Optionally enables source code debuggers to step into methods and properties generated for both data and service models. This is normally used only when debugging model generation and defaults to false . Declaration public bool AllowDebuggerStepInto { get; set; } Property Value Type Description Boolean NoServiceClients Indicates that service client code should not be generated. This defaults to false and may be set to true when only the data models need to be generated. Declaration public bool NoServiceClients { get; set; } Property Value Type Description Boolean Persisted Optionally generate generated database persistance related code for data models tagged with [Persistable] . This defaults to false . Declaration public bool Persisted { get; set; } Property Value Type Description Boolean RoundTrip Enhances data model code generation to prevent property loss for noSQL scenarios where somebody added a model property before all referencing applications have regenerated their data models. This defaults to true . Declaration public bool RoundTrip { get; set; } Property Value Type Description Boolean SourceNamespace Specifies the C# namespace to be used to filter the service and data model classes processed by the code generator. This is especially handy for unit testing. This defaults to null which disables any filtering. Declaration public string SourceNamespace { get; set; } Property Value Type Description String TargetNamespace Specifies the C# namespace to be used when generating the output code. This defaults to Neon.ModelGen.Output . Declaration public string TargetNamespace { get; set; } Property Value Type Description String Targets Used to select a specific targets to be included in the generated output. note All groups will be generated when the Targets list is empty. Declaration public List<string> Targets { get; set; } Property Value Type Description List < String > UxFramework Optionally specifies the user experience framework that the generated classes should support by generating additional code. Declaration public UxFrameworks UxFramework { get; set; } Property Value Type Description UxFrameworks V1Compatible Optionally specifies that model classes should be generated such that document type __T properties be serialized using the old v1.x compatible \"__T\" property name rather than the \"T$$\" property name generated for Neon.ModelGen v2+ . New projects should leave this alone but existing 1.x based projects must set this to true or use the new neon-modelgen --v1compatible option to avoid database corruption and/or data transmission issues. See #776 for more information. Declaration public bool V1Compatible { get; set; } Property Value Type Description Boolean"
  },
  "neonsdk/api/Neon.ModelGen.NoCodeGenAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.NoCodeGenAttribute.html",
    "title": "Class NoCodeGenAttribute | NeonSDK documentation",
    "keywords": "Class NoCodeGenAttribute Used to indicate that a class or interface should be ignored during code generation. Inheritance Object Attribute NoCodeGenAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface)] public class NoCodeGenAttribute : Attribute"
  },
  "neonsdk/api/Neon.ModelGen.NoControllerValidationAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.NoControllerValidationAttribute.html",
    "title": "Class NoControllerValidationAttribute | NeonSDK documentation",
    "keywords": "Class NoControllerValidationAttribute Used to prevent the Neon.Xunit.XunitExtensions.ValidateController<T>() method from including the tagged method when validating the service controller against its definining interface. This is useful for rare situations where a service controller implements some extra endpoints that are not covered by the generated client. Inheritance Object Attribute NoControllerValidationAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class NoControllerValidationAttribute : Attribute"
  },
  "neonsdk/api/Neon.ModelGen.PassAs.html": {
    "href": "neonsdk/api/Neon.ModelGen.PassAs.html",
    "title": "Enum PassAs | NeonSDK documentation",
    "keywords": "Enum PassAs Identifies how a generated service client will pass a parameter to an ASP.NET service. Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax public enum PassAs Fields Name Description Body Passes the parameter as the HTTP request body. Header Passes the parameter as an HTTP header. Query Passes the parameter is passed as a URI query parameter. Route Passes the parameter within the URI route template. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.ModelGen.PersistableAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.PersistableAttribute.html",
    "title": "Class PersistableAttribute | NeonSDK documentation",
    "keywords": "Class PersistableAttribute Used to customize the database related code generated for the tagged data model interface. By default, a public static string GetKey(param object[] args) method is included in generated entity classes so that a database key for a specific entity can be easialy obtained. This method simply generates a string by calling ToString() on all of arguments or using \"NULL\" for null values which each of these being separated by a single colon and then prepending the entire thing with the entity type. The generated code will look something like this: public class PersonEntity : Entity<Person> { public static string GetKey(params object[] args) { if (args.Length == 0) { throw new ArgumentException(\"At least one argument is expected.\"); } var key = \"entity-type::\"; for (int i=0; i $lt; args.Length; i++) { var arg = args[i]; if (i > 0) { key += \":\"; } key += arg != null ? arg.ToString() : \"NULL\"; } return key; } ... } Inheritance Object Attribute PersistableAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Interface)] public class PersistableAttribute : Attribute Properties GetKeyArgs This property combined with GetKeyString is used to generate a public static string GetKey(...) method. See the class remarks for more information. Declaration public string GetKeyArgs { get; set; } Property Value Type Description String GetKeyString This property combined with GetKeyArgs is used to generate a public static string GetKey(...) method. See the class remarks for more information. Declaration public string GetKeyString { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.ModelGen.PersistableKeyAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.PersistableKeyAttribute.html",
    "title": "Class PersistableKeyAttribute | NeonSDK documentation",
    "keywords": "Class PersistableKeyAttribute Used to tag the property acting as the database key for an IRoundtripData . Inheritance Object Attribute PersistableKeyAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class PersistableKeyAttribute : Attribute"
  },
  "neonsdk/api/Neon.ModelGen.RouteAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.RouteAttribute.html",
    "title": "Class RouteAttribute | NeonSDK documentation",
    "keywords": "Class RouteAttribute Used to customize request routing at the service level. Inheritance Object Attribute RouteAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Method | AttributeTargets.Interface)] public class RouteAttribute : Attribute Constructors RouteAttribute(String) Constructor. Declaration public RouteAttribute(string template = null) Parameters Type Name Description String template The optional routing template. Properties Name The route name. Declaration public string Name { get; set; } Property Value Type Description String Order NOT SUPPORTED: The order in which the route is to be applied. Declaration public int Order { get; set; } Property Value Type Description Int32 Template The route template. Declaration public string Template { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.ModelGen.ServiceModelAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.ServiceModelAttribute.html",
    "title": "Class ServiceModelAttribute | NeonSDK documentation",
    "keywords": "Class ServiceModelAttribute Used to indicate that an interface should be included when generating a service client class. Inheritance Object Attribute ServiceModelAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Interface)] public class ServiceModelAttribute : Attribute Constructors ServiceModelAttribute(String, String) Constructor. Declaration public ServiceModelAttribute(string name = null, string group = null) Parameters Type Name Description String name Optionally specifies the name to be used for the generated service client class. This defaults to the tagged controller class name with a \"Controller\" suffix being stripped off if present. String group Optionally specifies that the methods from this controller should be grouped together in a generated controller class composed from multiple service controllers. Set this to the name to be used for the client property under which these methods will be generated. note name must also be specified when group is set. Properties Group Optionally used to group multiple methods from different controllers with the same Name together into the same generated service client class or subclass. This defaults to null which means that the service methods from the different controllers will be generated directly within the generated service client. When this is not null or empty, a subclass using this name with \"Client\" appended will be generated with the methods from the controllers with this group name. Declaration public string Group { get; } Property Value Type Description String Name Returns the name to be used for the generated client class and for transmitting requests to the server or null if the name is to be derived from the tagged class name. note The tagged controller class name will be used as the default name, stripping \"Controller\" off the end of the class name if present. Declaration public string Name { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.ModelGen.TargetAttribute.html": {
    "href": "neonsdk/api/Neon.ModelGen.TargetAttribute.html",
    "title": "Class TargetAttribute | NeonSDK documentation",
    "keywords": "Class TargetAttribute Used to group data models and service definitions so that the class included in the generated code can filtered. Inheritance Object Attribute TargetAttribute Namespace : Neon.ModelGen Assembly : Neon.Common.dll Syntax [AttributeUsage(AttributeTargets.Enum | AttributeTargets.Interface, AllowMultiple = true)] public class TargetAttribute : Attribute Constructors TargetAttribute(String) Constructor. Declaration public TargetAttribute(string name) Parameters Type Name Description String name The target name. Properties Name Returns the group name. Declaration public string Name { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.ModelGen.UxFrameworks.html": {
    "href": "neonsdk/api/Neon.ModelGen.UxFrameworks.html",
    "title": "Enum UxFrameworks | NeonSDK documentation",
    "keywords": "Enum UxFrameworks Enumerates the user interface frameworks that are supported with additional generated code. Namespace : Neon.ModelGen Assembly : Neon.ModelGen.dll Syntax public enum UxFrameworks Fields Name Description None Disables generation of additional UX related code. Xaml Generate property and collection change notifications to support data binding for XAML UX frameworks. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Net.html": {
    "href": "neonsdk/api/Neon.Net.html",
    "title": "Namespace Neon.Net | NeonSDK documentation",
    "keywords": "Namespace Neon.Net Classes HttpApiException Thrown by ASP.NET web API implementations to optionally specify an error code that can ultimately be deserialized as the HTTP reason phrase by clients. HttpException Describes an HTTP error. These are commonly thrown by JsonClient as well as HTTP clients generated by neon-modelgen . JsonClient Implements a light-weight JSON oriented HTTP client. JsonClientPayload Passed as the document to be uploaded with a JsonClient POST or PUT request to customize the payload data and content-type. This can be used in special situations where a REST API needs to push application/x-www-form-urlencoded data or other formats. JsonResponse Encapsulates the response returned from a JsonClient server call. Jwt A lightweight implementation of Json Web Token (JWT) suitable for use by client applications. The JWT structure is described here . LocalHostSection Returned by ListLocalHostsSections() holding information about a named section of host entries within the local $/etc/hosts file. NetConst Network related constants. NetHelper Useful network related utilities. NetworkCidr Describes a IP network subnet using Classless Inter-Domain Routing (CIDR) notation. NetworkConfiguration Retured by GetNetworkConfiguration() with the current network settings including: Routable IP address, network CIDR, network gateway and the DNS server IP addresses. NetworkException Indicates network related problems. NetworkPorts Defines some common network port numbers as well as the TryParse(String, out Int32) method. Pinger Implements a threadsafe subset of the .NET Framework Ping class. ReachableHost Holds information about a reachable host returned by GetReachableHost(IEnumerable<String>, ReachableHostMode) . StreamDocument Used by ModelGen generated service client methods to upload body data from a stream as opposed to serializing a document as JSON for service model methods tagged with BodyStreamAttribute . StreamDocument instances may be passed as the document parameter to JsonClient methods which recognizes these documents as special by uploading the stream data instead of JSON. note You may also use special document directly in your code if necessary. Enums ReachableHostMode Enumerates how GetReachableHost(IEnumerable<String>, ReachableHostMode) should behave when no there are no healthy hosts."
  },
  "neonsdk/api/Neon.Net.HttpApiException.html": {
    "href": "neonsdk/api/Neon.Net.HttpApiException.html",
    "title": "Class HttpApiException | NeonSDK documentation",
    "keywords": "Class HttpApiException Thrown by ASP.NET web API implementations to optionally specify an error code that can ultimately be deserialized as the HTTP reason phrase by clients. Inheritance Object Exception HttpApiException Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public class HttpApiException : Exception, ISerializable Remarks The basic idea here is that non-type REST services will typically need to return a computer readable code to specify business logic level errors so that client programs can easily identify and handle problems without the need for parsing a potentially localized error message. note We're restricting error codes to 1-32 characters including ASCII letters, digits, undercores, dots, or dashes. note This error code will be transmitted back to the client as the >HTTP reason phrase when specified or the standard reason phrase associated with the HTTP status code otherwise. Constructors HttpApiException(String, String, HttpStatusCode) Constructor. Declaration public HttpApiException(string message = null, string errorCode = null, HttpStatusCode statusCode = HttpStatusCode.BadRequest) Parameters Type Name Description String message Optionally specifies the exception message. String errorCode Optionally specifies the HttpStatusCode . This HttpStatusCode statusCode Optionally specifies the HTTP status code. This defaults to BadRequest . Remarks note errorCode is restricted to 1-32 characters including ASCII letters, digits, undercores, dots, or dashes. Properties ErrorCode Returns the business logic error code or null . Declaration public string ErrorCode { get; } Property Value Type Description String StatusCode Returns the HTTP status code. Declaration public HttpStatusCode StatusCode { get; } Property Value Type Description HttpStatusCode Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Net.HttpException.html": {
    "href": "neonsdk/api/Neon.Net.HttpException.html",
    "title": "Class HttpException | NeonSDK documentation",
    "keywords": "Class HttpException Describes an HTTP error. These are commonly thrown by JsonClient as well as HTTP clients generated by neon-modelgen . Inheritance Object Exception HttpException Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public class HttpException : Exception, ISerializable Remarks note The ReasonPhrase property may be used as a way for services to return the computer readable specific error type. This is configured by default by Neon.Web builder extensions and REST services may specify these codes to our base controller Requires() methods or by throwning a HttpApiException . Constructors HttpException(HttpRequestException, String, String) Constructs an exception from a HttpRequestException and optional request details. note This constructor does not initialize the StatusCode property for .NET Standard 2.x, .NET Core 3.x, and .NET Framework and the ReasonPhrase is set to the message from requestException . Declaration public HttpException(HttpRequestException requestException, string requestUri = null, string requestMethod = null) Parameters Type Name Description HttpRequestException requestException The HttpRequestException . String requestUri Optionally specifies the request URL. String requestMethod Optionally specifies the request method. HttpException(HttpResponseMessage) Constructs an exception from an HttpResponseMessage . Declaration public HttpException(HttpResponseMessage response) Parameters Type Name Description HttpResponseMessage response Exceptions Type Condition InvalidOperationException Thrown when the response message does not indicate an error. HttpException(String, String, String, HttpStatusCode) Constructs an exception from the request and response details passed. Declaration public HttpException(string reasonPhrase = null, string requestUri = null, string requestMethod = null, HttpStatusCode statusCode = (HttpStatusCode)0) Parameters Type Name Description String reasonPhrase The HTTP response reason phrase (or null ). String requestUri Optionally specifies the request URL. String requestMethod Optionally specifies the request method. HttpStatusCode statusCode Optionally specifies the response status code. Properties ReasonPhrase Returns the HTTP response status message. Declaration public string ReasonPhrase { get; } Property Value Type Description String RequestMethod Returns the request requestMethod when known. Declaration public string RequestMethod { get; } Property Value Type Description String RequestUri Returns the request URI when known. Declaration public string RequestUri { get; } Property Value Type Description String StatusCode Returns the HTTP response status code. Declaration public HttpStatusCode StatusCode { get; } Property Value Type Description HttpStatusCode Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Net.JsonClient.html": {
    "href": "neonsdk/api/Neon.Net.JsonClient.html",
    "title": "Class JsonClient | NeonSDK documentation",
    "keywords": "Class JsonClient Implements a light-weight JSON oriented HTTP client. Inheritance Object JsonClient Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public class JsonClient : IDisposable Remarks Use GetAsync(String, ArgDictionary, ArgDictionary, CancellationToken) , PutAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) , PostAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) , DeleteAsync(String, ArgDictionary, ArgDictionary, CancellationToken) , OptionsAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) , HeadAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) , or PatchAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) to perform HTTP operations that ensure that a non-error HTTP status code is returned by the servers. Use GetUnsafeAsync(String, ArgDictionary, ArgDictionary, CancellationToken) , PutUnsafeAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) , PostUnsafeAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) , DeleteUnsafeAsync(String, ArgDictionary, ArgDictionary, CancellationToken) , OptionsUnsafeAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) , HeadUnsafeAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) , or PatchUnsafeAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) to perform an HTTP without ensuring a non-error HTTP status code. This class can also handle retrying operations when transient errors are detected. Customize SafeRetryPolicy and/or UnsafeRetryPolicy by setting a IRetryPolicy implementation such as LinearRetryPolicy or ExponentialRetryPolicy . note This class initializes SafeRetryPolicy to a reasonable ExponentialRetryPolicy by default and UnsafeRetryPolicy to NoRetryPolicy . You can override the default retry policy for specific requests using the methods that take an IRetryPolicy as their first parameter. note The JsonClientPayload class can be used to customize both the Content-Type header and the actual payload uploaded with POST and PUT requests. This can be used for those special REST APIs that don't accept JSON payloads. All you need to do is construct a JsonClientPayload instance, specifying the value to be used as the Content-Type header and the payload data as text or a byte array and then pass this as the document parameter to the methods that upload content. The methods will recognize this special type and just send the specified data rather than attempting to serailize the document to JSON. Constructors JsonClient(HttpClient) Used in special situations (like ASP.NET Blazor) where a special HttpClient needs to be created and provided. Declaration public JsonClient(HttpClient httpClient) Parameters Type Name Description HttpClient httpClient The special HttpClient instance to be wrapped. JsonClient(HttpMessageHandler, Boolean) Used to construct a client for most situations, optionally specifying a custom HttpMessageHandler . Declaration public JsonClient(HttpMessageHandler handler = null, bool disposeHandler = false) Parameters Type Name Description HttpMessageHandler handler The optional message handler. Boolean disposeHandler Indicates whether the handler passed will be disposed automatically (defaults to false ). Properties BaseAddress The default base Uri the client will use when relative URIs are specified for requests. Declaration public Uri BaseAddress { get; set; } Property Value Type Description Uri DefaultRequestHeaders Returns the base client's default request headers property to make it easy to customize request headers. Declaration public HttpRequestHeaders DefaultRequestHeaders { get; } Property Value Type Description HttpRequestHeaders DocumentType Specifies the MIME type to use posting or putting documents to the endpoint. This defaults to the standard application/json but some services may require custom values. Declaration public string DocumentType { get; set; } Property Value Type Description String HttpClient Returns the underlying HttpClient . Declaration public HttpClient HttpClient { get; } Property Value Type Description HttpClient SafeRetryPolicy The IRetryPolicy to be used to detect and retry transient network and HTTP errors for the safe methods. This defaults to ExponentialRetryPolicy with the transient detector function set to NetworkOrHttp(Exception) . note You may set this to null to disable safe transient error retry. Declaration public IRetryPolicy SafeRetryPolicy { get; set; } Property Value Type Description IRetryPolicy Timeout The default base Uri the client will use when relative URIs are specified for requests. Declaration public TimeSpan Timeout { get; set; } Property Value Type Description TimeSpan UnsafeRetryPolicy The IRetryPolicy to be used to detect and retry transient network errors for the unsafe methods. This defaults to NoRetryPolicy . note You may set this to null to disable unsafe transient error retry. Declaration public IRetryPolicy UnsafeRetryPolicy { get; set; } Property Value Type Description IRetryPolicy Methods DeleteAsync(IRetryPolicy, String, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP DELETE using a specific IRetryPolicy and ensuring that a success code was returned. Declaration public async Task<JsonResponse> DeleteAsync(IRetryPolicy retryPolicy, string uri, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IRetryPolicy retryPolicy The retry policy or null to disable retries. String uri The target URI. ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. DeleteAsync(String, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP DELETE ensuring that a success code was returned. Declaration public async Task<JsonResponse> DeleteAsync(string uri, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. DeleteAsync<TResult>(String, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP DELETE returning a specific type and ensuring that a success cxode was returned. Declaration public async Task<TResult> DeleteAsync<TResult>(string uri, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task <TResult> The JsonResponse . Type Parameters Name Description TResult The desired result type. Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. DeleteUnsafeAsync(IRetryPolicy, String, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP DELETE using a specific IRetryPolicy and without ensuring that a success code was returned. Declaration public async Task<JsonResponse> DeleteUnsafeAsync(IRetryPolicy retryPolicy, string uri, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IRetryPolicy retryPolicy The retry policy or null to disable retries. String uri The target URI. ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. DeleteUnsafeAsync(String, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP DELETE without ensuring that a success code was returned. Declaration public async Task<JsonResponse> DeleteUnsafeAsync(string uri, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. Dispose() Releases all resources associated with the instance. Declaration public void Dispose() Dispose(Boolean) Releases all associated resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. Finalize() Finalizer. Declaration protected void Finalize() GetAsync(IRetryPolicy, String, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP GET using a specific IRetryPolicy \" and ensuring that a success code was returned. Declaration public async Task<JsonResponse> GetAsync(IRetryPolicy retryPolicy, string uri, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IRetryPolicy retryPolicy The retry policy or null to disable retries. String uri The target URI. ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. GetAsync(String, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP GET ensuring that a success code was returned. Declaration public async Task<JsonResponse> GetAsync(string uri, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. GetAsync<TResult>(String, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP GET returning a specific type and ensuring that a success code was returned. Declaration public async Task<TResult> GetAsync<TResult>(string uri, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task <TResult> The JsonResponse . Type Parameters Name Description TResult The desired result type. Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. GetUnsafeAsync(IRetryPolicy, String, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP GET using a specific IRetryPolicy and without ensuring that a success code was returned. Declaration public async Task<JsonResponse> GetUnsafeAsync(IRetryPolicy retryPolicy, string uri, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IRetryPolicy retryPolicy The retry policy or null to disable retries. String uri The target URI. ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. GetUnsafeAsync(String, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP GET without ensuring that a success code was returned. Declaration public async Task<JsonResponse> GetUnsafeAsync(string uri, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. HeadAsync(IRetryPolicy, String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP HEAD using a specific IRetryPolicy and ensuring that a success code was returned. Declaration public async Task HeadAsync(IRetryPolicy retryPolicy, string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IRetryPolicy retryPolicy The retry policy or null to disable retries. String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task The tracking Task . Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. HeadAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP HEAD ensuring that a success code was returned. Declaration public async Task HeadAsync(string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task The tracking Task . Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. HeadAsync<TResult>(String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP HEAD returning a specific type and ensuring that a success code was returned. Declaration public async Task HeadAsync<TResult>(string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task The tracking Task . Type Parameters Name Description TResult The desired result type. Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. HeadUnsafeAsync(IRetryPolicy, String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP HEAD using a specific IRetryPolicy and without ensuring that a success code was returned. Declaration public async Task<JsonResponse> HeadUnsafeAsync(IRetryPolicy retryPolicy, string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IRetryPolicy retryPolicy The retry policy or null to disable retries. String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. HeadUnsafeAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP HEAD without ensuring that a success code was returned. Declaration public async Task<JsonResponse> HeadUnsafeAsync(string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. OptionsAsync(IRetryPolicy, String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP OPTIONS using a specific IRetryPolicy and ensuring that a success code was returned. Declaration public async Task<JsonResponse> OptionsAsync(IRetryPolicy retryPolicy, string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IRetryPolicy retryPolicy The retry policy or null to disable retries. String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. OptionsAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP OPTIONS ensuring that a success code was returned. Declaration public async Task<JsonResponse> OptionsAsync(string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. OptionsAsync<TResult>(String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP OPTIONS returning a specific type and ensuring that a success code was returned. Declaration public async Task<TResult> OptionsAsync<TResult>(string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task <TResult> The JsonResponse . Type Parameters Name Description TResult The desired result type. Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. OptionsUnsafeAsync(IRetryPolicy, String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP OPTIONS using a specific IRetryPolicy and without ensuring that a success code was returned. Declaration public async Task<JsonResponse> OptionsUnsafeAsync(IRetryPolicy retryPolicy, string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IRetryPolicy retryPolicy The retry policy or null to disable retries. String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. OptionsUnsafeAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP OPTIONS without ensuring that a success code was returned. Declaration public async Task<JsonResponse> OptionsUnsafeAsync(string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. PatchAsync(IRetryPolicy, String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP PATCH using a specific IRetryPolicy and ensuring that a success code was returned. Declaration public async Task<JsonResponse> PatchAsync(IRetryPolicy retryPolicy, string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IRetryPolicy retryPolicy The retry policy or null to disable retries. String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. PatchAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP PATCH ensuring that a success code was returned. Declaration public async Task<JsonResponse> PatchAsync(string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. PatchAsync<TResult>(String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP PATCH returning a specific type and ensuring that a success code was returned. Declaration public async Task<TResult> PatchAsync<TResult>(string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task <TResult> The JsonResponse . Type Parameters Name Description TResult The desired result type. Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. PatchUnsafeAsync(IRetryPolicy, String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP PATCH using a specific IRetryPolicy and without ensuring that a success code was returned. Declaration public async Task<JsonResponse> PatchUnsafeAsync(IRetryPolicy retryPolicy, string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IRetryPolicy retryPolicy The retry policy or null to disable retries. String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. PatchUnsafeAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP PATCH without ensuring that a success code was returned. Declaration public async Task<JsonResponse> PatchUnsafeAsync(string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. PostAsync(IRetryPolicy, String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP POST using a specific IRetryPolicy and ensuring that a success code was returned. Declaration public async Task<JsonResponse> PostAsync(IRetryPolicy retryPolicy, string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IRetryPolicy retryPolicy The retry policy or null to disable retries. String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. PostAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP POST ensuring that a success code was returned. Declaration public async Task<JsonResponse> PostAsync(string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. PostAsync<TResult>(String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP POST returning a specific type and ensuring that a success code was returned. Declaration public async Task<TResult> PostAsync<TResult>(string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task <TResult> The JsonResponse . Type Parameters Name Description TResult The desired result type. Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. PostUnsafeAsync(IRetryPolicy, String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP POST using a specific IRetryPolicy and without ensuring that a success code was returned. Declaration public async Task<JsonResponse> PostUnsafeAsync(IRetryPolicy retryPolicy, string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IRetryPolicy retryPolicy The retry policy or null to disable retries. String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. PostUnsafeAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP POST without ensuring that a success code was returned. Declaration public async Task<JsonResponse> PostUnsafeAsync(string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. PutAsync(IRetryPolicy, String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP PUT using a specific IRetryPolicy \" and ensuring that a success code was returned. Declaration public async Task<JsonResponse> PutAsync(IRetryPolicy retryPolicy, string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IRetryPolicy retryPolicy The retry policy or null to disable retries. String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. PutAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP PUT ensuring that a success code was returned. Declaration public async Task<JsonResponse> PutAsync(string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. PutAsync<TResult>(String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP PUT returning a specific type and ensuring that a success code was returned. Declaration public async Task<TResult> PutAsync<TResult>(string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task <TResult> The JsonResponse . Type Parameters Name Description TResult The desired result type. Exceptions Type Condition SocketException Thrown for network connectivity issues. HttpException Thrown when the server responds with an HTTP error status code. PutUnsafeAsync(IRetryPolicy, String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP PUT using a specific IRetryPolicy \" and without ensuring that a success code was returned. Declaration public async Task<JsonResponse> PutUnsafeAsync(IRetryPolicy retryPolicy, string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IRetryPolicy retryPolicy The retry policy or null to disable retries. String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues. PutUnsafeAsync(String, Object, ArgDictionary, ArgDictionary, CancellationToken) Performs an HTTP PUT without ensuring that a success code was returned. Declaration public async Task<JsonResponse> PutUnsafeAsync(string uri, object document = null, ArgDictionary args = null, ArgDictionary headers = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String uri The target URI. Object document The optional object to be uploaded as the request payload. This may be JSON text, a plain old object that will be serialized as JSON or a StreamDocument to upload body data from a Stream . ArgDictionary args The optional query arguments. ArgDictionary headers The Optional HTTP headers. CancellationToken cancellationToken The optional CancellationToken . Returns Type Description Task < JsonResponse > The JsonResponse . Exceptions Type Condition SocketException Thrown for network connectivity issues."
  },
  "neonsdk/api/Neon.Net.JsonClientPayload.html": {
    "href": "neonsdk/api/Neon.Net.JsonClientPayload.html",
    "title": "Class JsonClientPayload | NeonSDK documentation",
    "keywords": "Class JsonClientPayload Passed as the document to be uploaded with a JsonClient POST or PUT request to customize the payload data and content-type. This can be used in special situations where a REST API needs to push application/x-www-form-urlencoded data or other formats. Inheritance Object JsonClientPayload Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public class JsonClientPayload Constructors JsonClientPayload(String, Byte[]) Constructs an instance from the Content-Type header and byte data to be included with the POST/PUT. Declaration public JsonClientPayload(string contentType, byte[] bytes) Parameters Type Name Description String contentType The value to be passed as the request's Content-Type header. Byte [] bytes The bytes to be uploaded. JsonClientPayload(String, String) Constructs an instance from the Content-Type header and text to be included with the POST/PUT. note The uploaded text will be UTF-8 encoded. Declaration public JsonClientPayload(string contentType, string text) Parameters Type Name Description String contentType The value to be passed as the request's Content-Type header. String text The text payload. Properties ContentBytes Returns the payload bytes to be included in the POST/PUT request. Declaration public byte[] ContentBytes { get; } Property Value Type Description Byte [] ContentType Returns the HTTP Content-Type header to be included in the POST/PUT request. Declaration public string ContentType { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Net.JsonResponse.html": {
    "href": "neonsdk/api/Neon.Net.JsonResponse.html",
    "title": "Class JsonResponse | NeonSDK documentation",
    "keywords": "Class JsonResponse Encapsulates the response returned from a JsonClient server call. Inheritance Object JsonResponse Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public class JsonResponse Constructors JsonResponse(String, String, HttpResponseMessage, String) Constructs a JsonResponse from a lower level HttpResponseMessage . Declaration public JsonResponse(string requestUri, string requestMethod, HttpResponseMessage httpRespose, string responseText) Parameters Type Name Description String requestUri The request URI. String requestMethod The request method. HttpResponseMessage httpRespose The low-level HTTP response. String responseText The response text. Properties HttpResponse Returns the low-level HTTP response. Declaration public HttpResponseMessage HttpResponse { get; } Property Value Type Description HttpResponseMessage IsSuccess Returns true if the response status code indicates success. Declaration public bool IsSuccess { get; } Property Value Type Description Boolean JsonText Returns the response as JSON text or null if the server didn't respond with JSON. Declaration public string JsonText { get; } Property Value Type Description String RequestMethod Returns the request method. Declaration public string RequestMethod { get; } Property Value Type Description String RequestUri Returns the request URI. Declaration public string RequestUri { get; } Property Value Type Description String StatusCode Returns the HTTP response status code. Declaration public HttpStatusCode StatusCode { get; } Property Value Type Description HttpStatusCode Methods As<TResult>() Converts the response document to a specified type or null if the server didn't return JSON content. Declaration public TResult As<TResult>() Returns Type Description TResult The converted document or its default value. Type Parameters Name Description TResult The specified type. AsDynamic() Returns the dynamic JSON response document, array, value or null if the server didn't return JSON content. Declaration public dynamic AsDynamic() Returns Type Description Object The dynamic document or null . EnsureSuccess() Ensures that the status code indicates success by throwing an exception for any error related status codes. Declaration public void EnsureSuccess() Exceptions Type Condition HttpException Thrown if the response doesn't indicate success."
  },
  "neonsdk/api/Neon.Net.Jwt.html": {
    "href": "neonsdk/api/Neon.Net.Jwt.html",
    "title": "Class Jwt | NeonSDK documentation",
    "keywords": "Class Jwt A lightweight implementation of Json Web Token (JWT) suitable for use by client applications. The JWT structure is described here . Inheritance Object Jwt Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public class Jwt Properties Header Returns a Newtonsoft Newtonsoft.Json.Linq.JObject with the JWT header properties. Declaration public JObject Header { get; } Property Value Type Description Newtonsoft.Json.Linq.JObject Payload Returns a Newtonsoft Newtonsoft.Json.Linq.JObject with the JWT payload properties. Declaration public JObject Payload { get; } Property Value Type Description Newtonsoft.Json.Linq.JObject Signature Returns the JWT signature as a byte array. Declaration public byte[] Signature { get; } Property Value Type Description Byte [] Methods Parse(String) Parses a Jwt from an encoded string. note WARNING: This method does not verify the signature so it is not suitable for verifying a JWT's authenticity . Declaration public static Jwt Parse(string jwtString) Parameters Type Name Description String jwtString The encoded JWT string. Returns Type Description Jwt The parsed Jwt instance. Exceptions Type Condition FormatException Thrown if the JWT format is invalid. ToString() Renders the JWT back into its encoded string format. note This method currently returns the original string used to parse the JWT. It does not actually perform any encoding so any changes made to the properties will not be included in the output. Declaration public override string ToString() Returns Type Description String The encode JWT. Overrides Object.ToString() Exceptions Type Condition InvalidOperationException Thrown if the JWT wasn't parsed from a string."
  },
  "neonsdk/api/Neon.Net.LocalHostSection.html": {
    "href": "neonsdk/api/Neon.Net.LocalHostSection.html",
    "title": "Class LocalHostSection | NeonSDK documentation",
    "keywords": "Class LocalHostSection Returned by ListLocalHostsSections() holding information about a named section of host entries within the local $/etc/hosts file. Inheritance Object LocalHostSection Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public class LocalHostSection Constructors LocalHostSection(String, Dictionary<String, IPAddress>) Constructor. Declaration public LocalHostSection(string name, Dictionary<string, IPAddress> hostEntries) Parameters Type Name Description String name Identifies the section. Dictionary < String , IPAddress > hostEntries The dictionary of hostname/address entries. Properties HostEntries Returns the dictionary of hostname/address entries. Declaration public Dictionary<string, IPAddress> HostEntries { get; } Property Value Type Description Dictionary < String , IPAddress > Name Returns the section name. Declaration public string Name { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Net.NetConst.html": {
    "href": "neonsdk/api/Neon.Net.NetConst.html",
    "title": "Class NetConst | NeonSDK documentation",
    "keywords": "Class NetConst Network related constants. Inheritance Object NetConst Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public class NetConst Fields DefaultMTU The default message transmission unit that is commonly configured across the internet. This is the size in bytes of the largest packet including all of the protocol headers from OSI layers 3 and above. This does not include the data link (e.g. Ethernet) overhead. Packets larger than this may need to be fragmented (if allowed) to be transmitted end-to-end across several connected networks. Declaration public const int DefaultMTU = 1500 Field Value Type Description Int32 ICMPHeader The size in bytes of an ICMP packet header. Declaration public const int ICMPHeader = 28 Field Value Type Description Int32 IPHeader The size in bytes of an IP packet header. Declaration public const int IPHeader = 20 Field Value Type Description Int32 TCPHeader The size in bytes of all headers (IP and TCP) added to a TCP packet. Declaration public const int TCPHeader = 40 Field Value Type Description Int32 VXLANHeader The size of VXLAN headers in bytes. https://en.wikipedia.org/wiki/Virtual_Extensible_LAN is a protocol used in cloud and other virtualization environments to scale and separate network traffic between multiple tenants. Network traffic is empasulated in UDP packets with a header added to that identifies the virtual network. This constant specifies the header overhead in bytes. Declaration public const int VXLANHeader = 8 Field Value Type Description Int32"
  },
  "neonsdk/api/Neon.Net.NetHelper.html": {
    "href": "neonsdk/api/Neon.Net.NetHelper.html",
    "title": "Class NetHelper | NeonSDK documentation",
    "keywords": "Class NetHelper Useful network related utilities. Inheritance Object NetHelper Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public static class NetHelper Properties DnsHostRegex Regex for verifying DNS hostnames. Declaration public static Regex DnsHostRegex { get; } Property Value Type Description Regex Methods AddressEquals(IPAddress, IPAddress) Determines whether two IP addresses are equal. Declaration public static bool AddressEquals(IPAddress address1, IPAddress address2) Parameters Type Name Description IPAddress address1 Address 1. IPAddress address2 Address 2. Returns Type Description Boolean true if the addresses are equal. AddressIncrement(IPAddress, Int32) Increments an IPv4 address by adding an integer value. Declaration public static IPAddress AddressIncrement(IPAddress address, int incrementBy = 1) Parameters Type Name Description IPAddress address The input IPv4 address. Int32 incrementBy The increment value (defaults to +1 ). Returns Type Description IPAddress The next address or 0.0.0.0 when we wrap-around the address space. Exceptions Type Condition NotSupportedException Thrown for non-IPv4 addresses. AddressToUint(IPAddress) Converts an IPv4 address into a 32-bit unsigned integer equivalent. Declaration public static uint AddressToUint(IPAddress address) Parameters Type Name Description IPAddress address The input IPv4 address. Returns Type Description UInt32 The 32-bit unsigned integer equivalent. ComputeMSS(Int32, Boolean) Computes the TCP maximum segment size for a given MTU, optionally taking a VXLAN wrapper headers into account. Declaration public static int ComputeMSS(int mtu = 1500, bool vxLan = false) Parameters Type Name Description Int32 mtu Specifies the target MTU (defaults to DefaultMTU ). Boolean vxLan Optionally indicates that traffic is routed via a VXLAN. Returns Type Description Int32 The maximum segment size in bytes. EnsureSuccess(HttpStatusCode, String) Ensures that the status code passed indicates an HTTP request completed successfully. note Status codes between 400-499 are considered to indicate success. Declaration public static HttpStatusCode EnsureSuccess(HttpStatusCode statusCode, string reasonPhrase = null) Parameters Type Name Description HttpStatusCode statusCode Specifies the status code. String reasonPhrase Optionally specifies the reason phrase to be included in any exception thrown. Returns Type Description HttpStatusCode The status code passed. Exceptions Type Condition HttpException Thrown for non-success status codes. GetAddressUriHost(IPAddress) Converts an IPAddress into a host name suitable for using as a Uri host name. For IPv4 addresses, this just returns the address as a string. For IPv6 address, this returns the address surrounded by \"[...]\" to make it compatible with URI standards. Declaration public static string GetAddressUriHost(IPAddress address) Parameters Type Name Description IPAddress address The IP address. Returns Type Description String The host name suitable for including in a URI. Exceptions Type Condition NotSupportedException Thrown for non IPv4 or IPv6 addresses. GetNetworkConfiguration() Returns basic information about the current network connection including the machine's routable IP address, the network CIDR and gateway as well as the DNS server addresses. Declaration public static NetworkConfiguration GetNetworkConfiguration() Returns Type Description NetworkConfiguration A NetworkConfiguration with the information or null when the computer doesn't appear to be connected to a network. Remarks This implementation is somewhat fragile because it relies on GetRoutableIpAddress() which uses heuristics to try to identify a suitable connected network. This may not work as expected for machines with multiple active connections to different networks. GetReachableHost(IEnumerable<String>, ReachableHostMode) Pings one or more hostnames or IP addresses in parallel to identify one that appears to be online and reachable via the network (because it answers a ping). Declaration public static ReachableHost GetReachableHost(IEnumerable<string> hosts, ReachableHostMode failureMode = ReachableHostMode.ReturnFirst) Parameters Type Name Description IEnumerable < String > hosts The hostname or IP addresses to be tested. ReachableHostMode failureMode Specifies what should happen when there are no reachable hosts. This defaults to ReturnFirst . Returns Type Description ReachableHost A ReachableHost instance describing the host or null . Exceptions Type Condition NetworkException Thrown if no hosts are reachable and failureMode is passed as Throw . GetReachableHosts(IEnumerable<String>) Pings one or more hostnames or IP addresses in parallel to identify those that appear to be online and reachable via the network (because it answers a ping). Declaration public static IEnumerable<ReachableHost> GetReachableHosts(IEnumerable<string> hosts) Parameters Type Name Description IEnumerable < String > hosts The hostname or IP addresses to be tested. Returns Type Description IEnumerable < ReachableHost > The ReachableHost instances describing the reachable hosts (if any). GetRoutableIpAddress() Returns a routable (non-loopback) IPv4 address for the current machine. Declaration public static IPAddress GetRoutableIpAddress() Returns Type Description IPAddress The IP address or null if there doesn't appear to be a connected network interface. Remarks This works via a somewhat fragile heuristic. We list all network interfaces, filter out those that are loopback, TAP interfaces, Hyper-V switches as well as any that aren't up and then return the highest speed interface from any remaining interfaces. This may not work as expected for machines with multiple active connections to different networks. GetUnusedTcpPort(IPAddress) Returns a free TCP port for a local network interface. Declaration public static int GetUnusedTcpPort(IPAddress address) Parameters Type Name Description IPAddress address The target interface's IP address. Returns Type Description Int32 The free port number. Remarks note The behavior when GetUnusedTcpPort(IPAddress) is called multiple times without actually listening on the ports is somewhat undefined. We believe most operating systems won't return the same port again for a while (perhaps a few minutes) so you're probably safe retrieving a few unused ports before using them for testing and other non-production purposes. Production code should begin listening on and unused ports immediately after retrieving one. This will ensure that the unused ports returned will be unique and also help avoid having another application grab the port before you have a chance to listen on it. Exceptions Type Condition NetworkException Thrown when there are no available ports. IsValidHost(String) Verifies that a string is a valid DNS hostname. Declaration public static bool IsValidHost(string host) Parameters Type Name Description String host The string being tested. Returns Type Description Boolean true if the hostname is valid. IsValidPort(Int32) Determines whether an integer is a valid network port number. Declaration public static bool IsValidPort(int port) Parameters Type Name Description Int32 port The port. Returns Type Description Boolean true if the port is valid. ListLocalHostsSections() Lists the names of the local host sections. Declaration public static IEnumerable<LocalHostSection> ListLocalHostsSections() Returns Type Description IEnumerable < LocalHostSection > The section names converted to uppercase. ModifyLocalHosts(String, Dictionary<String, IPAddress>) Used to modify the $/etc/hosts file used by the DNS resolver for testing, debugging and possibly other purposes. note WARNING: Modifying the hosts file will impact all processes on the system, not just the current process. Declaration public static void ModifyLocalHosts(string section, Dictionary<string, IPAddress> hostEntries = null) Parameters Type Name Description String section Specifies the string to use to delimit the host names section. This is required and must be a non-empty string consisting of up to 63 non-control ASCII characters. Section names are case sensitive. Dictionary < String , IPAddress > hostEntries A dictionary mapping the hostnames to an IP address or null . Remarks note This method requires elevated administrative privileges. This method adds or removes a temporary section of host entry definitions delimited by special comment lines. When hostEntries is non-null and non-empty, the section will be added or updated. Otherwise, the section will be removed. You can remove all host sections by passing both hostEntries and section as null . ParseIPv4Address(String) Parses an IPv4 address. Declaration public static IPAddress ParseIPv4Address(string input) Parameters Type Name Description String input The address text. Returns Type Description IPAddress The IPAddress . Exceptions Type Condition FormatException Thrown for an invalid address. ParseIPv4Endpoint(String) Parses an IPv4 endpoint from a string. Declaration public static IPEndPoint ParseIPv4Endpoint(string input) Parameters Type Name Description String input The input. Returns Type Description IPEndPoint The parsed IPEndPoint . Exceptions Type Condition FormatException Thrown if the input is not valid. ParseIPv6Address(String) Parses an IPv6 address. Declaration public static IPAddress ParseIPv6Address(string input) Parameters Type Name Description String input The address text. Returns Type Description IPAddress The IPAddress . Exceptions Type Condition FormatException Thrown for an invalid address. ToAwsS3Uri(String) Converts an S3 or standard HTTPS URI into an S3 URI. Declaration public static string ToAwsS3Uri(string uri) Parameters Type Name Description String uri The source URI. Returns Type Description String The equivalent S3 URI. TryParseIPv4Address(String, out IPAddress) Attempts to parse an IPv4 address. Declaration public static bool TryParseIPv4Address(string input, out IPAddress address) Parameters Type Name Description String input The address text. IPAddress address Set to the parsed address on success. Returns Type Description Boolean true on success. TryParseIPv4Endpoint(String, out IPEndPoint) Attempts to parse an IPv4 network endpoint. Declaration public static bool TryParseIPv4Endpoint(string input, out IPEndPoint endpoint) Parameters Type Name Description String input The input string. IPEndPoint endpoint Returns as the parsed endpoint. Returns Type Description Boolean true on success. TryParseIPv6Address(String, out IPAddress) Attempts to parse an IPv4 address. Declaration public static bool TryParseIPv6Address(string input, out IPAddress address) Parameters Type Name Description String input The address text. IPAddress address Set to the parsed address on success. Returns Type Description Boolean true on success. UintToAddress(UInt32) Converts an unsigned 32-bit integer into an IPv4 address. Declaration public static IPAddress UintToAddress(uint value) Parameters Type Name Description UInt32 value The input value. Returns Type Description IPAddress The IPAddress ."
  },
  "neonsdk/api/Neon.Net.NetworkCidr.html": {
    "href": "neonsdk/api/Neon.Net.NetworkCidr.html",
    "title": "Class NetworkCidr | NeonSDK documentation",
    "keywords": "Class NetworkCidr Describes a IP network subnet using Classless Inter-Domain Routing (CIDR) notation. Inheritance Object NetworkCidr Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public class NetworkCidr Remarks This is generally used for describing an IP subnet. See the following Wikipedia article for more information. https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation note This class currently supports only IPv4 addresses. Constructors NetworkCidr(IPAddress, Int32) Constructs a subnet from an IPv4 address and prefix length. Declaration public NetworkCidr(IPAddress address, int prefixLength) Parameters Type Name Description IPAddress address The IP address. Int32 prefixLength The network prefix mask length in bits. NetworkCidr(IPAddress, IPAddress) Constructs a subnet from an IPv4 address and subnet mask. Declaration public NetworkCidr(IPAddress address, IPAddress subnetMask) Parameters Type Name Description IPAddress address The IP address. IPAddress subnetMask The subnet mask. Properties Address Returns the CIDR address. Declaration public IPAddress Address { get; } Property Value Type Description IPAddress AddressCount Returns the number of IP addresses within the subnet. Declaration public long AddressCount { get; } Property Value Type Description Int64 All Returns the 0.0.0.0/0 subnet which includes all public and private IP addresses. Declaration public static NetworkCidr All { get; } Property Value Type Description NetworkCidr FirstAddress Returns the first IP address in the subnet. Declaration public IPAddress FirstAddress { get; } Property Value Type Description IPAddress FirstUsableAddress Returns the first usable IP address in the subnet. This is often the gateway address. Declaration public IPAddress FirstUsableAddress { get; } Property Value Type Description IPAddress LastAddress Returns the last IP address in the subnet. Declaration public IPAddress LastAddress { get; } Property Value Type Description IPAddress Mask Returns the subnet mask. Declaration public IPAddress Mask { get; } Property Value Type Description IPAddress NextAddress Returns the first address after the subnet. Declaration public IPAddress NextAddress { get; } Property Value Type Description IPAddress PrefixLength Returns the prefix length in bits. Declaration public int PrefixLength { get; } Property Value Type Description Int32 UsableAddressCount Returns the number of usable IP addresses within the subnet. This returns AddressCount - 1 to exclude the first address (.0) in the subnet as well as the last address which is reserved for broadcasting. Declaration public long UsableAddressCount { get; } Property Value Type Description Int64 Methods Contains(NetworkCidr) Determines whether a subnet is completely contained within the current subnet. Declaration public bool Contains(NetworkCidr subnet) Parameters Type Name Description NetworkCidr subnet The subnet being tested. Returns Type Description Boolean true if subnet is fully contained. Contains(IPAddress) Determines whether an IP address is within the subnet. Declaration public bool Contains(IPAddress address) Parameters Type Name Description IPAddress address The IP address. Returns Type Description Boolean true if the address is within the subnet. Exceptions Type Condition NotSupportedException Thrown if for IPv6 addresses. Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() Normalize(String) Attempts to normalize a network CIDR string by ensuring that the address actually fits the mask. Declaration public static string Normalize(string input) Parameters Type Name Description String input The input string. Returns Type Description String The normalizes CIDR converted back to a string. Exceptions Type Condition ArgumentException Thrown if the input is not a valid CIDR. Overlaps(NetworkCidr) Determines whether this subnet overlaps another. Declaration public bool Overlaps(NetworkCidr subnet) Parameters Type Name Description NetworkCidr subnet The subnet being tested. Returns Type Description Boolean true if the subnets overlap. Exceptions Type Condition ArgumentNullException Thrown if subnet is null . Parse(String) Parses a subnet from CIDR notation in the form of ip-address / prefix , where prefix is the network prefix length in bits. Declaration public static NetworkCidr Parse(string input) Parameters Type Name Description String input The input string. Returns Type Description NetworkCidr The parsed NetworkCidr . Exceptions Type Condition ArgumentException Thrown if the input is not correctly formatted. ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() TryParse(String, out NetworkCidr) Attempts to parse a subnet from CIDR notation in the form of ip-address / prefix , where prefix is the network prefix length in bits. Declaration public static bool TryParse(string input, out NetworkCidr cidr) Parameters Type Name Description String input The input string. NetworkCidr cidr The parsed NetworkCidr . Returns Type Description Boolean true if the operation was successful. Operators Equality(NetworkCidr, NetworkCidr) Compares two NetworkCidr instances for equality. Declaration public static bool operator ==(NetworkCidr v1, NetworkCidr v2) Parameters Type Name Description NetworkCidr v1 Value 1. NetworkCidr v2 Value 2 Returns Type Description Boolean true if the values are equal. Implicit(NetworkCidr to String) Implicitly casts a NetworkCidr into a string. Declaration public static implicit operator string (NetworkCidr v) Parameters Type Name Description NetworkCidr v The value (or null) . Returns Type Description String Inequality(NetworkCidr, NetworkCidr) Compares two NetworkCidr instances for inequality. Declaration public static bool operator !=(NetworkCidr v1, NetworkCidr v2) Parameters Type Name Description NetworkCidr v1 Value 1. NetworkCidr v2 Value 2 Returns Type Description Boolean true if the values are not equal."
  },
  "neonsdk/api/Neon.Net.NetworkConfiguration.html": {
    "href": "neonsdk/api/Neon.Net.NetworkConfiguration.html",
    "title": "Class NetworkConfiguration | NeonSDK documentation",
    "keywords": "Class NetworkConfiguration Retured by GetNetworkConfiguration() with the current network settings including: Routable IP address, network CIDR, network gateway and the DNS server IP addresses. Inheritance Object NetworkConfiguration Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public class NetworkConfiguration Properties Address The routable IP address of the current machine. Declaration public string Address { get; set; } Property Value Type Description String Gateway The IP address of the local network gateway. Declaration public string Gateway { get; set; } Property Value Type Description String InterfaceName Returns the network interface name. Declaration public string InterfaceName { get; set; } Property Value Type Description String NameServers The IP address of the local network's DNS name servers. Declaration public string[] NameServers { get; set; } Property Value Type Description String [] Subnet The subnet (CIDR) for the local network. Declaration public string Subnet { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Net.NetworkException.html": {
    "href": "neonsdk/api/Neon.Net.NetworkException.html",
    "title": "Class NetworkException | NeonSDK documentation",
    "keywords": "Class NetworkException Indicates network related problems. Inheritance Object Exception NetworkException Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public class NetworkException : Exception, ISerializable Constructors NetworkException(String, Exception) Constuctor. Declaration public NetworkException(string message, Exception inner = null) Parameters Type Name Description String message The message. Exception inner The optional inner exception. Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Net.NetworkPorts.html": {
    "href": "neonsdk/api/Neon.Net.NetworkPorts.html",
    "title": "Class NetworkPorts | NeonSDK documentation",
    "keywords": "Class NetworkPorts Defines some common network port numbers as well as the TryParse(String, out Int32) method. Inheritance Object NetworkPorts Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public static class NetworkPorts Fields AAA Authentication, Authorization, and Accounting port. This port was originally used by the RADIUS protocol and is still used fairly widely ( 1645 ). Declaration public const int AAA = 1645 Field Value Type Description Int32 AMQP The Advanced Messaging Queue Protocol (AMQP) port (e.g. RabbitMQ). Declaration public const int AMQP = 5672 Field Value Type Description Int32 AppCacherNg apt-cacher-ng Debian/Ubuntu package proxy port. Declaration public const int AppCacherNg = 3142 Field Value Type Description Int32 Cadence Uber Cadence primary cluster port. Declaration public const int Cadence = 7933 Field Value Type Description Int32 Cassandra The Cassnadra database port. Declaration public const int Cassandra = 9042 Field Value Type Description Int32 Consul The HashiCorp Consul service (RPC) port ( 8500 ). The protocol will be HTTP or HTTPS depending on how Consul is configured. Declaration public const int Consul = 8500 Field Value Type Description Int32 CouchbaseApi The Couchbase Server REST API port ( 8092 ). Declaration public const int CouchbaseApi = 8092 Field Value Type Description Int32 CouchbaseSyncGatewayAdmin The Couchbase Sync Gateway administration REST API port ( 4985 ). Declaration public const int CouchbaseSyncGatewayAdmin = 4985 Field Value Type Description Int32 CouchbaseSyncGatewayPublic The Couchbase Sync Gateway public REST API port ( 4984 ). Declaration public const int CouchbaseSyncGatewayPublic = 4984 Field Value Type Description Int32 CouchbaseWebAdmin The Couchbase Server web administration user interface port ( 8091 ). Declaration public const int CouchbaseWebAdmin = 8091 Field Value Type Description Int32 DAYTIME Daytime (RFC 867) port ( 13 ). Declaration public const int DAYTIME = 13 Field Value Type Description Int32 DNS Domain Name System port ( 53 ). Declaration public const int DNS = 53 Field Value Type Description Int32 Docker The Docker API port ( 2375 ). Declaration public const int Docker = 2375 Field Value Type Description Int32 DockerSwarm The Docker Swarm node advertise port ( 2377 ). Declaration public const int DockerSwarm = 2377 Field Value Type Description Int32 ECHO PING port ( 7 ). Declaration public const int ECHO = 7 Field Value Type Description Int32 ElasticSearchHttp The ElasticSearch client HTTP port ( 9200 ). Declaration public const int ElasticSearchHttp = 9200 Field Value Type Description Int32 ElasticSearchTcp The ElasticSearch client TCP port ( 9300 ). Declaration public const int ElasticSearchTcp = 9300 Field Value Type Description Int32 Etcd The Etcd API port ( 2379 ). Declaration public const int Etcd = 2379 Field Value Type Description Int32 EtcdPeer The internal Etcd cluster peer API port ( 2380 ). Declaration public const int EtcdPeer = 2380 Field Value Type Description Int32 FTP File Transfer Protocol (control) port ( 21 ). Declaration public const int FTP = 21 Field Value Type Description Int32 FTPDATA File Transfer Protocol (data) port ( 20 ). Declaration public const int FTPDATA = 20 Field Value Type Description Int32 GrafanaDashboard Default port for the Grafana dashboard. Declaration public const int GrafanaDashboard = 9000 Field Value Type Description Int32 HTTP HyperText Transport Protocol port ( 80 ). Declaration public const int HTTP = 80 Field Value Type Description Int32 HTTPS Secure HyperText Transport Protocol port ( 443 ). Declaration public const int HTTPS = 443 Field Value Type Description Int32 IMAP Internet Message Access Protocol port ( 143 ). Declaration public const int IMAP = 143 Field Value Type Description Int32 IstioEnvoyAdmin Envoy sidecar admin port. Declaration public const int IstioEnvoyAdmin = 15000 Field Value Type Description Int32 IstioEnvoyInbound Envoy sidecar inbound port. Declaration public const int IstioEnvoyInbound = 15006 Field Value Type Description Int32 IstioEnvoyOutbound Envoy sidecar outbound port. Declaration public const int IstioEnvoyOutbound = 15001 Field Value Type Description Int32 IstioEnvoyTelemetry Envoy sidecar Prometheus telemetry. Declaration public const int IstioEnvoyTelemetry = 15090 Field Value Type Description Int32 IstioEnvoyTunnel Envoy sidecar tunnel port (inbound). Declaration public const int IstioEnvoyTunnel = 15008 Field Value Type Description Int32 IstioIstioHealth Istio health check. Declaration public const int IstioIstioHealth = 15021 Field Value Type Description Int32 IstioIstioTelemetry Merged Prometheus telemetry. Declaration public const int IstioIstioTelemetry = 15020 Field Value Type Description Int32 Kibana The Kibana website port ( 5601 ). Declaration public const int Kibana = 5601 Field Value Type Description Int32 KubernetesApiServer Kubernetes API port. Declaration public const int KubernetesApiServer = 6443 Field Value Type Description Int32 LDAP Lightweight Directory Access Protocol port ( 389 ). Declaration public const int LDAP = 389 Field Value Type Description Int32 LDAPS Lightweight Directory Access Protocol over TLS/SSL port ( 636 ). Declaration public const int LDAPS = 636 Field Value Type Description Int32 NTP Network Time Protocol port ( 123 ). Declaration public const int NTP = 123 Field Value Type Description Int32 OpenVPN The OpenVPN port. Declaration public const int OpenVPN = 1194 Field Value Type Description Int32 POP3 Post Office Protocol version 3 port ( 110 ). Declaration public const int POP3 = 110 Field Value Type Description Int32 Postgres The Postgres database port. Declaration public const int Postgres = 5432 Field Value Type Description Int32 PrometheusDashboard Default port for the Prometheus dashboard. Declaration public const int PrometheusDashboard = 9090 Field Value Type Description Int32 PrometheusMetrics The standard Prometheus scraping port exposed by Neon related services, including custom user services built on Neon.Service . Declaration public const int PrometheusMetrics = 9762 Field Value Type Description Int32 RabbitMQAdmin RabbitMQ Admin dashboard port. Declaration public const int RabbitMQAdmin = 15672 Field Value Type Description Int32 RADIUS RADIUS authentication and billing protocol (port 1812 ). Declaration public const int RADIUS = 1812 Field Value Type Description Int32 SFTP Secure File Transfer Protocol port ( 22 ). Declaration public const int SFTP = 22 Field Value Type Description Int32 SIP Session Initiation Protocol port ( 5060 ). Declaration public const int SIP = 5060 Field Value Type Description Int32 SIPS Secure Session Initiation Protocol (over TLS) port ( 5061 ). Declaration public const int SIPS = 5061 Field Value Type Description Int32 SMTP Simple Message Transport Protocol port ( 25 ). Declaration public const int SMTP = 25 Field Value Type Description Int32 SNMP Simple Network Managenment Protocol (SNMP) port ( 161 ). Declaration public const int SNMP = 161 Field Value Type Description Int32 SNMPTRAP Simple Network Managenment Protocol (trap) port ( 162 ) Declaration public const int SNMPTRAP = 162 Field Value Type Description Int32 SOCKS The SOCKS (Socket Secure) proxy port ( 1080 ). Declaration public const int SOCKS = 1080 Field Value Type Description Int32 SQUID The default port for the Squid open source proxy project port ( 3128 ). Declaration public const int SQUID = 3128 Field Value Type Description Int32 SSH Secure Shell port ( 22 ). Declaration public const int SSH = 22 Field Value Type Description Int32 SSL Secure Socket Layer port ( 443 ). Declaration public const int SSL = 443 Field Value Type Description Int32 SysLog The SysLog UDP port ( 514 ). Declaration public const int SysLog = 514 Field Value Type Description Int32 TDAgentForward The Treasure Data td-agent forward port to accept TCP and UDP traffic ( 24224 ). Declaration public const int TDAgentForward = 24224 Field Value Type Description Int32 TDAgentHttp The Treasure Data td-agent HTTP port ( 9880 ). Declaration public const int TDAgentHttp = 9880 Field Value Type Description Int32 TELNET Remote terminal protocol port ( 23 ). Declaration public const int TELNET = 23 Field Value Type Description Int32 Temporal Temporal primary cluster port. Declaration public const int Temporal = 7233 Field Value Type Description Int32 TFTP Trivial File Transfer Protocol port ( 69 ). Declaration public const int TFTP = 69 Field Value Type Description Int32 TIME TIME protocol port ( 37 ). Declaration public const int TIME = 37 Field Value Type Description Int32 Vault The HashiCorp Vault service port ( 8200 ). Declaration public const int Vault = 8200 Field Value Type Description Int32 Methods TryParse(String, out Int32) Attempts to parse an integer or well known port name from a string and return the integer TCP port number. Declaration public static bool TryParse(string input, out int port) Parameters Type Name Description String input The port number or name as as string. Int32 port Receives the parsed port number. Returns Type Description Boolean true if a port was successfully parsed."
  },
  "neonsdk/api/Neon.Net.Pinger.html": {
    "href": "neonsdk/api/Neon.Net.Pinger.html",
    "title": "Class Pinger | NeonSDK documentation",
    "keywords": "Class Pinger Implements a threadsafe subset of the .NET Framework Ping class. Inheritance Object Pinger Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public class Pinger : IDisposable Remarks Unfortunately, the .NET Framework Ping class is not threadsafe (even the async methods). So, we need to ensure that only one ping request is performed on any given instance. My original idea was to simply create and dispose Ping ] instances on the fly for each request, but I changed my mind after thinking about the potential performance overhead as well as the potential for exhausting ephemeral socket ports. Instead, I'm going to maintain a queue of Ping instances that that can be reused for subsequent queries. Constructors Pinger() Constructor. Declaration public Pinger() Methods Clear() Disposes any unused underlying Ping instances. Declaration public void Clear() Dispose() Releases all resources associated with the instance. Declaration public void Dispose() Dispose(Boolean) Releases all associated resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. Finalize() Finalizer. Declaration protected void Finalize() SendPingAsync(IPAddress, Int32) Pings a IP address. Declaration public async Task<PingReply> SendPingAsync(IPAddress address, int timeoutMilliseconds = 2000) Parameters Type Name Description IPAddress address The target address. Int32 timeoutMilliseconds Optional timeout in milliseconds (defaults to 2000). Returns Type Description Task < PingReply > A PingReply . SendPingAsync(String, Int32) Pings a IP address passed as a string . Declaration public async Task<PingReply> SendPingAsync(string address, int timeoutMilliseconds = 2000) Parameters Type Name Description String address The target address. Int32 timeoutMilliseconds Optional timeout in milliseconds (defaults to 2000). Returns Type Description Task < PingReply > A PingReply ."
  },
  "neonsdk/api/Neon.Net.ReachableHost.html": {
    "href": "neonsdk/api/Neon.Net.ReachableHost.html",
    "title": "Class ReachableHost | NeonSDK documentation",
    "keywords": "Class ReachableHost Holds information about a reachable host returned by GetReachableHost(IEnumerable<String>, ReachableHostMode) . Inheritance Object ReachableHost Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public class ReachableHost Constructors ReachableHost(String, IPAddress, TimeSpan, Boolean) Constructor. Declaration public ReachableHost(string host, IPAddress address, TimeSpan time, bool unreachable = false) Parameters Type Name Description String host The target hostname. IPAddress address The target IP address or null if the target is un reachable. TimeSpan time The ping and answer round trip time. Boolean unreachable Optionally specifies that the host was reachable. Properties Address The target IP address or null if the target is unreachable. Declaration public IPAddress Address { get; } Property Value Type Description IPAddress Host The target host name. Declaration public string Host { get; } Property Value Type Description String Time The ping and answer round trip time. Declaration public TimeSpan Time { get; } Property Value Type Description TimeSpan Unreachable Indicates that the host was unreachable but was returned anyway because ReturnFirst was specified. Declaration public bool Unreachable { get; } Property Value Type Description Boolean"
  },
  "neonsdk/api/Neon.Net.ReachableHostMode.html": {
    "href": "neonsdk/api/Neon.Net.ReachableHostMode.html",
    "title": "Enum ReachableHostMode | NeonSDK documentation",
    "keywords": "Enum ReachableHostMode Enumerates how GetReachableHost(IEnumerable<String>, ReachableHostMode) should behave when no there are no healthy hosts. Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public enum ReachableHostMode Fields Name Description ReturnFirst Return the first host when no hosts respond. ReturnNull Return null when no hosts respond. Throw Throw an exception when no hosts respond. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Net.StreamDocument.html": {
    "href": "neonsdk/api/Neon.Net.StreamDocument.html",
    "title": "Class StreamDocument | NeonSDK documentation",
    "keywords": "Class StreamDocument Used by ModelGen generated service client methods to upload body data from a stream as opposed to serializing a document as JSON for service model methods tagged with BodyStreamAttribute . StreamDocument instances may be passed as the document parameter to JsonClient methods which recognizes these documents as special by uploading the stream data instead of JSON. note You may also use special document directly in your code if necessary. Inheritance Object StreamDocument Namespace : Neon.Net Assembly : Neon.Common.dll Syntax public class StreamDocument Constructors StreamDocument(Stream) Default constructor. Declaration public StreamDocument(Stream stream) Parameters Type Name Description Stream stream The stream whose contents from the current position to the end of the stream will be uploaded as the request body. Properties BufferSize Specifies the size of the buffer to be used for transmitting the body data. This defaults to 8 GiB . Declaration public int BufferSize { get; set; } Property Value Type Description Int32 ContentType Specifies the Content-Type to be used for the uploaded data. This default to application/octet-stream . Declaration public string ContentType { get; set; } Property Value Type Description String Stream Returns the stream whose contents from the current position to the end of the stream will be uploaded as the request body. Declaration public Stream Stream { get; } Property Value Type Description Stream"
  },
  "neonsdk/api/Neon.Postgres.ConnectionExtensions.html": {
    "href": "neonsdk/api/Neon.Postgres.ConnectionExtensions.html",
    "title": "Class ConnectionExtensions | NeonSDK documentation",
    "keywords": "Class ConnectionExtensions Extends Npgsql.NpgsqlConnection with useful methods. Inheritance Object ConnectionExtensions Namespace : Neon.Postgres Assembly : Neon.Postgres.dll Syntax public static class ConnectionExtensions Methods ExecuteBatch(NpgsqlConnection, String, NpgsqlTransaction) Executes a batch of SQL commands saeparated by lines including go separators. This works like Microsoft SQL server related tools. Declaration public static void ExecuteBatch(this NpgsqlConnection connection, string batchText, NpgsqlTransaction transaction = null) Parameters Type Name Description Npgsql.NpgsqlConnection connection The database connection. String batchText The SQL commands possibly separated by go lines. Npgsql.NpgsqlTransaction transaction Optionally specifies the transaction. Remarks It's often necessary to execute a sequence of SQL commands that depend on each other. One example is a command that creates a table followed by commands that write rows. You might think that you could achieve this by executing the following as one command: CREATE TABLE my_table (name text); INSERT INTO my_table (name) values ('Jack'); INSERT INTO my_table (name) values ('Jill'); but this won't actually work because the database generates a query plan for the entire command and when it does this and sees the inserts into [my_table] but the table doesn't actually exist at the time the query plan is being created. So the command will fail. What you really need to do is create the table first as a separate command and then do the inserts as one or more subsequent commands. This is not terribly convenient so we've introduced the concept of a batch of commands via this method. Here's what this would look like: CREATE TABLE my_table (name text); go INSERT INTO my_table (name) values ('Jack'); INSERT INTO my_table (name) values ('Jill'); See how the go line separates the table creation from the inserts. This method will split the batchText into separate commands on any go lines and then execute these commands in order. note go is case insensitive and any leading or trailing space on the line will be ignored. ExecuteBatchAsync(NpgsqlConnection, String, CancellationToken, NpgsqlTransaction) Asynchronously a batch of SQL commands saeparated by lines including go separators. This works like Microsoft SQL server related tools. Declaration public static async Task ExecuteBatchAsync(this NpgsqlConnection connection, string batchText, CancellationToken cancellationToken = default(CancellationToken), NpgsqlTransaction transaction = null) Parameters Type Name Description Npgsql.NpgsqlConnection connection The database connection. String batchText The SQL commands possibly separated by go lines. CancellationToken cancellationToken Optional cancellation token. Npgsql.NpgsqlTransaction transaction Optionally specifies the transaction. Returns Type Description Task The tracking Task . Remarks It's often necessary to execute a sequence of SQL commands that depend on each other. One example is a command that creates a table followed by commands that write rows. You might think that you could achieve this by executing the following as one command: CREATE TABLE my_table (name text); INSERT INTO my_table (name) values ('Jack'); INSERT INTO my_table (name) values ('Jill'); but this won't actually work because the database generates a query plan for the entire command and when it does this and sees the inserts into [my_table] but the table doesn't actually exist at the time the query plan is being created. So the command will fail. What you really need to do is create the table first as a separate command and then do the inserts as one or more subsequent commands. This is not terribly convenient so we've introduced the concept of a batch of commands via this method. Here's what this would look like: CREATE TABLE my_table (name text); go INSERT INTO my_table (name) values ('Jack'); INSERT INTO my_table (name) values ('Jill'); See how the go line separates the table creation from the inserts. This method will split the batchText into separate commands on any go lines and then execute these commands in order. note go is case insensitive and any leading or trailing space on the line will be ignored. ExecuteNonQuery(NpgsqlConnection, String, NpgsqlTransaction) Executes a SQL command that does not perform a query. Declaration public static int ExecuteNonQuery(this NpgsqlConnection connection, string cmdText, NpgsqlTransaction transaction = null) Parameters Type Name Description Npgsql.NpgsqlConnection connection The database connection. String cmdText The SQL command. Npgsql.NpgsqlTransaction transaction Optionally specifies the transaction. Returns Type Description Int32 The number of rows impacted. Remarks note Although this method is convienent, consider explictly creating and preparing Npgsql.NpgsqlCommand for frequently executed commands for better performance. ExecuteNonQueryAsync(NpgsqlConnection, String, CancellationToken, NpgsqlTransaction) Asynchronously executes a SQL command that does not perform a query. Declaration public static async Task<int> ExecuteNonQueryAsync(this NpgsqlConnection connection, string cmdText, CancellationToken cancellationToken = default(CancellationToken), NpgsqlTransaction transaction = null) Parameters Type Name Description Npgsql.NpgsqlConnection connection The database connection. String cmdText The SQL command. CancellationToken cancellationToken Optional cancellation token. Npgsql.NpgsqlTransaction transaction Optionally specifies the transaction. Returns Type Description Task < Int32 > The number of rows impacted. Remarks note Although this method is convienent, consider explictly creating and preparing Npgsql.NpgsqlCommand for frequently executed commands for better performance. ExecuteReader(NpgsqlConnection, String, CommandBehavior, NpgsqlTransaction) Executes a SQL query and returns the data reader to be used to process the results. Declaration public static NpgsqlDataReader ExecuteReader(this NpgsqlConnection connection, string cmdText, CommandBehavior behavior = CommandBehavior.Default, NpgsqlTransaction transaction = null) Parameters Type Name Description Npgsql.NpgsqlConnection connection The database connection. String cmdText The SQL command. CommandBehavior behavior Optionally specifies the command behavior. Npgsql.NpgsqlTransaction transaction Optionally specifies the transaction. Returns Type Description Npgsql.NpgsqlDataReader The Npgsql.NpgsqlDataReader . Remarks note Although this method is convenient, consider explictly creating and preparing Npgsql.NpgsqlCommand for frequently executed commands for better performance. ExecuteReaderAsync(NpgsqlConnection, String, CommandBehavior, CancellationToken, NpgsqlTransaction) Asynchronously executes a SQL query and returns the data reader to be used to process the results. Declaration public static async Task<NpgsqlDataReader> ExecuteReaderAsync(this NpgsqlConnection connection, string cmdText, CommandBehavior behavior = CommandBehavior.Default, CancellationToken cancellationToken = default(CancellationToken), NpgsqlTransaction transaction = null) Parameters Type Name Description Npgsql.NpgsqlConnection connection The database connection. String cmdText The SQL command. CommandBehavior behavior Optionally specifies the command behavior. CancellationToken cancellationToken Optional cancellation token. Npgsql.NpgsqlTransaction transaction Optionally specifies the transaction. Returns Type Description Task < Npgsql.NpgsqlDataReader > The Npgsql.NpgsqlDataReader . Remarks note Although this method is convenient, consider explictly creating and preparing Npgsql.NpgsqlCommand for frequently executed commands for better performance. ExecuteScalar(NpgsqlConnection, String, NpgsqlTransaction) Executes a SQL query and returns the first column from the first row returned. All other rows and columns will be ignored. Declaration public static object ExecuteScalar(this NpgsqlConnection connection, string cmdText, NpgsqlTransaction transaction = null) Parameters Type Name Description Npgsql.NpgsqlConnection connection The database connection. String cmdText The SQL command. Npgsql.NpgsqlTransaction transaction Optionally specifies the transaction. Returns Type Description Object The value of the first column on the first row returned by the command. Remarks note Although this method is convenient, consider explictly creating and preparing Npgsql.NpgsqlCommand for frequently executed commands for better performance. ExecuteScalarAsync(NpgsqlConnection, String, CancellationToken, NpgsqlTransaction) Asynchronously executes a SQL query and returns the first column from the first row returned. All other rows and columns will be ignored. Declaration public static async Task<object> ExecuteScalarAsync(this NpgsqlConnection connection, string cmdText, CancellationToken cancellationToken = default(CancellationToken), NpgsqlTransaction transaction = null) Parameters Type Name Description Npgsql.NpgsqlConnection connection The database connection. String cmdText The SQL command. CancellationToken cancellationToken Optional cancellation token. Npgsql.NpgsqlTransaction transaction Optionally specifies the transaction. Returns Type Description Task < Object > The value of the first column on the first row returned by the command. Remarks note Although this method is convenient, consider explictly creating and preparing Npgsql.NpgsqlCommand for frequently executed commands for better performance. OpenDatabase(NpgsqlConnection, String) Clones an existing database connection by retaining all connection settings except that the new connection will be opened to target a new database. Declaration public static NpgsqlConnection OpenDatabase(this NpgsqlConnection connection, string database) Parameters Type Name Description Npgsql.NpgsqlConnection connection The existing connection. String database The target database for the new connection. Returns Type Description Npgsql.NpgsqlConnection The new Npgsql.NpgsqlConnection . OpenDatabaseAsync(NpgsqlConnection, String) Asynchronously clones an existing database connection by retaining all connection settings except that the connection will be opened to target a new database. Declaration public static async Task<NpgsqlConnection> OpenDatabaseAsync(this NpgsqlConnection connection, string database) Parameters Type Name Description Npgsql.NpgsqlConnection connection The existing connection. String database The target database for the new connection. Returns Type Description Task < Npgsql.NpgsqlConnection > The new Npgsql.NpgsqlConnection ."
  },
  "neonsdk/api/Neon.Postgres.DatabaseStatus.html": {
    "href": "neonsdk/api/Neon.Postgres.DatabaseStatus.html",
    "title": "Class DatabaseStatus | NeonSDK documentation",
    "keywords": "Class DatabaseStatus Holds information about a database's schema as returned by GetStatusAsync() . Inheritance Object DatabaseStatus Namespace : Neon.Postgres Assembly : Neon.Postgres.dll Syntax public class DatabaseStatus Properties Error Returns the error from a previous upgrade attempt when SchemaStatus = UpgradeError . Declaration public string Error { get; } Property Value Type Description String IsCurrent Returns true when the database has schema information and the current version is the same as the most recent schema script. Declaration public bool IsCurrent { get; } Property Value Type Description Boolean MaxVersion Returns the maximum known schema version as determined by the available schema scripts. Declaration public int MaxVersion { get; } Property Value Type Description Int32 SchemaStatus Returns an indication of whether the database exisis and has schema information. Declaration public SchemaStatus SchemaStatus { get; } Property Value Type Description SchemaStatus Updater Identifes the updater claiming to be currently upgrading the database when SchemaStatus = Updating . Declaration public string Updater { get; } Property Value Type Description String Version Returns the database's current schema version or -1 when the database doesn't exist or have a DBINFO table. Declaration public int Version { get; } Property Value Type Description Int32"
  },
  "neonsdk/api/Neon.Postgres.html": {
    "href": "neonsdk/api/Neon.Postgres.html",
    "title": "Namespace Neon.Postgres | NeonSDK documentation",
    "keywords": "Namespace Neon.Postgres Classes ConnectionExtensions Extends Npgsql.NpgsqlConnection with useful methods. DatabaseStatus Holds information about a database's schema as returned by GetStatusAsync() . PreparedCommand Simplifies prepared Postgres command usage by combining the prepared command and its usage into a single type. It's also often useful to create derived custom types from this that handle the parameter definitions and subsitutions and perhaps precompute result column indexes to help abstract these details from the calling program. ReaderExtensions Extends Npgsql.NpgsqlDataReader with useful methods. SchemaManager Manages the initial creation and schema updates for a Postgres database. SchemaManagerException Thrown by SchemaManager when a problem is detected. Structs ReaderAsyncEnumerator Returned by ToAsyncEnumerable(NpgsqlDataReader) making it possible to asynchronously enumerate the reader rows via the C# await foreach statement or the equivalent for other .NET languages. ReaderEnumerator Returned by ToEnumerable(NpgsqlDataReader) making it possible to synchronously enumerate the reader rows via the C# foreach statement or the equivalent for other .NET languages. Enums SchemaStatus Enumerates the possible database states as returned by GetStatusAsync() ."
  },
  "neonsdk/api/Neon.Postgres.PreparedCommand.html": {
    "href": "neonsdk/api/Neon.Postgres.PreparedCommand.html",
    "title": "Class PreparedCommand | NeonSDK documentation",
    "keywords": "Class PreparedCommand Simplifies prepared Postgres command usage by combining the prepared command and its usage into a single type. It's also often useful to create derived custom types from this that handle the parameter definitions and subsitutions and perhaps precompute result column indexes to help abstract these details from the calling program. Inheritance Object PreparedCommand Namespace : Neon.Postgres Assembly : Neon.Postgres.dll Syntax public class PreparedCommand Remarks You can use this class directly in your code like: var parameters = new Dictionary<string, NpgsqlDbType>()> { { \"name\", NpgsqlDbType.Text } }; var preparedCommand = new PreparedCommand(connection, \"SELECT Name, Age, Email FROM People WHERE Name = @name\", parameters); foreach (var name in new string[] { \"jack\", \"jill\", \"john\", \"jane\" }) { var queryCommand = preparedCommand.Clone(); queryCommand.Parameters[\"name\"].Value = name; foreach (var row in queryCommand.ExecuteReader().ToEnumerable()) { Console.WriteLine($\"Name: {row.GetString(\"Name\")} Age: {row.GetInt32(\"Age\"} Email: {row.GetString(\"Email\")}\"); } } In this example, we first created the prepared command that performs a query passing a person's name as the parameter. Note that we had to create a dictionary defining the parameter name and type. The below, we looped for perform four queries by cloning the prepared command, setting the parameter values and then executing the command. Note how we used methods like row.GetString(\"Name\") to access individual columns. This works and is convenient but will be somewhat inefficient because the method will need to map the column name into the corresponding column index. We could have specified column indexes here, but that's starting to be fragile and could break if we inserted or removed result columns. Even using names can be fragile since column names can be altered over time. We recommend writing custom classes that inherit from PreparedCommand to help abstract these things efficiently and without needing to use ORM frameworks like Entity Framework, NHibernate, and Dapper which tend to be inefficient and somewhat cumbersome to setup. Here's an example of a class that wraps a prepared statement to implement the query from the example above: public class QueryPeopleByName : PreparedCommand { private const string query = \"SELECT Name, Age, Email FROM People WHERE Name = @name\"; public const int NameIndex = 0; public const int AgeIndex = 1; public const int EmailIndex = 2; private static readonly Dictionary<string, NpgsqlDbType> paramDefinitions = new Dictionary<string, NpgsqlDbType>() { { \"name\", NpgsqlDbType.Text } }; public QueryPeopleByName(NpgsqlConnection connection) : base(connection, query, paramDefinitions) { var queryCommand = queryPeopleByName.Clone(); queryCommand.Parameters[\"name\"] = name; return qiery } public ReaderEnumerator GetPeople(string name) { var queryCommand = queryPeopleByName.Clone(); queryCommand.Parameters[\"name\"].Value = name; return queryCommand.ExecuteReader().ToEnumerable() } } ... var queryPeopleByName = new QueryPeopleByName(connection); foreach (var name in new string[] { \"jack\", \"jill\", \"john\", \"jane\" }) { foreach (var row in queryCommand.ExecuteReader().ToEnumerable()) { Console.WriteLine($\"Name: {row.GetString(QueryPeopleByName.NameIndex)} Age: {row.GetInt32(QueryPeopleByName.AgeIndex} Email: {row.GetString(QueryPeopleByName.EmailIndex)}\"); } } The example above abstracted the query SQL, the parameter subsitution, as well as the result column indexes to make this a little less fragile and easier to modify when necessary. You can extend this coding pattern by having your class handle conversion of the query result to nice .NET model objects: public class Person { public string Name { get; set; } public int Age { get; set; } public string Email { get; set; } } public class QueryPeopleByName : PreparedCommand { private const string query = \"SELECT Name, Age, Email FROM People WHERE Name = @name\"; private const int NameIndex = 0; private const int AgeIndex = 1; private const int EmailIndex = 2; private static readonly Dictionary<string, NpgsqlDbType> paramDefinitions = new Dictionary<string, NpgsqlDbType>() { { \"name\", NpgsqlDbType.Text } }; public QueryPeopleByName(NpgsqlConnection connection) : base(connection, query, paramDefinitions) { var queryCommand = queryPeopleByName.Clone(); queryCommand.Parameters[\"name\"] = name; return qiery } public IEnumerable<Person> GetPeople(string name) { var queryCommand = queryPeopleByName.Clone(); queryCommand.Parameters[\"name\"] = name; foreach (var row in queryCommand.ExecuteReader().ToEnumerable()) { yield return new Person() { Name = row.GetString(NameIndex), Age = row.GetInt32(RowIndex), Email = row.GetString(EmailIndex); }; } } } ... var queryPeopleByName = new QueryPeopleByName(connection); foreach (var name in new string[] { \"jack\", \"jill\", \"john\", \"jane\" }) { foreach (var person in queryCommand.GetProple(name)) { Console.WriteLine($\"Name: {person.Name} Age: {person.Age} Email: {person.Email}\"); } } This final example abstracted the parameter name and type as well as converted the query result to compile-time Person object instances. These patterns can provide a nice way to get some of the advantages of an ORM without extra runtime overhead. Constructors PreparedCommand(NpgsqlConnection, String, Dictionary<String, NpgsqlDbType>, Boolean) Constructor. Declaration public PreparedCommand(NpgsqlConnection connection, string sqlText, Dictionary<string, NpgsqlDbType> paramDefinitions = null, bool prepareNow = false) Parameters Type Name Description Npgsql.NpgsqlConnection connection The open Postgres connection. String sqlText The command SQL. Dictionary < String , NpgsqlTypes.NpgsqlDbType > paramDefinitions Optional parameter name and type definitions. note Not all possible parameter types are supported by the common ones are at this time. Boolean prepareNow Optionally specifies that the command is to be prepared immediately rather than waiting for it's first execution (the default). Properties CommandText Returns the command text. Declaration public string CommandText { get; } Property Value Type Description String CommandTimeout The command timeout in seconds. This defaults to 30 seconds . Declaration public int CommandTimeout { get; set; } Property Value Type Description Int32 Parameters Returns the command parameters. note The collection returned should be considered tob read-only and must not be modified. Declaration public NpgsqlParameterCollection Parameters { get; } Property Value Type Description Npgsql.NpgsqlParameterCollection Methods Clone(NpgsqlTransaction) Prepares the underlying command if it hasn't already been prepared and then creates a clone of the command that can be executed after parameter values are set when necessary. Declaration public NpgsqlCommand Clone(NpgsqlTransaction transaction = null) Parameters Type Name Description Npgsql.NpgsqlTransaction transaction Optional transaction. Returns Type Description Npgsql.NpgsqlCommand"
  },
  "neonsdk/api/Neon.Postgres.ReaderAsyncEnumerator.html": {
    "href": "neonsdk/api/Neon.Postgres.ReaderAsyncEnumerator.html",
    "title": "Struct ReaderAsyncEnumerator | NeonSDK documentation",
    "keywords": "Struct ReaderAsyncEnumerator Returned by ToAsyncEnumerable(NpgsqlDataReader) making it possible to asynchronously enumerate the reader rows via the C# await foreach statement or the equivalent for other .NET languages. Namespace : Neon.Postgres Assembly : Neon.Postgres.dll Syntax public struct ReaderAsyncEnumerator : IAsyncEnumerable<NpgsqlDataReader> Methods GetAsyncEnumerator(CancellationToken) Declaration public async IAsyncEnumerator<NpgsqlDataReader> GetAsyncEnumerator(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description IAsyncEnumerator < Npgsql.NpgsqlDataReader >"
  },
  "neonsdk/api/Neon.Postgres.ReaderEnumerator.html": {
    "href": "neonsdk/api/Neon.Postgres.ReaderEnumerator.html",
    "title": "Struct ReaderEnumerator | NeonSDK documentation",
    "keywords": "Struct ReaderEnumerator Returned by ToEnumerable(NpgsqlDataReader) making it possible to synchronously enumerate the reader rows via the C# foreach statement or the equivalent for other .NET languages. Namespace : Neon.Postgres Assembly : Neon.Postgres.dll Syntax public struct ReaderEnumerator : IEnumerable<NpgsqlDataReader>, IEnumerable Methods GetEnumerator() Declaration public IEnumerator<NpgsqlDataReader> GetEnumerator() Returns Type Description IEnumerator < Npgsql.NpgsqlDataReader >"
  },
  "neonsdk/api/Neon.Postgres.ReaderExtensions.html": {
    "href": "neonsdk/api/Neon.Postgres.ReaderExtensions.html",
    "title": "Class ReaderExtensions | NeonSDK documentation",
    "keywords": "Class ReaderExtensions Extends Npgsql.NpgsqlDataReader with useful methods. Inheritance Object ReaderExtensions Namespace : Neon.Postgres Assembly : Neon.Postgres.dll Syntax public static class ReaderExtensions Methods GetNullableBoolean(NpgsqlDataReader, Int32) Returns the column value as a nullable boolean. Declaration public static bool? GetNullableBoolean(this NpgsqlDataReader reader, int ordinal) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Int32 ordinal The zero-based column position. Returns Type Description Nullable < Boolean > The nullable column value. GetNullableByte(NpgsqlDataReader, Int32) Returns the column value as a nullable byte. Declaration public static byte? GetNullableByte(this NpgsqlDataReader reader, int ordinal) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Int32 ordinal The zero-based column position. Returns Type Description Nullable < Byte > The nullable column value. GetNullableChar(NpgsqlDataReader, Int32) Returns the column value as a nullable character. Declaration public static char? GetNullableChar(this NpgsqlDataReader reader, int ordinal) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Int32 ordinal The zero-based column position. Returns Type Description Nullable < Char > The nullable column value. GetNullableDate(NpgsqlDataReader, Int32) Returns the column value as a nullable NpgsqlTypes.NpgsqlDate . Declaration [Obsolete(\"NpgsqlDate is obsolete\")] public static NpgsqlDate? GetNullableDate(this NpgsqlDataReader reader, int ordinal) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Int32 ordinal The zero-based column position. Returns Type Description Nullable < NpgsqlTypes.NpgsqlDate > The nullable column value. GetNullableDateTime(NpgsqlDataReader, Int32) Returns the column value as a nullable DateTime . Declaration public static DateTime? GetNullableDateTime(this NpgsqlDataReader reader, int ordinal) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Int32 ordinal The zero-based column position. Returns Type Description Nullable < DateTime > The nullable column value. GetNullableDecimal(NpgsqlDataReader, Int32) Returns the column value as a nullable Decimal . Declaration public static decimal? GetNullableDecimal(this NpgsqlDataReader reader, int ordinal) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Int32 ordinal The zero-based column position. Returns Type Description Nullable < Decimal > The nullable column value. GetNullableDouble(NpgsqlDataReader, Int32) Returns the column value as a nullable Double . Declaration public static double? GetNullableDouble(this NpgsqlDataReader reader, int ordinal) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Int32 ordinal The zero-based column position. Returns Type Description Nullable < Double > The nullable column value. GetNullableFloat(NpgsqlDataReader, Int32) Returns the column value as a nullable Single . Declaration public static float? GetNullableFloat(this NpgsqlDataReader reader, int ordinal) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Int32 ordinal The zero-based column position. Returns Type Description Nullable < Single > The nullable column value. GetNullableGuid(NpgsqlDataReader, Int32) Returns the column value as a nullable Guid . Declaration public static Guid? GetNullableGuid(this NpgsqlDataReader reader, int ordinal) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Int32 ordinal The zero-based column position. Returns Type Description Nullable < Guid > The nullable column value. GetNullableInt16(NpgsqlDataReader, Int32) Returns the column value as a nullable Int16 . Declaration public static short? GetNullableInt16(this NpgsqlDataReader reader, int ordinal) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Int32 ordinal The zero-based column position. Returns Type Description Nullable < Int16 > The nullable column value. GetNullableInt32(NpgsqlDataReader, Int32) Returns the column value as a nullable Int32 . Declaration public static int? GetNullableInt32(this NpgsqlDataReader reader, int ordinal) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Int32 ordinal The zero-based column position. Returns Type Description Nullable < Int32 > The nullable column value. GetNullableInt64(NpgsqlDataReader, Int32) Returns the column value as a nullable Int64 . Declaration public static long? GetNullableInt64(this NpgsqlDataReader reader, int ordinal) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Int32 ordinal The zero-based column position. Returns Type Description Nullable < Int64 > The nullable column value. GetNullableInterval(NpgsqlDataReader, Int32) Returns the column value as a nullable NpgsqlTypes.NpgsqlTimeSpan . Declaration [Obsolete(\"NpgsqlTimeSpan is obsolete\")] public static NpgsqlTimeSpan? GetNullableInterval(this NpgsqlDataReader reader, int ordinal) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Int32 ordinal The zero-based column position. Returns Type Description Nullable < NpgsqlTypes.NpgsqlTimeSpan > The nullable column value. GetNullableString(NpgsqlDataReader, Int32) Returns the column value as a string. Unlike Npgsql.NpgsqlDataReader.GetStream(System.Int32) , this method can handle null column values. Declaration public static string GetNullableString(this NpgsqlDataReader reader, int ordinal) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Int32 ordinal The zero-based column position. Returns Type Description String The column string or null . GetNullableTimeSpan(NpgsqlDataReader, Int32) Returns the column value as a nullable TimeSpan . Declaration public static TimeSpan? GetNullableTimeSpan(this NpgsqlDataReader reader, int ordinal) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Int32 ordinal The zero-based column position. Returns Type Description Nullable < TimeSpan > The nullable column value. GetNullableTimeStamp(NpgsqlDataReader, Int32) Returns the column value as a nullable TimeSpan . Declaration [Obsolete(\"NpgsqlDateTime is obsolete\")] public static NpgsqlDateTime? GetNullableTimeStamp(this NpgsqlDataReader reader, int ordinal) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Int32 ordinal The zero-based column position. Returns Type Description Nullable < NpgsqlTypes.NpgsqlDateTime > The nullable column value. ToAsyncEnumerable(NpgsqlDataReader) Returns an enumerator suitable for enumerating database results asynchronously. Declaration public static ReaderAsyncEnumerator ToAsyncEnumerable(this NpgsqlDataReader reader) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Returns Type Description ReaderAsyncEnumerator The ReaderAsyncEnumerator . Remarks This method provides a clean way to asynchronousl enumerate database results using the C# await nforeach statement or the equivalent in of the .NET languages. Here's an example: using (var reader = await postgres.ExecuteReaderAsync(\"SELECT value FROM enumerate_table;\")) { await foreach (var row in reader.ToAsyncEnumerable()) { values.Add(row.GetInt32(0)); } } ToEnumerable(NpgsqlDataReader) Returns an enumerator suitable for enumerating database results synchronously. Declaration public static ReaderEnumerator ToEnumerable(this NpgsqlDataReader reader) Parameters Type Name Description Npgsql.NpgsqlDataReader reader The data reader. Returns Type Description ReaderEnumerator The ReaderEnumerator . Remarks This method provides a clean way to enumerate database results using the C# foreach statement or the equivalent in of the .NET languages. Here's an example: using (var reader = postgres.ExecuteReader(\"SELECT value FROM enumerate_table;\")) { foreach (var row in reader.ToEnumerable()) { values.Add(row.GetInt32(0)); } }"
  },
  "neonsdk/api/Neon.Postgres.SchemaManager.html": {
    "href": "neonsdk/api/Neon.Postgres.SchemaManager.html",
    "title": "Class SchemaManager | NeonSDK documentation",
    "keywords": "Class SchemaManager Manages the initial creation and schema updates for a Postgres database. Inheritance Object SchemaManager Namespace : Neon.Postgres Assembly : Neon.Postgres.dll Syntax public class SchemaManager : IDisposable Remarks This class uses some simple conventions to make it easy to upgrade a database schema over time as the data model evolves. This uses the concept of schema version numbers. A schema version is simply an integer value where the version will be 0 when a database is initially created and then the version is incremented by one whenever the database schema is updated. This class uses a reserved table named DbInfoTableName that is used to keep track of the current schema version. This table will have a single row with these columns: Version:integer The integer database schema version. This will be set to 0 when the database is first created and will be incremented for each subsequent update. Updater:text Used by multiple service instances to coordinate which one actually handles the update. This will be NULL when the database isn't being updated and will be set to a string identifying the entity currently updating the database. This string can be anything from a GUID, container ID, hostname, or whatever. UpdateStartUtc:timestamp Time (UTC) when the most recent update was started. UpdateFinishUtc:timestamp Time (UTC) when the most recent update was completed. This will be NULL while an update is in progress. You'll be authoring Postgres SQL script files to create the initial database as well as to upgrade the database for each subsequent schema change. By convention, this class assumes that the SQL scripts for each database will be saved to separate folders with each script file named like: schema-#.script where # is the schema version the script will upgrade the database to, with schema-0.script being the script that creates the database as Version 0 . So your script folder will look something like: schema-0000.script <-- database created as v0 schema-0001.script <-- upgrades from v0 to v1 schema-0002.script <-- upgrades from v1 to v2 schema-0003.script <-- upgrades from v2 to v3 schema-0004.script <-- upgrades from v3 to v4 ... schema-####.script note This method parses the version number in the file names after the dash so it's perfectly OK to include leading zero digits there (like we did in the example above). We actually recommend this so that your schema files can be sorted nicely by version when listed by the file system. Each script file is responsible for upgrading the database from the previous version to the next. This class will help manage the upgrade process by deciding which scripts need to be executed based on the DbInfoTableName table and then executing the required scripts. To use, construct an instance via SchemaManager , passing a database connection for the Postgres superuser or a user with the CREATEDB privilege. You'll also need to pass the database name and the path to the file system folder holding the script files. Then call CreateDatabaseAsync() to create the database if it doesn't already exist; this uses the connection passed to the constructor. Then call UpgradeDatabaseAsync(String, Int32, Boolean, Action<Boolean, Int32>) to apply any necessary updates; this uses a new connection to the target database using the credentials from the original database connection. You may optionally pass a string to UpgradeDatabaseAsync(String, Int32, Boolean, Action<Boolean, Int32>) that identifies the entity performing the upgrade. This could be an application name, the name of the host the updater is running on, the username of the person performing the upgrade etc. This method uses this to try to prevent multiple updgrade from happening in parallel on the same database (which would be bad) and the updater string can be used to help identify who else is updating the database. This parameter defaults to a GUID. Most applications will include at least two scripts when they get started with schema-0.script creating the database and schema-1.script creating the tables, views, data types, stored procedures, etc. SQL COMMAND BATCHES It's often necessary to execute a sequence of SQL commands that depend on each other. One example is a command that creates a table followed by commands that write rows. You might think that you could achieve this by executing the following as one command: CREATE TABLE my_table (name text); INSERT INTO my_table (name) values ('Jack'); INSERT INTO my_table (name) values ('Jill'); But, this won't actually work because the database generates a query plan for the entire command and when it does this and sees the inserts into [my_table] but the table doesn't actually exist at the time the query plan is being created. So the command will fail. What you really need to do is create the table first as a separate command and then do the inserts as one or more subsequent commands. This is not terribly convenient so we've introduced the concept of a batch of commands. Here's what this would look like: CREATE TABLE my_table (name text); GO INSERT INTO my_table (name) values ('Jack'); INSERT INTO my_table (name) values ('Jill'); See how the GO line separates the table creation from the inserts. This method will split the script files into separate commands on any GO lines and then execute these commands in order. note GO is case insensitive and any leading or trailing space on the line will be ignored. Batch commands are implemented by ExecuteBatch(NpgsqlConnection, String, NpgsqlTransaction) and an asynchonous alternative. SCRIPT VARIABLES Your schema scripts may include variables of the form ${NAME} where NAME is the case sensitive variable name. The variable references will be replaced by the variable's value when the variable is defined, otherwise the variable reference will be left in place. The ${database} variable is reserved and will be replaced by the name of the database being managed. You can specify your own variables by passing a dictionary to the constructor. This can be useful for specifying things like password, replication factors, etc. UPGRADE STRATEGIES The current implementation assumes that applications using the database are offline or can work properly with both the new and old schema. Here are some siggestions for managing updates: Use YugaByte snapshots to backup the keyspace. Effectively take the keyspace offline during the upgrade by revoking all rights to all users besides the current one and the superuser before upgrading and then restoring these rights afterwards. For services and keyspaces deployed to Kubernetes, we recommend that you handle keyspace schema updates via a custom Kubernetes operator which would stop any services using the keyspace, apply the schema update, and then restart the services, potentially upgrading them as well. You could embed the schema scripts in the operator itself so upgrading the keyspace (and application) would be as simple as upgrading the operator. HANDLING UPGRADE ERRORS It's possible for a database upgrade to fail. Addressing upgrade failures will generally require manual intervention. You should start out by looking at the version and error columns in the DbInfoTableName in your database to diagnose what happened. version indicates the schema version before the update script was executed but that it's possible that the update script was paratially completed which means that the database may be in a state between the old and update schema version. Here are the underlying causes for upgrade errors: hardware/cluster The database cluster or the hardware/platform it's running is having problems that prevent the updates from being applied. The error column will describe the error. script errors Your upgrade scripts have syntax errors or are otherwise invalid. The error column will describe the error. updater conflict Another updater is currently running or terminated for some reason before completing the update. The updater column will identify the updater instance that is currently updating the database or that failed prematurely. For updater conflicts , you'll need to determine whether the identified updater is still running or whether it has failed. Simply wait for the other updater to finish if it's still running, otherwise you have a failure and will need to follow these recomendations to manually mitigate the situation: Manual Rollback It's possible that some but not all of the commands in your update script have completed. Depending on the upgrade details, you may want to manually undo any of the statements that completed to get the database back to its state before the the update started and then call UpgradeDatabaseAsync(String, Int32, Boolean, Action<Boolean, Int32>) with force: true . Manual Upgrade As an alternative to Manual Rollback , you could simply execute the remaining update commands manually and then updating the DbInfoTableName by setting version to the new version number and setting the updater and error fields to NULL . Script Corrections Be sure to correct any problems with your upgrade script, even if your are going to manually complete the upgrade so that upgrades will work for new database instances. SCRIPTS AS EMBEDDED RESOURCES In addition to reading SQL scripts as standard files, the SchemaManager can also read scripts from embedded resources. This is an easy and clean way to include these scripts in a program or library. Here's what you need to do: Create a folder in your project to hold your SQL script files. Add your scripts to the new folder, saving them with UTF-8 encoding . Select your script files in the Solution Explorer and then left-click on them and select Properties . Set Build Action to Embedded resource . You'll be using the SchemaManager(NpgsqlConnection, String, IStaticDirectory, Dictionary<String, String>) override constructor and you'll be passing an IStaticDirectory that emulates a read-only file system constructed from embedded resources. You'll need to call GetResourceFileSystem(Assembly, String) to obtain this directory, passing a string identifying resource name prefix that identifies your virtual folder. Constructors SchemaManager(NpgsqlConnection, String, IStaticDirectory, Dictionary<String, String>) Constructs an instance that loads scripts from embedded resources. Declaration public SchemaManager(NpgsqlConnection masterConnection, string databaseName, IStaticDirectory schemaDirectory, Dictionary<string, string> variables = null) Parameters Type Name Description Npgsql.NpgsqlConnection masterConnection The master database connection to be used for creating the target database. This connection must have been made for a Postgres superuser or a user with the CREATEDB privilege and must not reference a specific database. String databaseName The database name to be used. IStaticDirectory schemaDirectory The embedded resource directory returned by a call to GetResourceFileSystem(Assembly, String) . Dictionary < String , String > variables Optionally specifies script variables. Exceptions Type Condition FileNotFoundException Thrown if there's no directory at Neon.Postgres.SchemaManager.scriptFolder or when there's no schema-0.script file in the directory. SchemaManager(NpgsqlConnection, String, String, Dictionary<String, String>) Constructs an instance that loads scripts from files. Declaration public SchemaManager(NpgsqlConnection masterConnection, string databaseName, string schemaFolder, Dictionary<string, string> variables = null) Parameters Type Name Description Npgsql.NpgsqlConnection masterConnection The master database connection to be used for creating the target database. This connection must have been made for a Postgres superuser or a user with the CREATEDB privilege and must not reference a specific database. String databaseName The database name to be used. String schemaFolder The path to the file system folder holding the database schema scripts. Dictionary < String , String > variables Optionally specifies script variables. Exceptions Type Condition FileNotFoundException Thrown if there's no directory at Neon.Postgres.SchemaManager.scriptFolder or when there's no schema-0.script file in the directory. Fields DbInfoTableName The name of the database information table. Declaration public const string DbInfoTableName = \"__dbinfo\" Field Value Type Description String Properties TargetConnection Returns a connection to the target database if the database exists. Declaration public NpgsqlConnection TargetConnection { get; } Property Value Type Description Npgsql.NpgsqlConnection Exceptions Type Condition SchemaManagerException Thrown when the database doesn't exist. Methods CreateDatabaseAsync() Creates the database using the schema-0.script file from the script folder. This also creates the DbInfoTableName table adding a row setting the Version to 0 by default. Declaration public async Task<bool> CreateDatabaseAsync() Returns Type Description Task < Boolean > true if the database was created or false if it already exists. Exceptions Type Condition FileNotFoundException Thrown if the schema-0.script file does not exist in the script folder. SchemaManagerException Thrown if the database already exists but does not include the DbInfoTableName table or if that table doesn't have exactly one row or the version there is not positive. Dispose() Declaration public void Dispose() Dispose(Boolean) Handles the actual disposal. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if we're disposing, false for finalizing. Finalize() Finalizer. Declaration protected void Finalize() GetStatusAsync() Returns information about the database schema status and schema scripts. Declaration public async Task<DatabaseStatus> GetStatusAsync() Returns Type Description Task < DatabaseStatus > The DatabaseStatus . Exceptions Type Condition SchemaManagerException Thrown when the database has an invalid DbInfoTableName table. UpgradeDatabaseAsync(String, Int32, Boolean, Action<Boolean, Int32>) Upgrades the database by applying any upgrade scripts from the current database version to the latest update script found in the script folder or optionally when the database version equals stopVersion . Declaration public async Task<int> UpgradeDatabaseAsync(string updaterIdentity = null, int stopVersion = -1, bool force = false, Action<bool, int> updateAction = null) Parameters Type Name Description String updaterIdentity Optionally specifies the identity of the entity performing the update. This may be the username of the person doing this or something identifying the service instance for more automated scenarios. This service identity could be a hostname, container ID, or something else that makes sense. This is used to ensure that only a single entity can update the database. This defaults to a generated GUID. Int32 stopVersion Optionally specifies the latest database update to apply. Boolean force Optionally specifies that any indication that another updater is in the process of updating the database will be ignored and that any pewnding updates will proceed. This may be necessary after a previous update failed. note WARNING: You should take care to ensure that the other potential updater is not actually performing an update. This may also means that the previous update was only partially completed which could require manual intervention. Action < Boolean , Int32 > updateAction Optional action that will be called before each update is applied and then afterwards. The bool argument will be false before the update is applied and true afterwards. The int argument is the schema version being applied. Returns Type Description Task < Int32 > The version of the database after the upgrade. Remarks note IMPORTANT: This method does not perform the schema updates within a transaction because that will be impractical for large databases and also due to limitations of YugaByte Postgres. This means that you'll need to take care to ensure that your schema scripts are well tested and bulletproof and you should also consider backing up your database to be very safe. Exceptions Type Condition SchemaManagerException Thrown if the database doesn't exist or does not include the DbInfoTableName table or if it invalid. FileNotFoundException Thrown if the schema-0.script file does not exist or when there are any missing script files (e.g. gaps in the sequence of files) or there are scripts with unexpected file names. SchemaManagerException Thrown when another entity currently is in the process of updating the database schema."
  },
  "neonsdk/api/Neon.Postgres.SchemaManagerException.html": {
    "href": "neonsdk/api/Neon.Postgres.SchemaManagerException.html",
    "title": "Class SchemaManagerException | NeonSDK documentation",
    "keywords": "Class SchemaManagerException Thrown by SchemaManager when a problem is detected. Inheritance Object Exception SchemaManagerException Namespace : Neon.Postgres Assembly : Neon.Postgres.dll Syntax public class SchemaManagerException : Exception, ISerializable Constructors SchemaManagerException(String) Constructor. Declaration public SchemaManagerException(string message = null) Parameters Type Name Description String message Optionally specifies the nexception message. Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Postgres.SchemaStatus.html": {
    "href": "neonsdk/api/Neon.Postgres.SchemaStatus.html",
    "title": "Enum SchemaStatus | NeonSDK documentation",
    "keywords": "Enum SchemaStatus Enumerates the possible database states as returned by GetStatusAsync() . Namespace : Neon.Postgres Assembly : Neon.Postgres.dll Syntax public enum SchemaStatus Fields Name Description ExistsNoSchema The database exists but has no DbInfoTableName table with any schema information. ExistsWithSchema The database exists with schema information. NotFound The database doesn't exist. Updating Another updater is currently updating the database or has failed before completing the update. UpgradeError An error occured during the previous update indicating that the database schema may have been partially updated. It's likely that manual intervention may be necessary to rollback to the previous schema version or manually apply the remaining updates. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Retry.ExponentialRetryPolicy.html": {
    "href": "neonsdk/api/Neon.Retry.ExponentialRetryPolicy.html",
    "title": "Class ExponentialRetryPolicy | NeonSDK documentation",
    "keywords": "Class ExponentialRetryPolicy Implements an IRetryPolicy that retries an operation first at an initial interval and then doubles the interval up to a limit for a specified maximum number of times. Inheritance Object RetryPolicyBase ExponentialRetryPolicy Implements IRetryPolicy Inherited Members RetryPolicyBase.Timeout RetryPolicyBase.OnTransient RetryPolicyBase.CategoryName RetryPolicyBase.LogTransient(Exception) RetryPolicyBase.SysDeadline() RetryPolicyBase.AdjustDelay(TimeSpan, DateTime) Namespace : Neon.Retry Assembly : Neon.Common.dll Syntax public class ExponentialRetryPolicy : RetryPolicyBase, IRetryPolicy Remarks You can enable transient error logging by passing a non-empty logCategory name to the constructor. This creates an embedded ILogger using that name and any retried transient errors will then be logged as warnings including [transient-retry] in the message. note Only the retried errors will be logged. The final exception thrown after all retries fail will not be logged because it's assumed that these will be caught and handled upstack by application code. Choose a category name that can be used to easily identify the affected component. For example, yugabyte:my-cluster to identify a specific YugaBYte database cluster. Constructors ExponentialRetryPolicy(Func<Exception, Boolean>, Int32, Nullable<TimeSpan>, Nullable<TimeSpan>, Nullable<TimeSpan>, String) Constructs the retry policy with a specific transitent detection function. Declaration public ExponentialRetryPolicy(Func<Exception, bool> transientDetector = null, int maxAttempts = -1, TimeSpan? initialRetryInterval = null, TimeSpan? maxRetryInterval = null, TimeSpan? timeout = null, string categoryName = null) Parameters Type Name Description Func < Exception , Boolean > transientDetector Optionally specifies the function that determines whether an exception is transient (see TransientDetector ). You can pass null if all exceptions are to be considered to be transient. Int32 maxAttempts Optionally specifies the maximum number of times an action should be retried (defaults to 5 ). Nullable < TimeSpan > initialRetryInterval Optionally specifies the initial retry interval between retry attempts (defaults to 1 second ). Nullable < TimeSpan > maxRetryInterval Optionally specifies the maximum retry interval (defaults to essentially unlimited: 24 hours). Nullable < TimeSpan > timeout Optionally specifies the maximum time the operation will be retried (defaults to unconstrained) String categoryName Optionally enables transient error logging by identifying the source category name (defaults to null ). Remarks The maxAttempts parameter defaults to -1 indicating that the operation should be attempted up to 5 times, unless a Timeout is specified. In this case, maxAttempts will be ignored and the timeout will be honored. When maxAttempts is greater than or equal to zero and Timeout is passed, then both maxAttempts and Timeout will be honored, with retries stopping when either are exceeded. ExponentialRetryPolicy(Type, Int32, Nullable<TimeSpan>, Nullable<TimeSpan>, Nullable<TimeSpan>, String) Constructs the retry policy to handle a specific exception type as transient. Declaration public ExponentialRetryPolicy(Type exceptionType, int maxAttempts = -1, TimeSpan? initialRetryInterval = null, TimeSpan? maxRetryInterval = null, TimeSpan? timeout = null, string categoryName = null) Parameters Type Name Description Type exceptionType The exception type to be considered to be transient. Int32 maxAttempts Optionally specifies the maximum number of times an action should be retried (defaults to 5 ). Nullable < TimeSpan > initialRetryInterval Optionally specifies the initial retry interval between retry attempts (defaults to 1 second ). Nullable < TimeSpan > maxRetryInterval Optionally specifies the maximum retry interval (defaults to essentially unlimited: 24 hours). Nullable < TimeSpan > timeout Optionally specifies the maximum time the operation will be retried (defaults to unconstrained) String categoryName Optionally enables transient error logging by identifying the source category name (defaults to null ). Remarks The maxAttempts parameter defaults to -1 indicating that the operation should be attempted up to 5 times, unless a Timeout is specified. In this case, maxAttempts will be ignored and the timeout will be honored. When maxAttempts is greater than or equal to zero and Timeout is passed, then both maxAttempts and Timeout will be honored, with retries stopping when either are exceeded. ExponentialRetryPolicy(Type[], Int32, Nullable<TimeSpan>, Nullable<TimeSpan>, Nullable<TimeSpan>, String) Constructs the retry policy to handle a multiple exception types as transient. Declaration public ExponentialRetryPolicy(Type[] exceptionTypes, int maxAttempts = -1, TimeSpan? initialRetryInterval = null, TimeSpan? maxRetryInterval = null, TimeSpan? timeout = null, string categoryName = null) Parameters Type Name Description Type [] exceptionTypes The exception type to be considered to be transient. Int32 maxAttempts Optionally specifies the maximum number of times an action should be retried (defaults to 5 ). Nullable < TimeSpan > initialRetryInterval Optionally specifies the initial retry interval between retry attempts (defaults to 1 second ). Nullable < TimeSpan > maxRetryInterval Optionally specifies the maximum retry interval (defaults to essentially unlimited: 24 hours). Nullable < TimeSpan > timeout Optionally specifies the maximum time the operation will be retried (defaults to unconstrained) String categoryName Optionally enables transient error logging by identifying the source category name (defaults to null ). Remarks The maxAttempts parameter defaults to -1 indicating that the operation should be attempted up to 5 times, unless a Timeout is specified. In this case, maxAttempts will be ignored and the timeout will be honored. When maxAttempts is greater than or equal to zero and Timeout is passed, then both maxAttempts and Timeout will be honored, with retries stopping when either are exceeded. Properties InitialRetryInterval Returns the initial interval between action retry attempts. Declaration public TimeSpan InitialRetryInterval { get; } Property Value Type Description TimeSpan MaxAttempts Returns the maximum number of times the action should be attempted. Declaration public int MaxAttempts { get; } Property Value Type Description Int32 MaxRetryInterval Returns the maximum intervaL between action retry attempts. Declaration public TimeSpan MaxRetryInterval { get; } Property Value Type Description TimeSpan Methods Clone(Func<Exception, Boolean>) Returns a copy of the retry policy. Declaration public override IRetryPolicy Clone(Func<Exception, bool> transientDetector = null) Parameters Type Name Description Func < Exception , Boolean > transientDetector Optionally specifies a replacement transient detector function that will be set in the cloned policy. Returns Type Description IRetryPolicy The policy copy. Overrides RetryPolicyBase.Clone(Func<Exception, Boolean>) Invoke(Action) Retries a synchronous action that returns no result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public override void Invoke(Action action) Parameters Type Name Description Action action The synchronous action to be performed. Overrides RetryPolicyBase.Invoke(Action) Invoke<TResult>(Func<TResult>) Retries a synchronous action that returns a result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public override TResult Invoke<TResult>(Func<TResult> action) Parameters Type Name Description Func <TResult> action The synchronous action to be performed. Returns Type Description TResult The action result. Type Parameters Name Description TResult The action result type. Overrides Neon.Retry.RetryPolicyBase.Invoke<TResult>(System.Func<TResult>) InvokeAsync(Func<Task>) Retries an asynchronous action that returns no result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public override async Task InvokeAsync(Func<Task> action) Parameters Type Name Description Func < Task > action The asynchronous action to be performed. Returns Type Description Task Overrides RetryPolicyBase.InvokeAsync(Func<Task>) InvokeAsync<TResult>(Func<Task<TResult>>) Retries an asynchronous action that returns TResult when it throws exceptions due to transient errors. he classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public override async Task<TResult> InvokeAsync<TResult>(Func<Task<TResult>> action) Parameters Type Name Description Func < Task <TResult>> action The asynchronous action to be performed. Returns Type Description Task <TResult> The action result. Type Parameters Name Description TResult The action result type. Overrides Neon.Retry.RetryPolicyBase.InvokeAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>) Implements IRetryPolicy"
  },
  "neonsdk/api/Neon.Retry.html": {
    "href": "neonsdk/api/Neon.Retry.html",
    "title": "Namespace Neon.Retry | NeonSDK documentation",
    "keywords": "Namespace Neon.Retry Classes ExponentialRetryPolicy Implements an IRetryPolicy that retries an operation first at an initial interval and then doubles the interval up to a limit for a specified maximum number of times. LinearRetryPolicy Implements a simple IRetryPolicy that retries an operation at a fixed interval for a specified maximum number of times. NoRetryPolicy Implements an IRetryPolicy that does not attempt to retry operations. RetryPolicy Base class for used to help implement a IRetryPolicy . RetryPolicyBase Base class for used to help implement a IRetryPolicy . RetryTransientArgs Arguments passed to OnTransient handlers so these can react to transient exceptions and optionally prevent further handlers from being invoked and also prevent the transient exception from being logged. TransientDetector Provides some common transient error detection functions for use by IRetryPolicy implementations. TransientException Used to indicate an explicit transient error. Interfaces IRetryPolicy Describes the behavior of an operation retry policy. These are used to retry operations that have failed due to transient errors."
  },
  "neonsdk/api/Neon.Retry.IRetryPolicy.html": {
    "href": "neonsdk/api/Neon.Retry.IRetryPolicy.html",
    "title": "Interface IRetryPolicy | NeonSDK documentation",
    "keywords": "Interface IRetryPolicy Describes the behavior of an operation retry policy. These are used to retry operations that have failed due to transient errors. Namespace : Neon.Retry Assembly : Neon.Common.dll Syntax [ContractClass(typeof(IRetryPolicyContract))] public interface IRetryPolicy Properties Timeout Returns the optional policy timeout. When present, this specifies the maximum time the policy will continue retrying the operation. Declaration TimeSpan? Timeout { get; } Property Value Type Description Nullable < TimeSpan > Methods Clone(Func<Exception, Boolean>) Returns a copy of the retry policy. Declaration IRetryPolicy Clone(Func<Exception, bool> transientDetector = null) Parameters Type Name Description Func < Exception , Boolean > transientDetector Optionally specifies a replacement transient detector function that will be set in the cloned policy. Returns Type Description IRetryPolicy The policy copy. Invoke(Action) Retries a synchronous action that returns no result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration void Invoke(Action action) Parameters Type Name Description Action action The synchronous action to be performed. Invoke<TResult>(Func<TResult>) Retries a synchronous action that returns a result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration TResult Invoke<TResult>(Func<TResult> action) Parameters Type Name Description Func <TResult> action The synchronous action to be performed. Returns Type Description TResult The action result. Type Parameters Name Description TResult The action result type. InvokeAsync(Func<Task>) Retries an asynchronous action that returns no result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration Task InvokeAsync(Func<Task> action) Parameters Type Name Description Func < Task > action The asynchronous action to be performed. Returns Type Description Task InvokeAsync<TResult>(Func<Task<TResult>>) Retries an asynchronous action that returns TResult when it throws exceptions due to transient errors. he classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration Task<TResult> InvokeAsync<TResult>(Func<Task<TResult>> action) Parameters Type Name Description Func < Task <TResult>> action The asynchronous action to be performed. Returns Type Description Task <TResult> The action result. Type Parameters Name Description TResult The action result type. Events OnTransient Used to intercept and handle logging for transient exceptions detected by a retry policy. Handlers can set Handled in the argument passed to prevent subsequent handlers from being invoked and also prevent the transient exception from being logged. Declaration event Action<RetryTransientArgs> OnTransient Event Type Type Description Action < RetryTransientArgs >"
  },
  "neonsdk/api/Neon.Retry.LinearRetryPolicy.html": {
    "href": "neonsdk/api/Neon.Retry.LinearRetryPolicy.html",
    "title": "Class LinearRetryPolicy | NeonSDK documentation",
    "keywords": "Class LinearRetryPolicy Implements a simple IRetryPolicy that retries an operation at a fixed interval for a specified maximum number of times. Inheritance Object RetryPolicyBase LinearRetryPolicy Implements IRetryPolicy Inherited Members RetryPolicyBase.Timeout RetryPolicyBase.OnTransient RetryPolicyBase.CategoryName RetryPolicyBase.LogTransient(Exception) RetryPolicyBase.SysDeadline() RetryPolicyBase.AdjustDelay(TimeSpan, DateTime) Namespace : Neon.Retry Assembly : Neon.Common.dll Syntax public class LinearRetryPolicy : RetryPolicyBase, IRetryPolicy Remarks You can enable transient error logging by passing a non-empty logCategory name to the constructor. This creates an embedded ILogger using that name and any retried transient errors will then be logged as warnings including [transient-retry] in the message. note Only the retried errors will be logged. The final exception thrown after all retries fail will not be logged because it's assumed that these will be caught and handled upstack by application code. Choose a category name that can be used to easily identify the affected component. For example, yugabyte:my-cluster to identify a specific YugaBYte database cluster. Constructors LinearRetryPolicy(Func<Exception, Boolean>, Int32, Nullable<TimeSpan>, Nullable<TimeSpan>, String) Constructs the retry policy with a specific transitent detection function.d Declaration public LinearRetryPolicy(Func<Exception, bool> transientDetector = null, int maxAttempts = -1, TimeSpan? retryInterval = null, TimeSpan? timeout = null, string categoryName = null) Parameters Type Name Description Func < Exception , Boolean > transientDetector Optionally specifies the function that determines whether an exception is transient (see TransientDetector ). You can pass null if all exceptions are to be considered to be transient. Int32 maxAttempts Optionally specifies the maximum number of times an action should be retried (defaults to 5 ). Nullable < TimeSpan > retryInterval Optionally specifies time interval between retry attempts (defaults to 1 second ). Nullable < TimeSpan > timeout Optionally specifies the maximum time the operation will be retried (defaults to unconstrained) String categoryName Optionally enables transient error logging by identifying the source category name (defaults to null ). Remarks The maxAttempts parameter defaults to -1 indicating that the operation should be attempted up to 5 times, unless a Timeout is specified. In this case, maxAttempts will be ignored and the timeout will be honored. When maxAttempts is greater than or equal to zero and Timeout is passed, then both maxAttempts and Timeout will be honored, with retries stopping when either are exceeded. LinearRetryPolicy(Type, Int32, Nullable<TimeSpan>, Nullable<TimeSpan>, String) Constructs the retry policy to handle a specific exception type as transient. Declaration public LinearRetryPolicy(Type exceptionType, int maxAttempts = -1, TimeSpan? retryInterval = null, TimeSpan? timeout = null, string categoryName = null) Parameters Type Name Description Type exceptionType The exception type to be considered to be transient. Int32 maxAttempts Optionally specifies the maximum number of times an action should be retried (defaults to 5 ). Nullable < TimeSpan > retryInterval Optionally specifies the time interval between retry attempts (defaults to 1 second ). Nullable < TimeSpan > timeout Optionally specifies the maximum time the operation will be retried (defaults to unconstrained) String categoryName Optionally enables transient error logging by identifying the source category name (defaults to null ). Remarks The maxAttempts parameter defaults to -1 indicating that the operation should be attempted up to 5 times, unless a Timeout is specified. In this case, maxAttempts will be ignored and the timeout will be honored. When maxAttempts is greater than or equal to zero and Timeout is passed, then both maxAttempts and Timeout will be honored, with retries stopping when either are exceeded. LinearRetryPolicy(Type[], Int32, Nullable<TimeSpan>, Nullable<TimeSpan>, String) Constructs the retry policy to handle a multiple exception types as transient. Declaration public LinearRetryPolicy(Type[] exceptionTypes, int maxAttempts = -1, TimeSpan? retryInterval = null, TimeSpan? timeout = null, string categoryName = null) Parameters Type Name Description Type [] exceptionTypes The exception type to be considered to be transient. Int32 maxAttempts Optionally specifies the maximum number of times an action should be retried (defaults to 5 ). Nullable < TimeSpan > retryInterval Optionally specifies the time interval between retry attempts (defaults to 1 second ). Nullable < TimeSpan > timeout Optionally specifies the maximum time the operation will be retried (defaults to unconstrained) String categoryName Optionally enables transient error logging by identifying the source category name (defaults to null ). Remarks The maxAttempts parameter defaults to -1 indicating that the operation should be attempted up to 5 times, unless a Timeout is specified. In this case, maxAttempts will be ignored and the timeout will be honored. When maxAttempts is greater than or equal to zero and Timeout is passed, then both maxAttempts and Timeout will be honored, with retries stopping when either are exceeded. Properties MaxAttempts Returns the maximum number of times the action should be attempted. Declaration public int MaxAttempts { get; } Property Value Type Description Int32 RetryInterval Returns the fixed interval between action retry attempts. Declaration public TimeSpan RetryInterval { get; } Property Value Type Description TimeSpan Methods Clone(Func<Exception, Boolean>) Returns a copy of the retry policy. Declaration public override IRetryPolicy Clone(Func<Exception, bool> transientDetector = null) Parameters Type Name Description Func < Exception , Boolean > transientDetector Optionally specifies a replacement transient detector function that will be set in the cloned policy. Returns Type Description IRetryPolicy The policy copy. Overrides RetryPolicyBase.Clone(Func<Exception, Boolean>) Invoke(Action) Retries a synchronous action that returns no result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public override void Invoke(Action action) Parameters Type Name Description Action action The synchronous action to be performed. Overrides RetryPolicyBase.Invoke(Action) Invoke<TResult>(Func<TResult>) Retries a synchronous action that returns a result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public override TResult Invoke<TResult>(Func<TResult> action) Parameters Type Name Description Func <TResult> action The synchronous action to be performed. Returns Type Description TResult The action result. Type Parameters Name Description TResult The action result type. Overrides Neon.Retry.RetryPolicyBase.Invoke<TResult>(System.Func<TResult>) InvokeAsync(Func<Task>) Retries an asynchronous action that returns no result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public override async Task InvokeAsync(Func<Task> action) Parameters Type Name Description Func < Task > action The asynchronous action to be performed. Returns Type Description Task Overrides RetryPolicyBase.InvokeAsync(Func<Task>) InvokeAsync<TResult>(Func<Task<TResult>>) Retries an asynchronous action that returns TResult when it throws exceptions due to transient errors. he classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public override async Task<TResult> InvokeAsync<TResult>(Func<Task<TResult>> action) Parameters Type Name Description Func < Task <TResult>> action The asynchronous action to be performed. Returns Type Description Task <TResult> The action result. Type Parameters Name Description TResult The action result type. Overrides Neon.Retry.RetryPolicyBase.InvokeAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>) Implements IRetryPolicy"
  },
  "neonsdk/api/Neon.Retry.NoRetryPolicy.html": {
    "href": "neonsdk/api/Neon.Retry.NoRetryPolicy.html",
    "title": "Class NoRetryPolicy | NeonSDK documentation",
    "keywords": "Class NoRetryPolicy Implements an IRetryPolicy that does not attempt to retry operations. Inheritance Object NoRetryPolicy Implements IRetryPolicy Namespace : Neon.Retry Assembly : Neon.Common.dll Syntax public class NoRetryPolicy : IRetryPolicy Constructors NoRetryPolicy() Constructor. Declaration public NoRetryPolicy() Properties Instance Returns a global invariant instance. Declaration public static NoRetryPolicy Instance { get; } Property Value Type Description NoRetryPolicy Timeout Returns the optional policy timeout. When present, this specifies the maximum time the policy will continue retrying the operation. Declaration public TimeSpan? Timeout { get; } Property Value Type Description Nullable < TimeSpan > Methods Clone(Func<Exception, Boolean>) Returns a copy of the retry policy. Declaration public IRetryPolicy Clone(Func<Exception, bool> transientDetector = null) Parameters Type Name Description Func < Exception , Boolean > transientDetector Optionally specifies a replacement transient detector function that will be set in the cloned policy. Returns Type Description IRetryPolicy The policy copy. Invoke(Action) Retries a synchronous action that returns no result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public void Invoke(Action action) Parameters Type Name Description Action action The synchronous action to be performed. Invoke<TResult>(Func<TResult>) Retries a synchronous action that returns a result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public TResult Invoke<TResult>(Func<TResult> action) Parameters Type Name Description Func <TResult> action The synchronous action to be performed. Returns Type Description TResult The action result. Type Parameters Name Description TResult The action result type. InvokeAsync(Func<Task>) Retries an asynchronous action that returns no result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public async Task InvokeAsync(Func<Task> action) Parameters Type Name Description Func < Task > action The asynchronous action to be performed. Returns Type Description Task InvokeAsync<TResult>(Func<Task<TResult>>) Retries an asynchronous action that returns TResult when it throws exceptions due to transient errors. he classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public async Task<TResult> InvokeAsync<TResult>(Func<Task<TResult>> action) Parameters Type Name Description Func < Task <TResult>> action The asynchronous action to be performed. Returns Type Description Task <TResult> The action result. Type Parameters Name Description TResult The action result type. Events OnTransient Used to intercept and handle logging for transient exceptions detected by a retry policy. Handlers can set Handled in the argument passed to prevent subsequent handlers from being invoked and also prevent the transient exception from being logged. Declaration public event Action<RetryTransientArgs> OnTransient Event Type Type Description Action < RetryTransientArgs > Implements IRetryPolicy"
  },
  "neonsdk/api/Neon.Retry.RetryPolicy.html": {
    "href": "neonsdk/api/Neon.Retry.RetryPolicy.html",
    "title": "Class RetryPolicy | NeonSDK documentation",
    "keywords": "Class RetryPolicy Base class for used to help implement a IRetryPolicy . Inheritance Object RetryPolicy Implements IRetryPolicy Namespace : Neon.Retry Assembly : Neon.Common.dll Syntax public abstract class RetryPolicy : IRetryPolicy Constructors RetryPolicy(String, Nullable<TimeSpan>) Constructor. Declaration public RetryPolicy(string categoryName = null, TimeSpan? timeout = null) Parameters Type Name Description String categoryName Optionally enables transient error logging by identifying the source category name (defaults to null ). Nullable < TimeSpan > timeout Optionally specifies the maximum time the operation should be retried (defaults to no limit). Fields DefaultMaxAttempts The default number of times an operation should be attempted for transient exceptions. Declaration public const int DefaultMaxAttempts = 5 Field Value Type Description Int32 Properties Timeout Returns the optional policy timeout. When present, this specifies the maximum time the policy will continue retrying the operation. Declaration public TimeSpan? Timeout { get; } Property Value Type Description Nullable < TimeSpan > Methods AdjustDelay(TimeSpan) Adjusts the delay TimeSpan passed to ensure such that delaying the next retry won't exceed the overall retry timeout (if specified). Declaration protected TimeSpan AdjustDelay(TimeSpan delay) Parameters Type Name Description TimeSpan delay The requested delay. Returns Type Description TimeSpan The adjusted delay. Remarks note If the result is Zero or negative, the calling retry policy should immediately stop retrying. Clone(Func<Exception, Boolean>) Returns a copy of the retry policy. Declaration public abstract IRetryPolicy Clone(Func<Exception, bool> transientDetector = null) Parameters Type Name Description Func < Exception , Boolean > transientDetector Optionally specifies a replacement transient detector function that will be set in the cloned policy. Returns Type Description IRetryPolicy The policy copy. Invoke(Action) Retries a synchronous action that returns no result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public abstract void Invoke(Action action) Parameters Type Name Description Action action The synchronous action to be performed. Invoke<TResult>(Func<TResult>) Retries a synchronous action that returns a result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public abstract TResult Invoke<TResult>(Func<TResult> action) Parameters Type Name Description Func <TResult> action The synchronous action to be performed. Returns Type Description TResult The action result. Type Parameters Name Description TResult The action result type. InvokeAsync(Func<Task>) Retries an asynchronous action that returns no result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public abstract Task InvokeAsync(Func<Task> action) Parameters Type Name Description Func < Task > action The asynchronous action to be performed. Returns Type Description Task InvokeAsync<TResult>(Func<Task<TResult>>) Retries an asynchronous action that returns TResult when it throws exceptions due to transient errors. he classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public abstract Task<TResult> InvokeAsync<TResult>(Func<Task<TResult>> action) Parameters Type Name Description Func < Task <TResult>> action The asynchronous action to be performed. Returns Type Description Task <TResult> The action result. Type Parameters Name Description TResult The action result type. LogTransient(Exception) Handles logging of transient exceptions by invoking any OnTransient event handlers and then logging the transient exception when none of the handlers indicated that they handled the event. Declaration protected void LogTransient(Exception e) Parameters Type Name Description Exception e The transient exception. Events OnTransient Used to intercept and handle logging for transient exceptions detected by a retry policy. Handlers can set Handled in the argument passed to prevent subsequent handlers from being invoked and also prevent the transient exception from being logged. Declaration public event Action<RetryTransientArgs> OnTransient Event Type Type Description Action < RetryTransientArgs > Implements IRetryPolicy"
  },
  "neonsdk/api/Neon.Retry.RetryPolicyBase.html": {
    "href": "neonsdk/api/Neon.Retry.RetryPolicyBase.html",
    "title": "Class RetryPolicyBase | NeonSDK documentation",
    "keywords": "Class RetryPolicyBase Base class for used to help implement a IRetryPolicy . Inheritance Object RetryPolicyBase ExponentialRetryPolicy LinearRetryPolicy Implements IRetryPolicy Namespace : Neon.Retry Assembly : Neon.Common.dll Syntax public abstract class RetryPolicyBase : IRetryPolicy Constructors RetryPolicyBase(String, Nullable<TimeSpan>) Constructor. Declaration public RetryPolicyBase(string categoryName = null, TimeSpan? timeout = null) Parameters Type Name Description String categoryName Optionally enables transient error logging by identifying the source category name (defaults to null ). Nullable < TimeSpan > timeout Optionally specifies the maximum time the operation will be retried (defaults to unconstrained) Properties CategoryName Returns the associated log source category name (or null) . Declaration protected string CategoryName { get; } Property Value Type Description String Timeout Returns the optional policy timeout. When present, this specifies the maximum time the policy will continue retrying the operation. Declaration public TimeSpan? Timeout { get; } Property Value Type Description Nullable < TimeSpan > Methods AdjustDelay(TimeSpan, DateTime) Adjusts the delay TimeSpan passed to ensure such that delaying the next retry won't exceed the overall retry timeout (if specified). Declaration protected TimeSpan AdjustDelay(TimeSpan delay, DateTime sysDeadline) Parameters Type Name Description TimeSpan delay The requested delay. DateTime sysDeadline The retry deadline (SYS) computed by SysDeadline() . Returns Type Description TimeSpan The adjusted delay. Remarks note If the result is Zero or negative, the calling retry policy should immediately stop retrying. Clone(Func<Exception, Boolean>) Returns a copy of the retry policy. Declaration public abstract IRetryPolicy Clone(Func<Exception, bool> transientDetector = null) Parameters Type Name Description Func < Exception , Boolean > transientDetector Optionally specifies a replacement transient detector function that will be set in the cloned policy. Returns Type Description IRetryPolicy The policy copy. Invoke(Action) Retries a synchronous action that returns no result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public abstract void Invoke(Action action) Parameters Type Name Description Action action The synchronous action to be performed. Invoke<TResult>(Func<TResult>) Retries a synchronous action that returns a result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public abstract TResult Invoke<TResult>(Func<TResult> action) Parameters Type Name Description Func <TResult> action The synchronous action to be performed. Returns Type Description TResult The action result. Type Parameters Name Description TResult The action result type. InvokeAsync(Func<Task>) Retries an asynchronous action that returns no result when it throws exceptions due to transient errors. The classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public abstract Task InvokeAsync(Func<Task> action) Parameters Type Name Description Func < Task > action The asynchronous action to be performed. Returns Type Description Task InvokeAsync<TResult>(Func<Task<TResult>>) Retries an asynchronous action that returns TResult when it throws exceptions due to transient errors. he classification of what is a transient error, the interval between the retries as well as the number of times the operation are retried are determined by the policy implementation. Declaration public abstract Task<TResult> InvokeAsync<TResult>(Func<Task<TResult>> action) Parameters Type Name Description Func < Task <TResult>> action The asynchronous action to be performed. Returns Type Description Task <TResult> The action result. Type Parameters Name Description TResult The action result type. LogTransient(Exception) Handles logging of transient exceptions by invoking any OnTransient event handlers and then logging the transient exception when none of the handlers indicated that they handled the event. Declaration protected void LogTransient(Exception e) Parameters Type Name Description Exception e The transient exception. SysDeadline() Computes the time (SYS) after which the operation should not be retried. Declaration protected DateTime SysDeadline() Returns Type Description DateTime Events OnTransient Used to intercept and handle logging for transient exceptions detected by a retry policy. Handlers can set Handled in the argument passed to prevent subsequent handlers from being invoked and also prevent the transient exception from being logged. Declaration public event Action<RetryTransientArgs> OnTransient Event Type Type Description Action < RetryTransientArgs > Implements IRetryPolicy"
  },
  "neonsdk/api/Neon.Retry.RetryTransientArgs.html": {
    "href": "neonsdk/api/Neon.Retry.RetryTransientArgs.html",
    "title": "Class RetryTransientArgs | NeonSDK documentation",
    "keywords": "Class RetryTransientArgs Arguments passed to OnTransient handlers so these can react to transient exceptions and optionally prevent further handlers from being invoked and also prevent the transient exception from being logged. Inheritance Object RetryTransientArgs Namespace : Neon.Retry Assembly : Neon.Common.dll Syntax public class RetryTransientArgs Properties Exception Returns the transient exception detected by the retry policy. Declaration public Exception Exception { get; } Property Value Type Description Exception Handled Handlers may set this to true to indicate that no subsequent handlers should be called and also that the default transient logging should not occur. Declaration public bool Handled { get; set; } Property Value Type Description Boolean"
  },
  "neonsdk/api/Neon.Retry.TransientDetector.html": {
    "href": "neonsdk/api/Neon.Retry.TransientDetector.html",
    "title": "Class TransientDetector | NeonSDK documentation",
    "keywords": "Class TransientDetector Provides some common transient error detection functions for use by IRetryPolicy implementations. Inheritance Object TransientDetector Namespace : Neon.Retry Assembly : Neon.Common.dll Syntax public static class TransientDetector Methods Always(Exception) Considers every exceptions to be transient. Declaration public static bool Always(Exception e) Parameters Type Name Description Exception e The potential transient exception. Returns Type Description Boolean true Http(Exception) Considers HttpException , HttpRequestException , and TransientException as possible transient errors as well as these exceptions nested within an AggregateException . Declaration public static bool Http(Exception e) Parameters Type Name Description Exception e The potential transient exception. Returns Type Description Boolean true if the exception is to be considered as transient. Remarks note TransientException is always considered to be a transient exception. Network(Exception) Considers SocketException and TransientException as possible transient errors as well as these exceptions nested within an AggregateException . Declaration public static bool Network(Exception e) Parameters Type Name Description Exception e The potential transient exception. Returns Type Description Boolean true if the exception is to be considered as transient. Remarks note TransientException is always considered to be a transient exception. NetworkOrHttp(Exception) Considers SocketException , HttpRequestException , and TransientException as possible transient errors as well as these exceptions nested within an AggregateException . Declaration public static bool NetworkOrHttp(Exception e) Parameters Type Name Description Exception e The potential transient exception. Returns Type Description Boolean true if the exception is to be considered as transient. Remarks note TransientException is always considered to be a transient exception. Never(Exception) Considers no exceptions to be transient. Declaration public static bool Never(Exception e) Parameters Type Name Description Exception e The potential transient exception. Returns Type Description Boolean false"
  },
  "neonsdk/api/Neon.Retry.TransientException.html": {
    "href": "neonsdk/api/Neon.Retry.TransientException.html",
    "title": "Class TransientException | NeonSDK documentation",
    "keywords": "Class TransientException Used to indicate an explicit transient error. Inheritance Object Exception TransientException Namespace : Neon.Retry Assembly : Neon.Common.dll Syntax public class TransientException : Exception, ISerializable Constructors TransientException(String, Exception) Constructor. Declaration public TransientException(string message, Exception innerException = null) Parameters Type Name Description String message The message. Exception innerException Optional inner exception. Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Service.html": {
    "href": "neonsdk/api/Neon.Service.html",
    "title": "Namespace Neon.Service | NeonSDK documentation",
    "keywords": "Namespace Neon.Service Classes LogMetricsProcessor This OpenTelemetry processor maintains the labeled neon_log_events metrics counter by incrementing the counter whenever events are logged, using the event's LogLevel as the counter label. note NeonService based applications configure this processor by default. MetricsOptions Specifies options for a NeonService . This is initialized to reasonable defaults. NeonService Handy base class for application services. This class handles process termination signals when running on Linux, OS/X, and similar environments and also provides some features to help you run unit tests on your service. NeonServiceOptions Optionally passed to the NeonService constructor to specify additional service related options. OtelConfigExtensions Implements extension methods used for configuring Neon.Diagnostics related exporters and processors. OtlpCollectorChecker Used to check for the presence of a DNS host specified by a URI. This is used by services to determine whether an OTEL Collector relay service exists in the Kubernetes namespace where the service is running. The idea is for the service call Start(NeonService, Uri, TimeSpan) to start the checker and then set the trace sampler to Sampler so that tracing will be enabled when the collector relay service exists and disable tracing when it doesn't. ProcessTerminator Gracefully handles SIGTERM signals sent to a process to terminate itself. ServiceApiContact Holds the contact information for a service API. This maps closely to the Microsoft.OpenApi.Models.OpenApiContact class. ServiceApiInfo Human readable metadata for a service API. This maps pretty closely to the Microsoft.OpenApi.Models.OpenApiInfo class which is used to by Swagger when generating ASP.NET documentation. note We're not referencing the Microsoft.OpenApi nuget package to avoid adding about 166KB to applications using the Neon.Common assembly.f ServiceApiLicense Holds the license information for a service API. This maps closely to the Microsoft.OpenApi.Models.OpenApiLicense class. ServiceDependencies Used to specify other services that must be reachable via the network before a NeonService will be allowed to start. This is exposed via the Dependencies where these values can be configured in code before RunAsync(Boolean) is called or they can also be configured via environment variables as described in the remarks. ServiceDescription Describes a remote service. ServiceEndpoint Describes a network endpoint for remote service. ServiceEndpoints Holds the endpoint definitions for a service. ServiceMap Describes a collection of services deployed to Kubernetes or that run in a simulated unit test environment. This is simply a dictionary mapping case sensitive service names to ServiceDescription records for each service. note ServiceMap is a somewhat dated concept that doesn't make a lot of sense in the Kubernetes world. We recommend that new code avoid this. Enums MetricsMode Used control how or whether a NeonService publishes Prometheus metrics. NeonServiceStatus Enumerates the possible NeonService running states. ServiceEndpointProtocol Enumerats the network protocols that can be implemented by a ServiceEndpoint ."
  },
  "neonsdk/api/Neon.Service.LogMetricsProcessor.html": {
    "href": "neonsdk/api/Neon.Service.LogMetricsProcessor.html",
    "title": "Class LogMetricsProcessor | NeonSDK documentation",
    "keywords": "Class LogMetricsProcessor This OpenTelemetry processor maintains the labeled neon_log_events metrics counter by incrementing the counter whenever events are logged, using the event's LogLevel as the counter label. note NeonService based applications configure this processor by default. Inheritance Object OpenTelemetry.BaseProcessor < OpenTelemetry.Logs.LogRecord > LogMetricsProcessor Namespace : Neon.Service Assembly : Neon.Service.dll Syntax public class LogMetricsProcessor : BaseProcessor<LogRecord>, IDisposable Remarks This is useful for screening for services that may be logging too many warnings or errors, requiring further investigation. This is very easy to use. Simply call AddLogMetricsProcessor(OpenTelemetryLoggerOptions, String) . Constructors LogMetricsProcessor(String) Constructs a processor that counts logged events by LogLevel . Declaration public LogMetricsProcessor(string metricsPrefix = null) Parameters Type Name Description String metricsPrefix Optionally specifies a prefix to be prepended to to the counter name. Methods OnEnd(LogRecord) Handles the event counting. Declaration public override void OnEnd(LogRecord logRecord) Parameters Type Name Description OpenTelemetry.Logs.LogRecord logRecord The log record. Overrides OpenTelemetry.BaseProcessor<OpenTelemetry.Logs.LogRecord>.OnEnd(OpenTelemetry.Logs.LogRecord)"
  },
  "neonsdk/api/Neon.Service.MetricsMode.html": {
    "href": "neonsdk/api/Neon.Service.MetricsMode.html",
    "title": "Enum MetricsMode | NeonSDK documentation",
    "keywords": "Enum MetricsMode Used control how or whether a NeonService publishes Prometheus metrics. Namespace : Neon.Service Assembly : Neon.Service.dll Syntax public enum MetricsMode Fields Name Description Disabled Metrics publishing is disabled. Push Metrics will be pushed to a Prometheus Pushgateway . Scrape Metrics will be scraped by Prometheus. ScrapeIgnoreErrors Metrics will scraped by Prometheus but any port conflicts or any endpoint registration errors thrown by HttpListener on Windows will be ignored. note This mode is really intended for test environments where these errors aren't relavent. We don't recommend this for production deployments. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Service.MetricsOptions.html": {
    "href": "neonsdk/api/Neon.Service.MetricsOptions.html",
    "title": "Class MetricsOptions | NeonSDK documentation",
    "keywords": "Class MetricsOptions Specifies options for a NeonService . This is initialized to reasonable defaults. Inheritance Object MetricsOptions Namespace : Neon.Service Assembly : Neon.Service.dll Syntax public class MetricsOptions Remarks These options allow developers to customize some service behaviors. This is is exposed as the MetricsOptions property and is initialized to reasonable default values. Developers may modify these options as desired before calling RunAsync(Boolean) to start their service. Prometheus metrics capturing is disabled by default. You can change this by setting Mode to Scrape , ScrapeIgnoreErrors , or Push . The two scrape modes expect that Prometheus will be perodically reading metrics from the service via the HTTP endpoint specified by Port and Path . note The ScrapeIgnoreErrors mode is somewhat specialized and is intended for testing environments and is not recommended for production. note Built-in Prometheus scraping support is limited to HTTP and not HTTPS and no authentication is enforced. Pushgateway support can use HTTPS as well as HTTP, but we don't support authentication at this time. For more complex scenarios, just leave Mode == Disabled and configure prometheus-net yourself before calling RunAsync(Boolean) . We're trying to address 80% scenarios to reduce a bit of service related boilerplate code but prometheus-net is quite easy to configure. .NET CORE RUNTIME METRICS For .NET Core apps, you'll also need to add a reference to the prometheus-net.DotNetRuntime nuget package and set GetCollector to a function that returns the the collector to be used. This will look like: Service.MetricsOptions.GetCollector = () => { return DotNetRuntimeStatsBuilder .Default() .StartCollecting(); }; ASPNETCORE METRICS: For ASPNETCORE metrics, you'll need to add the prometheus-net.AspNetCore nuget package and then add the collector when configuring your application in the Startup class, like: public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { app.UseRouting(); app.UseHttpMetrics(); // <--- add this } Properties GetCollector Optionally configures a callback that can return a custom metrics collector for the service. For non-ASPNETCORE applications, we recommend that you configure this to return the standard .NET Runtime metrics collector so your services will report those as well. You'll need to install the prometheus-net.DotNetRuntime nugeyt package and the code to configure looks like this: Service.MetricsOptions.GetCollector = () => { return DotNetRuntimeStatsBuilder .Default() .StartCollecting(); }; For ASP.NET applications, we recommend that you add metrics collection middleware by adding the Prometheus.AspNetCore nuget package and configure your middleware in your Startup class like: public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { app.UseHttpMetrics(); // <-- Enable ASPNETCORE metrics app.UseEndpoints(endpoints => { endpoints.MapControllers(); }); } Declaration public Func<IDisposable> GetCollector { get; set; } Property Value Type Description Func < IDisposable > Mode Enables Prometheus and controls how metrics are published. Declaration public MetricsMode Mode { get; set; } Property Value Type Description MetricsMode Path Specifies the URL path for the local HTTP listener that exposes metrics for scraping by Prometheus. This defaults to \"metrics/\" . Declaration public string Path { get; set; } Property Value Type Description String Port Specifies the TCP port for the local HTTP listener that exposes metrics for scraping by Prometheus. This defaults to PrometheusMetrics . Declaration public int Port { get; set; } Property Value Type Description Int32 PushInterval Specifies how often metrics will be pushed to the target Prometheus Pushgateway for Push mode. This defaults to 5 seconds . Declaration public TimeSpan PushInterval { get; set; } Property Value Type Description TimeSpan PushLabels Optionally specifies additional labels to be identify the source for Push mode. Declaration public IList<Tuple<string, string>> PushLabels { get; set; } Property Value Type Description IList < Tuple < String , String >> PushUrl Specifies the target Prometheus Pushgateway for Push mode. This defaults to null . Declaration public string PushUrl { get; set; } Property Value Type Description String Methods Validate() Validates the options. Declaration public void Validate() Exceptions Type Condition ArgumentException Thrown for any errors."
  },
  "neonsdk/api/Neon.Service.NeonService.html": {
    "href": "neonsdk/api/Neon.Service.NeonService.html",
    "title": "Class NeonService | NeonSDK documentation",
    "keywords": "Class NeonService Handy base class for application services. This class handles process termination signals when running on Linux, OS/X, and similar environments and also provides some features to help you run unit tests on your service. Inheritance Object NeonService Namespace : Neon.Service Assembly : Neon.Service.dll Syntax public abstract class NeonService : IDisposable Remarks Basing your service implementations on the Neon.Service class will make them easier to test via integration with the ServiceFixture from the Neon.Xunit library by providing some useful abstractions over service configuration, startup and shutdown including a ProcessTerminator to handle termination signals from Linux or Kubernetes. This class is pretty easy to use. Simply derive your service class from NeonService and implement the OnRunAsync() method. OnRunAsync() will be called when your service is started. This is where you'll implement your service. You should perform any initialization and then call StartedAsync(NeonServiceStatus) to indicate that the service is ready for business. note We recommend that your service constructor be limited to configuring base service properties and that you perform the bulk of your service initialization in OnRunAsync() before you call StartedAsync(NeonServiceStatus) . Any logging performed in the constructor will be handled by a default console logger because the regular logger isn't initialized until RunAsync(Boolean) is called to start the service. We recommend that you avoid any logging from within your constructor. note Note that calling StartedAsync(NeonServiceStatus) after your service has initialized is important because the NeonServiceFixture won't allow tests to proceed until the service indicates that it's ready. This is necessary to avoid unit test race conditions. Note that your OnRunAsync() method should generally not return until the Terminator signals it to stop. Alternatively, you can throw a ProgramExitException with an optional process exit code to proactively exit your service. note All services should properly handle Terminator stop signals so services deployed as containers will stop promptly and cleanly (this also applies to services running in unit tests). Your terminate handler method must return within a set period of time (30 seconds by default) to avoid killed by by Docker or Kubernetes. This is probably the trickiest thing you'll need to implement. For asynchronous service implementations, you consider passing the CancellationToken to all async method calls. note This class uses the DEV_WORKSTATION environment variable to determine whether the service is running in test mode or not. This variable will typically be defined on developer workstations as well as CI/CD machines. This variable must never be defined for production environments. You can use the InProduction or InDevelopment properties to check this. CONFIGURATION Services are generally configured using environment variables and/or configuration files. In production, environment variables will actually come from the environment after having been initialized by the container image or passed by Kubernetes when starting the service container. Environment variables are retrieved by case sensitive name. Configuration files work the same way. They are either present in the service container image or mounted to the container as a secret or config file by Kubernetes. Configuration files are specified by their path (case sensitive) within the running container. This class provides some abstractions for managing environment variables and configuration files so that services running in production or as a unit test can configure themselves using the same code for both environments. Services should use the Environment parser methods to retrieve important variables rather obtaining these via GetEnvironmentVariable(String) . These methods handle type-safe parsing, validation and default values. In production, this simply returns values from the process environment variables. For tests, the environment variable can be returned from a local dictionary that was expicitly initialized by calls to SetEnvironmentVariable(String, String) . This local dictionary allows the testing of multiple services at the same time with each being presented their own environment variables. You may also use the LoadEnvironmentVariableFile(String, Func<String, String>) methods to load environment variables from a text file (potentially encrypted via NeonVault ). This will typically be done only for unit tests. Configuration files work similarily. You'll use GetConfigFilePath(String) to map a logical file path to a physical path. The logical file path is typically specified as the path where the configuration file will be located in production. This can be any valid path with in a running production container and since we're currently Linux centric, will typically be a Linux file path like /etc/MYSERVICE.yaml or /etc/MYSERVICE/config.yaml . For production, GetConfigFilePath(String) will simply return the file path passed so that the configuration file located there will referenced. For testing, GetConfigFilePath(String) will return the path specified by an earlier call to SetConfigFilePath(String, String, Func<String, String>) or to a temporary file initialized by previous calls to SetConfigFile(String, String, Boolean) or SetConfigFile(String, Byte[]) . This indirection provides a consistent way to run services in production as well as in tests, including tests running multiple services simultaneously. DISPOSE IMPLEMENTATION All services, especially those that create unmanaged resources like ASP.NET services, sockets, NATS clients, HTTP clients, thread etc. should override and implement Dispose(Boolean) to ensure that any of these resources are proactively disposed. Your method should call the base class version of the method first before disposing these resources. protected override Dispose(bool disposing) { base.Dispose(disposing); if (appHost != null) { appHost.Dispose(); appHost = null; } } The disposing parameter is passed as true when the base Dispose() method was called or false if the garbage collector is finalizing the instance before discarding it. The difference is subtle and most services can safely ignore this parameter (other than passing it through to the base Dispose(Boolean) method). In the example above, the service implements an ASP.NET web service where appHost was initialized as the IWebHost actually implementing the web service. The code ensures that the appHost isn't already disposed before disposing it. This will stop the web service and release the underlying listening socket. You'll want to do something like this for any other unmanaged resources your service might hold. note It's very important that you take care to dispose things like running web services and listening sockets within your Dispose(Boolean) method. You also need to ensure that any threads you've created are terminated. This means that you'll need a way to signal threads to exit and then wait for them to actually exit. This is important when testing your services with a unit testing framework like Xunit because frameworks like this run all tests within the same Test Runner process and leaving something like a listening socket open on a port (say port 80) may prevent a subsequent test from running successfully due to it not being able to open its listening socket on port 80. LOGGING The NeonService constructor initializes the OpenTelemetry logging pipeline by default, initializing the Logger property as well as initializing LoggerFactory and adding the logger factor and logger to ServiceContainer , making them available to neonSDK libraries so they may emit logs. The logger created by NeonService in this case will be configured to write JSON formatted logs to the process standard output stream. NeonService parses the current log level from the LOG_LEVEL environment variable, defaulting to Information when this variable is present or cannot be parsed. The possible log levels are: CRITICAL , ERROR , WARNING , WARN , INFORMATION , INFO , DEBUG or TRACE (case insensitive). If you need to customize the OpenTelemetry logging pipeline, you may accomplish this two ways: The easist way to tweak the logging configuration is to implement the protected OnLoggerConfg(OpenTelemetryLoggerOptions) method. This is called by the NeonService constructor before any built-in logging configuration has been done, giving your code the chance to modify the options. Your OnLoggerConfg(OpenTelemetryLoggerOptions) method can then return false when you want NeonService to continue with it's built-in configuration or true if the service ill use your configuration unchanged. You can configuring the pipeline before intantiating your service, by creating an ILoggerFactory , doing any configuration as desired, setting the LoggerFactory to this factory and then passing the options to the NeonService constructor. OnLoggerConfg(OpenTelemetryLoggerOptions) isn't called when a LoggerFactory instance is passed and the service just use your configuration. Your service can use the base NeonService ;s Logger property or call CreateLogger<T>(LogAttributes, Boolean, Boolean) or CreateLogger(String, LogAttributes, Boolean, Boolean) to create loggers you can use for logging events. We then recommend that you add a using Neon.Diagnostics; statement to your code and then use our LoggerExtensions like: using System; using System.Diagnostics; ... var logger = TelemetryHub.CreateLogger(\"my-logger\"); var username = \"Sally\"; logger.LogDebugEx(\"this is a test\"); logger.LogInformationEx(() => $\"user: {username}\"); TRACING NeonService also has limited support for configuring OpenTelemetry tracing for targeting an OpenTelemetry Collector by URI. This is controlled using two environment variables: note NeonService only supports exporting traces to an OpenTelemetry Collector via and OTEL exporter, but you can always configure a custom OpenTelemetry pipeline before starting your NeonService when you need to send traces elsewhere. TRACE_COLLECTOR_URI When present and TracerProvider is null , then this specifies the URI for the OpenTelemetry Collector where the traces will be sent. If this environment variable is not present and the service is running in Kubernetes, then we're going to assume that you're running in a neonKUBE cluster and NeonService will default to sending traces to the NeonKubeOtelCollectorUri ( http://grafana-agent-node.neon-monitor.svc.cluster.local ) service endpoint deployed to the same Kubernetes namespace. note This is ignored when TracerProvider is not null , which indicates that a custom OpenTelemetry tracing pipeline has already been configured or for services targeting the .NET Framework or .NET Core frameworks earlier than NET6.0. TRACE_LOG_LEVEL This optional environment variable configures the log level for events that will be also recorded as trace events. You can also specify TRACE_LOG_LEVEL=None to disable automatic trace event submission completely. This defaults to the LOG_LEVEL environment variable when present or Information . note This feature is disabled when LoggerFactory has been set, indicating that the OpenTelemetry logging pipeline has already been customized. note Only events logged at the current LOG_LEVEL or greater will ever be candidates for being recorded as trace events; TRACE_LOG_LEVEL is intended to be used for adding an additional constrain on trace events over and above the LOG_LEVEL . For example, by setting LOG_LEVEL=Information and TRACE_LOG_LEVEL=Warning , you'd be logging all events for Information> and above, but only submit log events with for Warning or above as trace events. Setting TRACE_LOG_LEVEL=Debug in this example won't actually record debug events as trace events, because these events won't be logged due to LOG_LEVEL=Information . HEALTH PROBES note Health probes are supported only on Linux running as AMD64. This is not supported on Windows, OS/X, 32-bit or ARM platforms at this time. Hosting environments such as Kubernetes will often require service instances to be able to report their health via health probes. These probes are typically implemented as a small executables that is called periodically by the hosting environment with the return code indicating the service instance health. Alternatively, services can expose one or more web endpoints that returns 200 status when the service is healthy. note This class has built-in support for the the small executable health checker approach to make it easier to implement health checks for workloads that don't expose a web interface. Web workloads can continue use the built-in approach or just expose their own health endpoints. The NeonService class supports this by optionally writing a text file with various strings indicating the health status. The status file will consist of a single line of text holding one of the serialized NeonServiceStatus values. The status file path defaults to /health-status . NeonService also deploys two status checking tools called health-check and ready-check to the same directory where health-status is written. The health check tool will be created at /health-check by default and it returns a non-zero exit code when the service is not healthy. A service is considered healthy only when the status is on of Running or NotReady . The ready check tool file will be created at /ready-check by default and it returns a non-zero exit code when the service is not ready. A service is considered ready only when the status is Running . You may pass a custom health folder path to the constructor so that the status and check files so these can be located elsewhere to avoid conflicts such as when multiple services will be running on a machine or container or when the root file system is read-only. You can also disable this feature entirely by passing \"DISABLED\" as the health folder path. note For Kubernetes deployments, we recommend that you configure your pod specifications with startup and liveliness probes along with an optional readiness probe when appropriate. This will look something like: apiVersion: apps/v1 kind: Deployment metadata: name: my-app spec: replicas: 1 selector: matchLabels: operator: my-app template: metadata: labels: operator: my-app spec: containers: - name: my-app image: docker.io/my-app:latest startupProbe: exec: command: - /health-check # $lt;--- this script works for both startup and liveliness probes initialDelaySeconds: 1 periodSeconds: 5 timeoutSeconds: 1 livenessProbe: exec: command: - /health-check initialDelaySeconds: 1 # $lt;--- we don't need a long (fixed) delay here with a startup probe periodSeconds: 5 timeoutSeconds: 1 readinessProbe: exec: command: - /ready-check # $lt;--- separate script for readiness probes initialDelaySeconds: 1 periodSeconds: 5 timeoutSeconds: 1 ports: - containerPort: 5000 name: http terminationGracePeriodSeconds: 10 SERVICE DEPENDENCIES Services often depend on other services to function, such as databases, REST APIs, etc. NeonService provides an easy to use integrated way to wait for other services to initialize themselves and become ready before your service will be allowed to start. This is a great way to avoid a blizzard of service failures and restarts when starting a collection of related services on a platform like Kubernetes. You can use the Dependencies property to control this in code via the ServiceDependencies class or configure this via environment variables: NEON_SERVICE_DEPENDENCIES_URIS=http://foo.com;tcp://10.0.0.55:1234 NEON_SERVICE_DEPENDENCIES_TIMEOUT_SECONDS=30 NEON_SERVICE_DEPENDENCIES_WAIT_SECONDS=5 The basic idea is that the RunAsync(Boolean) call to start your service will need to successfully to establish socket connections to any service dependecy URIs before your OnRunAsync() method will be called. Your service will be terminated if any of the services cannot be reached after the specified timeout. You can also specify additional time to wait after all services are available to give them a chance to perform additional internal initialization. note Service dependencies are currently waited for when the service status is Starting , which means that they will need to complete before the startup or libeliness probes time out resulting in service termination. This behavior may change in the future: https://github.com/nforgeio/neonKUBE/issues/1361 PROMETHEUS METRICS NeonService can enable services to publish Prometheus metrics with a single line of code; simply set MetricsOptions . Mode to Scrape before calling RunAsync(Boolean) . This configures your service to publish metrics via HTTP via http://0.0.0.0 : PrometheusMetrics /metrics/ . We've resistered port PrometheusMetrics with Prometheus as a standard port to be used for microservices running in Kubernetes or on other container platforms to make it easy configure scraping for a cluster. You can also configure a custom port and path or configure metrics push to a Prometheus Pushgateway using other MetricsOptions properties. You can also fully customize your Prometheus configuration by leaving this disabled in MetricsOptions and setting things up using the standard prometheus-net mechanisms before calling RunAsync(Boolean) . .NET CORE RUNTIME METRICS For .NET Core apps, you'll also need to add a reference to the prometheus-net.DotNetRuntime nuget package and set GetCollector to a function that returns the the collector to be used. This will look like: Service.MetricsOptions.GetCollector = () => { return DotNetRuntimeStatsBuilder .Default() .StartCollecting(); }; ASPNETCORE METRICS: For ASPNETCORE metrics, you'll need to add the prometheus-net.AspNetCore nuget package and then add the collector when configuring your application in the Startup class, like: public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { app.UseRouting(); app.UseHttpMetrics(); // <--- add this } CRON JOBS NeonService s that implement Kubernetes CRON jobs should consider setting AutoTerminateIstioSidecar =true . This ensures that the pod scheduled for the job is terminated cleanly when it has Istio injected sidecars. This is generally safe to set when running in a Kubernetes cluster. Additional information: https://github.com/nforgeio/neonKUBE/issues/1233 Constructors NeonService(String, String, NeonServiceOptions) Constructor. Declaration public NeonService(string name, string version = null, NeonServiceOptions options = null) Parameters Type Name Description String name The name of this service. String version Optionally specifies the version of your service formatted as a valid SemanticVersion . This will default to \"unknown\" when not set or when the value passed is invalid. NeonServiceOptions options Optionally specifies NeonService options. Exceptions Type Condition KeyNotFoundException Thrown if there is no service description for name within the ServiceMap when a service map is specified. Properties ActivitySource Configured as the activity source used by the service for recording traces. note NeonService also sets the same value as ActivitySource to enable tracing from library code. Declaration public ActivitySource ActivitySource { get; set; } Property Value Type Description ActivitySource Arguments Returns the list of command line arguments passed to the service. This defaults to an empty list. Declaration public List<string> Arguments { get; } Property Value Type Description List < String > AutoTerminateIstioSidecar Controls whether any Istio sidecars (Envoy) will be terminated automatically when the service exits normally. This is useful for services like CRON jobs that don't get rescheduled after they exit. This defaults to false . Declaration public bool AutoTerminateIstioSidecar { get; set; } Property Value Type Description Boolean Remarks You should consider setting this property to true for services implementing a Kubernetes CRON job that has injected Istio sidecars. The problem here is that after the main pod container exits, the Envoy sidecar containers reamin running and the pod never gets terminated: https://github.com/istio/istio/issues/11659#issuecomment-809372980 This isn't an general issue for other deployments because the Kubernetes scheduler will terminate and reschedule pods after the main container exists. CRON jobs are different because they won't get rescheduled when the main container exits. When you set AutoTerminateIstioSidecar true , the NeonService class will POST a request to the Envoy sidecar's admin API at http://localhost:15000/quitquitquit to explicitly terminate any sidecars when the service exits normally. Note that we won't post this request when the service receives a termination signal. We recommend that you set this property before calling StartedAsync(NeonServiceStatus) in your service initialization code. note This class generally tolerates the situation where the service does not have injected Istio sidecars by ignoring any network errors when posting to the Envoy admin endpoint. BaseUri For services with exactly one network endpoint, this returns the base URI to be used to access the service. note This will throw a InvalidOperationException if the service defines no endpoints or has multiple endpoints. Declaration public Uri BaseUri { get; } Property Value Type Description Uri Exceptions Type Condition InvalidOperationException Thrown when the service does not define exactly one endpoint or Description is not set. Dependencies Used to specify other services that must be reachable via the network before a NeonService will be allowed to start. This is exposed via the Dependencies where these values can be configured in code before RunAsync(Boolean) is called or they can also be configured via environment variables as described in ServiceDependencies . note Service dependencies are currently waited for when the service status is Starting , which means that they will need to complete before the startup or liveliness probes time out resulting in service termination. This behavior may change in the future: https://github.com/nforgeio/neonKUBE/issues/1361 Declaration public ServiceDependencies Dependencies { get; set; } Property Value Type Description ServiceDependencies Description Returns the service description for this service (if any). Declaration public ServiceDescription Description { get; } Property Value Type Description ServiceDescription Endpoints Returns the dictionary mapping case sensitive service endpoint names to endpoint information. Declaration public Dictionary<string, ServiceEndpoint> Endpoints { get; } Property Value Type Description Dictionary < String , ServiceEndpoint > Environment Provides support for retrieving environment variables as well as parsing common value types as well as custom value parsers. We recommend that services use this rather than GetEnvironmentVariable(String, String, Boolean) when possible as a way to standardize on how settings are formatted, parsed and validated. Declaration public EnvironmentParser Environment { get; } Property Value Type Description EnvironmentParser ExitCode Returns the exit code returned by the service. Declaration public int ExitCode { get; } Property Value Type Description Int32 ExitException Returns any abnormal exception thrown by the derived OnRunAsync() method. Declaration public Exception ExitException { get; } Property Value Type Description Exception InDevelopment Returns true when the service is running in development or test mode, when the DEV_WORKSTATION environment variable is defined . Declaration public bool InDevelopment { get; } Property Value Type Description Boolean InProduction Returns true when the service is running in production, when the DEV_WORKSTATION environment variable is not defined . The NeonServiceFixure will set this to true explicitly as well. Declaration public bool InProduction { get; } Property Value Type Description Boolean Logger Configured as the ILogger used by the service for logging. note You can create additional loggers via CreateLogger(String, LogAttributes, Boolean, Boolean) and CreateLogger<T>(LogAttributes, Boolean, Boolean) . Declaration public ILogger Logger { get; set; } Property Value Type Description ILogger LoggerFactory Returns the ILoggerFactory used by the service. This is used to create the default service Logger and may also be used by user code to create custom loggers when necessary. Declaration public ILoggerFactory LoggerFactory { get; } Property Value Type Description ILoggerFactory MetricsOptions Prometheus metrics options. To enable metrics collection for non-ASPNET applications, we recommend that you simply set Mode == Scrape before calling OnRunAsync() . See MetricsOptions for more details. Declaration public MetricsOptions MetricsOptions { get; set; } Property Value Type Description MetricsOptions MetricsPrefix Returns the prefix to be used when creating metrics counters for this service. This will be set to the prefix passed to the constructor or one derived from the service name. note The prefix returned includes a trailing underscore. Declaration public string MetricsPrefix { get; } Property Value Type Description String Name Returns the service name. Declaration public string Name { get; } Property Value Type Description String ServiceMap Returns the service map (if any). Declaration public ServiceMap ServiceMap { get; } Property Value Type Description ServiceMap Status Returns the service current running status. Use SetStatusAsync(NeonServiceStatus) to update the service status. Declaration public NeonServiceStatus Status { get; } Property Value Type Description NeonServiceStatus Terminator Returns the service's ProcessTerminator . This can be used to handle termination signals. Declaration public ProcessTerminator Terminator { get; } Property Value Type Description ProcessTerminator Version Returns the service version or \"unknown\" . Declaration public string Version { get; } Property Value Type Description String Methods ClearEnvironmentVariables() Clears any loaded environment variables. Declaration public void ClearEnvironmentVariables() Dispose() Declaration public void Dispose() Dispose(Boolean) Releases all associated resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. Exit(Int32) Used by services to stop themselves, specifying an optional process exit code. Declaration public virtual void Exit(int exitCode = 0) Parameters Type Name Description Int32 exitCode The optional exit code (defaults to 0 ). Remarks This works by setting ExitCode if exitCode is non-zero, signalling process termination on another thread and then throwing a ProgramExitException on the current thread. This will generally cause the current thread or task to terminate immediately and any other properly implemented threads and tasks to terminate gracefully when they receive the termination signal. Finalize() Finalizer. Declaration protected void Finalize() GetConfigFilePath(String) Returns the physical path for the confguration file whose logical path is specified. Declaration public string GetConfigFilePath(string logicalPath) Parameters Type Name Description String logicalPath The logical file path (typically expressed as a Linux path). Returns Type Description String The physical path for the configuration file or null if the logical file path is not present. Remarks note This method does not verify that the physical file actually exists. GetEnvironmentVariable(String, String, Boolean) Returns the value of an environment variable. Declaration public string GetEnvironmentVariable(string name, string def = null, bool redact = false) Parameters Type Name Description String name The environment variable name (case sensitive). String def The value to be returned when the environment variable doesn't exist (defaults to null ). Boolean redact Optionally redact log output of the variable. Returns Type Description String The variable value or def if the variable doesn't exist. GetEnvironmentVariables() Returns all loaded enviroment variables. Declaration public Dictionary<string, string> GetEnvironmentVariables() Returns Type Description Dictionary < String , String > A dctionary mapping variable names to their values. LoadEnvironmentVariableFile(String, Func<String, String>) Loads environment variables formatted as NAME=VALUE from a text file as service environment variables. The file will be decrypted using NeonVault if necessary. note Blank lines and lines beginning with '#' will be ignored. Declaration public void LoadEnvironmentVariableFile(string path, Func<string, string> passwordProvider = null) Parameters Type Name Description String path The input file path. Func < String , String > passwordProvider Optionally specifies the password provider function to be used to locate the password required to decrypt the source file when necessary. The password will use a default password provider passwordProvider is null . See the remarks below. Remarks The default password provider assumes that you have neonDESKTOP installed and may be specifying passwords in the ~/.neonkube/passwords folder (relative to the current user's home directory). This will be harmless if you don't have neonDESKTOP installed; it just probably won't find any passwords. Implement a custom password provider function if you need something different. Exceptions Type Condition FileNotFoundException Thrown if the file doesn't exist. FormatException Thrown for file formatting problems. OnLoggerConfg(OpenTelemetryLoggerOptions) Called by the constructor, giving the derived service implementation a chance to customize the logger configuration using the options parameter. This is a good place add log exporters and processors required by your service. This is called before the base NeonService class performs its default configuration. Declaration protected virtual bool OnLoggerConfg(OpenTelemetryLoggerOptions options) Parameters Type Name Description OpenTelemetry.Logs.OpenTelemetryLoggerOptions options Passed as the logger options. Returns Type Description Boolean false when the base NeonService class should continue with its default logger configuration or true to just use the configuration set by the method implementation. The base implementation does nothing and returns false . Remarks note This method is not called when the LoggerFactory property is set when constructing the service, indicating that the logging pipeline has already been configured. OnRunAsync() Called to actually implement the service. Declaration protected abstract Task<int> OnRunAsync() Returns Type Description Task < Int32 > The the progam exit code. Remarks Services should perform any required initialization and then they must call StartedAsync(NeonServiceStatus) to indicate that the service should transition into the Running state. This is very important because the service test fixture requires the service to be in the running state before it allows tests to proceed. This is necessary to avoid unit test race conditions. This method should return the program exit code or throw a ProgramExitException to exit with the program exit code. OnTracerConfig(TracerProviderBuilder) Called by the constructor, giving the derived service implementation a chance to customize the tracer builder using the builder parameter. This is a good place to add OpenTelemetry.Instrumentation.AspNetCore and other trace instrumentation required by your service. This is called before the base NeonService class performs its default configuration. Declaration protected virtual bool OnTracerConfig(TracerProviderBuilder builder) Parameters Type Name Description OpenTelemetry.Trace.TracerProviderBuilder builder Passed as the tracer builder. Returns Type Description Boolean false when the base NeonService class should continue with its default tracer configuration or true to just use the configuration set by the method implementation. The base implementation does nothing and returns false . Remarks note This method is not called when the TracerProvider property is set when constructing the service, indicating that the tracing pipeline has already been configured. RunAsync(Boolean) Starts the service if it's not already running. This will call OnRunAsync() , which is where you'll actually implement the service. Note that any service dependencies specified by Dependencies will be verified as ready before OnRunAsync() will be called. Declaration public virtual async Task<int> RunAsync(bool disableProcessExit = false) Parameters Type Name Description Boolean disableProcessExit Optionally specifies that the hosting process should not be terminated when the service exists. This is typically used for testing or debugging. This defaults to false . Returns Type Description Task < Int32 > The service exit code. Remarks note For production, this method will not return until the service is expicitly stopped via a call to Stop() or the Terminator handles a stop signal. For test environments, this method will call OnRunAsync() on a new thread and returns immediately while the service continues to run in parallel. Service implementations must honor Terminator termination signals by exiting the OnRunAsync() method reasonably quickly (within 30 seconds by default) when these occur. They can do this by passing CancellationToken for async calls and then catching the TaskCanceledException and returning from OnRunAsync() . Another technique for synchronous code is to explicitly check the CancellationToken token's IsCancellationRequested property and return from your OnRunAsync() method when this is true . You'll need to perform this check frequently so you may need to use timeouts to prevent blocking code from blocking for too long. SetArguments(IEnumerable<String>) Initializes Arguments with the command line arguments passed. Declaration public NeonService SetArguments(IEnumerable<string> args) Parameters Type Name Description IEnumerable < String > args The arguments. Returns Type Description NeonService The service instance so developers can chain fluent style calls. SetConfigFile(String, Byte[]) Maps a logical configuration file path to a temporary file holding the byte contents passed. This is typically used initializing confguration files for unit testing. Declaration public NeonService SetConfigFile(string logicalPath, byte[] contents) Parameters Type Name Description String logicalPath The logical file path (typically expressed as a Linux path). Byte [] contents The content bytes. Returns Type Description NeonService The service instance so developers can chain fluent style calls. SetConfigFile(String, String, Boolean) Maps a logical configuration file path to a temporary file holding the string contents passed encoded as UTF-8. This is typically used for initializing confguration files for unit testing. Declaration public NeonService SetConfigFile(string logicalPath, string contents, bool linuxLineEndings = false) Parameters Type Name Description String logicalPath The logical file path (typically expressed as a Linux path). String contents The content string. Boolean linuxLineEndings Optionally convert any Windows style line endings (CRLF) into Linux style endings (LF). This defaults to false . Returns Type Description NeonService The service instance so developers can chain fluent style calls. SetConfigFilePath(String, String, Func<String, String>) Maps a logical configuration file path to an actual file on the local machine. This is used for unit testing to map a file on the local workstation to the path where the service expects the find to be. Declaration public NeonService SetConfigFilePath(string logicalPath, string physicalPath, Func<string, string> passwordProvider = null) Parameters Type Name Description String logicalPath The logical file path (typically expressed as a Linux path). String physicalPath The physical path to the file on the local workstation. Func < String , String > passwordProvider Optionally specifies the password provider function to be used to locate the password required to decrypt the source file when necessary. The password will use a default password provider passwordProvider is null . See the remarks below. Returns Type Description NeonService The service instance so developers can chain fluent style calls. Remarks The default password provider assumes that you have neonDESKTOP installed and may be specifying passwords in the ~/.neonkube/passwords folder (relative to the current user's home directory). This will be harmless if you don't have neonDESKTOP installed; it just probably won't find any passwords. Implement a custom password provider function if you need something different. Exceptions Type Condition FileNotFoundException Thrown if there's no file at physicalPath . SetEnvironmentVariable(String, String) Sets or deletes a service environment variable. Declaration public NeonService SetEnvironmentVariable(string name, string value) Parameters Type Name Description String name The variable name (case sensitive). String value The variable value or null to remove the variable. Returns Type Description NeonService The service instance so developers can chain fluent style calls. Remarks note Environment variable names are to be considered to be case sensitive since this is how Linux treats them and it's very common to be deploying services to Linux. SetStatusAsync(NeonServiceStatus) Updates the service status. This is typically called internally by this class but service code may set this to Unhealthy when there's a problem and back to Running when the service is healthy again. This may also be set to NotReady to indicate that the service is running but is not ready to accept external traffic. Declaration public async Task SetStatusAsync(NeonServiceStatus newStatus) Parameters Type Name Description NeonServiceStatus newStatus The new status. Returns Type Description Task StartedAsync(NeonServiceStatus) Called by OnRunAsync() implementation to indicate that the service is either Running (the default) or NotReady . Declaration public async Task StartedAsync(NeonServiceStatus status = NeonServiceStatus.Running) Parameters Type Name Description NeonServiceStatus status Returns Type Description Task Remarks For most situations, the default Running argument is appropriate. This indicates that the service will satisfy all of the probes: startup, liveliness, and readiness. Advanced services that may take some time to perform additional initialization before being ready to service requests may pass NotReady . This means that the startup and liveliness probes will pass, preventing Kubernetes from terminating the container but that the readiness probe will fail, preventing Kubernetes from forwarding traffic to the container until Running is passed to SetStatusAsync(NeonServiceStatus) . Stop() Stops the service if it's not already stopped. This is intended to be called by external things like unit test fixtures and is not intended to be called by the service itself. Declaration public virtual void Stop() Remarks note It is not possible to restart a service after it's been stopped. This is intended for internal use or managing unit test execution and is not intended for use by the service to stop itself. Exceptions Type Condition TimeoutException Thrown if the service did not exit gracefully in time before it would have been killed (e.g. by Kubernetes or Docker). WaitUntilStarted() Waits until the service indicate that it's started when the OnRunAsync() method has called StartedAsync(NeonServiceStatus) . This is typically used by unit tests to wait until the service is ready before performing tests. Declaration public async Task WaitUntilStarted() Returns Type Description Task The tracking Task ."
  },
  "neonsdk/api/Neon.Service.NeonServiceOptions.html": {
    "href": "neonsdk/api/Neon.Service.NeonServiceOptions.html",
    "title": "Class NeonServiceOptions | NeonSDK documentation",
    "keywords": "Class NeonServiceOptions Optionally passed to the NeonService constructor to specify additional service related options. Inheritance Object NeonServiceOptions Namespace : Neon.Service Assembly : Neon.Service.dll Syntax public class NeonServiceOptions Constructors NeonServiceOptions() Default constructor. Declaration public NeonServiceOptions() Properties AppendGitInfo Indicates that the current git branch name and commit should be appended to the service version passed to the NeonService constructor. This defaults to true . note This is ignored when your project is not using git for source control. Declaration public bool AppendGitInfo { get; set; } Property Value Type Description Boolean GracefulShutdownTimeout Optionally specifies the termination timeout (defaults to DefaultGracefulTimeout ). See ProcessTerminator for more information. Declaration public TimeSpan GracefulShutdownTimeout { get; set; } Property Value Type Description TimeSpan HealthFolder Optionally specifies the folder path where the service will maintain the health-status file and deploy the health-check and ready-check binaries. See the class documentation for more information: Neon.Service . This defaults to: / to make it easy to configure the Kubernetes probes. You can disable this feature by passing \"DISABLED\" instead. note Health status generation only works on Linux. This feature is dsabled on Windows and OS/X. Declaration public string HealthFolder { get; set; } Property Value Type Description String LoggerFactory Optionally specifies the ILoggerFactory the service will use for logging purposes. When set to null (the default), the NeonService class will configure the OpenTelemetry logging pipeline and configure a logger factory for the service and neonSDK libraries. You can set this when you need a completely custom logging configuration. Declaration public ILoggerFactory LoggerFactory { get; set; } Property Value Type Description ILoggerFactory MetricsPrefix Optionally specifies prefix to be used by metrics counters, overridding a prefix based on the service name. This prefix may include only alphanumeric characters and underscores. By default, this will be set to the service name with any non-alphanumeric characters converted to underscores. In either case, the class will add a trailing underscore when not already present. Declaration public string MetricsPrefix { get; set; } Property Value Type Description String MinShutdownTime Optionally specifies the minimum time to wait before allowing termination to proceed. This defaults to DefaultMinShutdownTime . See ProcessTerminator for more information. Declaration public TimeSpan MinShutdownTime { get; set; } Property Value Type Description TimeSpan ServiceMap Optionally specifies a service map describing this service and potentially other services. Service maps can be used to run services locally on developer workstations via Neon.Xunit.NeonServiceFixture or other means to avoid port conflicts or to emulate a cluster of services without Kubernetes or containers. This is a somewhat advanced topic that needs documentation. note ServiceMap is a somewhat dated concept that doesn't make a lot of sense in the Kubernetes world. We recommend that new code avoid this. Declaration public ServiceMap ServiceMap { get; set; } Property Value Type Description ServiceMap TerminationMessagePath Optionally specifies the path where Kubernetes may write a termination message before terminating the pod hosting the message. The NeonService class will check for this file when it receives a termination signal when running on Linux and write the file contents to the log before terminating. This defaults to: /dev/termination-log note This is ignored for all platforms besides Linux. Declaration public string TerminationMessagePath { get; set; } Property Value Type Description String TracerProvider Optionally specifies the TracerProvider the service will use for tracing purposes. When set to null (the default), the NeonService class will configure the tracing pipeline for the service and neonSDK libraries. You can set this when you need a completely custom tracing configuration. Declaration public TracerProvider TracerProvider { get; set; } Property Value Type Description OpenTelemetry.Trace.TracerProvider"
  },
  "neonsdk/api/Neon.Service.NeonServiceStatus.html": {
    "href": "neonsdk/api/Neon.Service.NeonServiceStatus.html",
    "title": "Enum NeonServiceStatus | NeonSDK documentation",
    "keywords": "Enum NeonServiceStatus Enumerates the possible NeonService running states. Namespace : Neon.Service Assembly : Neon.Service.dll Syntax public enum NeonServiceStatus Remarks Most of these values are self-explanatory, but Running and NotReady may be a bit confusing. Running means that the service is healthy and is ready to process requests where as NotReady means that the service is healthy but is not ready to process requests . Most services are ready to accept traffic almost immediately after starting, so setting Running makes sense most of the time. Some services though, may take some time after starting before being ready to process requests. The problem is that the service typically has a limited amount of time before startup or liveliness probes will fail and resulting in the service termination. Setting the NotReady state along with a readiness probe will prevent these other probes from terminating the service. Fields Name Description NotReady Indicates that the service is running but it's not ready to receive external traffic. NotStarted The service has not been started. Running The service is running and ready for traffic. Starting The service is in the process of starting but is not yet fully initialized. Terminated The service has terminated. Unhealthy The service is running but is not healthy. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Service.OtelConfigExtensions.html": {
    "href": "neonsdk/api/Neon.Service.OtelConfigExtensions.html",
    "title": "Class OtelConfigExtensions | NeonSDK documentation",
    "keywords": "Class OtelConfigExtensions Implements extension methods used for configuring Neon.Diagnostics related exporters and processors. Inheritance Object OtelConfigExtensions Namespace : Neon.Service Assembly : Neon.Service.dll Syntax public static class OtelConfigExtensions Methods AddLogMetricsProcessor(OpenTelemetryLoggerOptions, String) Adds a LogMetricsProcessor to a OpenTelemetry.Logs.OpenTelemetryLoggerOptions instance that counts the number of logged events by LogLevel using the neon_log_events metrics counter. Declaration public static OpenTelemetryLoggerOptions AddLogMetricsProcessor(this OpenTelemetryLoggerOptions loggerOptions, string metricsPrefix = null) Parameters Type Name Description OpenTelemetry.Logs.OpenTelemetryLoggerOptions loggerOptions The OpenTelemetry.Logs.OpenTelemetryLoggerOptions options to where the exporter will be added. String metricsPrefix Optionally specifies a prefix to be prepended to to the counter name. Returns Type Description OpenTelemetry.Logs.OpenTelemetryLoggerOptions The loggerOptions to enable fluent style programming."
  },
  "neonsdk/api/Neon.Service.OtlpCollectorChecker.html": {
    "href": "neonsdk/api/Neon.Service.OtlpCollectorChecker.html",
    "title": "Class OtlpCollectorChecker | NeonSDK documentation",
    "keywords": "Class OtlpCollectorChecker Used to check for the presence of a DNS host specified by a URI. This is used by services to determine whether an OTEL Collector relay service exists in the Kubernetes namespace where the service is running. The idea is for the service call Start(NeonService, Uri, TimeSpan) to start the checker and then set the trace sampler to Sampler so that tracing will be enabled when the collector relay service exists and disable tracing when it doesn't. Inheritance Object OtlpCollectorChecker Namespace : Neon.Service Assembly : Neon.Service.dll Syntax public static class OtlpCollectorChecker Properties Ready Returns true when a collector service appears to be present in the same namespace where the NeonService is running. Declaration public static bool Ready { get; } Property Value Type Description Boolean Sampler Returns an OpenTelemetry sampler that allows all traces when Ready is true and ignores all traces when that is false . Declaration public static Sampler Sampler { get; } Property Value Type Description OpenTelemetry.Trace.Sampler Methods Start(NeonService, Uri, TimeSpan) Starts the loop that checks for the presence of a OpenTelemetry Collector service in the current Kubernetes namespace. The Ready property will be set to true and the Sampler will be configured to record all traces when the collector service appears to be available. Declaration public static void Start(NeonService service, Uri collectorUri = null, TimeSpan checkInterval = default(TimeSpan)) Parameters Type Name Description NeonService service Passed as the NeonService instance. Uri collectorUri Optionally specifies the target collector URI. When this is passed as null , No checking checking will be performed and Ready property will always be false and the Sampler will always be configured to drop all traces. TimeSpan checkInterval Optionally specifies the the interval at which the presence of the collector service service. This defaults to 60 seconds but may be customized."
  },
  "neonsdk/api/Neon.Service.ProcessTerminator.html": {
    "href": "neonsdk/api/Neon.Service.ProcessTerminator.html",
    "title": "Class ProcessTerminator | NeonSDK documentation",
    "keywords": "Class ProcessTerminator Gracefully handles SIGTERM signals sent to a process to terminate itself. Inheritance Object ProcessTerminator Namespace : Neon.Service Assembly : Neon.Service.dll Syntax public sealed class ProcessTerminator Remarks This class listens for a termination signal and then gives the process some time to gracefully save state. The termination timeout defaults to 30 seconds but a custom value may be passed to the constructor. note The parent process or operating system typically enforces its own maximum timeout, so your process may still be killed before your timeout is reached. This class provides two ways for the application to reach to a termination signal. Programs using the async/await pattern can monitor the CancellationToken returned by the CancellationToken property. Applications may also use AddHandler(Action) to add one more more methods that will be called when a termination signal is received. Each handler will be called in parallel on its own thread. Finally, you map pass one or more IDisposable instances to AddDisposable(IDisposable) . Dispose() will be called for each of these in parallel on its own thread. This can be a handy way of hooking AsyncPeriodicTask instances and other structures into a ProcessTerminator . Applications should call ReadyToExit() when they have gracefully stopped any activities and saved state so that the process will be terminated immediately. Otherwise, the process will be terminated when the parent process' timeout is finally exceeded. Applications can also call Exit(Int32) to proactively signal that the process should terminate gracefully. A ProcessTerminator is created automatically by NeonService for your service, with the constructor being passed optional parameters passed by your service to the NeonService constructor. You can use these to specify the minimum of amount of time the service will wait during graceful termination (i.e. for requests to be drained) as well as the maximum time allowed for graceful termination. Minimum graceful termination time defaults to 11 seconds and the maximum graceful termination timeout defaults to 30 seconds . These are reasonable defaults for Kubernetes as discussed here: https://blog.markvincze.com/graceful-termination-in-kubernetes-with-asp-net-core/ You can adjust these as required. For serviced deployed to Kubernetes, you should try to have the gracefulShutdownTimeout parameter match the pod's terminationGracePeriodSeconds (which typically defaults to 30 seconds). Also, for ASP.NET applications, you should configure the shutdown timeout to GracefulShutdownTimeout seconds or what you specified in the gracefulShutdownTimeout constructor parameter. This will look something like in your NeonService derived implementation: protected async override Task<int> OnRunAsync() { _ = Host.CreateDefaultBuilder() .ConfigureHostOptions( options => { options.ShutdownTimeout = ProcessTerminator.DefaultMinShutdownTime; // <--- set the ASP.NET shutdown timeout here }) .ConfigureWebHostDefaults(builder => builder.UseStartup<Startup>()) .Build() .RunOperatorAsync(Array.Empty<;string>()); await StartedAsync(); // Handle termination gracefully. await Terminator.StopEvent.WaitAsync(); Terminator.ReadyToExit(); return 0; } Constructors ProcessTerminator(ILogger, TimeSpan, TimeSpan) Constructor. Declaration public ProcessTerminator(ILogger logger = null, TimeSpan gracefulShutdownTimeout = default(TimeSpan), TimeSpan minShutdownTime = default(TimeSpan)) Parameters Type Name Description ILogger logger Optionally specifies a ILogger used for logging. TimeSpan gracefulShutdownTimeout Optionally specifies the termination timeout (defaults to GracefulShutdownTimeout ). TimeSpan minShutdownTime Optionally specifies the minimum time to wait before allowing termination to proceed. This defaults to the minimum of gracefulShutdownTimeout and DefaultMinShutdownTime . See the remarks for more details. Remarks gracefulShutdownTimeout defaults to 30 seconds and for environments like Kubernetes, this should be set to the same value as the host pod's terminationGracePeriodSeconds when that's different from its default value of 30 seconds. minShutdownTime can be used to control the minimum period the service will continue to run after receiving a TERM signal. This can be important for ASPNET based services because Kubernetes can take something like 10 seconds to remove the pod from the service load balancer after sending a TERM to the pod. Having a pod terminate before the load balancer is updated means that other pods may see request errors during this time. This blog post goes into this in some detail: https://blog.markvincze.com/graceful-termination-in-kubernetes-with-asp-net-core/ minShutdownTime defaults to the minimum of gracefulShutdownTimeout and GracefulShutdownTimeout to wait for the service load balancer to update. This applies to both ASP.NET and headless services so you may wish to reduce minShutdownTime so that headless services will terminate quicker. Pass a negative timespan to disable this behavior. note The Signal() method ignores minShutdownTime to improve unit test performance. Fields DefaultGracefulTimeout The default the maximum time a process terminator will wait for a service to terminate gracefully. (30 seconds) Declaration public static readonly TimeSpan DefaultGracefulTimeout Field Value Type Description TimeSpan DefaultMinShutdownTime The default the minimum time to wait before allowing termination to proceed. This allows pending requests to be drained. (11 seconds) Declaration public static readonly TimeSpan DefaultMinShutdownTime Field Value Type Description TimeSpan Properties CancellationToken Returns the CancellationToken that will be cancelled when a termination signal is received or Exit(Int32) is called explicitly. Declaration public CancellationToken CancellationToken { get; } Property Value Type Description CancellationToken CancellationTokenSource Returns the CancellationTokenSource that can be used to cancel any outstanding operations before terminating a process. Declaration public CancellationTokenSource CancellationTokenSource { get; } Property Value Type Description CancellationTokenSource DisableProcessExit Optionally indicates that the terminator should not actually terminate the hosting process. This is typically enabled for testing or debugging. Declaration public bool DisableProcessExit { get; set; } Property Value Type Description Boolean GracefulShutdownTimeout Returns the termination timeout. This is specified in the constructor and is the maximum time the service will be allowed to shutdown gracefully before being terminated. Declaration public TimeSpan GracefulShutdownTimeout { get; } Property Value Type Description TimeSpan MinShutdownTime Returns the minimum amount of time the service should wait to quit after receiving a TERM signal. This is specified in the constructor and is used to allow the service to continue processing straggler requests while Kubernetes service or other load balancers are updating their routes. Declaration public TimeSpan MinShutdownTime { get; } Property Value Type Description TimeSpan StopEvent Returns the AsyncManualResetEvent that will be raised when the service is being stopped. Declaration public AsyncManualResetEvent StopEvent { get; } Property Value Type Description AsyncManualResetEvent TerminateNow Returns true when the application has been signalled to terminate. Declaration public bool TerminateNow { get; } Property Value Type Description Boolean Methods AddDisposable(IDisposable) Adds a IDisposable instance that will be disposed when the process is being terminated. This can be a handy way to hook AsyncPeriodicTask and other components into a ProcessTerminator . Declaration public void AddDisposable(IDisposable disposable) Parameters Type Name Description IDisposable disposable AddHandler(Action) Adds a termination handler. Declaration public void AddHandler(Action handler) Parameters Type Name Description Action handler The handler callback. Exit(Int32) Cleanly terminates the current process. Declaration public void Exit(int exitCode = 0) Parameters Type Name Description Int32 exitCode Optional process exit code (defaults to 0 ). ReadyToExit() Indicates that the application has gracefully stopped and is ready to be terminated. Declaration public void ReadyToExit() Signal() Emulates a signal instructing the service to close. This will typically be used for unit testing services. Declaration public void Signal() Remarks note Signal() method ignores MinShutdownTime to improve unit test performance. Exceptions Type Condition TimeoutException Thrown if the service did not exit gracefully in time before it would have been killed (e.g. by Kubernetes or Docker)."
  },
  "neonsdk/api/Neon.Service.ServiceApiContact.html": {
    "href": "neonsdk/api/Neon.Service.ServiceApiContact.html",
    "title": "Class ServiceApiContact | NeonSDK documentation",
    "keywords": "Class ServiceApiContact Holds the contact information for a service API. This maps closely to the Microsoft.OpenApi.Models.OpenApiContact class. Inheritance Object ServiceApiContact Namespace : Neon.Service Assembly : Neon.Common.dll Syntax public class ServiceApiContact Properties Email The email address of the contact person or organization formatted as a URL like: mailto:joe@blow.com Declaration public string Email { get; set; } Property Value Type Description String Name The name of the contact person or organiztion. Declaration public string Name { get; set; } Property Value Type Description String Url The URL pointing to the contact information. Declaration public Uri Url { get; set; } Property Value Type Description Uri"
  },
  "neonsdk/api/Neon.Service.ServiceApiInfo.html": {
    "href": "neonsdk/api/Neon.Service.ServiceApiInfo.html",
    "title": "Class ServiceApiInfo | NeonSDK documentation",
    "keywords": "Class ServiceApiInfo Human readable metadata for a service API. This maps pretty closely to the Microsoft.OpenApi.Models.OpenApiInfo class which is used to by Swagger when generating ASP.NET documentation. note We're not referencing the Microsoft.OpenApi nuget package to avoid adding about 166KB to applications using the Neon.Common assembly.f Inheritance Object ServiceApiInfo Namespace : Neon.Service Assembly : Neon.Common.dll Syntax public class ServiceApiInfo Properties Contact API contact information. Declaration public ServiceApiContact Contact { get; set; } Property Value Type Description ServiceApiContact Description More detailed API description. Declaration public string Description { get; set; } Property Value Type Description String License API licence information. Declaration public ServiceApiLicense License { get; set; } Property Value Type Description ServiceApiLicense TermsOfService References the API terms of service. Declaration public Uri TermsOfService { get; set; } Property Value Type Description Uri Title API documentation title. Declaration public string Title { get; set; } Property Value Type Description String Version API version. Declaration public string Version { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Service.ServiceApiLicense.html": {
    "href": "neonsdk/api/Neon.Service.ServiceApiLicense.html",
    "title": "Class ServiceApiLicense | NeonSDK documentation",
    "keywords": "Class ServiceApiLicense Holds the license information for a service API. This maps closely to the Microsoft.OpenApi.Models.OpenApiLicense class. Inheritance Object ServiceApiLicense Namespace : Neon.Service Assembly : Neon.Common.dll Syntax public class ServiceApiLicense Properties Name License name. Declaration public string Name { get; set; } Property Value Type Description String Url The URL pointing to the licence information. Declaration public Uri Url { get; set; } Property Value Type Description Uri"
  },
  "neonsdk/api/Neon.Service.ServiceDependencies.html": {
    "href": "neonsdk/api/Neon.Service.ServiceDependencies.html",
    "title": "Class ServiceDependencies | NeonSDK documentation",
    "keywords": "Class ServiceDependencies Used to specify other services that must be reachable via the network before a NeonService will be allowed to start. This is exposed via the Dependencies where these values can be configured in code before RunAsync(Boolean) is called or they can also be configured via environment variables as described in the remarks. Inheritance Object ServiceDependencies Namespace : Neon.Service Assembly : Neon.Service.dll Syntax public class ServiceDependencies Remarks This class will be initialized using the following environment variables when present: NEON_SERVICE_DEPENDENCIES_URIS=http://foo.com;tcp://10.0.0.55:1234 NEON_SERVICE_DEPENDENCIES_DISABLE_DNS_CHECK=false NEON_SERVICE_DEPENDENCIES_TIMEOUT_SECONDS=30 NEON_SERVICE_DEPENDENCIES_WAIT_SECONDS=5 Where you can specify multiple dependency URIs separated by semicolons (;) and the timeout and wait times as seconds. note Only HTTP, HTTPS, and TCP URIs are supported. We also verify that your service is able to perform DNS queries by default by performing a DNS name lookup for DnsCheckHostName ( net-check.neoncloud.io ). It doesn't matter that this host name is actually registered or that you're cluster has Internet access. We're just looking for any response from the upstream DNS server to determine whether the service has and network connectivity. You can disable this by setting DisableDnsCheck true or the NEON_SERVICE_DEPENDENCIES_DISABLE_DNS_CHECK environment variable to false . Constructors ServiceDependencies() Constructor. Declaration public ServiceDependencies() Fields DnsCheckHostName The host name used for the DNS availablity check. It doesn't matter that this host name is actually registered or that you're cluster has Internet access. We're just looking for any response from the upstream DNS server. Declaration public const string DnsCheckHostName = \"net-check.neoncloud.io\" Field Value Type Description String Properties DisableDnsCheck Use this to disable the DNS availablity check for your service. Declaration public bool DisableDnsCheck { get; set; } Property Value Type Description Boolean Remarks We also verify that your service is able to perform DNS queries by default by performing a DNS name lookup for DnsCheckHostName ( net-check.neoncloud.io ). It doesn't matter that this host name is actually registered or that you're cluster has Internet access. We're just looking for any response from the upstream DNS server to determine whether the service has and network connectivity. You can disable this by setting DisableDnsCheck true or the NEON_SERVICE_DEPENDENCIES_DISABLE_DNS_CHECK environment variable to false . Timeout The maximum time to wait for the services specified by Uris to be reachable. You service will be terminated if this is exceeded. This defaults to 120 seconds or the NEON_SERVICE_DEPENDENCIES_TIMEOUT_SECONDS environment variable. Declaration public TimeSpan Timeout { get; set; } Property Value Type Description TimeSpan Uris Specifies the URIs for external services that must be reachable via the network before your service will be allowed to start. Only HTTP, HTTPS, and TCP URIs are supported. Any URIs found in the NEON_SERVICE_DEPENDENCIES_URIS environment variables will be added to this list. Declaration public List<Uri> Uris { get; set; } Property Value Type Description List < Uri > Wait Additional time to wait after the services specified by Uris are ready before the service will be started. This defaults to 0 seconds or the NEON_SERVICE_DEPENDENCIES_WAIT_SECONDS environment variable. Declaration public TimeSpan Wait { get; set; } Property Value Type Description TimeSpan"
  },
  "neonsdk/api/Neon.Service.ServiceDescription.html": {
    "href": "neonsdk/api/Neon.Service.ServiceDescription.html",
    "title": "Class ServiceDescription | NeonSDK documentation",
    "keywords": "Class ServiceDescription Describes a remote service. Inheritance Object ServiceDescription Namespace : Neon.Service Assembly : Neon.Common.dll Syntax public class ServiceDescription Constructors ServiceDescription() Constructor. Declaration public ServiceDescription() Properties Address When set, this overrides Name , Namespace , and Domain when generating the Hostname result. This is typically set for public service endpoints for public deployments or when emulating a cluster on a local machine for testing purposes. This defaults to null . Declaration [JsonProperty(PropertyName = \"Address\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"address\", ApplyNamingConventions = false)] public string Address { get; set; } Property Value Type Description String Domain The cluster's configured domain (aka zone). This defaults to \"cluster.local\" . Declaration [JsonProperty(PropertyName = \"Domain\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"domain\", ApplyNamingConventions = false)] public string Domain { get; set; } Property Value Type Description String Endpoints The service's network endpoints. Declaration [JsonProperty(PropertyName = \"Endpoints\", Required = Required.Always)] [YamlMember(Alias = \"endpoints\", ApplyNamingConventions = false)] public ServiceEndpoints Endpoints { get; set; } Property Value Type Description ServiceEndpoints FullHostname Returns the hostname to be used to communcate with this service. When deployed to a Kubernetes cluster, this will be formed from Name and Namespace , including the Domain . When testing and Address is not null , then this will simply be the address converted to a string. note Use Hostname if you need the fully qualified hostname that includes the cluster domain. Declaration [JsonIgnore] [YamlIgnore] public string FullHostname { get; } Property Value Type Description String Hostname Returns the hostname to be used to communcate with this service. When deployed to a Kubernetes cluster, this will be formed from Name and Namespace , omitting the Domain . When testing and Address is not null , then this will simply be the address converted to a string. note Use FullHostname if you need the fully qualified hostname that includes the cluster domain. Declaration [JsonIgnore] [YamlIgnore] public string Hostname { get; } Property Value Type Description String MetricsPort The service's Prometheus metrics exporter port. Declaration [JsonProperty(PropertyName = \"MetricsPort\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"metricsPort\", ApplyNamingConventions = false)] public int MetricsPort { get; set; } Property Value Type Description Int32 Name The service name as deployed to Kubernetes. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Always)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String Namespace The Kubernetes namespace where the service is deployed. This defaults to \"default\" . Declaration [JsonProperty(PropertyName = \"Namespace\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"namespace\", ApplyNamingConventions = false)] public string Namespace { get; set; } Property Value Type Description String TestBinaryConfigFiles Used to hold binary configuration files that will be set when deploying the service in a test via NeonServiceFixture . Declaration public Dictionary<string, byte[]> TestBinaryConfigFiles { get; set; } Property Value Type Description Dictionary < String , Byte []> TestEnvironmentVariables Used to hold environment variables that will be set when deploying the service in a test via NeonServiceFixture . Declaration public Dictionary<string, string> TestEnvironmentVariables { get; set; } Property Value Type Description Dictionary < String , String > TestTextConfigFiles Used to hold text configuration files that will be set when deploying the service in a test via NeonServiceFixture . Declaration public Dictionary<string, string> TestTextConfigFiles { get; set; } Property Value Type Description Dictionary < String , String >"
  },
  "neonsdk/api/Neon.Service.ServiceEndpoint.html": {
    "href": "neonsdk/api/Neon.Service.ServiceEndpoint.html",
    "title": "Class ServiceEndpoint | NeonSDK documentation",
    "keywords": "Class ServiceEndpoint Describes a network endpoint for remote service. Inheritance Object ServiceEndpoint Namespace : Neon.Service Assembly : Neon.Common.dll Syntax public class ServiceEndpoint Constructors ServiceEndpoint() Constructor. Declaration public ServiceEndpoint() Properties ApiInfo ASP.NET services, this can be set to the metadata used for Swagger documentation generation related purposes. This defaults to null . Declaration [JsonIgnore] [YamlIgnore] public ServiceApiInfo ApiInfo { get; set; } Property Value Type Description ServiceApiInfo FullUri Returns the URI for the endpoint. For HTTP and HTTPS endpoints, this will include the service hostname returned by the parent ServiceDescription , along with the port and path prefix. For TCP and UDP protocols, this will use the tcp:// or udp:// scheme along with the hostname and just the port. The path prefix is ignored for TCP and UDP. When Port is zero for HTTP or HTTPS endpoints, the URL returned will use the default port for thbe protocol (80/443). For TCP and UDP protocols, the port must be a valid non-zero network port. note For production, this property returns the partially qualified hostname for the host, including the cluster domain (e.g. cluster.local . Use Uri if you need the relative qualified URI. Declaration [JsonIgnore] [YamlIgnore] public Uri FullUri { get; } Property Value Type Description Uri Exceptions Type Condition ArgumentException Thrown when Port is not valid for the endpoint protocol. Name The endpoint name. This defaults to the empty string. Declaration [JsonProperty(PropertyName = \"Name\", Required = Required.Always)] [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string Name { get; set; } Property Value Type Description String PathPrefix This specifies the path prefix to prepended to URIs accessing this service. This defaults to an empty string. This has meaning only for the HTTP and HTTPS protocols. Declaration [JsonProperty(PropertyName = \"PathPrefix\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"pathPrefix\", ApplyNamingConventions = false)] public string PathPrefix { get; set; } Property Value Type Description String Remarks note Any leading forward slash character will be stripped when setting this. Port This specifies the network port to be used for URIs accessing this service. This defaults to -1 which indicates that HTTP and HTTPS based endpoints will be initialized to their default ports 80 and 443 so you don't need to specify and explicit ports for these. You will need to set this to a valid port for TCP and UDP protocols. note CAUTION: It's best not to rely on this value when setting up your service network endpoints and reference the port from Uri instead because that will always be a valid TCP port number. Declaration [JsonProperty(PropertyName = \"Port\", Required = Required.Default, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] [YamlMember(Alias = \"port\", ApplyNamingConventions = false)] public int Port { get; set; } Property Value Type Description Int32 Protocol Specifies the network protocol implemented by this endpoint. This defaults to Http . Declaration [JsonProperty(PropertyName = \"Protocol\", Required = Required.Always)] [YamlMember(Alias = \"protocol\", ApplyNamingConventions = false)] public ServiceEndpointProtocol Protocol { get; set; } Property Value Type Description ServiceEndpointProtocol ServiceDescription The parent ServiceDescription . note This must be initialized before attempting to reference the endpoint. Declaration public ServiceDescription ServiceDescription { get; set; } Property Value Type Description ServiceDescription Uri Returns the URI for the endpoint. For HTTP and HTTPS endpoints, this will include the service hostname returned by the parent ServiceDescription , along with the port and path prefix. For TCP and UDP protocols, this will use the tcp:// or udp:// scheme along with the hostname and just the port. The path prefix is ignored for TCP and UDP. When Port is -1 for HTTP or HTTPS endpoints, the URL returned will use the default port for thbe protocol (80/443). For TCP and UDP protocols, the port must be a valid (non-negative) network port. note For production, this property returns the partially qualified hostname for the host, omitting the cluster domain (e.g. cluster.local ). Use FullUri if you need the fully qualified URI. Declaration [JsonIgnore] [YamlIgnore] public Uri Uri { get; } Property Value Type Description Uri Exceptions Type Condition ArgumentException Thrown when Port is not valid for the endpoint protocol."
  },
  "neonsdk/api/Neon.Service.ServiceEndpointProtocol.html": {
    "href": "neonsdk/api/Neon.Service.ServiceEndpointProtocol.html",
    "title": "Enum ServiceEndpointProtocol | NeonSDK documentation",
    "keywords": "Enum ServiceEndpointProtocol Enumerats the network protocols that can be implemented by a ServiceEndpoint . Namespace : Neon.Service Assembly : Neon.Common.dll Syntax public enum ServiceEndpointProtocol Fields Name Description Http HTTP. Https HTTPS. Tcp TCP. Udp UDP. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Service.ServiceEndpoints.html": {
    "href": "neonsdk/api/Neon.Service.ServiceEndpoints.html",
    "title": "Class ServiceEndpoints | NeonSDK documentation",
    "keywords": "Class ServiceEndpoints Holds the endpoint definitions for a service. Inheritance Object Dictionary < String , ServiceEndpoint > ServiceEndpoints Namespace : Neon.Service Assembly : Neon.Common.dll Syntax public class ServiceEndpoints : Dictionary<string, ServiceEndpoint>, IDictionary<string, ServiceEndpoint>, ICollection<KeyValuePair<string, ServiceEndpoint>>, IReadOnlyDictionary<string, ServiceEndpoint>, IReadOnlyCollection<KeyValuePair<string, ServiceEndpoint>>, IEnumerable<KeyValuePair<string, ServiceEndpoint>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable Properties Default Returns the default endpoint (the one with the empty name) if present. Declaration public ServiceEndpoint Default { get; } Property Value Type Description ServiceEndpoint Exceptions Type Condition KeyNotFoundException Thrown if the default endpoint doesn't exist. Methods Add(ServiceEndpoint) Adds an endpoint. Declaration public void Add(ServiceEndpoint endpoint) Parameters Type Name Description ServiceEndpoint endpoint The endpoint. Extension Methods IEnumerableExtensions.SelectRandom<T>(IEnumerable<T>, Int32) IEnumerableExtensions.IsEmpty<T>(IEnumerable<T>, Func<T, Boolean>)"
  },
  "neonsdk/api/Neon.Service.ServiceMap.html": {
    "href": "neonsdk/api/Neon.Service.ServiceMap.html",
    "title": "Class ServiceMap | NeonSDK documentation",
    "keywords": "Class ServiceMap Describes a collection of services deployed to Kubernetes or that run in a simulated unit test environment. This is simply a dictionary mapping case sensitive service names to ServiceDescription records for each service. note ServiceMap is a somewhat dated concept that doesn't make a lot of sense in the Kubernetes world. We recommend that new code avoid this. Inheritance Object Dictionary < String , ServiceDescription > ServiceMap Namespace : Neon.Service Assembly : Neon.Common.dll Syntax public class ServiceMap : Dictionary<string, ServiceDescription>, IDictionary<string, ServiceDescription>, ICollection<KeyValuePair<string, ServiceDescription>>, IReadOnlyDictionary<string, ServiceDescription>, IReadOnlyCollection<KeyValuePair<string, ServiceDescription>>, IEnumerable<KeyValuePair<string, ServiceDescription>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable Properties Item[String] Indexer mapping service names to their ServiceDescription . Declaration public ServiceDescription this[string name] { get; set; } Parameters Type Name Description String name The service name. Property Value Type Description ServiceDescription The service description or null if the named service is not present. Methods Add(ServiceDescription) Adds a service description to the map. Declaration public void Add(ServiceDescription description) Parameters Type Name Description ServiceDescription description The service descrioption. Add(String, ServiceDescription) Adds the named service description. Declaration public void Add(string name, ServiceDescription description) Parameters Type Name Description String name The service name. ServiceDescription description The service description. GetServiceEndpoint(String, String) Returns the named endpoint for the specified service. Declaration public ServiceEndpoint GetServiceEndpoint(string serviceName, string endpointName = \"\") Parameters Type Name Description String serviceName The target service name. String endpointName Optionally specifies the target endpoint name (defaults to Empty ). Returns Type Description ServiceEndpoint The requested service endpoint. Exceptions Type Condition KeyNotFoundException Thrown if the requested service or endpoint does not exist. GetServiceEndpointUri(String, String) Returns the named endpoint Uri for the specified service. Declaration public Uri GetServiceEndpointUri(string serviceName, string endpointName = \"\") Parameters Type Name Description String serviceName The target service name. String endpointName Optionally specifies the target endpoint name (defaults to Empty ). Returns Type Description Uri The requested service endpoint Uri . Exceptions Type Condition KeyNotFoundException Thrown if the requested service or endpoint does not exist. Extension Methods IEnumerableExtensions.SelectRandom<T>(IEnumerable<T>, Int32) IEnumerableExtensions.IsEmpty<T>(IEnumerable<T>, Func<T, Boolean>)"
  },
  "neonsdk/api/Neon.SSH.CommandBundle.html": {
    "href": "neonsdk/api/Neon.SSH.CommandBundle.html",
    "title": "Class CommandBundle | NeonSDK documentation",
    "keywords": "Class CommandBundle Describes a collection of files to be uploaded to a Linux server along with the command to be executed after the files have been unpacked. Inheritance Object List < CommandFile > CommandBundle Implements IBashCommandFormatter Namespace : Neon.SSH Assembly : Neon.SSH.dll Syntax public class CommandBundle : List<CommandFile>, IList<CommandFile>, ICollection<CommandFile>, IReadOnlyList<CommandFile>, IReadOnlyCollection<CommandFile>, IEnumerable<CommandFile>, IList, ICollection, IEnumerable, IBashCommandFormatter Remarks This class is intended for use with the RunCommand(CommandBundle, RunOptions) and SudoCommand(CommandBundle, RunOptions) methods for situations where one or more files need to be uploaded to a cluster node and be used when a command is executed. To use this class, construct an instance passing the command and arguments to be executed. The command be an absolute reference to an executable in folders such as /bin or /usr/local/bin , an executable somewhere on the current PATH, or relative to the files unpacked from the bundle. The current working directory will be set to the folder where the bundle was unpacked, so you can reference local executables like ./MyExecutable . Once a bundle is constructed, you will add CommandFile instances specifying the file data you want to include. These include the relative path to the file to be uploaded as well as its text or binary data. You may also indicate whether each file is to be marked as executable. Constructors CommandBundle(String, Object[]) Constructor. Declaration public CommandBundle(string command, params object[] args) Parameters Type Name Description String command The command. Object [] args The command arguments or null . Remarks The args parameter optionally specifies an array of command argument objects. With a few exceptions, these arguments will be passed to the command by rendering the object into a string by calling its ToString() method. null and empty string arguments will be ignored and IEnumerable<T> arguments will be expanded. bool and double arguments get special treatment. bool values will be rendered as true or false and double arguments will be rendered using double.ToString(\"#.0\") . If you need something different, you can convert your arguments to strings first. Fields ArgBreak This is a meta command line argument that can be added to a command to indicate that the following non-command line option is not to be considered to be the value for the previous command line option. This is entirely optional but can make ToBash(String) formatting a bit nicer. Declaration public const string ArgBreak = \"-!arg-break!-\" Field Value Type Description String Properties Args Returns the command arguments. Declaration public object[] Args { get; } Property Value Type Description Object [] Command Returns the command to be executed after the bundle has been unpacked. Declaration public string Command { get; } Property Value Type Description String Methods AddFile(String, Byte[], Boolean) Adds a binary file to be uploaded before executing the command. Declaration public CommandBundle AddFile(string path, byte[] data, bool isExecutable = false) Parameters Type Name Description String path The file path relative to the directory where the command will be executed. Byte [] data The file data. Boolean isExecutable Optionally specifies that the file is to be marked as executable. Returns Type Description CommandBundle Remarks The CommandBundle for fluent style programming. AddFile(String, String, Boolean, Boolean) Adds a text file to be uploaded before executing the command. Declaration public CommandBundle AddFile(string path, string text, bool isExecutable = false, bool linuxCompatible = true) Parameters Type Name Description String path The file path relative to the directory where the command will be executed. String text The file text. Boolean isExecutable Optionally specifies that the file is to be marked as executable. Boolean linuxCompatible Optionally controls whether the text is made Linux compatible by removing carriage returns and expanding TABs into spaces. This defaults to true . Returns Type Description CommandBundle Remarks The CommandBundle for fluent style programming. AddZip(String, String) Creates a ZIP file, recursively adding all of the files in a local source folder and then adds the ZIP file to the bundle. Declaration public CommandBundle AddZip(string path, string sourceFolder) Parameters Type Name Description String path The file path relative to the directory where the command will be executed. String sourceFolder Path to the local source folder containing the files to be zipped. Returns Type Description CommandBundle Remarks The CommandBundle for fluent style programming. FromScript(String) Creates a bundle that simply uploads and runs a ( string ) script. Declaration public static CommandBundle FromScript(string script) Parameters Type Name Description String script The script text. Returns Type Description CommandBundle The CommandBundle . FromScript(StringBuilder) Creates a bundle that simply uploads and runs a ( StringBuilder ) script. Declaration public static CommandBundle FromScript(StringBuilder script) Parameters Type Name Description StringBuilder script The script text. Returns Type Description CommandBundle The CommandBundle . NormalizeArgs(IEnumerable<Object>, Boolean) Normalizes the bundle command arguments into a single list of strings by expanding any arguments that can enumerate strings, normalizing common value types like booleans, and adding surrounding quotes if necessary. Declaration public static List<string> NormalizeArgs(IEnumerable<object> args, bool keepArgBreaks = false) Parameters Type Name Description IEnumerable < Object > args The arguments to be normalized. Boolean keepArgBreaks Optionally specifies that any ArgBreak arguments are included in the output. Returns Type Description List < String > List of normalized arguments. ToBash(String) Formats the command such that it could be added to a Bash script. note This doesn't work if the command has attached files. Declaration public string ToBash(string comment = null) Parameters Type Name Description String comment Optional comment text (without a leading # ). Returns Type Description String The command formatted for Bash. Remarks This can be useful for making copies of cluster configuration commands on the server as scripts for situations where system operators need to manually tweak things. Exceptions Type Condition NotSupportedException Thrown because ToBash(String) does not support commands with attached files. ToString() Renders the command and arguments as a Bash compatible command line. Declaration public override string ToString() Returns Type Description String The command line. Overrides Object.ToString() Validate() Verifies that the bundle is valid. Declaration public void Validate() Exceptions Type Condition InvalidOperationException Thrown when the bundle is not valid. Implements IBashCommandFormatter Extension Methods IEnumerableExtensions.SelectRandom<T>(IEnumerable<T>, Int32) IEnumerableExtensions.IsEmpty<T>(IEnumerable<T>, Func<T, Boolean>)"
  },
  "neonsdk/api/Neon.SSH.CommandFile.html": {
    "href": "neonsdk/api/Neon.SSH.CommandFile.html",
    "title": "Class CommandFile | NeonSDK documentation",
    "keywords": "Class CommandFile Describes a file to be included in a CommandBundle . Inheritance Object CommandFile Namespace : Neon.SSH Assembly : Neon.SSH.dll Syntax public class CommandFile Constructors CommandFile() Constructor. Declaration public CommandFile() Properties Data The file binary data. Declaration public byte[] Data { get; set; } Property Value Type Description Byte [] Remarks note Only one of Text or Data may be specified. IsExecutable Indicates whether the file should be marked as executable after being unpacked on the Linux machine. Declaration public bool IsExecutable { get; set; } Property Value Type Description Boolean Path The relative path of the file within the bundle. Declaration public string Path { get; set; } Property Value Type Description String Text The file text. This will be uploaded encoded as UTF-8. Declaration public string Text { get; set; } Property Value Type Description String Remarks note No transformations will be performed on the text. Specifically, Windows style line endings will not be converted to Linux standard TAB characters will not be expanded into spaces. You'll need perform these yourself if necessary. note Only one of Text or Data may be specified."
  },
  "neonsdk/api/Neon.SSH.CommandResponse.html": {
    "href": "neonsdk/api/Neon.SSH.CommandResponse.html",
    "title": "Class CommandResponse | NeonSDK documentation",
    "keywords": "Class CommandResponse Describes the results of a command executed on the remote server using RunCommand(CommandBundle, RunOptions) or SudoCommand(String, Object[]) . Inheritance Object CommandResponse Implements IBashCommandFormatter Namespace : Neon.SSH Assembly : Neon.SSH.dll Syntax public class CommandResponse : IBashCommandFormatter Properties AllText Returns the command standard output and error as a string. Declaration public string AllText { get; } Property Value Type Description String BashCommand Returns the command nicely formatted across multiple lines of text that is suitable for including in a Bash script. Declaration public string BashCommand { get; } Property Value Type Description String Command Returns the original command line. Declaration public string Command { get; } Property Value Type Description String ErrorSummary Returns an error message suitable for including in a related exception message. Declaration public string ErrorSummary { get; } Property Value Type Description String ErrorText Returns the command standard error as a string. Declaration public string ErrorText { get; } Property Value Type Description String ExitCode Returns the command exit code. Declaration public int ExitCode { get; } Property Value Type Description Int32 OutputBinary Returns the command standard output as a byte array when BinaryOutput is specified. Declaration public byte[] OutputBinary { get; } Property Value Type Description Byte [] OutputText Returns the command standard output as a string when BinaryOutput is not specified. Declaration public string OutputText { get; } Property Value Type Description String ProxyIsFaulted Indicates whether the command failed because the proxy is faulted due to a previous error. Declaration public bool ProxyIsFaulted { get; } Property Value Type Description Boolean Success Returns true if the command exit code was zero, false otherwise. Declaration public bool Success { get; } Property Value Type Description Boolean Methods EnsureSuccess() Ensures that the response has a zero exit code. Declaration public CommandResponse EnsureSuccess() Returns Type Description CommandResponse The same CommandResponse to support fluent coding styles. Exceptions Type Condition ExecuteException Thrown if when ExitCode is non-zero. OpenAllTextReader() Creates a TextReader over the command's standard output and standard error results. Declaration public TextReader OpenAllTextReader() Returns Type Description TextReader The TextReader . OpenErrorTextReader() Creates a TextReader over the command's standard error result. Declaration public TextReader OpenErrorTextReader() Returns Type Description TextReader The TextReader . OpenOutputBinaryStream() Creates a Stream that can be used to read the standard output as binary when BinaryOutput is specified. Declaration public Stream OpenOutputBinaryStream() Returns Type Description Stream The Stream . OpenOutputTextReader() Creates a TextReader over the command's standard output result. Declaration public TextReader OpenOutputTextReader() Returns Type Description TextReader The TextReader . ToBash(String) Converts the original command into a Bash command. Declaration public string ToBash(string comment = null) Parameters Type Name Description String comment Optionall specifies a comment string to be included. Returns Type Description String The Bash command string. Implements IBashCommandFormatter"
  },
  "neonsdk/api/Neon.SSH.HostFolders.html": {
    "href": "neonsdk/api/Neon.SSH.HostFolders.html",
    "title": "Class HostFolders | NeonSDK documentation",
    "keywords": "Class HostFolders Enumerates the paths of important directories on cluster host servers. Inheritance Object HostFolders Namespace : Neon.SSH Assembly : Neon.SSH.dll Syntax public static class HostFolders Remarks note Although these constants are referenced by C# code, Linux scripts are likely to hardcode these strings. You should do a search and replace whenever you change any of these values. note Changing any of these will likely break [neon-cli] interactions with existing clusters that use the previous folder path. Be ver sure you know what you're doing when you make changes. Fields Tmpfs Root folder on the local tmpfs (shared memory) folder where cluster will persist misc temporary files. Declaration public const string Tmpfs = \"/dev/shm/neonssh\" Field Value Type Description String Methods Download(String) Path to the user download directory. Declaration public static string Download(string username) Parameters Type Name Description String username The username. Returns Type Description String The directory path. Exec(String) The user folder where cluster tools can upload, unpack, and then execute CommandBundle s as well as store temporary command output files. Declaration public static string Exec(string username) Parameters Type Name Description String username The username. Returns Type Description String The directory path. Home(String) Path to a user archive directory. Declaration public static string Home(string username) Parameters Type Name Description String username The username. Returns Type Description String The directory path. NeonHome(String) Path to a user's neon home directory. Declaration public static string NeonHome(string username) Parameters Type Name Description String username The username. Returns Type Description String The directory path. Upload(String) Path to a user upload directory. Declaration public static string Upload(string username) Parameters Type Name Description String username The username. Returns Type Description String The directory path."
  },
  "neonsdk/api/Neon.SSH.html": {
    "href": "neonsdk/api/Neon.SSH.html",
    "title": "Namespace Neon.SSH | NeonSDK documentation",
    "keywords": "Namespace Neon.SSH Classes CommandBundle Describes a collection of files to be uploaded to a Linux server along with the command to be executed after the files have been unpacked. CommandFile Describes a file to be included in a CommandBundle . CommandResponse Describes the results of a command executed on the remote server using RunCommand(CommandBundle, RunOptions) or SudoCommand(String, Object[]) . HostFolders Enumerates the paths of important directories on cluster host servers. LinuxDiskInfo Holds information about a Linux disk and its partitions. LinuxDiskPartition Holds information about a Linux disk partition. LinuxSshProxy Uses a SSH/SCP connection to provide access to Linux machines to access files, run commands, etc. note IMPORTANT: We use this class to manage Ubuntu Linux machines. This will likely work for Debian and other Debian based distros but other distros like Alpine and Red Hat may have problems or may not work at all. LinuxSshProxy<TMetadata> Uses a SSH/SCP connection to provide access to Linux machines to access files, run commands, etc. This extends LinuxSshProxy by adding the Metadata property with a generic type. note IMPORTANT: We use this class to manage Ubuntu Linux machines. This will likely work for Debian and other Debian based distros but other distros like Alpine and Red Hat may have problems or may not work at all. NamespaceDoc This namespace includes the LinuxSshProxy<TMetadata> , LinuxSshProxy and related classes that wrap and extend the base SSH.NET library clients with additional support for managing remote Linux machines via SSH including executing commands, scripts, uploading/downloading files, and performing idempotent operations. Remote command executions and their results can also be logged locally via a TextWriter (using a completely non-standard but still useful logging format). The other major type is CommandBundle . Command bundles provide a way to upload a script or executable to a temporary working directory and then run the script or program in the context of the working directory so the script or program will have access to the files.Command bundle executions can also tolerate transient network disconnections. note This package has been tested against remote machines running Ubuntu 18.04+ and will probably run fine on many other Debian-based distributions. RedHat and other non-Debian distributions probably won't be compatible. RemoteCommandException Indicates that a remote command execution failed. SshCredentials Provides credentials suitable for connecting to a server machine via SSH. SshExtensions Renci SSH.NET related extensions. SshProxyException Thrown for LinuxSshProxy<TMetadata> errors. Interfaces IBashCommandFormatter Describes a type implementation that can render a nicely formatted Bash command. ILinuxSshProxy Defines core methods and properties implemented by LinuxSshProxy . Enums RunOptions Enumerates the possible options to use when executing a remote command on a LinuxSshProxy<TMetadata> . These options may be combined using the bitwise OR operator."
  },
  "neonsdk/api/Neon.SSH.IBashCommandFormatter.html": {
    "href": "neonsdk/api/Neon.SSH.IBashCommandFormatter.html",
    "title": "Interface IBashCommandFormatter | NeonSDK documentation",
    "keywords": "Interface IBashCommandFormatter Describes a type implementation that can render a nicely formatted Bash command. Namespace : Neon.SSH Assembly : Neon.SSH.dll Syntax public interface IBashCommandFormatter Methods ToBash(String) Renders a nicely formatted Bash command. Note that the string returned may include multipe lines with continuation characters. Declaration string ToBash(string comment = null) Parameters Type Name Description String comment The optional comment to be included in the output. Returns Type Description String The formatted Bash command."
  },
  "neonsdk/api/Neon.SSH.ILinuxSshProxy.html": {
    "href": "neonsdk/api/Neon.SSH.ILinuxSshProxy.html",
    "title": "Interface ILinuxSshProxy | NeonSDK documentation",
    "keywords": "Interface ILinuxSshProxy Defines core methods and properties implemented by LinuxSshProxy . Namespace : Neon.SSH Assembly : Neon.SSH.dll Syntax public interface ILinuxSshProxy : IDisposable Properties Address The IP address to used for connecting to the remote machine. Declaration IPAddress Address { get; set; } Property Value Type Description IPAddress ConnectTimeout The connection attempt timeout. This defaults to 5 seconds. Declaration TimeSpan ConnectTimeout { get; set; } Property Value Type Description TimeSpan DefaultRunOptions Specifies the default options to be bitwise ORed with any specific options passed to a run or sudo execution command when the Defaults flag is specified. This defaults to None . Declaration RunOptions DefaultRunOptions { get; set; } Property Value Type Description RunOptions Remarks Setting this is a good way to specify a global default for flags like FaultOnError . DownloadFolderPath Returns the path to the user's download folder on the remote machine. Declaration string DownloadFolderPath { get; } Property Value Type Description String FileTimeout The file operation timeout. This defaults to 30 seconds. Declaration TimeSpan FileTimeout { get; set; } Property Value Type Description TimeSpan HomeFolderPath Returns the path to the user's home folder on the remote machine. Declaration string HomeFolderPath { get; } Property Value Type Description String IsConfiguring Used to indicate that the remote machine is actively being being configured. This property is a bit of a hack used when displaying the status of a neonKUBE cluster setup. Declaration bool IsConfiguring { get; set; } Property Value Type Description Boolean IsFaulted Indicates that the remote machine is in a faulted state because one or more operations have failed. This property is a bit of a hack used when displaying the status of a neonKUBE cluster setup. Declaration bool IsFaulted { get; set; } Property Value Type Description Boolean IsInvolved Used to indicate that the remote machine will be involved in a configuration step. This property is a bit of a hack used when displaying the status of a neonKUBE cluster setup. Declaration bool IsInvolved { get; set; } Property Value Type Description Boolean IsReady Indicates that the remote machine has completed or has failed the current set of operations. This property is a bit of a hack used when displaying the status of a neonKUBE cluster setup. Declaration bool IsReady { get; set; } Property Value Type Description Boolean Remarks note This will always return false if the remote machine when IsFaulted = true . KernelRelease Describes the Linux kernel release installed on the remote machine. note This currently assumes that the kernel versions returned by uname -r are formatted like: 5.4.0 5.4.0-66-generic 5.4.72-microsoft-standard-WSL2 This property returns the full release string. Use KernelVersion if you just want the version. Declaration string KernelRelease { get; } Property Value Type Description String KernelVersion Returns the Linux kernel release version installed on the remote machine. note This currently assumes that the kernel versions returned by uname -r are formatted like: 5.4.0 5.4.0-66-generic 5.4.72-microsoft-standard-WSL2 This property extracts the version (up to the first dash) and returns that and KernelRelease includes the full release text. Declaration Version KernelVersion { get; } Property Value Type Description Version Name Returns the display name for the remote machine. Declaration string Name { get; } Property Value Type Description String OsName Returns the name of the remote operating system (e.g. \"Ubuntu\"). note This is only valid after a connection has been established. Declaration string OsName { get; } Property Value Type Description String OsVersion Returns the version of the remote operating system (e.g. \"18.04.1\"). note This is only valid after a connection has been established. Declaration Version OsVersion { get; } Property Value Type Description Version RemotePath The PATH to use on the remote machine when executing commands in the session or null /empty to run commands without a path. This defaults to the standard Linux path. Declaration string RemotePath { get; set; } Property Value Type Description String Remarks note When you modify this, be sure to use a colon ( : ) to separate multiple directories as required. RetryCount The number of times to retry a failed remote command. This defaults to 5 . Declaration int RetryCount { get; set; } Property Value Type Description Int32 SshPort The SSH port. This defaults to 22 . Declaration int SshPort { get; set; } Property Value Type Description Int32 Status The current remote machine status. Declaration string Status { get; set; } Property Value Type Description String Remarks This property is intended to be used by management tools to indicate the state of the remote machine for UX purposes. This property will be set by some methods such as WaitForBoot(Nullable<TimeSpan>) but can also be set explicitly by tools when they have an operation in progress on the remote machine. note This will return a variation of *** FAULTED *** if IsFaulted = true . UploadFolderPath Returns the path to the user's upload folder on the remote machine. Declaration string UploadFolderPath { get; } Property Value Type Description String Username Returns the username used to log into the remote node. Declaration string Username { get; } Property Value Type Description String Methods CloneScpClient() Creates and returns a clone of a low-level Renci.SshNet.ScpClient to the remote endpoint. note The caller is responsible for disposing the returned instance. Declaration ScpClient CloneScpClient() Returns Type Description Renci.SshNet.ScpClient The cloned client. Exceptions Type Condition Renci.SshNet.Common.SshConnectionException Thrown if a connection could not be established. CloneSshClient() Creates and returns a clone of a low-level Renci.SshNet.SshClient to the remote endpoint. note The caller is responsible for disposing the returned instance. Declaration SshClient CloneSshClient() Returns Type Description Renci.SshNet.SshClient The cloned client. Exceptions Type Condition Renci.SshNet.Common.SshConnectionException Thrown if a connection could not be established. Connect(TimeSpan) Establishes a connection to the remote machine, disconnecting first if the proxy is already connected. Declaration void Connect(TimeSpan timeout = default(TimeSpan)) Parameters Type Name Description TimeSpan timeout Maximum amount of time to wait for a connection (defaults to ConnectTimeout ). Remarks note The first time a connection is established is called on a particular host, password credentials must be used so that low-level sudo configuration can be performed. Subsequent connections can use TLS certificates. Exceptions Type Condition SshProxyException Thrown if the host hasn't been prepared yet and the SSH connection credentials are not username/password or if there's problem with low-level host configuration. CreateShell() Creates an interactive shell. Declaration ShellStream CreateShell() Returns Type Description Renci.SshNet.ShellStream A Renci.SshNet.ShellStream . CreateSudoShell() Creates an interactive shell for running with sudo permissions. Declaration ShellStream CreateSudoShell() Returns Type Description Renci.SshNet.ShellStream A Renci.SshNet.ShellStream . DeleteDirectory(String) Deletes the directory if it exists. Declaration void DeleteDirectory(string path) Parameters Type Name Description String path The directory path. DeleteFile(String) Deletes the file if it exists. Declaration void DeleteFile(string path) Parameters Type Name Description String path The file path. DirectoryExists(String) Determines whether a directory exists on the remote server. Declaration bool DirectoryExists(string path) Parameters Type Name Description String path The directory path. Returns Type Description Boolean true if the directory exists. DisableSudoPrompt(String) Prevents sudo from prompting for passwords and also ensures that the /home/root directory exists and has the appropriate permissions. note The connected user must already be a member of the root group. note You do not need to call Connect(TimeSpan) or WaitForBoot(Nullable<TimeSpan>) before calling this method (in fact, calling those methods will probably fail). Declaration void DisableSudoPrompt(string password) Parameters Type Name Description String password The current user's password. Remarks This method uses the existence of a file at /etc/neon-sshproxy-init file to ensure that it only executes once per machine. This file will be created the first time this method is called on the machine. Disconnect() Closes any open connections to the Linux remote machine but leaves open the opportunity to reconnect later. Declaration void Disconnect() Remarks note This is similar to Dispose() but dispose does not allow reconnection. This command is useful situations where the client application may temporarily lose contact with the remote machine if for example, when it is rebooted or the network configuration changes. Download(String, Stream) Downloads a file from the Linux server and writes it out a stream. Declaration void Download(string source, Stream output) Parameters Type Name Description String source The source path of the file on the Linux server. Stream output The output stream. Download(String, String) Downloads a file from the remote node to the local file computer, creating parent folders as necessary. Declaration void Download(string source, string target) Parameters Type Name Description String source The source path on the Linux server. String target The target path on the local computer. DownloadBytes(String) Downloads a file as bytes from the Linux server . Declaration byte[] DownloadBytes(string source) Parameters Type Name Description String source The source path of the file on the Linux server. Returns Type Description Byte [] The file contents as UTF8 text. DownloadText(String) Downloads a file as text from the Linux server. Declaration string DownloadText(string source) Parameters Type Name Description String source The source path of the file on the Linux server. Returns Type Description String The file contents as UTF8 text. Fault(String) Puts the node proxy into the faulted state. Declaration void Fault(string message = null) Parameters Type Name Description String message The optional message to be logged. FileExists(String) Determines whether a file exists on the remote server. Declaration bool FileExists(string path) Parameters Type Name Description String path The file path. Returns Type Description Boolean true if the file exists. GetNeonInitStatus() Returns an indication of whether the neon-init service has been executed on the remote machine. This service is deployed to neonKUBE cluster nodes to act as a poor-man's cloud-init used to configure the network and credentials by mounting a virual ISO drive with a configuration script for non-cloud environments. note The neon-init service disables itself after running for the first time. You'll need to call SetNeonInitStatus(Boolean, Boolean) passing false the re-enable this service when required. Declaration bool GetNeonInitStatus() Returns Type Description Boolean true if neon-init has been executed. GetNetworkInterface(IPAddress) Returns the name of the network interface assigned to a specific IP address. Declaration string GetNetworkInterface(IPAddress address) Parameters Type Name Description IPAddress address The target IP address. Returns Type Description String The network interface name. Remarks In the olden days, network devices were assigned names like eth0 , eth1 ,... during boot somewhat randomly and there was no guarantee that the same assignments would be made on subsequent server restarts. Modern Linux systems generate predictable network interfaces names during boot by enumerating the physical devices installed and generating device names based on the topology of the system (e.g. slots, channels,...). This is discussed here . note Cloud environments as well as environments where nodes hosted on hypervisors like Hyper-V or XenServer will still assign interface names like eth0 ... This method will still work for these environments. Exceptions Type Condition SshProxyException Thrown if the interface was not found. GetTimeUtc() Returns the current time (UTC) on the remote machine. Declaration DateTime GetTimeUtc() Returns Type Description DateTime The machine's current DateTime (UTC). KubectlApply(String, RunOptions) Uses kubectl apply -f to apply a YAML file. Declaration CommandResponse KubectlApply(string yaml, RunOptions runOptions = RunOptions.Defaults) Parameters Type Name Description String yaml The YAML file contents. RunOptions runOptions Optional RunOptions . Returns Type Description CommandResponse The CommandResponse . KubeCtlApply(StringBuilder, RunOptions) Uses kubectl apply -f to apply a YAML file. Declaration CommandResponse KubeCtlApply(StringBuilder sbYaml, RunOptions runOptions = RunOptions.Defaults) Parameters Type Name Description StringBuilder sbYaml The YAML file contents. RunOptions runOptions Optional RunOptions . Returns Type Description CommandResponse The CommandResponse . ListDisks(Boolean) Lists information about the disks on the remote machine. Declaration Dictionary<string, LinuxDiskInfo> ListDisks(bool fixedDisksOnly = true) Parameters Type Name Description Boolean fixedDisksOnly Optionally specifies that non-fixed disks should be returned as well (defaults to true ). Returns Type Description Dictionary < String , LinuxDiskInfo > A Dictionary<TKey,TValue> relating the case sensitive disk name to a LinuxDiskInfo including information on the disk partitions. ListPartitionedDisks() Returns the names of any partitioned disks (excluding floppy disks). Declaration List<string> ListPartitionedDisks() Returns Type Description List < String > The names of the unpartitioned disks. ListUnpartitionedDisks() Returns the names of any unpartitioned disks (excluding floppy disks). Declaration List<string> ListUnpartitionedDisks() Returns Type Description List < String > The names of the unpartitioned disks. Log(String) Writes text to the operation log. Declaration void Log(string text) Parameters Type Name Description String text The text. LogException(Exception) Writes exception information to the operation log. Declaration void LogException(Exception e) Parameters Type Name Description Exception e The exception. LogException(String, Exception) Writes exception information to the operation log. Declaration void LogException(string message, Exception e) Parameters Type Name Description String message The operation details. Exception e The exception. LogFlush() Flushes the log. Declaration void LogFlush() LogLine(String) Writes a line of text to the operation log. Declaration void LogLine(string text) Parameters Type Name Description String text The text. Reboot(Boolean) Reboot the remote machine. Declaration void Reboot(bool wait = true) Parameters Type Name Description Boolean wait Optionally waits for the remote machine to reboot and then reconnects (defaults to true ). RemoveFile(String) Removes a file on the server if it exists. Declaration void RemoveFile(string target) Parameters Type Name Description String target The path to the target file. RunCommand(CommandBundle, RunOptions) Runs a CommandBundle with user permissions on the remote machine. Declaration CommandResponse RunCommand(CommandBundle bundle, RunOptions runOptions = RunOptions.Defaults) Parameters Type Name Description CommandBundle bundle The bundle. RunOptions runOptions The execution options (defaults to Defaults ). Returns Type Description CommandResponse The CommandResponse . Remarks note bundle may not include single quotes or redirect angle brackets such as < or >> . For more complex command, try uploading and executing a CommandBundle instead. This method is intended for situations where one or more files need to be uploaded to a cluster node and then be used when a command is executed. To use this class, construct an instance passing the command and arguments to be executed. The command be an absolute reference to an executable in folders such as /bin or /usr/local/bin , an executable somewhere on the current PATH, or relative to the files unpacked from the bundle. The current working directory will be set to the folder where the bundle was unpacked, so you can reference local executables like ./MyExecutable . Once a bundle is constructed, you will add CommandFile instances specifying the file data you want to include. These include the relative path to the file to be uploaded as well as its text or binary data. You may also indicate whether each file is to be marked as executable. note runOptions is set to Defaults by default. This means that the flags specified by DefaultRunOptions will be be used. This is a good way to specify a global default for flags like FaultOnError . note This command requires that the unzip package be installed on the host. RunCommand(String, RunOptions, Object[]) Runs a shell command on the Linux server with RunOptions . Declaration CommandResponse RunCommand(string command, RunOptions runOptions, params object[] args) Parameters Type Name Description String command The command. RunOptions runOptions The execution options. Object [] args The optional command arguments. Returns Type Description CommandResponse The CommandResponse . Remarks note command may not include single quotes or redirect angle brackets such as < or >> . For more complex command, try uploading and executing a CommandBundle instead. note Any null arguments will be ignored. The runOptions flags control how this command functions. If FaultOnError is set, then commands that return a non-zero exit code will put the server into the faulted state by setting IsFaulted = true and throwing a RemoteCommandException . This means that IsReady will always return false afterwards and subsequent calls to RunCommand(String, Object[]) and SudoCommand(String, Object[]) will be ignored unless RunWhenFaulted is passed with the future command. LogOnErrorOnly indicates that command output should be logged only for non-zero exit codes. Exceptions Type Condition RemoteCommandException Thrown if the command returned a non-zero exit code and FaultOnError was passed. RunCommand(String, Object[]) Runs a shell command on the Linux server. Declaration CommandResponse RunCommand(string command, params object[] args) Parameters Type Name Description String command The command. Object [] args The optional command arguments. Returns Type Description CommandResponse The CommandResponse . Remarks This method uses DefaultRunOptions when executing the command. You can override this behavior by passing an RunOptions to the RunCommand(String, RunOptions, Object[]) override. note Any null arguments will be ignored. SetNeonInitStatus(Boolean, Boolean) Manually sets the neon-init service execution status. The neon-init service is deployed to neonKUBE cluster nodes to act as a poor-man's cloud-init to configure the network and credentials by mounting a virual ISO drive with a configuration script for non-cloud environments. Calling this with true will prevent the neon-init service from looking for a mounted ISO on next boot and executing the special script there. Calling this with false will re-enable the neon-init service when the machine is rebooted. note The neon-init service disables itself after running for the first time. You'll need to call SetNeonInitStatus(Boolean, Boolean) passing false the re-enable this service when required. Declaration void SetNeonInitStatus(bool initialized, bool keepNetworkSettings = false) Parameters Type Name Description Boolean initialized Pass true to indicate that the neon-init service has been executed, false to clear the status. Boolean keepNetworkSettings Optionally retains the static network settings when initialized is passed as false , otherwise the original (probably DHCP) settings will be restored. Shutdown() Shutdown the remote machine. Declaration void Shutdown() SudoCommand(CommandBundle, RunOptions) Runs a CommandBundle under sudo on the remote machine. Declaration CommandResponse SudoCommand(CommandBundle bundle, RunOptions runOptions = RunOptions.Defaults) Parameters Type Name Description CommandBundle bundle The bundle. RunOptions runOptions The execution options (defaults to Defaults ). Returns Type Description CommandResponse The CommandResponse . Remarks This method is intended for situations where one or more files need to be uploaded to a cluster node and then be used when a command is executed. To use this class, construct an instance passing the command and arguments to be executed. The command be an absolute reference to an executable in folders such as /bin or /usr/local/bin , an executable somewhere on the current PATH, or relative to the files unpacked from the bundle. The current working directory will be set to the folder where the bundle was unpacked, so you can reference local executables like ./MyExecutable . Once a bundle is constructed, you will add CommandFile instances specifying the file data you want to include. These include the relative path to the file to be uploaded as well as its text or binary data. You may also indicate whether each file is to be marked as executable. note runOptions is set to Defaults by default. This means that the flags specified by DefaultRunOptions will be be used. This is a good way to specify a global default for flags like FaultOnError . note This command requires that the unzip package be installed on the host. SudoCommand(String, RunOptions, Object[]) Runs a shell command on the Linux server under sudo with RunOptions . Declaration CommandResponse SudoCommand(string command, RunOptions runOptions, params object[] args) Parameters Type Name Description String command The command. RunOptions runOptions The execution options. Object [] args The optional command arguments. Returns Type Description CommandResponse The CommandResponse . Remarks note command may not include single quotes or redirect angle brackets such as < or >> . For more complex command, try uploading and executing a CommandBundle instead. The runOptions flags control how this command functions. If FaultOnError is set, then commands that return a non-zero exit code will put the server into the faulted state by setting IsFaulted = true . This means that IsReady will always return false afterwards and subsequent command executions will be ignored unless RunWhenFaulted is specified for the future command. LogOnErrorOnly indicates that command output should be logged only for non-zero exit codes. note Any null arguments will be ignored. SudoCommand(String, Object[]) Runs a shell command on the Linux server under sudo . Declaration CommandResponse SudoCommand(string command, params object[] args) Parameters Type Name Description String command The command. Object [] args The optional command arguments. Returns Type Description CommandResponse The CommandResponse . Remarks note command may not include single quotes or redirect angle brackets such as < or >> . For more complex command, try uploading and executing a CommandBundle instead. This method uses the DefaultRunOptions when executing the command. You can override this behavior by passing an RunOptions to the RunCommand(String, RunOptions, Object[]) override. note Any null arguments will be ignored. SudoCommandAsUser(String, String, RunOptions, Object[]) Runs a shell command on the Linux server under sudo as a specific user and with RunOptions . Declaration CommandResponse SudoCommandAsUser(string user, string command, RunOptions runOptions, params object[] args) Parameters Type Name Description String user The username. String command The command. RunOptions runOptions The execution options. Object [] args The optional command arguments. Returns Type Description CommandResponse The CommandResponse . Remarks note command may not include single quotes or redirect angle brackets such as < or >> . For more complex command, try uploading and executing a CommandBundle instead. The runOptions flags control how this command functions. If FaultOnError is set, then commands that return a non-zero exit code will put the server into the faulted state by setting IsFaulted = true . This means that IsReady will always return false afterwards and subsequent command executions will be ignored unless RunWhenFaulted is specified for the future command. LogOnErrorOnly indicates that command output should be logged only for non-zero exit codes. note Any null arguments will be ignored. SudoCommandAsUser(String, String, Object[]) Runs a shell command on the Linux server under sudo as a specific user. Declaration CommandResponse SudoCommandAsUser(string user, string command, params object[] args) Parameters Type Name Description String user The username. String command The command. Object [] args The optional command arguments. Returns Type Description CommandResponse The CommandResponse . Remarks note command may not include single quotes or redirect angle brackets such as < or >> . For more complex command, try uploading and executing a CommandBundle instead. This method uses the DefaultRunOptions when executing the command. You can override this behavior by passing an RunOptions to the RunCommand(String, RunOptions, Object[]) override. note Any null arguments will be ignored. UpdateCredentials(SshCredentials) Updates the proxy credentials. Call this whenever you change the password or SSH certificate for the user account we're using for the current proxy connection. This ensures that the proxy will be able to reconnect to the service when required. Declaration void UpdateCredentials(SshCredentials newCredentials) Parameters Type Name Description SshCredentials newCredentials The new credentials. Upload(String, Stream, String, String, Boolean) Uploads a binary stream to the Linux server and then writes it to the file system. Declaration void Upload(string target, Stream input, string permissions = null, string owner = null, bool userPermissions = false) Parameters Type Name Description String target The target path on the Linux server. Stream input The input stream. String permissions Optionally specifies the file permissions (must be chmod compatible). String owner Optionally specifies the file owner (must be chown compatible). Boolean userPermissions Optionally indicates that the operation should be performed with user-level permissions rather than sudo , which is the default. Remarks note Implementation Note: The SSH.NET library we're using does not allow for files to be uploaded directly to arbitrary file system locations, even if the logged-in user has admin permissions. The problem is that SSH.NET does not provide a way to use sudo to claim these higher permissions. The workaround is to create an upload folder in the user's home directory called ~/upload and upload the file there first and then use SSH to move the file to its target location under sudo. UploadBytes(String, Byte[]) Uploads a byte array to a Linux server file. Declaration void UploadBytes(string target, byte[] bytes) Parameters Type Name Description String target The target path of the file on the Linux server. Byte [] bytes The bytes to be uploaded. UploadText(String, Stream, Int32, Encoding, Encoding, String, String) Uploads a text stream to the Linux server and then writes it to the file system, converting any CR-LF line endings to the Unix-style LF. Declaration void UploadText(string target, Stream textStream, int tabStop = 0, Encoding inputEncoding = null, Encoding outputEncoding = null, string permissions = null, string owner = null) Parameters Type Name Description String target The target path on the Linux server. Stream textStream The input stream. Int32 tabStop Optionally expands TABs into spaces when greater than zero or converts a series of leading spaces into tabs if less than zero. Encoding inputEncoding Optionally specifies the input text encoding (defaults to UTF-8). Encoding outputEncoding Optionally specifies the output text encoding (defaults to UTF-8). String permissions Optionally specifies the file permissions (must be chmod compatible). String owner Optionally specifies the file owner (must be chown compatible). Remarks note Any Unicode Byte Order Marker (BOM) at start of the input stream will be removed. note Implementation Note: The SSH.NET library we're using does not allow for files to be uploaded directly to arbitrary file system locations, even if the logged-in user has admin permissions. The problem is that SSH.NET does not provide a way to use sudo to claim these higher permissions. The workaround is to create an upload folder in the user's home directory called ~/upload and upload the file there first and then use SSH to move the file to its target location under sudo. UploadText(String, String, Int32, Encoding, String, String) Uploads a text string to the Linux server and then writes it to the file system, converting any CR-LF line endings to the Unix-style LF. Declaration void UploadText(string target, string text, int tabStop = 0, Encoding outputEncoding = null, string permissions = null, string owner = null) Parameters Type Name Description String target The target path on the Linux server. String text The input text. Int32 tabStop Optionally expands TABs into spaces when greater than zero or converts a series of leading spaces into tabs if less than zero. Encoding outputEncoding Optionally specifies the output text encoding (defaults to UTF-8). String permissions Optionally specifies the file permissions (must be chmod compatible). String owner Optionally specifies the file owner (must be chown compatible). Remarks note Implementation Note: The SSH.NET library we're using does not allow for files to be uploaded directly to arbitrary file system locations, even if the logged-in user has admin permissions. The problem is that SSH.NET does not provide a way to use sudo to claim these higher permissions. The workaround is to create an upload folder in the user's home directory called ~/upload and upload the file there first and then use SSH to move the file to its target location under sudo. UploadText(String, StringBuilder, Int32, Encoding, String, String) Uploads text from a StringBuilder to the Linux server and then writes it to the file system, converting any CR-LF line endings to the Unix-style LF. Declaration void UploadText(string target, StringBuilder text, int tabStop = 0, Encoding outputEncoding = null, string permissions = null, string owner = null) Parameters Type Name Description String target The target path on the Linux server. StringBuilder text The input text. Int32 tabStop Optionally expands TABs into spaces when greater than zero or converts a series of leading spaces into tabs if less than zero. Encoding outputEncoding Optionally specifies the output text encoding (defaults to UTF-8). String permissions Optionally specifies the file permissions (must be chmod compatible). String owner Optionally specifies the file owner (must be chown compatible). Remarks note Implementation Note: The SSH.NET library we're using does not allow for files to be uploaded directly to arbitrary file system locations, even if the logged-in user has admin permissions. The problem is that SSH.NET does not provide a way to use sudo to claim these higher permissions. The workaround is to create an upload folder in the user's home directory called ~/upload and upload the file there first and then use SSH to move the file to its target location under sudo. WaitForBoot(Nullable<TimeSpan>) Waits for the remote machine to boot by continuously attempting to establish a SSH session. Declaration void WaitForBoot(TimeSpan? timeout = null) Parameters Type Name Description Nullable < TimeSpan > timeout The operation timeout (defaults to 10 minutes ). Remarks note The first time a connection is established is called on a particular host, password credentials must be used so that low-level sudo configuration can be performed. Subsequent connections can use TLS certificates. The method will attempt to connect to the remote machine every 10 seconds up to the specified timeout. If it is unable to connect during this time, the exception thrown by the SSH client will be rethrown. Exceptions Type Condition SshProxyException Thrown if the host hasn't been prepared yet and the SSH connection credentials are not username/password or if there's problem with low-level host configuration."
  },
  "neonsdk/api/Neon.SSH.LinuxDiskInfo.html": {
    "href": "neonsdk/api/Neon.SSH.LinuxDiskInfo.html",
    "title": "Class LinuxDiskInfo | NeonSDK documentation",
    "keywords": "Class LinuxDiskInfo Holds information about a Linux disk and its partitions. Inheritance Object LinuxDiskInfo Namespace : Neon.SSH Assembly : Neon.SSH.dll Syntax public class LinuxDiskInfo Constructors LinuxDiskInfo(String, Int64, Boolean, Boolean, List<LinuxDiskPartition>) Constructor. Declaration public LinuxDiskInfo(string diskName, long size, bool isRemovable, bool isReadonly, List<LinuxDiskPartition> partitions) Parameters Type Name Description String diskName The disk name. Int64 size The disk size in bytes. Boolean isRemovable Indicates whether the disk is read-only. Boolean isReadonly Indicates whether the disk is removable. List < LinuxDiskPartition > partitions The disk partitions or null . Properties DiskName Returns the disk name. Declaration public string DiskName { get; } Property Value Type Description String IsReadOnly Indicates whether the disk is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean IsRemovable Indicates whether the disk is removable. Declaration public bool IsRemovable { get; } Property Value Type Description Boolean Partitions Returns the the disk partitions. Declaration public IList<LinuxDiskPartition> Partitions { get; } Property Value Type Description IList < LinuxDiskPartition > Size Disk size in bytes. Declaration public long Size { get; } Property Value Type Description Int64"
  },
  "neonsdk/api/Neon.SSH.LinuxDiskPartition.html": {
    "href": "neonsdk/api/Neon.SSH.LinuxDiskPartition.html",
    "title": "Class LinuxDiskPartition | NeonSDK documentation",
    "keywords": "Class LinuxDiskPartition Holds information about a Linux disk partition. Inheritance Object LinuxDiskPartition Namespace : Neon.SSH Assembly : Neon.SSH.dll Syntax public class LinuxDiskPartition Constructors LinuxDiskPartition(Int32, String, Int64) Constructor. Declaration public LinuxDiskPartition(int partition, string partitionName, long partitionSize) Parameters Type Name Description Int32 partition The partition number. String partitionName The partition name. Int64 partitionSize The partition size in bytes. Properties Partition Returns the partition number (1..4). Declaration public int Partition { get; } Property Value Type Description Int32 PartitionName Returns the partition name. Declaration public string PartitionName { get; } Property Value Type Description String PartitionSize Returns the partition size in bytes. Declaration public long PartitionSize { get; } Property Value Type Description Int64"
  },
  "neonsdk/api/Neon.SSH.LinuxSshProxy.html": {
    "href": "neonsdk/api/Neon.SSH.LinuxSshProxy.html",
    "title": "Class LinuxSshProxy | NeonSDK documentation",
    "keywords": "Class LinuxSshProxy Uses a SSH/SCP connection to provide access to Linux machines to access files, run commands, etc. note IMPORTANT: We use this class to manage Ubuntu Linux machines. This will likely work for Debian and other Debian based distros but other distros like Alpine and Red Hat may have problems or may not work at all. Inheritance Object LinuxSshProxy LinuxSshProxy <TMetadata> Namespace : Neon.SSH Assembly : Neon.SSH.dll Syntax public class LinuxSshProxy : IDisposable Remarks This class includes methods to invoke Linux commands on the node, Call Dispose() or Disconnect() to close the connection. note You can use Clone() to make a copy of a proxy that can be used to perform parallel operations against the same machine. Constructors LinuxSshProxy(String, IPAddress, SshCredentials, Int32, TextWriter) Constructs a LinuxSshProxy<TMetadata> . Declaration public LinuxSshProxy(string name, IPAddress address, SshCredentials credentials, int port = 22, TextWriter logWriter = null) Parameters Type Name Description String name The display name for the remote machine. IPAddress address The private cluster IP address for the remote machine. SshCredentials credentials The credentials to be used for establishing SSH connections. Int32 port Optionally overrides the standard SSH port (22). TextWriter logWriter The optional TextWriter where operation logs will be written. Exceptions Type Condition ArgumentNullException Thrown if name or if credentials is null . Fields credentials Declaration protected SshCredentials credentials Field Value Type Description SshCredentials logWriter Declaration protected TextWriter logWriter Field Value Type Description TextWriter SshProxyInitPath Path to the file whose existence indicates that the proxy has already configured things like disabling SUDO password prompts. Declaration public const string SshProxyInitPath = \"/etc/neon-sshproxy-init\" Field Value Type Description String Properties Address Declaration public IPAddress Address { get; set; } Property Value Type Description IPAddress ConnectTimeout Declaration public TimeSpan ConnectTimeout { get; set; } Property Value Type Description TimeSpan DefaultRunOptions Declaration public RunOptions DefaultRunOptions { get; set; } Property Value Type Description RunOptions DownloadFolderPath Declaration public string DownloadFolderPath { get; } Property Value Type Description String FileTimeout Declaration public TimeSpan FileTimeout { get; set; } Property Value Type Description TimeSpan HomeFolderPath Declaration public string HomeFolderPath { get; } Property Value Type Description String IsConfiguring Declaration public bool IsConfiguring { get; set; } Property Value Type Description Boolean IsFaulted Declaration public bool IsFaulted { get; set; } Property Value Type Description Boolean IsInvolved Declaration public bool IsInvolved { get; set; } Property Value Type Description Boolean IsReady Declaration public bool IsReady { get; set; } Property Value Type Description Boolean KernelRelease Declaration public string KernelRelease { get; } Property Value Type Description String KernelVersion Declaration public Version KernelVersion { get; } Property Value Type Description Version Name Declaration public string Name { get; } Property Value Type Description String OsName Declaration public string OsName { get; } Property Value Type Description String OsVersion Declaration public Version OsVersion { get; } Property Value Type Description Version RemotePath Declaration public string RemotePath { get; set; } Property Value Type Description String RetryCount Declaration public int RetryCount { get; set; } Property Value Type Description Int32 SshPort Declaration public int SshPort { get; set; } Property Value Type Description Int32 Status Declaration public string Status { get; set; } Property Value Type Description String UploadFolderPath Declaration public string UploadFolderPath { get; } Property Value Type Description String Username Returns the username used to log into the remote node. Declaration public string Username { get; } Property Value Type Description String Methods Clean(Boolean, Boolean) Cleans a node by removing unnecessary package manager metadata, cached DHCP information, journald logs... and then fills unreferenced file system blocks with zeros so the disk image will or trims the file system (when possible) so the image will compress better. Declaration public void Clean(bool trim = false, bool zero = false) Parameters Type Name Description Boolean trim Optionally trims the file system. Boolean zero Optionally zeros unreferenced file system blocks. Clone() Returns a clone of the SSH proxy. This can be useful for situations where you need to be able to perform multiple SSH/SCP operations against the same machine in parallel. note This does not clone any attached log writer. Declaration public LinuxSshProxy Clone() Returns Type Description LinuxSshProxy The cloned LinuxSshProxy<TMetadata> . CloneScpClient() Declaration public ScpClient CloneScpClient() Returns Type Description Renci.SshNet.ScpClient CloneSshClient() Declaration public SshClient CloneSshClient() Returns Type Description Renci.SshNet.SshClient CloneTo(LinuxSshProxy) Used by derived classes to copy the base class state to a new instance as well as configure the new connection's SSH and SCP clients. Declaration protected void CloneTo(LinuxSshProxy target) Parameters Type Name Description LinuxSshProxy target The target proxy. Connect(TimeSpan) Declaration public void Connect(TimeSpan timeout = default(TimeSpan)) Parameters Type Name Description TimeSpan timeout CreateShell() Declaration public ShellStream CreateShell() Returns Type Description Renci.SshNet.ShellStream CreateSudoShell() Declaration public ShellStream CreateSudoShell() Returns Type Description Renci.SshNet.ShellStream DeleteDirectory(String) Declaration public void DeleteDirectory(string path) Parameters Type Name Description String path DeleteFile(String) Declaration public void DeleteFile(string path) Parameters Type Name Description String path DirectoryExists(String) Declaration public bool DirectoryExists(string path) Parameters Type Name Description String path Returns Type Description Boolean DisableSudoPrompt(String) Declaration public void DisableSudoPrompt(string password) Parameters Type Name Description String password Disconnect() Declaration public void Disconnect() Dispose() Releases all associated resources (e.g. any open remote machine connections). Declaration public void Dispose() Dispose(Boolean) Releases all associated resources (e.g. any open remote machine connections). Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. Download(String, Stream) Declaration public void Download(string source, Stream output) Parameters Type Name Description String source Stream output Download(String, String) Declaration public void Download(string source, string target) Parameters Type Name Description String source String target DownloadBytes(String) Declaration public byte[] DownloadBytes(string source) Parameters Type Name Description String source Returns Type Description Byte [] DownloadText(String) Declaration public string DownloadText(string source) Parameters Type Name Description String source Returns Type Description String Fault(String) Declaration public void Fault(string message = null) Parameters Type Name Description String message FileExists(String) Declaration public bool FileExists(string path) Parameters Type Name Description String path Returns Type Description Boolean Finalize() Finalizer. Declaration protected void Finalize() GetAuthenticationMethod(SshCredentials) Extracts the authentication method from SSH credentials. Declaration protected AuthenticationMethod GetAuthenticationMethod(SshCredentials credentials) Parameters Type Name Description SshCredentials credentials The credentials. Returns Type Description Renci.SshNet.AuthenticationMethod The Renci.SshNet.AuthenticationMethod . GetNeonInitStatus() Declaration public bool GetNeonInitStatus() Returns Type Description Boolean GetNetworkInterface(IPAddress) Declaration public string GetNetworkInterface(IPAddress address) Parameters Type Name Description IPAddress address Returns Type Description String GetTimeUtc() Declaration public DateTime GetTimeUtc() Returns Type Description DateTime KubectlApply(String, RunOptions) Declaration public CommandResponse KubectlApply(string yaml, RunOptions runOptions = RunOptions.Defaults) Parameters Type Name Description String yaml RunOptions runOptions Returns Type Description CommandResponse KubeCtlApply(StringBuilder, RunOptions) Declaration public CommandResponse KubeCtlApply(StringBuilder sbYaml, RunOptions runOptions = RunOptions.Defaults) Parameters Type Name Description StringBuilder sbYaml RunOptions runOptions Returns Type Description CommandResponse ListDisks(Boolean) Declaration public Dictionary<string, LinuxDiskInfo> ListDisks(bool fixedDisksOnly = true) Parameters Type Name Description Boolean fixedDisksOnly Returns Type Description Dictionary < String , LinuxDiskInfo > ListPartitionedDisks() Declaration public List<string> ListPartitionedDisks() Returns Type Description List < String > ListUnpartitionedDisks() Declaration public List<string> ListUnpartitionedDisks() Returns Type Description List < String > Log(String) Declaration public virtual void Log(string text) Parameters Type Name Description String text LogException(Exception) Declaration public void LogException(Exception e) Parameters Type Name Description Exception e LogException(String, Exception) Declaration public void LogException(string message, Exception e) Parameters Type Name Description String message Exception e LogFlush() Declaration public virtual void LogFlush() LogLine(String) Declaration public virtual void LogLine(string text) Parameters Type Name Description String text PatchLinux() Patches Linux on the node applying all outstanding security patches but without upgrading the Linux distribution. Declaration public bool PatchLinux() Returns Type Description Boolean true when a reboot is required. Reboot(Boolean) Declaration public void Reboot(bool wait = true) Parameters Type Name Description Boolean wait RemoveFile(String) Declaration public void RemoveFile(string target) Parameters Type Name Description String target RunCommand(CommandBundle, RunOptions) Declaration public CommandResponse RunCommand(CommandBundle bundle, RunOptions runOptions = RunOptions.Defaults) Parameters Type Name Description CommandBundle bundle RunOptions runOptions Returns Type Description CommandResponse RunCommand(String, RunOptions, Object[]) Declaration public CommandResponse RunCommand(string command, RunOptions runOptions, params object[] args) Parameters Type Name Description String command RunOptions runOptions Object [] args Returns Type Description CommandResponse RunCommand(String, Object[]) Declaration public CommandResponse RunCommand(string command, params object[] args) Parameters Type Name Description String command Object [] args Returns Type Description CommandResponse SetNeonInitStatus(Boolean, Boolean) Declaration public void SetNeonInitStatus(bool initialized, bool keepNetworkSettings = false) Parameters Type Name Description Boolean initialized Boolean keepNetworkSettings Shutdown() Declaration public void Shutdown() SudoCommand(CommandBundle, RunOptions) Declaration public CommandResponse SudoCommand(CommandBundle bundle, RunOptions runOptions = RunOptions.Defaults) Parameters Type Name Description CommandBundle bundle RunOptions runOptions Returns Type Description CommandResponse SudoCommand(String, RunOptions, Object[]) Declaration public CommandResponse SudoCommand(string command, RunOptions runOptions, params object[] args) Parameters Type Name Description String command RunOptions runOptions Object [] args Returns Type Description CommandResponse SudoCommand(String, Object[]) Declaration public CommandResponse SudoCommand(string command, params object[] args) Parameters Type Name Description String command Object [] args Returns Type Description CommandResponse SudoCommandAsUser(String, String, RunOptions, Object[]) Declaration public CommandResponse SudoCommandAsUser(string user, string command, RunOptions runOptions, params object[] args) Parameters Type Name Description String user String command RunOptions runOptions Object [] args Returns Type Description CommandResponse SudoCommandAsUser(String, String, Object[]) Declaration public CommandResponse SudoCommandAsUser(string user, string command, params object[] args) Parameters Type Name Description String user String command Object [] args Returns Type Description CommandResponse ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() UpdateCredentials(SshCredentials) Declaration public void UpdateCredentials(SshCredentials newCredentials) Parameters Type Name Description SshCredentials newCredentials UpdateRootCertificates() Checks for and installs any new root certificates. Declaration public void UpdateRootCertificates() UpgradeLinuxDistribution() Upgrades the Linux distribution on the node. Declaration public bool UpgradeLinuxDistribution() Returns Type Description Boolean true when a reboot is required. Upload(String, Stream, String, String, Boolean) Declaration public void Upload(string target, Stream input, string permissions = null, string owner = null, bool userPermissions = false) Parameters Type Name Description String target Stream input String permissions String owner Boolean userPermissions UploadBytes(String, Byte[]) Declaration public void UploadBytes(string target, byte[] bytes) Parameters Type Name Description String target Byte [] bytes UploadText(String, Stream, Int32, Encoding, Encoding, String, String) Declaration public void UploadText(string target, Stream textStream, int tabStop = 0, Encoding inputEncoding = null, Encoding outputEncoding = null, string permissions = null, string owner = null) Parameters Type Name Description String target Stream textStream Int32 tabStop Encoding inputEncoding Encoding outputEncoding String permissions String owner UploadText(String, String, Int32, Encoding, String, String) Declaration public void UploadText(string target, string text, int tabStop = 0, Encoding outputEncoding = null, string permissions = null, string owner = null) Parameters Type Name Description String target String text Int32 tabStop Encoding outputEncoding String permissions String owner UploadText(String, StringBuilder, Int32, Encoding, String, String) Declaration public void UploadText(string target, StringBuilder text, int tabStop = 0, Encoding outputEncoding = null, string permissions = null, string owner = null) Parameters Type Name Description String target StringBuilder text Int32 tabStop Encoding outputEncoding String permissions String owner WaitForBoot(Nullable<TimeSpan>) Declaration public void WaitForBoot(TimeSpan? timeout = null) Parameters Type Name Description Nullable < TimeSpan > timeout"
  },
  "neonsdk/api/Neon.SSH.LinuxSshProxy-1.html": {
    "href": "neonsdk/api/Neon.SSH.LinuxSshProxy-1.html",
    "title": "Class LinuxSshProxy<TMetadata> | NeonSDK documentation",
    "keywords": "Class LinuxSshProxy<TMetadata> Uses a SSH/SCP connection to provide access to Linux machines to access files, run commands, etc. This extends LinuxSshProxy by adding the Metadata property with a generic type. note IMPORTANT: We use this class to manage Ubuntu Linux machines. This will likely work for Debian and other Debian based distros but other distros like Alpine and Red Hat may have problems or may not work at all. Inheritance Object LinuxSshProxy LinuxSshProxy<TMetadata> Inherited Members LinuxSshProxy.SshProxyInitPath LinuxSshProxy.credentials LinuxSshProxy.logWriter LinuxSshProxy.Dispose() LinuxSshProxy.CloneTo(LinuxSshProxy) LinuxSshProxy.OsName LinuxSshProxy.OsVersion LinuxSshProxy.KernelVersion LinuxSshProxy.KernelRelease LinuxSshProxy.Name LinuxSshProxy.Address LinuxSshProxy.SshPort LinuxSshProxy.ConnectTimeout LinuxSshProxy.FileTimeout LinuxSshProxy.RetryCount LinuxSshProxy.DefaultRunOptions LinuxSshProxy.RemotePath LinuxSshProxy.Username LinuxSshProxy.Status LinuxSshProxy.IsInvolved LinuxSshProxy.IsConfiguring LinuxSshProxy.IsReady LinuxSshProxy.IsFaulted LinuxSshProxy.HomeFolderPath LinuxSshProxy.DownloadFolderPath LinuxSshProxy.UploadFolderPath LinuxSshProxy.Disconnect() LinuxSshProxy.UpdateCredentials(SshCredentials) LinuxSshProxy.GetAuthenticationMethod(SshCredentials) LinuxSshProxy.DisableSudoPrompt(String) LinuxSshProxy.Shutdown() LinuxSshProxy.Reboot(Boolean) LinuxSshProxy.UpdateRootCertificates() LinuxSshProxy.PatchLinux() LinuxSshProxy.UpgradeLinuxDistribution() LinuxSshProxy.Log(String) LinuxSshProxy.LogLine(String) LinuxSshProxy.LogFlush() LinuxSshProxy.LogException(Exception) LinuxSshProxy.LogException(String, Exception) LinuxSshProxy.Fault(String) LinuxSshProxy.Connect(TimeSpan) LinuxSshProxy.WaitForBoot(Nullable<TimeSpan>) LinuxSshProxy.CloneSshClient() LinuxSshProxy.CloneScpClient() LinuxSshProxy.RemoveFile(String) LinuxSshProxy.Download(String, Stream) LinuxSshProxy.DownloadBytes(String) LinuxSshProxy.DownloadText(String) LinuxSshProxy.DirectoryExists(String) LinuxSshProxy.DeleteDirectory(String) LinuxSshProxy.FileExists(String) LinuxSshProxy.DeleteFile(String) LinuxSshProxy.Upload(String, Stream, String, String, Boolean) LinuxSshProxy.UploadBytes(String, Byte[]) LinuxSshProxy.UploadText(String, Stream, Int32, Encoding, Encoding, String, String) LinuxSshProxy.UploadText(String, String, Int32, Encoding, String, String) LinuxSshProxy.UploadText(String, StringBuilder, Int32, Encoding, String, String) LinuxSshProxy.Download(String, String) LinuxSshProxy.RunCommand(String, Object[]) LinuxSshProxy.RunCommand(String, RunOptions, Object[]) LinuxSshProxy.RunCommand(CommandBundle, RunOptions) LinuxSshProxy.SudoCommand(String, Object[]) LinuxSshProxy.SudoCommand(String, RunOptions, Object[]) LinuxSshProxy.SudoCommandAsUser(String, String, Object[]) LinuxSshProxy.SudoCommandAsUser(String, String, RunOptions, Object[]) LinuxSshProxy.SudoCommand(CommandBundle, RunOptions) LinuxSshProxy.CreateShell() LinuxSshProxy.CreateSudoShell() LinuxSshProxy.GetNetworkInterface(IPAddress) LinuxSshProxy.GetTimeUtc() LinuxSshProxy.Clean(Boolean, Boolean) LinuxSshProxy.ListDisks(Boolean) LinuxSshProxy.ListUnpartitionedDisks() LinuxSshProxy.ListPartitionedDisks() LinuxSshProxy.KubectlApply(String, RunOptions) LinuxSshProxy.KubeCtlApply(StringBuilder, RunOptions) LinuxSshProxy.GetNeonInitStatus() LinuxSshProxy.SetNeonInitStatus(Boolean, Boolean) LinuxSshProxy.ToString() Namespace : Neon.SSH Assembly : Neon.SSH.dll Syntax public class LinuxSshProxy<TMetadata> : LinuxSshProxy, IDisposable where TMetadata : class Type Parameters Name Description TMetadata Defines the metadata type the application wishes to associate with the server. You may specify object when no additional metadata is required. Remarks Construct an instance to connect to a specific cluster node. You may specify TMetadata to associate application specific information or state with the instance. This class includes methods to invoke Linux commands on the node, Call Dispose() or Disconnect() to close the connection. note You can use Clone() to make a copy of a proxy that can be used to perform parallel operations against the same machine. Constructors LinuxSshProxy(String, IPAddress, SshCredentials, Int32, TextWriter) Constructs a LinuxSshProxy<TMetadata> . Declaration public LinuxSshProxy(string name, IPAddress address, SshCredentials credentials, int port = 22, TextWriter logWriter = null) Parameters Type Name Description String name The display name for the server. IPAddress address The private cluster IP address for the server. SshCredentials credentials The credentials to be used for establishing SSH connections. Int32 port Optionally overrides the standard SSH port (22). TextWriter logWriter The optional TextWriter where operation logs will be written. Exceptions Type Condition ArgumentNullException Thrown if name or if credentials is null . Properties Metadata Applications may use this to associate metadata with the instance. Declaration public TMetadata Metadata { get; set; } Property Value Type Description TMetadata Methods Clone() Returns a clone of the SSH proxy. This can be useful for situations where you need to be able to perform multiple SSH/SCP operations against the same machine in parallel. Declaration public LinuxSshProxy<TMetadata> Clone() Returns Type Description LinuxSshProxy <TMetadata> The cloned LinuxSshProxy<TMetadata> . CloneTo(LinuxSshProxy<TMetadata>) Used by derived classes to copy the base class state to a new instance as well as configure the new connection's SSH and SCP clients. Declaration protected void CloneTo(LinuxSshProxy<TMetadata> target) Parameters Type Name Description LinuxSshProxy <TMetadata> target The target proxy. Dispose(Boolean) Releases all associated resources (e.g. any open server connections). Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. Overrides LinuxSshProxy.Dispose(Boolean)"
  },
  "neonsdk/api/Neon.SSH.NamespaceDoc.html": {
    "href": "neonsdk/api/Neon.SSH.NamespaceDoc.html",
    "title": "Class NamespaceDoc | NeonSDK documentation",
    "keywords": "Class NamespaceDoc This namespace includes the LinuxSshProxy<TMetadata> , LinuxSshProxy and related classes that wrap and extend the base SSH.NET library clients with additional support for managing remote Linux machines via SSH including executing commands, scripts, uploading/downloading files, and performing idempotent operations. Remote command executions and their results can also be logged locally via a TextWriter (using a completely non-standard but still useful logging format). The other major type is CommandBundle . Command bundles provide a way to upload a script or executable to a temporary working directory and then run the script or program in the context of the working directory so the script or program will have access to the files.Command bundle executions can also tolerate transient network disconnections. note This package has been tested against remote machines running Ubuntu 18.04+ and will probably run fine on many other Debian-based distributions. RedHat and other non-Debian distributions probably won't be compatible. Inheritance Object NamespaceDoc Namespace : Neon.SSH Assembly : Neon.SSH.dll Syntax public class NamespaceDoc"
  },
  "neonsdk/api/Neon.SSH.RemoteCommandException.html": {
    "href": "neonsdk/api/Neon.SSH.RemoteCommandException.html",
    "title": "Class RemoteCommandException | NeonSDK documentation",
    "keywords": "Class RemoteCommandException Indicates that a remote command execution failed. Inheritance Object Exception RemoteCommandException Namespace : Neon.SSH Assembly : Neon.SSH.dll Syntax public class RemoteCommandException : Exception, ISerializable Constructors RemoteCommandException(String, Exception) Constructor. Declaration public RemoteCommandException(string message, Exception innerException = null) Parameters Type Name Description String message The exception message. Exception innerException The optional inner exception. Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.SSH.RunOptions.html": {
    "href": "neonsdk/api/Neon.SSH.RunOptions.html",
    "title": "Enum RunOptions | NeonSDK documentation",
    "keywords": "Enum RunOptions Enumerates the possible options to use when executing a remote command on a LinuxSshProxy<TMetadata> . These options may be combined using the bitwise OR operator. Namespace : Neon.SSH Assembly : Neon.SSH.dll Syntax [Flags] public enum RunOptions Fields Name Description Audit Used to mark commands whose execution should be logged for auditing. BinaryOutput Return the standard output from remote command as binary data rather than intrepreting it as text. Defaults Bitwise ORs any specific option flags with those specified by DefaultRunOptions . This is handy for setting or resetting flags like FaultOnError on a global basis for a node proxy instance. FaultOnError Puts the LinuxSshProxy<TMetadata> into the faulted state when the command returns a non-zero exit code. IgnoreRemotePath Ignore the RemotePath property. LogBundle Used internally to prevent logging of the command \"START: *\" line at lower levels because this has already been logged. LogOnErrorOnly Logs command output only if the command returns a non-zero exit code. LogOutput Logs the command standard output (standard error output is logged by default). None No options are set. Redact Use for commands that may include sensitive secrets as command arguments and/or results. Only limited information about commands run with this flag will be logged. RunWhenFaulted Runs the command even if the LinuxSshProxy<TMetadata> is in the faulted state. Shutdown Indicates that the command will shutdown or restart or reboot the target server. Commands with this flag will not be retried on the server. note IMPORTANT: You must specify this flag if your command shutdown down the machine to prevent causing an infinite reboot loop. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.SSH.SshCredentials.html": {
    "href": "neonsdk/api/Neon.SSH.SshCredentials.html",
    "title": "Class SshCredentials | NeonSDK documentation",
    "keywords": "Class SshCredentials Provides credentials suitable for connecting to a server machine via SSH. Inheritance Object SshCredentials Namespace : Neon.SSH Assembly : Neon.SSH.dll Syntax public class SshCredentials Properties None Returns an instance indicating that there are no available credentials. Declaration public static SshCredentials None { get; } Property Value Type Description SshCredentials The credentials. Username Returns the user name. Declaration public string Username { get; } Property Value Type Description String Methods FromPrivateKey(String, String, String) Returns credentials based on a user name and password and an optional passphrase. Declaration public static SshCredentials FromPrivateKey(string username, string privateKey, string passPhrase = null) Parameters Type Name Description String username The user name. String privateKey The unencrypted PEM-encoded private key. String passPhrase Optionally specifies a pass phrase. Returns Type Description SshCredentials The SshCredentials . FromUserPassword(String, String) Returns credentials based on a user name and password. Declaration public static SshCredentials FromUserPassword(string username, string password) Parameters Type Name Description String username The user name. String password The password. Returns Type Description SshCredentials The SshCredentials ."
  },
  "neonsdk/api/Neon.SSH.SshExtensions.html": {
    "href": "neonsdk/api/Neon.SSH.SshExtensions.html",
    "title": "Class SshExtensions | NeonSDK documentation",
    "keywords": "Class SshExtensions Renci SSH.NET related extensions. Inheritance Object SshExtensions Namespace : Neon.SSH Assembly : Neon.SSH.dll Syntax public static class SshExtensions Methods PathExists(SftpClient, String) Determines whether a file or directory exists on the remote machine. Declaration public static bool PathExists(this SftpClient sftpClient, string path) Parameters Type Name Description Renci.SshNet.SftpClient sftpClient The FTP client. String path Path to the file or directory. Returns Type Description Boolean true if the file or directory exists. Remarks The Renci.SshNet.SftpClient.Exists(System.String) method is supposed to do this but it appears throw exceptions when part of the path doesn't exist. This method calls that but catches and handles the exception."
  },
  "neonsdk/api/Neon.SSH.SshProxyException.html": {
    "href": "neonsdk/api/Neon.SSH.SshProxyException.html",
    "title": "Class SshProxyException | NeonSDK documentation",
    "keywords": "Class SshProxyException Thrown for LinuxSshProxy<TMetadata> errors. Inheritance Object Exception SshProxyException Namespace : Neon.SSH Assembly : Neon.SSH.dll Syntax public class SshProxyException : Exception, ISerializable Constructors SshProxyException(String, Exception) Constructor. Declaration public SshProxyException(string message, Exception innerException = null) Parameters Type Name Description String message Specifies the exception message. Exception innerException Optionally specifies an inner exception. Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Tailwind.ClickOffEventHandler.html": {
    "href": "neonsdk/api/Neon.Tailwind.ClickOffEventHandler.html",
    "title": "Class ClickOffEventHandler | NeonSDK documentation",
    "keywords": "Class ClickOffEventHandler Handler that manages click off events. Inheritance Object ComponentBase EventHandlerComponentBase < ClickOffEventHandler > ClickOffEventHandler Inherited Members EventHandlerComponentBase<ClickOffEventHandler>.jsHandlerReference EventHandlerComponentBase<ClickOffEventHandler>.JSRuntime EventHandlerComponentBase<ClickOffEventHandler>.OnInitializedAsync() EventHandlerComponentBase<ClickOffEventHandler>.GetAdditionalInitializationParameters() EventHandlerComponentBase<ClickOffEventHandler>.DisposeAsync() EventHandlerComponentBase<ClickOffEventHandler>.RegisterElement(ElementReference) EventHandlerComponentBase<ClickOffEventHandler>.UnregisterElement(ElementReference) Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class ClickOffEventHandler : EventHandlerComponentBase<ClickOffEventHandler>, IComponent, IHandleEvent, IHandleAfterRender, IAsyncDisposable Constructors ClickOffEventHandler() Constructor. Declaration public ClickOffEventHandler() Properties OnClickOff Callback that runs the click off handler. Declaration [Parameter] public EventCallback OnClickOff { get; set; } Property Value Type Description EventCallback Methods HandleClickOff() Invoke the click off callback. Declaration [JSInvokable] public Task HandleClickOff() Returns Type Description Task"
  },
  "neonsdk/api/Neon.Tailwind.ComponentEventArgs-1.html": {
    "href": "neonsdk/api/Neon.Tailwind.ComponentEventArgs-1.html",
    "title": "Class ComponentEventArgs<TSender> | NeonSDK documentation",
    "keywords": "Class ComponentEventArgs<TSender> Inheritance Object ComponentEventArgs<TSender> ComponentEventArgs<TSender, TEventArgs> Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class ComponentEventArgs<TSender> Type Parameters Name Description TSender Constructors ComponentEventArgs(TSender) Declaration public ComponentEventArgs(TSender sender) Parameters Type Name Description TSender sender Properties Sender Declaration public TSender Sender { get; } Property Value Type Description TSender Operators Implicit(TSender to ComponentEventArgs<TSender>) Declaration public static implicit operator ComponentEventArgs<TSender>(TSender sender) Parameters Type Name Description TSender sender Returns Type Description ComponentEventArgs <TSender> Implicit(ComponentEventArgs<TSender> to TSender) Declaration public static implicit operator TSender(ComponentEventArgs<TSender> eventArgs) Parameters Type Name Description ComponentEventArgs <TSender> eventArgs Returns Type Description TSender"
  },
  "neonsdk/api/Neon.Tailwind.ComponentEventArgs-2.html": {
    "href": "neonsdk/api/Neon.Tailwind.ComponentEventArgs-2.html",
    "title": "Class ComponentEventArgs<TSender, TEventArgs> | NeonSDK documentation",
    "keywords": "Class ComponentEventArgs<TSender, TEventArgs> Inheritance Object ComponentEventArgs <TSender> ComponentEventArgs<TSender, TEventArgs> Inherited Members ComponentEventArgs<TSender>.Sender Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class ComponentEventArgs<TSender, TEventArgs> : ComponentEventArgs<TSender> Type Parameters Name Description TSender TEventArgs Constructors ComponentEventArgs(TSender, TEventArgs) Declaration public ComponentEventArgs(TSender sender, TEventArgs eventArgs) Parameters Type Name Description TSender sender TEventArgs eventArgs Properties EventArgs Declaration public TEventArgs EventArgs { get; } Property Value Type Description TEventArgs Methods Deconstruct(out TSender, out TEventArgs) Declaration public void Deconstruct(out TSender sender, out TEventArgs eventArgs) Parameters Type Name Description TSender sender TEventArgs eventArgs Operators Implicit(ComponentEventArgs<TSender, TEventArgs> to TEventArgs) Declaration public static implicit operator TEventArgs(ComponentEventArgs<TSender, TEventArgs> eventArgs) Parameters Type Name Description ComponentEventArgs <TSender, TEventArgs> eventArgs Returns Type Description TEventArgs Implicit((TSender, TEventArgs) to ComponentEventArgs<TSender, TEventArgs>) Declaration public static implicit operator ComponentEventArgs<TSender, TEventArgs>((TSender, TEventArgs) eventArgs) Parameters Type Name Description (T1, T2) <TSender, TEventArgs> eventArgs Returns Type Description ComponentEventArgs <TSender, TEventArgs>"
  },
  "neonsdk/api/Neon.Tailwind.DisclosureState.html": {
    "href": "neonsdk/api/Neon.Tailwind.DisclosureState.html",
    "title": "Enum DisclosureState | NeonSDK documentation",
    "keywords": "Enum DisclosureState Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public enum DisclosureState Fields Name Description Closed Open Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Tailwind.EventHandlerComponentBase-1.html": {
    "href": "neonsdk/api/Neon.Tailwind.EventHandlerComponentBase-1.html",
    "title": "Class EventHandlerComponentBase<TComponent> | NeonSDK documentation",
    "keywords": "Class EventHandlerComponentBase<TComponent> Inheritance Object ComponentBase EventHandlerComponentBase<TComponent> ClickOffEventHandler KeyDownEventHandler Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public abstract class EventHandlerComponentBase<TComponent> : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IAsyncDisposable where TComponent : EventHandlerComponentBase<TComponent> Type Parameters Name Description TComponent Constructors EventHandlerComponentBase(String, String) Declaration protected EventHandlerComponentBase(string jsFileName, string handlerMethodName) Parameters Type Name Description String jsFileName String handlerMethodName Fields jsHandlerReference Declaration protected IJSObjectReference jsHandlerReference Field Value Type Description IJSObjectReference Properties JSRuntime Declaration [Inject] public IJSRuntime JSRuntime { get; set; } Property Value Type Description IJSRuntime Methods DisposeAsync() Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask GetAdditionalInitializationParameters() Declaration protected virtual IEnumerable<object> GetAdditionalInitializationParameters() Returns Type Description IEnumerable < Object > OnInitializedAsync() Declaration protected override async Task OnInitializedAsync() Returns Type Description Task Overrides ComponentBase.OnInitializedAsync() RegisterElement(ElementReference) Declaration public async Task RegisterElement(ElementReference element) Parameters Type Name Description ElementReference element Returns Type Description Task UnregisterElement(ElementReference) Declaration public async Task UnregisterElement(ElementReference element) Parameters Type Name Description ElementReference element Returns Type Description Task"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessButton.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessButton.html",
    "title": "Class HeadlessButton | NeonSDK documentation",
    "keywords": "Class HeadlessButton Inheritance Object ComponentBase HeadlessButton Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessButton : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IAsyncDisposable Fields buttonElement Declaration protected HtmlElement buttonElement Field Value Type Description HtmlElement Properties AdditionalAttributes Declaration [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; } Property Value Type Description IReadOnlyDictionary < String , Object > AriaLabel Declaration [Parameter] public string AriaLabel { get; set; } Property Value Type Description String ChildContent Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description RenderFragment IsEnabled Declaration [Parameter] public bool IsEnabled { get; set; } Property Value Type Description Boolean IsVisible Declaration [Parameter] public bool IsVisible { get; set; } Property Value Type Description Boolean jsRuntime Declaration [Inject] protected IJSRuntime jsRuntime { get; set; } Property Value Type Description IJSRuntime OnClick Declaration [Parameter] public EventCallback OnClick { get; set; } Property Value Type Description EventCallback TagName Declaration [Parameter] public string TagName { get; set; } Property Value Type Description String Type Declaration [Parameter] public string Type { get; set; } Property Value Type Description String Methods DisposeAsync() Declaration public async ValueTask DisposeAsync() Returns Type Description ValueTask HandleClick(MouseEventArgs) Declaration protected async Task HandleClick(MouseEventArgs e) Parameters Type Name Description MouseEventArgs e Returns Type Description Task HandleKeyUp(KeyboardEventArgs) Declaration [JSInvokable] public async Task HandleKeyUp(KeyboardEventArgs eventArgs) Parameters Type Name Description KeyboardEventArgs eventArgs Returns Type Description Task OnAfterRenderAsync(Boolean) Declaration protected override async Task OnAfterRenderAsync(bool firstRender) Parameters Type Name Description Boolean firstRender Returns Type Description Task Overrides ComponentBase.OnAfterRenderAsync(Boolean) OnInitialized() Declaration protected override void OnInitialized() Overrides ComponentBase.OnInitialized()"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessDialog.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessDialog.html",
    "title": "Class HeadlessDialog | NeonSDK documentation",
    "keywords": "Class HeadlessDialog Inheritance Object ComponentBase HeadlessDialog Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessDialog : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IAsyncDisposable Constructors HeadlessDialog() Constructor. Declaration public HeadlessDialog() Properties Attributes Additional attributes to be applied to the child content. Declaration [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> Attributes { get; set; } Property Value Type Description IReadOnlyDictionary < String , Object > ChildContent The UI content. Declaration [Parameter] public RenderFragment<HeadlessDialog> ChildContent { get; set; } Property Value Type Description RenderFragment < HeadlessDialog > OnClose Called when the dialog is closed. Declaration [Parameter] public EventCallback OnClose { get; set; } Property Value Type Description EventCallback OnOpen Called when the dialog is opened. Declaration [Parameter] public EventCallback OnOpen { get; set; } Property Value Type Description EventCallback Show Whether the transition should run on initial mount. Declaration [Parameter] public bool Show { get; set; } Property Value Type Description Boolean State The current Declaration public MenuState State { get; protected set; } Property Value Type Description MenuState Methods Close() Closes the current HeadlessDialog Declaration public async Task Close() Returns Type Description Task Dispose() Declaration public void Dispose() DisposeAsync() Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask HandleClickOff() Handler for when the user clicks away from the HeadlessDialogPanel . This by default will close the HeadlessDialog . Declaration public Task HandleClickOff() Returns Type Description Task OnAfterRenderAsync(Boolean) Declaration protected override async Task OnAfterRenderAsync(bool firstRender) Parameters Type Name Description Boolean firstRender Returns Type Description Task Overrides ComponentBase.OnAfterRenderAsync(Boolean) OnInitialized() Declaration protected override void OnInitialized() Overrides ComponentBase.OnInitialized() Open() Opens the current HeadlessDialog Declaration public async Task Open() Returns Type Description Task RegisterPanel(HeadlessDialogPanel) Method called by a HeadlessDialogPanel to register itself with the current HeadlessDialog . Declaration public async Task RegisterPanel(HeadlessDialogPanel item) Parameters Type Name Description HeadlessDialogPanel item Returns Type Description Task Toggle() Toggles the current HeadlessDialog Declaration public async Task Toggle() Returns Type Description Task UnregisterPanel(HeadlessDialogPanel) Method called by a HeadlessDialogPanel to unregister itself with the current HeadlessDialog . Declaration public async Task UnregisterPanel(HeadlessDialogPanel item) Parameters Type Name Description HeadlessDialogPanel item Returns Type Description Task"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessDialogPanel.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessDialogPanel.html",
    "title": "Class HeadlessDialogPanel | NeonSDK documentation",
    "keywords": "Class HeadlessDialogPanel Inheritance Object ComponentBase HeadlessDialogPanel Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessDialogPanel : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IAsyncDisposable Fields rootElement Declaration public HtmlElement rootElement Field Value Type Description HtmlElement Properties AdditionalAttributes Additional HTML attributes to be applied to the RenderFragment . Declaration [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; } Property Value Type Description IReadOnlyDictionary < String , Object > CascadedDialog The cascaded HeadlessDialog . Declaration [CascadingParameter] public HeadlessDialog CascadedDialog { get; set; } Property Value Type Description HeadlessDialog ChildContent The styled Dialog panel. Declaration [Parameter] public RenderFragment<HeadlessDialogPanel> ChildContent { get; set; } Property Value Type Description RenderFragment < HeadlessDialogPanel > Id The container ID. Declaration [Parameter] public string Id { get; set; } Property Value Type Description String IsEnabled Whether the dialog panel is enabled. Declaration [Parameter] public bool IsEnabled { get; set; } Property Value Type Description Boolean IsVisible Whether the dialog panel is visible. Declaration [Parameter] public bool IsVisible { get; set; } Property Value Type Description Boolean OnClose Callback that is called when the dialog is closed. Declaration [Parameter] public EventCallback OnClose { get; set; } Property Value Type Description EventCallback OnOpen Callback that is called when the dialog is opened. Declaration [Parameter] public EventCallback OnOpen { get; set; } Property Value Type Description EventCallback Show Whether the panel should be initially shown. Declaration [Parameter] public bool Show { get; set; } Property Value Type Description Boolean Methods Close() Declaration public async Task Close() Returns Type Description Task Dispose() Declaration public void Dispose() DisposeAsync() Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask FocusAsync() Declaration public ValueTask FocusAsync() Returns Type Description ValueTask OnAfterRenderAsync(Boolean) Declaration protected override async Task OnAfterRenderAsync(bool firstRender) Parameters Type Name Description Boolean firstRender Returns Type Description Task Overrides ComponentBase.OnAfterRenderAsync(Boolean) OnInitialized() Declaration protected override void OnInitialized() Overrides ComponentBase.OnInitialized() OnInitializedAsync() Declaration protected override async Task OnInitializedAsync() Returns Type Description Task Overrides ComponentBase.OnInitializedAsync() OnParametersSetAsync() Declaration protected override async Task OnParametersSetAsync() Returns Type Description Task Overrides ComponentBase.OnParametersSetAsync() Open() Declaration public async Task Open() Returns Type Description Task SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description ParameterView parameters Returns Type Description Task Overrides ComponentBase.SetParametersAsync(ParameterView) Operators Implicit(HeadlessDialogPanel to ElementReference) Declaration public static implicit operator ElementReference(HeadlessDialogPanel element) Parameters Type Name Description HeadlessDialogPanel element Returns Type Description ElementReference"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessDisclosure.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessDisclosure.html",
    "title": "Class HeadlessDisclosure | NeonSDK documentation",
    "keywords": "Class HeadlessDisclosure Inheritance Object ComponentBase HeadlessDisclosure Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessDisclosure : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IAsyncDisposable Constructors HeadlessDisclosure() Constructor. Declaration public HeadlessDisclosure() Properties ChildContent The UI content. Declaration [Parameter] public RenderFragment<HeadlessDisclosure> ChildContent { get; set; } Property Value Type Description RenderFragment < HeadlessDisclosure > IsEnabled Declaration [Parameter] public bool IsEnabled { get; set; } Property Value Type Description Boolean Show Whether the transition should run on initial mount. Declaration [Parameter] public bool Show { get; set; } Property Value Type Description Boolean State The current Declaration public DisclosureState State { get; protected set; } Property Value Type Description DisclosureState Methods Close() Closes the current HeadlessDisclosure Declaration public async Task Close() Returns Type Description Task DisposeAsync() Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask OnInitialized() Declaration protected override void OnInitialized() Overrides ComponentBase.OnInitialized() Open() Opens the current HeadlessDisclosure Declaration public async Task Open() Returns Type Description Task RegisterButton(HeadlessDisclosureButton) Declaration public async Task RegisterButton(HeadlessDisclosureButton button) Parameters Type Name Description HeadlessDisclosureButton button Returns Type Description Task RegisterPanel(HeadlessDisclosurePanel) Declaration public async Task RegisterPanel(HeadlessDisclosurePanel item) Parameters Type Name Description HeadlessDisclosurePanel item Returns Type Description Task Toggle() Toggles the current HeadlessDisclosure Declaration public async Task Toggle() Returns Type Description Task UnregisterButton(HeadlessDisclosureButton) Method called by a HeadlessDisclosurePanel to unregister itself with the current HeadlessDisclosure . Declaration public async Task UnregisterButton(HeadlessDisclosureButton button) Parameters Type Name Description HeadlessDisclosureButton button Returns Type Description Task UnregisterPanel(HeadlessDisclosurePanel) Method called by a HeadlessDisclosurePanel to unregister itself with the current HeadlessDisclosure . Declaration public async Task UnregisterPanel(HeadlessDisclosurePanel item) Parameters Type Name Description HeadlessDisclosurePanel item Returns Type Description Task"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessDisclosureButton.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessDisclosureButton.html",
    "title": "Class HeadlessDisclosureButton | NeonSDK documentation",
    "keywords": "Class HeadlessDisclosureButton Inheritance Object ComponentBase HtmlElement HeadlessDisclosureButton Inherited Members HtmlElement.Id HtmlElement.TagName HtmlElement.Type HtmlElement.Attributes HtmlElement.ChildContent HtmlElement.PreventDefaultOn HtmlElement.StopPropagationOn HtmlElement.GenerateId() HtmlElement.BuildRenderTree(RenderTreeBuilder) HtmlElement.OnSetElementReference(ElementReference) HtmlElement.FocusAsync() HtmlElement.AsElementReference() Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessDisclosureButton : HtmlElement, IComponent, IHandleEvent, IHandleAfterRender, IDisposable Properties CascadedDisclosure Declaration [CascadingParameter] public HeadlessDisclosure CascadedDisclosure { get; set; } Property Value Type Description HeadlessDisclosure Disclosure Declaration protected HeadlessDisclosure Disclosure { get; set; } Property Value Type Description HeadlessDisclosure IsEnabled Declaration [Parameter] public bool IsEnabled { get; set; } Property Value Type Description Boolean Methods Dispose() Declaration public void Dispose() HandleClick() Declaration public async void HandleClick() OnInitializedAsync() Declaration protected override async Task OnInitializedAsync() Returns Type Description Task Overrides ComponentBase.OnInitializedAsync() SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description ParameterView parameters Returns Type Description Task Overrides ComponentBase.SetParametersAsync(ParameterView)"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessDisclosurePanel.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessDisclosurePanel.html",
    "title": "Class HeadlessDisclosurePanel | NeonSDK documentation",
    "keywords": "Class HeadlessDisclosurePanel Inheritance Object ComponentBase HtmlElement HeadlessDisclosurePanel Inherited Members HtmlElement.Id HtmlElement.TagName HtmlElement.Type HtmlElement.Attributes HtmlElement.ChildContent HtmlElement.PreventDefaultOn HtmlElement.StopPropagationOn HtmlElement.GenerateId() HtmlElement.BuildRenderTree(RenderTreeBuilder) HtmlElement.OnSetElementReference(ElementReference) HtmlElement.FocusAsync() HtmlElement.AsElementReference() Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessDisclosurePanel : HtmlElement, IComponent, IHandleEvent, IHandleAfterRender, IDisposable Properties CascadedDisclosure Declaration [CascadingParameter] public HeadlessDisclosure CascadedDisclosure { get; set; } Property Value Type Description HeadlessDisclosure Disclosure Declaration protected HeadlessDisclosure Disclosure { get; set; } Property Value Type Description HeadlessDisclosure IsEnabled Whether the disclosure panel is enabled. Declaration [Parameter] public bool IsEnabled { get; set; } Property Value Type Description Boolean IsVisible Whether the disclosure panel is visible. Declaration [Parameter] public DisclosureState IsVisible { get; set; } Property Value Type Description DisclosureState Methods Close() Declaration public async Task Close() Returns Type Description Task Dispose() Declaration public void Dispose() OnInitializedAsync() Declaration protected override async Task OnInitializedAsync() Returns Type Description Task Overrides ComponentBase.OnInitializedAsync() Open() Declaration public async Task Open() Returns Type Description Task SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description ParameterView parameters Returns Type Description Task Overrides ComponentBase.SetParametersAsync(ParameterView)"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessListbox-1.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessListbox-1.html",
    "title": "Class HeadlessListbox<TValue> | NeonSDK documentation",
    "keywords": "Class HeadlessListbox<TValue> Inheritance Object HeadlessListbox<TValue> Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessListbox<TValue> : IDisposable Type Parameters Name Description TValue Constructors HeadlessListbox() Con Declaration public HeadlessListbox() Properties ActiveOptionId Declaration public string ActiveOptionId { get; } Property Value Type Description String ButtonElementId Declaration public string ButtonElementId { get; } Property Value Type Description String ChildContent Declaration [Parameter] public RenderFragment<HeadlessListbox<TValue>> ChildContent { get; set; } Property Value Type Description RenderFragment < HeadlessListbox <TValue>> CurrentValue Declaration public TValue CurrentValue { get; set; } Property Value Type Description TValue DebouceTimeout Declaration [Parameter] public int DebouceTimeout { get; set; } Property Value Type Description Int32 LabelId Declaration public string LabelId { get; } Property Value Type Description String OnClose Declaration [Parameter] public EventCallback OnClose { get; set; } Property Value Type Description EventCallback OnOpen Declaration [Parameter] public EventCallback OnOpen { get; set; } Property Value Type Description EventCallback OptionsElementId Declaration public string OptionsElementId { get; } Property Value Type Description String SearchQuery Declaration public string SearchQuery { get; } Property Value Type Description String State Declaration public ListboxState State { get; protected set; } Property Value Type Description ListboxState Value Declaration [Parameter] public TValue Value { get; set; } Property Value Type Description TValue ValueChanged Declaration [Parameter] public EventCallback<TValue> ValueChanged { get; set; } Property Value Type Description EventCallback <TValue> Methods ButtonFocusAsync() Declaration public ValueTask ButtonFocusAsync() Returns Type Description ValueTask Close(Boolean) Declaration public async Task Close(bool suppressFocus = false) Parameters Type Name Description Boolean suppressFocus Returns Type Description Task Dispose() Declaration public void Dispose() GoToOption(HeadlessListboxOption<TValue>) Declaration public void GoToOption(HeadlessListboxOption<TValue> option) Parameters Type Name Description HeadlessListboxOption <TValue> option GoToOption(ListboxFocus) Declaration public void GoToOption(ListboxFocus focus) Parameters Type Name Description ListboxFocus focus HandleClickOff() Declaration public Task HandleClickOff() Returns Type Description Task IsActiveOption(HeadlessListboxOption<TValue>) Declaration public bool IsActiveOption(HeadlessListboxOption<TValue> option) Parameters Type Name Description HeadlessListboxOption <TValue> option Returns Type Description Boolean OnAfterRenderAsync(Boolean) Declaration protected override async Task OnAfterRenderAsync(bool firstRender) Parameters Type Name Description Boolean firstRender Returns Type Description Task OnInitialized() Declaration protected override void OnInitialized() Open() Declaration public async Task Open() Returns Type Description Task OptionsFocusAsync() Declaration public ValueTask OptionsFocusAsync() Returns Type Description ValueTask RegisterButton(HeadlessListboxButton<TValue>) Declaration public void RegisterButton(HeadlessListboxButton<TValue> button) Parameters Type Name Description HeadlessListboxButton <TValue> button Registerlabel(HeadlessListboxLabel<TValue>) Declaration public void Registerlabel(HeadlessListboxLabel<TValue> label) Parameters Type Name Description HeadlessListboxLabel <TValue> label RegisterOption(HeadlessListboxOption<TValue>) Declaration public void RegisterOption(HeadlessListboxOption<TValue> option) Parameters Type Name Description HeadlessListboxOption <TValue> option RegisterOptions(HeadlessListboxOptions<TValue>) Declaration public void RegisterOptions(HeadlessListboxOptions<TValue> options) Parameters Type Name Description HeadlessListboxOptions <TValue> options Search(String) Declaration public void Search(string key) Parameters Type Name Description String key SetActiveAsValue() Declaration public void SetActiveAsValue() SetValue(TValue) Declaration public async Task SetValue(TValue value) Parameters Type Name Description TValue value Returns Type Description Task Toggle() Declaration public async Task Toggle() Returns Type Description Task UnregisterOption(HeadlessListboxOption<TValue>) Declaration public void UnregisterOption(HeadlessListboxOption<TValue> option) Parameters Type Name Description HeadlessListboxOption <TValue> option"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessListboxButton-1.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessListboxButton-1.html",
    "title": "Class HeadlessListboxButton<TValue> | NeonSDK documentation",
    "keywords": "Class HeadlessListboxButton<TValue> Inheritance Object ComponentBase HeadlessListboxButton<TValue> Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessListboxButton<TValue> : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Type Parameters Name Description TValue Properties AdditionalAttributes Declaration [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; } Property Value Type Description IReadOnlyDictionary < String , Object > CascadedListbox Declaration [CascadingParameter] public HeadlessListbox<TValue> CascadedListbox { get; set; } Property Value Type Description HeadlessListbox <TValue> ChildContent Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description RenderFragment Id Declaration [Parameter] public string Id { get; set; } Property Value Type Description String Listbox Declaration protected HeadlessListbox<TValue> Listbox { get; set; } Property Value Type Description HeadlessListbox <TValue> TagName Declaration [Parameter] public string TagName { get; set; } Property Value Type Description String Methods FocusAsync() Declaration public ValueTask FocusAsync() Returns Type Description ValueTask HandleClick() Declaration public async Task HandleClick() Returns Type Description Task HandleFocus(EventArgs) Declaration protected async Task HandleFocus(EventArgs eventArgs) Parameters Type Name Description EventArgs eventArgs Returns Type Description Task HandleKeyDown(KeyboardEventArgs) Declaration protected async Task HandleKeyDown(KeyboardEventArgs eventArgs) Parameters Type Name Description KeyboardEventArgs eventArgs Returns Type Description Task OnAfterRenderAsync(Boolean) Declaration protected override async Task OnAfterRenderAsync(bool firstRender) Parameters Type Name Description Boolean firstRender Returns Type Description Task Overrides ComponentBase.OnAfterRenderAsync(Boolean) OnInitialized() Declaration protected override void OnInitialized() Overrides ComponentBase.OnInitialized() SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description ParameterView parameters Returns Type Description Task Overrides ComponentBase.SetParametersAsync(ParameterView) Operators Implicit(HeadlessListboxButton<TValue> to ElementReference) Declaration public static implicit operator ElementReference(HeadlessListboxButton<TValue> element) Parameters Type Name Description HeadlessListboxButton <TValue> element Returns Type Description ElementReference"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessListboxLabel-1.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessListboxLabel-1.html",
    "title": "Class HeadlessListboxLabel<TValue> | NeonSDK documentation",
    "keywords": "Class HeadlessListboxLabel<TValue> Inheritance Object ComponentBase HeadlessListboxLabel<TValue> Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessListboxLabel<TValue> : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Type Parameters Name Description TValue Properties AdditionalAttributes Declaration [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; } Property Value Type Description IReadOnlyDictionary < String , Object > CascadedListbox Declaration [CascadingParameter] public HeadlessListbox<TValue> CascadedListbox { get; set; } Property Value Type Description HeadlessListbox <TValue> ChildContent Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description RenderFragment Id Declaration [Parameter] public string Id { get; set; } Property Value Type Description String Listbox Declaration protected HeadlessListbox<TValue> Listbox { get; set; } Property Value Type Description HeadlessListbox <TValue> TagName Declaration [Parameter] public string TagName { get; set; } Property Value Type Description String Methods OnInitialized() Declaration protected override void OnInitialized() Overrides ComponentBase.OnInitialized() SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description ParameterView parameters Returns Type Description Task Overrides ComponentBase.SetParametersAsync(ParameterView)"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessListboxOption-1.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessListboxOption-1.html",
    "title": "Class HeadlessListboxOption<TValue> | NeonSDK documentation",
    "keywords": "Class HeadlessListboxOption<TValue> Inheritance Object HeadlessListboxOption<TValue> Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessListboxOption<TValue> : IDisposable Type Parameters Name Description TValue Properties AdditionalAttributes Declaration [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; } Property Value Type Description IReadOnlyDictionary < String , Object > CascadedListbox Declaration [CascadingParameter] public HeadlessListbox<TValue> CascadedListbox { get; set; } Property Value Type Description HeadlessListbox <TValue> CascadedOptions Declaration [CascadingParameter] public HeadlessListboxOptions<TValue> CascadedOptions { get; set; } Property Value Type Description HeadlessListboxOptions <TValue> ChildContent Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description RenderFragment Id Declaration [Parameter] public string Id { get; set; } Property Value Type Description String IsActive Declaration public bool IsActive { get; } Property Value Type Description Boolean IsEnabled Declaration [Parameter] public bool IsEnabled { get; set; } Property Value Type Description Boolean IsSelected Declaration public bool IsSelected { get; } Property Value Type Description Boolean IsVisible Declaration [Parameter] public bool IsVisible { get; set; } Property Value Type Description Boolean Listbox Declaration public HeadlessListbox<TValue> Listbox { get; set; } Property Value Type Description HeadlessListbox <TValue> Options Declaration public HeadlessListboxOptions<TValue> Options { get; set; } Property Value Type Description HeadlessListboxOptions <TValue> SearchValue Declaration [Parameter] public string SearchValue { get; set; } Property Value Type Description String TagName Declaration [Parameter] public string TagName { get; set; } Property Value Type Description String Value Declaration [Parameter] public TValue Value { get; set; } Property Value Type Description TValue Methods Dispose() Declaration public void Dispose() HandleMouseEnter(MouseEventArgs) Declaration protected async Task HandleMouseEnter(MouseEventArgs e) Parameters Type Name Description MouseEventArgs e Returns Type Description Task HandleMouseLeave(MouseEventArgs) Declaration protected void HandleMouseLeave(MouseEventArgs e) Parameters Type Name Description MouseEventArgs e OnInitialized() Declaration protected override void OnInitialized() SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description ParameterView parameters Returns Type Description Task"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessListboxOptions-1.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessListboxOptions-1.html",
    "title": "Class HeadlessListboxOptions<TValue> | NeonSDK documentation",
    "keywords": "Class HeadlessListboxOptions<TValue> Inheritance Object ComponentBase HeadlessListboxOptions<TValue> Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessListboxOptions<TValue> : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IAsyncDisposable Type Parameters Name Description TValue Properties AdditionalAttributes Declaration [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; } Property Value Type Description IReadOnlyDictionary < String , Object > CascadedListbox Declaration [CascadingParameter] public HeadlessListbox<TValue> CascadedListbox { get; set; } Property Value Type Description HeadlessListbox <TValue> ChildContent Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description RenderFragment Id Declaration [Parameter] public string Id { get; set; } Property Value Type Description String Listbox Declaration protected HeadlessListbox<TValue> Listbox { get; set; } Property Value Type Description HeadlessListbox <TValue> Static Declaration [Parameter] public bool Static { get; set; } Property Value Type Description Boolean TagName Declaration [Parameter] public string TagName { get; set; } Property Value Type Description String Methods DisposeAsync() Declaration public async ValueTask DisposeAsync() Returns Type Description ValueTask FocusAsync() Declaration public ValueTask FocusAsync() Returns Type Description ValueTask HandleKeyDown(KeyboardEventArgs) Declaration public async Task HandleKeyDown(KeyboardEventArgs eventArgs) Parameters Type Name Description KeyboardEventArgs eventArgs Returns Type Description Task OnAfterRenderAsync(Boolean) Declaration protected override async Task OnAfterRenderAsync(bool firstRender) Parameters Type Name Description Boolean firstRender Returns Type Description Task Overrides ComponentBase.OnAfterRenderAsync(Boolean) OnInitialized() Declaration protected override void OnInitialized() Overrides ComponentBase.OnInitialized() SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description ParameterView parameters Returns Type Description Task Overrides ComponentBase.SetParametersAsync(ParameterView) Operators Implicit(HeadlessListboxOptions<TValue> to ElementReference) Declaration public static implicit operator ElementReference(HeadlessListboxOptions<TValue> element) Parameters Type Name Description HeadlessListboxOptions <TValue> element Returns Type Description ElementReference"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessMenu.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessMenu.html",
    "title": "Class HeadlessMenu | NeonSDK documentation",
    "keywords": "Class HeadlessMenu Inheritance Object ComponentBase HeadlessMenu Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessMenu : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IDisposable Constructors HeadlessMenu() Constructor. Declaration public HeadlessMenu() Properties ActiveItemId Declaration public string ActiveItemId { get; } Property Value Type Description String AdditionalAttributes Declaration [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; } Property Value Type Description IReadOnlyDictionary < String , Object > ButtonElementId Declaration public string ButtonElementId { get; } Property Value Type Description String ChildContent Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description RenderFragment DebouceTimeout Declaration [Parameter] public int DebouceTimeout { get; set; } Property Value Type Description Int32 ItemsElementId Declaration public string ItemsElementId { get; } Property Value Type Description String OnClose Declaration [Parameter] public EventCallback OnClose { get; set; } Property Value Type Description EventCallback OnOpen Declaration [Parameter] public EventCallback OnOpen { get; set; } Property Value Type Description EventCallback SearchQuery Declaration public string SearchQuery { get; } Property Value Type Description String State Declaration public MenuState State { get; protected set; } Property Value Type Description MenuState Methods ButtonFocusAsync() Declaration public ValueTask ButtonFocusAsync() Returns Type Description ValueTask Close(Boolean) Declaration public async Task Close(bool suppressFocus = false) Parameters Type Name Description Boolean suppressFocus Returns Type Description Task Dispose() Declaration public void Dispose() GoToItem(HeadlessMenuItem) Declaration public void GoToItem(HeadlessMenuItem item) Parameters Type Name Description HeadlessMenuItem item GoToItem(MenuFocus) Declaration public void GoToItem(MenuFocus focus) Parameters Type Name Description MenuFocus focus HandleClickOff() Declaration public Task HandleClickOff() Returns Type Description Task IsActiveItem(HeadlessMenuItem) Declaration public bool IsActiveItem(HeadlessMenuItem item) Parameters Type Name Description HeadlessMenuItem item Returns Type Description Boolean MenuItemsFocusAsync() Declaration public ValueTask MenuItemsFocusAsync() Returns Type Description ValueTask OnAfterRenderAsync(Boolean) Declaration protected override async Task OnAfterRenderAsync(bool firstRender) Parameters Type Name Description Boolean firstRender Returns Type Description Task Overrides ComponentBase.OnAfterRenderAsync(Boolean) Open() Declaration public async Task Open() Returns Type Description Task RegisterButton(HeadlessMenuButton) Declaration public void RegisterButton(HeadlessMenuButton button) Parameters Type Name Description HeadlessMenuButton button RegisterItem(HeadlessMenuItem) Declaration public void RegisterItem(HeadlessMenuItem item) Parameters Type Name Description HeadlessMenuItem item RegisterItems(HeadlessMenuItems) Declaration public void RegisterItems(HeadlessMenuItems items) Parameters Type Name Description HeadlessMenuItems items Search(String) Declaration public void Search(string key) Parameters Type Name Description String key Toggle() Declaration public async Task Toggle() Returns Type Description Task UnregisterItem(HeadlessMenuItem) Declaration public void UnregisterItem(HeadlessMenuItem item) Parameters Type Name Description HeadlessMenuItem item"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessMenuButton.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessMenuButton.html",
    "title": "Class HeadlessMenuButton | NeonSDK documentation",
    "keywords": "Class HeadlessMenuButton Inheritance Object ComponentBase HeadlessMenuButton Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessMenuButton : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IAsyncDisposable Properties AdditionalAttributes Declaration [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> AdditionalAttributes { get; set; } Property Value Type Description Dictionary < String , Object > CascadedMenu Declaration [CascadingParameter] public HeadlessMenu CascadedMenu { get; set; } Property Value Type Description HeadlessMenu ChildContent Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description RenderFragment Id Declaration [Parameter] public string Id { get; set; } Property Value Type Description String Menu Declaration protected HeadlessMenu Menu { get; set; } Property Value Type Description HeadlessMenu TagName Declaration [Parameter] public string TagName { get; set; } Property Value Type Description String Methods DisposeAsync() Declaration public async ValueTask DisposeAsync() Returns Type Description ValueTask FocusAsync() Declaration public ValueTask FocusAsync() Returns Type Description ValueTask HandleClick(EventArgs) Declaration protected async Task HandleClick(EventArgs eventArgs) Parameters Type Name Description EventArgs eventArgs Returns Type Description Task HandleFocus(EventArgs) Declaration protected async Task HandleFocus(EventArgs eventArgs) Parameters Type Name Description EventArgs eventArgs Returns Type Description Task HandleKeyDown(KeyboardEventArgs) Declaration protected async Task HandleKeyDown(KeyboardEventArgs eventArgs) Parameters Type Name Description KeyboardEventArgs eventArgs Returns Type Description Task OnAfterRenderAsync(Boolean) Declaration protected override async Task OnAfterRenderAsync(bool firstRender) Parameters Type Name Description Boolean firstRender Returns Type Description Task Overrides ComponentBase.OnAfterRenderAsync(Boolean) OnInitialized() Declaration protected override void OnInitialized() Overrides ComponentBase.OnInitialized() SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description ParameterView parameters Returns Type Description Task Overrides ComponentBase.SetParametersAsync(ParameterView) Operators Implicit(HeadlessMenuButton to ElementReference) Declaration public static implicit operator ElementReference(HeadlessMenuButton element) Parameters Type Name Description HeadlessMenuButton element Returns Type Description ElementReference"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessMenuItem.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessMenuItem.html",
    "title": "Class HeadlessMenuItem | NeonSDK documentation",
    "keywords": "Class HeadlessMenuItem Inheritance Object ComponentBase HeadlessMenuItem Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessMenuItem : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IDisposable Properties AdditionalAttributes Declaration [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; } Property Value Type Description IReadOnlyDictionary < String , Object > CascadedItems Declaration [CascadingParameter] public HeadlessMenuItems CascadedItems { get; set; } Property Value Type Description HeadlessMenuItems CascadedMenu Declaration [CascadingParameter] public HeadlessMenu CascadedMenu { get; set; } Property Value Type Description HeadlessMenu ChildContent Declaration [Parameter] public RenderFragment<HeadlessMenuItem> ChildContent { get; set; } Property Value Type Description RenderFragment < HeadlessMenuItem > Id Declaration [Parameter] public string Id { get; set; } Property Value Type Description String IsActive Declaration public bool IsActive { get; } Property Value Type Description Boolean IsEnabled Declaration [Parameter] public bool IsEnabled { get; set; } Property Value Type Description Boolean IsVisible Declaration [Parameter] public bool IsVisible { get; set; } Property Value Type Description Boolean OnClick Declaration [Parameter] public EventCallback OnClick { get; set; } Property Value Type Description EventCallback SearchValue Declaration [Parameter] public string SearchValue { get; set; } Property Value Type Description String TagName Declaration [Parameter] public string TagName { get; set; } Property Value Type Description String Methods Dispose() Declaration public void Dispose() OnInitialized() Declaration protected override void OnInitialized() Overrides ComponentBase.OnInitialized() SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description ParameterView parameters Returns Type Description Task Overrides ComponentBase.SetParametersAsync(ParameterView)"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessMenuItems.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessMenuItems.html",
    "title": "Class HeadlessMenuItems | NeonSDK documentation",
    "keywords": "Class HeadlessMenuItems Inheritance Object ComponentBase HeadlessMenuItems Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessMenuItems : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IAsyncDisposable Properties AdditionalAttributes Declaration [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; } Property Value Type Description IReadOnlyDictionary < String , Object > CascadedMenu Declaration [CascadingParameter] public HeadlessMenu CascadedMenu { get; set; } Property Value Type Description HeadlessMenu ChildContent Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description RenderFragment Id Declaration [Parameter] public string Id { get; set; } Property Value Type Description String Static Declaration [Parameter] public bool Static { get; set; } Property Value Type Description Boolean TagName Declaration [Parameter] public string TagName { get; set; } Property Value Type Description String Methods DisposeAsync() Declaration public async ValueTask DisposeAsync() Returns Type Description ValueTask FocusAsync() Declaration public ValueTask FocusAsync() Returns Type Description ValueTask HandleKeyDown(KeyboardEventArgs) Declaration public async Task HandleKeyDown(KeyboardEventArgs eventArgs) Parameters Type Name Description KeyboardEventArgs eventArgs Returns Type Description Task OnAfterRenderAsync(Boolean) Declaration protected override async Task OnAfterRenderAsync(bool firstRender) Parameters Type Name Description Boolean firstRender Returns Type Description Task Overrides ComponentBase.OnAfterRenderAsync(Boolean) OnInitialized() Declaration protected override void OnInitialized() Overrides ComponentBase.OnInitialized() SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description ParameterView parameters Returns Type Description Task Overrides ComponentBase.SetParametersAsync(ParameterView) Operators Implicit(HeadlessMenuItems to ElementReference) Declaration public static implicit operator ElementReference(HeadlessMenuItems element) Parameters Type Name Description HeadlessMenuItems element Returns Type Description ElementReference"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessSwitch.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessSwitch.html",
    "title": "Class HeadlessSwitch | NeonSDK documentation",
    "keywords": "Class HeadlessSwitch Inheritance Object ComponentBase HeadlessSwitch Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessSwitch : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Properties AdditionalAttributes Declaration [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; } Property Value Type Description IReadOnlyDictionary < String , Object > Checked Declaration [Parameter] public bool Checked { get; set; } Property Value Type Description Boolean CheckedChanged Declaration [Parameter] public EventCallback<bool> CheckedChanged { get; set; } Property Value Type Description EventCallback < Boolean > ChildContent Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description RenderFragment CurrentChecked Declaration protected bool CurrentChecked { get; set; } Property Value Type Description Boolean Group Declaration [CascadingParameter] public HeadlessSwitchGroup Group { get; set; } Property Value Type Description HeadlessSwitchGroup Id Declaration [Parameter] public string Id { get; set; } Property Value Type Description String IsEnabled Declaration [Parameter] public bool IsEnabled { get; set; } Property Value Type Description Boolean TagName Declaration [Parameter] public string TagName { get; set; } Property Value Type Description String Methods HandleClick() Declaration public void HandleClick() OnInitialized() Declaration protected override void OnInitialized() Overrides ComponentBase.OnInitialized() Toggle() Declaration public void Toggle()"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessSwitchGroup.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessSwitchGroup.html",
    "title": "Class HeadlessSwitchGroup | NeonSDK documentation",
    "keywords": "Class HeadlessSwitchGroup Inheritance Object HeadlessSwitchGroup Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessSwitchGroup Properties ChildContent Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description RenderFragment Methods RegisterSwitch(HeadlessSwitch) Declaration public void RegisterSwitch(HeadlessSwitch switchElement) Parameters Type Name Description HeadlessSwitch switchElement ToggleSwitch() Declaration public void ToggleSwitch()"
  },
  "neonsdk/api/Neon.Tailwind.HeadlessSwitchLabel.html": {
    "href": "neonsdk/api/Neon.Tailwind.HeadlessSwitchLabel.html",
    "title": "Class HeadlessSwitchLabel | NeonSDK documentation",
    "keywords": "Class HeadlessSwitchLabel Inheritance Object ComponentBase HeadlessSwitchLabel Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HeadlessSwitchLabel : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Properties AdditionalAttributes Declaration [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; } Property Value Type Description IReadOnlyDictionary < String , Object > CascadedGroup Declaration [CascadingParameter] public HeadlessSwitchGroup CascadedGroup { get; set; } Property Value Type Description HeadlessSwitchGroup ChildContent Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description RenderFragment Group Declaration public HeadlessSwitchGroup Group { get; set; } Property Value Type Description HeadlessSwitchGroup Passive Declaration [Parameter] public bool Passive { get; set; } Property Value Type Description Boolean Methods HandleClick() Declaration public void HandleClick() SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description ParameterView parameters Returns Type Description Task Overrides ComponentBase.SetParametersAsync(ParameterView)"
  },
  "neonsdk/api/Neon.Tailwind.html": {
    "href": "neonsdk/api/Neon.Tailwind.html",
    "title": "Namespace Neon.Tailwind | NeonSDK documentation",
    "keywords": "Namespace Neon.Tailwind Classes ClickOffEventHandler Handler that manages click off events. ComponentEventArgs<TSender> ComponentEventArgs<TSender, TEventArgs> EventHandlerComponentBase<TComponent> HeadlessButton HeadlessDialog HeadlessDialogPanel HeadlessDisclosure HeadlessDisclosureButton HeadlessDisclosurePanel HeadlessListbox<TValue> HeadlessListboxButton<TValue> HeadlessListboxLabel<TValue> HeadlessListboxOption<TValue> HeadlessListboxOptions<TValue> HeadlessMenu HeadlessMenuButton HeadlessMenuItem HeadlessMenuItems HeadlessSwitch HeadlessSwitchGroup HeadlessSwitchLabel HtmlElement KeyboardKey KeyDownEventHandler Portal Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component PortalBinder PortalContent SearchAssistant TailwindExtensions Transition TransitionGroup Interfaces IPortalBinder Enums DisclosureState ListboxFocus ListboxState MenuFocus MenuState TransitionState"
  },
  "neonsdk/api/Neon.Tailwind.HtmlElement.html": {
    "href": "neonsdk/api/Neon.Tailwind.HtmlElement.html",
    "title": "Class HtmlElement | NeonSDK documentation",
    "keywords": "Class HtmlElement Inheritance Object ComponentBase HtmlElement HeadlessDisclosureButton HeadlessDisclosurePanel Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class HtmlElement : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Properties Attributes Declaration [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> Attributes { get; set; } Property Value Type Description IReadOnlyDictionary < String , Object > ChildContent Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description RenderFragment Id Declaration [Parameter] public string Id { get; set; } Property Value Type Description String PreventDefaultOn Declaration [Parameter] public List<string> PreventDefaultOn { get; set; } Property Value Type Description List < String > StopPropagationOn Declaration [Parameter] public List<string> StopPropagationOn { get; set; } Property Value Type Description List < String > TagName Declaration [Parameter] public string TagName { get; set; } Property Value Type Description String Type Declaration [Parameter] public string Type { get; set; } Property Value Type Description String Methods AsElementReference() Declaration public ElementReference AsElementReference() Returns Type Description ElementReference BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description RenderTreeBuilder builder Overrides ComponentBase.BuildRenderTree(RenderTreeBuilder) FocusAsync() Declaration public ValueTask FocusAsync() Returns Type Description ValueTask GenerateId() Declaration public static string GenerateId() Returns Type Description String OnSetElementReference(ElementReference) Declaration public void OnSetElementReference(ElementReference reference) Parameters Type Name Description ElementReference reference Operators Implicit(HtmlElement to ElementReference) Declaration public static implicit operator ElementReference(HtmlElement element) Parameters Type Name Description HtmlElement element Returns Type Description ElementReference"
  },
  "neonsdk/api/Neon.Tailwind.IPortalBinder.html": {
    "href": "neonsdk/api/Neon.Tailwind.IPortalBinder.html",
    "title": "Interface IPortalBinder | NeonSDK documentation",
    "keywords": "Interface IPortalBinder Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public interface IPortalBinder Methods GetPortal(String) Declaration Portal GetPortal(string name) Parameters Type Name Description String name Returns Type Description Portal RegisterPortal(String, Portal) Declaration void RegisterPortal(string name, Portal portal) Parameters Type Name Description String name Portal portal"
  },
  "neonsdk/api/Neon.Tailwind.KeyboardKey.html": {
    "href": "neonsdk/api/Neon.Tailwind.KeyboardKey.html",
    "title": "Class KeyboardKey | NeonSDK documentation",
    "keywords": "Class KeyboardKey Inheritance Object KeyboardKey Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public static class KeyboardKey Fields ArrowDown Declaration public const string ArrowDown = \"ArrowDown\" Field Value Type Description String ArrowLeft Declaration public const string ArrowLeft = \"ArrowLeft\" Field Value Type Description String ArrowRight Declaration public const string ArrowRight = \"ArrowRight\" Field Value Type Description String ArrowUp Declaration public const string ArrowUp = \"ArrowUp\" Field Value Type Description String Backspace Declaration public const string Backspace = \"Backspace\" Field Value Type Description String End Declaration public const string End = \"End\" Field Value Type Description String Enter Declaration public const string Enter = \"Enter\" Field Value Type Description String Escape Declaration public const string Escape = \"Escape\" Field Value Type Description String Home Declaration public const string Home = \"Home\" Field Value Type Description String PageDown Declaration public const string PageDown = \"PageDown\" Field Value Type Description String PageUp Declaration public const string PageUp = \"PageUp\" Field Value Type Description String Space Declaration public const string Space = \" \" Field Value Type Description String Tab Declaration public const string Tab = \"Tab\" Field Value Type Description String"
  },
  "neonsdk/api/Neon.Tailwind.KeyDownEventHandler.html": {
    "href": "neonsdk/api/Neon.Tailwind.KeyDownEventHandler.html",
    "title": "Class KeyDownEventHandler | NeonSDK documentation",
    "keywords": "Class KeyDownEventHandler Inheritance Object ComponentBase EventHandlerComponentBase < KeyDownEventHandler > KeyDownEventHandler Inherited Members EventHandlerComponentBase<KeyDownEventHandler>.jsHandlerReference EventHandlerComponentBase<KeyDownEventHandler>.JSRuntime EventHandlerComponentBase<KeyDownEventHandler>.OnInitializedAsync() EventHandlerComponentBase<KeyDownEventHandler>.DisposeAsync() EventHandlerComponentBase<KeyDownEventHandler>.RegisterElement(ElementReference) EventHandlerComponentBase<KeyDownEventHandler>.UnregisterElement(ElementReference) Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class KeyDownEventHandler : EventHandlerComponentBase<KeyDownEventHandler>, IComponent, IHandleEvent, IHandleAfterRender, IAsyncDisposable Constructors KeyDownEventHandler() Declaration public KeyDownEventHandler() Properties OnKeyDown Declaration [Parameter] public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; } Property Value Type Description EventCallback < KeyboardEventArgs > PreventDefaultForKeys Declaration [Parameter] public List<string> PreventDefaultForKeys { get; set; } Property Value Type Description List < String > Methods GetAdditionalInitializationParameters() Declaration protected override IEnumerable<object> GetAdditionalInitializationParameters() Returns Type Description IEnumerable < Object > Overrides Neon.Tailwind.EventHandlerComponentBase<Neon.Tailwind.KeyDownEventHandler>.GetAdditionalInitializationParameters() HandleKeyDown(KeyboardEventArgs) Declaration [JSInvokable] public Task HandleKeyDown(KeyboardEventArgs args) Parameters Type Name Description KeyboardEventArgs args Returns Type Description Task"
  },
  "neonsdk/api/Neon.Tailwind.ListboxFocus.html": {
    "href": "neonsdk/api/Neon.Tailwind.ListboxFocus.html",
    "title": "Enum ListboxFocus | NeonSDK documentation",
    "keywords": "Enum ListboxFocus Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public enum ListboxFocus Fields Name Description First Last Next Nothing Previous Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Tailwind.ListboxState.html": {
    "href": "neonsdk/api/Neon.Tailwind.ListboxState.html",
    "title": "Enum ListboxState | NeonSDK documentation",
    "keywords": "Enum ListboxState Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public enum ListboxState Fields Name Description Closed Open Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Tailwind.MenuFocus.html": {
    "href": "neonsdk/api/Neon.Tailwind.MenuFocus.html",
    "title": "Enum MenuFocus | NeonSDK documentation",
    "keywords": "Enum MenuFocus Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public enum MenuFocus Fields Name Description First Last Next Nothing Previous Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Tailwind.MenuState.html": {
    "href": "neonsdk/api/Neon.Tailwind.MenuState.html",
    "title": "Enum MenuState | NeonSDK documentation",
    "keywords": "Enum MenuState Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public enum MenuState Fields Name Description Closed Open Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Tailwind.Portal.html": {
    "href": "neonsdk/api/Neon.Tailwind.Portal.html",
    "title": "Class Portal | NeonSDK documentation",
    "keywords": "Class Portal Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component Inheritance Object ComponentBase Portal Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class Portal : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Properties Name The name of the Portal. Declaration [Parameter] public string Name { get; set; } Property Value Type Description String PortalBinder The injected IPortalBinder . Declaration [Inject] public IPortalBinder PortalBinder { get; set; } Property Value Type Description IPortalBinder Methods BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description RenderTreeBuilder builder Overrides ComponentBase.BuildRenderTree(RenderTreeBuilder) OnInitialized() Declaration protected override void OnInitialized() Overrides ComponentBase.OnInitialized() RenderContent(RenderFragment) Renders the RenderFragment . Declaration public void RenderContent(RenderFragment content) Parameters Type Name Description RenderFragment content"
  },
  "neonsdk/api/Neon.Tailwind.PortalBinder.html": {
    "href": "neonsdk/api/Neon.Tailwind.PortalBinder.html",
    "title": "Class PortalBinder | NeonSDK documentation",
    "keywords": "Class PortalBinder Inheritance Object PortalBinder Implements IPortalBinder Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class PortalBinder : IPortalBinder Methods GetPortal(String) Declaration public Portal GetPortal(string name) Parameters Type Name Description String name Returns Type Description Portal RegisterPortal(String, Portal) Declaration public void RegisterPortal(string name, Portal portal) Parameters Type Name Description String name Portal portal Implements IPortalBinder"
  },
  "neonsdk/api/Neon.Tailwind.PortalContent.html": {
    "href": "neonsdk/api/Neon.Tailwind.PortalContent.html",
    "title": "Class PortalContent | NeonSDK documentation",
    "keywords": "Class PortalContent Inheritance Object ComponentBase PortalContent Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class PortalContent : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IDisposable Properties ChildContent Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description RenderFragment PortalBinder Declaration [Inject] public IPortalBinder PortalBinder { get; set; } Property Value Type Description IPortalBinder PortalName Declaration [Parameter] public string PortalName { get; set; } Property Value Type Description String Methods BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description RenderTreeBuilder builder Overrides ComponentBase.BuildRenderTree(RenderTreeBuilder) Dispose() Declaration public void Dispose()"
  },
  "neonsdk/api/Neon.Tailwind.SearchAssistant.html": {
    "href": "neonsdk/api/Neon.Tailwind.SearchAssistant.html",
    "title": "Class SearchAssistant | NeonSDK documentation",
    "keywords": "Class SearchAssistant Inheritance Object SearchAssistant Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class SearchAssistant : IDisposable Properties DebouceTimeout Declaration public int DebouceTimeout { get; set; } Property Value Type Description Int32 SearchQuery Declaration public string SearchQuery { get; } Property Value Type Description String Methods ClearSearch() Declaration public void ClearSearch() Dispose() Declaration public void Dispose() Search(String) Declaration public void Search(string key) Parameters Type Name Description String key Events OnChange Declaration public event EventHandler OnChange Event Type Type Description EventHandler"
  },
  "neonsdk/api/Neon.Tailwind.TailwindExtensions.html": {
    "href": "neonsdk/api/Neon.Tailwind.TailwindExtensions.html",
    "title": "Class TailwindExtensions | NeonSDK documentation",
    "keywords": "Class TailwindExtensions Inheritance Object TailwindExtensions Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public static class TailwindExtensions Methods AddTailwind(IServiceCollection) Declaration public static IServiceCollection AddTailwind(this IServiceCollection builder) Parameters Type Name Description IServiceCollection builder Returns Type Description IServiceCollection RunTailwind(IApplicationBuilder, String) Declaration public static void RunTailwind(this IApplicationBuilder applicationBuilder, string script) Parameters Type Name Description IApplicationBuilder applicationBuilder String script RunTailwind(IApplicationBuilder, String, String, Boolean) Declaration public static void RunTailwind(this IApplicationBuilder applicationBuilder, string inputCssPath = \"./Styles/tailwind.css\", string outputCssPath = \"./wwwroot/css/tailwind.css\", bool watch = true) Parameters Type Name Description IApplicationBuilder applicationBuilder String inputCssPath String outputCssPath Boolean watch"
  },
  "neonsdk/api/Neon.Tailwind.Transition.html": {
    "href": "neonsdk/api/Neon.Tailwind.Transition.html",
    "title": "Class Transition | NeonSDK documentation",
    "keywords": "Class Transition Inheritance Object ComponentBase Transition Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class Transition : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Properties Attributes Declaration [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> Attributes { get; set; } Property Value Type Description IReadOnlyDictionary < String , Object > BeginTransition Declaration [Parameter] public EventCallback<bool> BeginTransition { get; set; } Property Value Type Description EventCallback < Boolean > ChildContent Declaration [Parameter] public RenderFragment<string> ChildContent { get; set; } Property Value Type Description RenderFragment < String > ClassAttributes Declaration public string ClassAttributes { get; } Property Value Type Description String CurrentCssClass Declaration public string CurrentCssClass { get; } Property Value Type Description String EndTransition Declaration [Parameter] public EventCallback<bool> EndTransition { get; set; } Property Value Type Description EventCallback < Boolean > Enter Classes to add to the transitioning element during the entire enter phase. Declaration [Parameter] public string Enter { get; set; } Property Value Type Description String EnterDuration The duration that the enter transition will take. Declaration [Parameter] public int? EnterDuration { get; set; } Property Value Type Description Nullable < Int32 > EnterFrom The starting point to enter from. Declaration [Parameter] public string EnterFrom { get; set; } Property Value Type Description String EnterTo The ending point to enter to. Declaration [Parameter] public string EnterTo { get; set; } Property Value Type Description String Leave Classes to add to the transitioning element during the entire leave phase. Declaration [Parameter] public string Leave { get; set; } Property Value Type Description String LeaveDuration The duration that the leave transition will take. Declaration [Parameter] public int? LeaveDuration { get; set; } Property Value Type Description Nullable < Int32 > LeaveFrom Classes to add to the transitioning element before the leave phase starts. Declaration [Parameter] public string LeaveFrom { get; set; } Property Value Type Description String LeaveTo Classes to add to the transitioning element immediately after the leave phase starts. Declaration [Parameter] public string LeaveTo { get; set; } Property Value Type Description String Show Whether the transition should run on initial mount. Declaration [Parameter] public bool Show { get; set; } Property Value Type Description Boolean State Declaration public TransitionState State { get; set; } Property Value Type Description TransitionState TransitionGroup Declaration [CascadingParameter] public TransitionGroup TransitionGroup { get; set; } Property Value Type Description TransitionGroup Methods BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description RenderTreeBuilder builder Overrides ComponentBase.BuildRenderTree(RenderTreeBuilder) Close() Declaration public void Close() Dispose() Declaration public void Dispose() OnAfterRenderAsync(Boolean) Declaration protected override async Task OnAfterRenderAsync(bool firstRender) Parameters Type Name Description Boolean firstRender Returns Type Description Task Overrides ComponentBase.OnAfterRenderAsync(Boolean) OnInitialized() Declaration protected override void OnInitialized() Overrides ComponentBase.OnInitialized() OnParametersSet() Declaration protected override void OnParametersSet() Overrides ComponentBase.OnParametersSet() Open() Declaration public void Open() SetParametersAsync(ParameterView) Declaration public override async Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description ParameterView parameters Returns Type Description Task Overrides ComponentBase.SetParametersAsync(ParameterView) Toggle() Declaration public void Toggle() Events OnTransitionChange Declaration public event Action OnTransitionChange Event Type Type Description Action"
  },
  "neonsdk/api/Neon.Tailwind.TransitionGroup.html": {
    "href": "neonsdk/api/Neon.Tailwind.TransitionGroup.html",
    "title": "Class TransitionGroup | NeonSDK documentation",
    "keywords": "Class TransitionGroup Inheritance Object ComponentBase TransitionGroup Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public class TransitionGroup : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Properties ChildContent Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description RenderFragment Show Declaration [Parameter] public bool Show { get; set; } Property Value Type Description Boolean Methods BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description RenderTreeBuilder builder Overrides ComponentBase.BuildRenderTree(RenderTreeBuilder) NotifyEndTransition() Declaration public void NotifyEndTransition() RegisterTransition(Transition) Declaration public void RegisterTransition(Transition transition) Parameters Type Name Description Transition transition"
  },
  "neonsdk/api/Neon.Tailwind.TransitionState.html": {
    "href": "neonsdk/api/Neon.Tailwind.TransitionState.html",
    "title": "Enum TransitionState | NeonSDK documentation",
    "keywords": "Enum TransitionState Namespace : Neon.Tailwind Assembly : Neon.Tailwind.dll Syntax public enum TransitionState Fields Name Description Entering Hidden Leaving Visible Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Tasks.Async.html": {
    "href": "neonsdk/api/Neon.Tasks.Async.html",
    "title": "Class Async | NeonSDK documentation",
    "keywords": "Class Async Task related utilities. Inheritance Object Async Namespace : Neon.Tasks Assembly : Neon.Common.dll Syntax public static class Async Methods ForEachAsync<TWorkItem>(IEnumerable<TWorkItem>, Func<TWorkItem, CancellationToken, Task>, CancellationToken, Int32) Iterates over a set of work items and executes an async action for each item. The method returns when all of the actions have completed. Declaration public static async Task ForEachAsync<TWorkItem>(IEnumerable<TWorkItem> workItems, Func<TWorkItem, CancellationToken, Task> action, CancellationToken cancellationToken, int maxParallel = 1) Parameters Type Name Description IEnumerable <TWorkItem> workItems The work item collection. Func <TWorkItem, CancellationToken , Task > action The async action to be executed on each work item. CancellationToken cancellationToken The cancellation token. Int32 maxParallel Optionally specifies the maximum number of tasks to execute in parallel (defaults to 1 ). Returns Type Description Task The tracking Task . Type Parameters Name Description TWorkItem The work item type. Remarks The actions will be executed on threads from the thread pool which means that the number of tasks that can be executed in parallel will be limited by the number of available pooled threads. note The order in which work items are executed is not defined. Exceptions Type Condition AggregateException Thrown when any of the actions failed. ForEachAsync<TWorkItem>(IEnumerable<TWorkItem>, Func<TWorkItem, Task>, Int32) Iterates over a set of work items and executes an async action for each item. The method returns when all of the actions have completed. Declaration public static async Task ForEachAsync<TWorkItem>(IEnumerable<TWorkItem> workItems, Func<TWorkItem, Task> action, int maxParallel = 1) Parameters Type Name Description IEnumerable <TWorkItem> workItems The work item collection. Func <TWorkItem, Task > action The async action to be executed on each work item. Int32 maxParallel Optionally specifies the maximum number of tasks to execute in parallel (defaults to 1 ). Returns Type Description Task The tracking Task . Type Parameters Name Description TWorkItem The work item type. Remarks The actions will be executed on threads from the thread pool which means that the number of tasks that can be executed in parallel will be limited by the number of available pooled threads. note The order in which work items are executed is not defined. Exceptions Type Condition AggregateException Thrown when any of the actions failed."
  },
  "neonsdk/api/Neon.Tasks.AsyncAutoResetEvent.html": {
    "href": "neonsdk/api/Neon.Tasks.AsyncAutoResetEvent.html",
    "title": "Class AsyncAutoResetEvent | NeonSDK documentation",
    "keywords": "Class AsyncAutoResetEvent Implements an async / await friendly equivalent of AutoResetEvent . Inheritance Object AsyncAutoResetEvent Namespace : Neon.Tasks Assembly : Neon.Common.dll Syntax public class AsyncAutoResetEvent : IDisposable Constructors AsyncAutoResetEvent(Boolean) Constructor. Declaration public AsyncAutoResetEvent(bool initialState = false) Parameters Type Name Description Boolean initialState Pass true to set the initial event state to signaled, false for unsignaled. Methods Close() Releases any important resources associated with the instance. Declaration public void Close() Remarks note This method will cause a ObjectDisposedException to be thrown on any task waiting on this event. Dispose() Releases any important resources associated with the instance. Declaration public void Dispose() Remarks note This method will cause a ObjectDisposedException to be thrown on any task waiting on this event. Dispose(Boolean) Releases any important resources associated with the instance. Declaration protected void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if the instance is being disposed as opposed to being finalized. Finalize() Finalizer. Declaration protected void Finalize() Reset() Sets the state of the event to unsignalled, so that tasks will have to wait. Declaration public void Reset() Set() Sets the state of the event to signalled allowing a single task that is currently waiting or the next task that waits on the event to proceed. Declaration public void Set() WaitAsync() Waits until the event is signalled. Declaration public NonDisposableTask WaitAsync() Returns Type Description NonDisposableTask"
  },
  "neonsdk/api/Neon.Tasks.AsyncManualResetEvent.html": {
    "href": "neonsdk/api/Neon.Tasks.AsyncManualResetEvent.html",
    "title": "Class AsyncManualResetEvent | NeonSDK documentation",
    "keywords": "Class AsyncManualResetEvent Implements an async / await friendly equivalent of ManualResetEvent . Inheritance Object AsyncManualResetEvent Namespace : Neon.Tasks Assembly : Neon.Common.dll Syntax public class AsyncManualResetEvent : IDisposable Constructors AsyncManualResetEvent(Boolean) Constructor. Declaration public AsyncManualResetEvent(bool initialState = false) Parameters Type Name Description Boolean initialState Pass true to set the initial event state to signaled, false for unsignaled. Methods Close() Releases any important resources associated with the instance. Declaration public void Close() Remarks note This method will cause a ObjectDisposedException to be thrown on any task waiting on this event. Dispose() Releases any important resources associated with the instance. Declaration public void Dispose() Remarks note This method will cause a ObjectDisposedException to be thrown on any task waiting on this event. Dispose(Boolean) Releases any important resources associated with the instance. Declaration protected void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if the instance is being disposed as opposed to being finalized. Finalize() Finalizer. Declaration protected void Finalize() Reset() Sets the state of the event to non-signalled, causing tasks to block. Declaration public void Reset() Set() Sets the state of the event to signalled allowing one or more waiting tasks to proceed. Declaration public void Set() Exceptions Type Condition ObjectDisposedException Thrown if the event has already been closed. WaitAsync() Wait asynchronously for the event to be signalled. Declaration public NonDisposableTask WaitAsync() Returns Type Description NonDisposableTask Exceptions Type Condition ObjectDisposedException Thrown if the event has already been closed or is closed before it is signalled."
  },
  "neonsdk/api/Neon.Tasks.AsyncMutex.html": {
    "href": "neonsdk/api/Neon.Tasks.AsyncMutex.html",
    "title": "Class AsyncMutex | NeonSDK documentation",
    "keywords": "Class AsyncMutex Implements an async / await friendly equivalent of Mutex . Inheritance Object AsyncMutex Namespace : Neon.Tasks Assembly : Neon.Common.dll Syntax public class AsyncMutex : IDisposable Remarks This class can be used to grant a task exclusive access to a resource. This class is pretty easy to use. Simply instantiate an instance and then call AcquireAsync() within a using statement: var mutex = new AsyncMutex(); using (await mutex.Acquire()) { // Protected code } note Be very sure to include the await within the using statement to avoid hard to debug problems. The await ensures that the using statement will dispose the acquired lock as opposed to the Task that returns the lock. Applications that cannot use a using statement may release the lock explicitly by disposing the object returned by the lock method, like this: var mutex = new AsyncMutex(); var myLock = await mutex.AcquireAsync(); // Protected code. myLock.Dispose(); AsyncMutex 's Dispose() method ensures that any tasks waiting for a lock will be unblocked with an ObjectDisposedException . REENTRANCY NOT SUPPORTED IMPORTANT: This class does not allow a single task to acquire the lock more than once. This differs from how the regular Mutex classes work which do allow a single thread to acquire the mutex more than once. This means that you cannot expect to acquire a mutex in a task and then call into a method that will also attempt to acquire the same mutex. Doing this will result in a deadlock. var mutex = new AsyncMutex(); using (await mutex.Acquire()) { using (await mutex.Acquire()) // $lt;--- This will block forever { // Protected code } } You can use AsyncReentrantMutex instead. Constructors AsyncMutex() Constructor. Declaration public AsyncMutex() Methods AcquireAsync() Acquires exclusive access to the mutex. Declaration public NonDisposableTask<IDisposable> AcquireAsync() Returns Type Description NonDisposableTask < IDisposable > The IDisposable instance to be disposed to release the lock. Exceptions Type Condition ObjectDisposedException Thrown if the mutex is disposed before or after this method is called. Close() Releases any important resources associated with the instance. Declaration public void Close() Remarks note This method will cause a ObjectDisposedException to be thrown on any task waiting to acquire this mutex. Dispose() Releases any important resources associated with the instance. Declaration public void Dispose() Remarks note This method will cause a ObjectDisposedException to be thrown on any task waiting to acquire this mutex. Dispose(Boolean) Releases any important resources associated with the instance. Declaration protected void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if the instance is being disposed as opposed to being finalized. Finalize() Finalizer. Declaration protected void Finalize()"
  },
  "neonsdk/api/Neon.Tasks.AsyncPeriodicTask.html": {
    "href": "neonsdk/api/Neon.Tasks.AsyncPeriodicTask.html",
    "title": "Class AsyncPeriodicTask | NeonSDK documentation",
    "keywords": "Class AsyncPeriodicTask Implements a common asynchronous coding pattern where an asynchronous operation is performed periodically and cancellation and exceptions are handled cleanly. Inheritance Object AsyncPeriodicTask Namespace : Neon.Tasks Assembly : Neon.Common.dll Syntax public sealed class AsyncPeriodicTask : IDisposable Remarks This class provides a nice way to implement the very common server side pattern where we need to periodically perform some operation until the operation signals that it's done or the task is canceled, while handling some of the messy exception handling details. You'll use the AsyncPeriodicTask(TimeSpan, Func<Task<Boolean>>, Func<Exception, Task<Boolean>>, Func<Task>, CancellationTokenSource) constructor to create a task, passing the task interval, asynchronous task handler and optional exception handler and cancellation token and then call Run() to execute the task. AsyncPeriodicTask will call the task handler, wait for the interval and then repeat. The task handler return false to continue running or true to signal that AsyncPeriodicTask should stop. AsyncPeriodicTask also monitors the cancellation token passed and watches for OperationCanceledException thrown by the task handler to stop itself. The exception handler will be called for all exceptions thrown by the task handler except for OperationCanceledException exceptions as these signal that AsyncPeriodicTask should terminate. Exception handlers return false to continue running or true to signal that AsyncPeriodicTask should stop. stop. Finally, an optional handler can be specified that will be called just before the AsyncPeriodicTask terminates. note This class implements IDisposable and the task will be terminated when this is called. Constructors AsyncPeriodicTask(TimeSpan, Func<Task<Boolean>>, Func<Exception, Task<Boolean>>, Func<Task>, CancellationTokenSource) Constructs a periodic task. Declaration public AsyncPeriodicTask(TimeSpan interval, Func<Task<bool>> onTaskAsync, Func<Exception, Task<bool>> onExceptionAsync = null, Func<Task> onTerminateAsync = null, CancellationTokenSource cancellationTokenSource = null) Parameters Type Name Description TimeSpan interval The interval between task executions. Func < Task < Boolean >> onTaskAsync Called periodically to implement the task. The callback should return true if the task should terminate. Func < Exception , Task < Boolean >> onExceptionAsync Optional callback that handles exceptions thrown by the task. The callback should return true if the task should terminate. Func < Task > onTerminateAsync Optional callback that will be called just before the task terminates. CancellationTokenSource cancellationTokenSource Optionally specifies the CancellationTokenSource that can be used to stop the task. Properties CancellationTokenSource Returns the cancellation token. Declaration public CancellationTokenSource CancellationTokenSource { get; } Property Value Type Description CancellationTokenSource Interval Returns the task interval. Declaration public TimeSpan Interval { get; } Property Value Type Description TimeSpan Methods Dispose() Stops the task if it's running. Declaration public void Dispose() Run() Asynchronously executes the task until it exits or is canceled. Declaration public async Task Run() Returns Type Description Task"
  },
  "neonsdk/api/Neon.Tasks.AsyncReaderWriterLock.html": {
    "href": "neonsdk/api/Neon.Tasks.AsyncReaderWriterLock.html",
    "title": "Class AsyncReaderWriterLock | NeonSDK documentation",
    "keywords": "Class AsyncReaderWriterLock Implements an async / await friendly equivalent of ReaderWriterLock . Inheritance Object AsyncReaderWriterLock Namespace : Neon.Tasks Assembly : Neon.Common.dll Syntax public class AsyncReaderWriterLock : IDisposable Remarks This class can be used to grant a single writer task exclusive access to a resource or multiple reader tasks. This class is pretty easy to use. Simply instantiate an instance and then call GetReadLockAsync() or GetWriteLockAsync() within a using statement: var rwLock = new AsyncReaderWriterLock(); using (await rwLock.GetReadLockAsync()) { // Protected reading code } using (await rwLock.GetWriteLockAsync()) { // Protected writing code } note Be very sure to include the await within the using statement to avoid hard to debug problems. The await ensures that the using statement will dispose the acquired lock as opposed to the Task that returns the lock. Applications that cannot use a using statement may release the lock explicitly by disposing the object returned by the lock method, like this: var rwLock = new AsyncReaderWriterLock(); var readLock = await rwLock.GetReadLockAsync(); // Protected reading code. readLock.Dispose(); AsyncReaderWriterLock 's Dispose() method ensures that any tasks waiting for a lock will be unblocked with an ObjectDisposedException . This class is implemented is fairly simple and always favors writers over readers. Also, all waiting readers will be released together. note AsyncReaderWriterLock does not support any kind of reentrant Task locking support. Child tasks will be considered to be completely independent of the parent and will not inherit the parent's lock and a single task will not be able to acquire the same lock multiple times. Constructors AsyncReaderWriterLock() Constructor. Declaration public AsyncReaderWriterLock() Methods Close() Releases any important resources associated with the instance. Declaration public void Close() Remarks note This method will cause a ObjectDisposedException to be thrown on any task waiting to acquire this lock. Dispose() Releases any important resources associated with the instance. Declaration public void Dispose() Remarks note This method will cause a ObjectDisposedException to be thrown on any task waiting to acquire this lock. Dispose(Boolean) Releases any important resources associated with the instance. Declaration protected void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if the instance is being disposed as opposed to being finalized. Finalize() Finalizer. Declaration protected void Finalize() GetReadLockAsync() Acquires a non-exclusive read lock. Declaration public Task<IDisposable> GetReadLockAsync() Returns Type Description Task < IDisposable > The IDisposable instance to be disposed to release the lock. Remarks note This class allows multiple readers to hold the lock at any given time but requires that writers have exclusive access. Writers are given priority over readers. Exceptions Type Condition ObjectDisposedException Thrown if the lock is disposed before or after this method is called. GetWriteLockAsync() Acquires an exclusive write lock. Declaration public NonDisposableTask<IDisposable> GetWriteLockAsync() Returns Type Description NonDisposableTask < IDisposable > The IDisposable instance to be disposed to release the lock. Remarks note This class allows multiple readers to hold the lock at any given time but requires that writers have exclusive access. Writers are given priority over readers. Exceptions Type Condition ObjectDisposedException Thrown if the lock is disposed before or after this method is called."
  },
  "neonsdk/api/Neon.Tasks.AsyncReentrantMutex.html": {
    "href": "neonsdk/api/Neon.Tasks.AsyncReentrantMutex.html",
    "title": "Class AsyncReentrantMutex | NeonSDK documentation",
    "keywords": "Class AsyncReentrantMutex Extends AsyncMutex to support reentrancy. Inheritance Object AsyncReentrantMutex Namespace : Neon.Tasks Assembly : Neon.Common.dll Syntax public class AsyncReentrantMutex : IDisposable Remarks Unlike the AsyncMutex class, this class supports reentrency, meaning that once an asynchronous Task flow has acquired the mutex, any additional acquistions by nested operations will also be accepted. var mutex = new AsyncReentrantMutex(); await mutex.ExecuteActionAsync( async () => { // Protected code await mutex.ExecuteActionAsync( // <--- This doesn't block async () => { // More protected code }); }); The ExecuteFuncAsync<TResult>(Func<Task<TResult>>) can be used to execute an async function that returns a result instead. AsyncReentrantMutex is disposable. Calling dispose will cause ObjectDisposedException to be thrown on any tasks waiting to acquire the mutex. Constructors AsyncReentrantMutex() Constructor. Declaration public AsyncReentrantMutex() Methods Dispose() Releases any important resources associated with the instance. Declaration public void Dispose() Remarks note This method will cause a ObjectDisposedException to be thrown on any task waiting to acquire this mutex. Dispose(Boolean) Releases any important resources associated with the instance. Declaration protected void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if the instance is being disposed as opposed to being finalized. ExecuteActionAsync(Func<Task>) Acquires the mutex and then invokes the asynchronous action passed. This method returns after the action completes. Declaration public async Task ExecuteActionAsync(Func<Task> action) Parameters Type Name Description Func < Task > action The asynchronous action. Returns Type Description Task The tracking Task . ExecuteFuncAsync<TResult>(Func<Task<TResult>>) Acquires the mutex and then invokes the asynchronous function passed, returning the function's result. Declaration public async Task<TResult> ExecuteFuncAsync<TResult>(Func<Task<TResult>> function) Parameters Type Name Description Func < Task <TResult>> function The asynchronous function. Returns Type Description Task <TResult> The function result. Type Parameters Name Description TResult Specifies the result returned by the async function. Finalize() Finalizer. Declaration protected void Finalize()"
  },
  "neonsdk/api/Neon.Tasks.AsyncTimer.html": {
    "href": "neonsdk/api/Neon.Tasks.AsyncTimer.html",
    "title": "Class AsyncTimer | NeonSDK documentation",
    "keywords": "Class AsyncTimer Implements a timer that runs on a background Task . Inheritance Object AsyncTimer Namespace : Neon.Tasks Assembly : Neon.Common.dll Syntax public class AsyncTimer : IDisposable Remarks This class is pretty easy to use. Simply use the AsyncTimer(Func<Task>) constructor to create an instance, passing the async callback to be called when the timer fires and then call Start(TimeSpan, Boolean, Func<Task>) to start the timer, passing the timer interval. Start(TimeSpan, Boolean, Func<Task>) starts a background task that fires the callback at the interval specified. You can call Start(TimeSpan, Boolean, Func<Task>) again to restart the timer with a different interval. The IsRunning property can be used to determine whether a timer is running or not. Call Stop() to stop a timer. Start(TimeSpan, Boolean, Func<Task>) may be called again to restart the timer. note This class implements IDisposable so this should be called for every instance created or Stop() should be called explicitly. note This class handles any exceptions thrown by the callback by logging them to the default TelemetryHub and then continuing on with firing ticks. You'll need to add a try/catch to your callback to do your own exception handling. Constructors AsyncTimer(Func<Task>) Constructor. Declaration public AsyncTimer(Func<Task> callback = null) Parameters Type Name Description Func < Task > callback Optionally specifies the callback. Properties Interval Returns the timer interval. Declaration public TimeSpan Interval { get; } Property Value Type Description TimeSpan IsRunning Indicates whether the timer is currently running. note This returns Zero until Start(TimeSpan, Boolean, Func<Task>) is called for the first time. Declaration public bool IsRunning { get; } Property Value Type Description Boolean Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Releases any important resources associated with the instance. Declaration protected void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if the instance is being disposed as opposed to being finalized. Finalize() Finalizer. Declaration protected void Finalize() Start(TimeSpan, Boolean, Func<Task>) Starts or restarts the timer. The interval must be specified as a positive interval when the timer is first started but this is optional thereafter, defaulting to value from the original Start(TimeSpan, Boolean, Func<Task>) call. Declaration public void Start(TimeSpan interval = default(TimeSpan), bool delayFirstTick = false, Func<Task> callback = null) Parameters Type Name Description TimeSpan interval Optionally specifies the timer interval. Boolean delayFirstTick The callback is called immediately by default. You can delay this for interval by passing this as true . This defaults to false . Func < Task > callback Optionally specifies the timer callback. note This must be specified if no callback was passed to the constructor or a previous call to Start(TimeSpan, Boolean, Func<Task>) . Exceptions Type Condition InvalidOperationException Thrown if this is the first time Start(TimeSpan, Boolean, Func<Task>) is called for the instance and interval is not passed or when callback is null and no callback was specified in constructor or a previous call to Start(TimeSpan, Boolean, Func<Task>) . ObjectDisposedException Thrown then the instance is disposed. Stop() Stops the timer. Declaration public void Stop() Exceptions Type Condition ObjectDisposedException Thrown then the instance is disposed."
  },
  "neonsdk/api/Neon.Tasks.html": {
    "href": "neonsdk/api/Neon.Tasks.html",
    "title": "Namespace Neon.Tasks | NeonSDK documentation",
    "keywords": "Namespace Neon.Tasks Classes Async Task related utilities. AsyncAutoResetEvent Implements an async / await friendly equivalent of AutoResetEvent . AsyncManualResetEvent Implements an async / await friendly equivalent of ManualResetEvent . AsyncMutex Implements an async / await friendly equivalent of Mutex . AsyncPeriodicTask Implements a common asynchronous coding pattern where an asynchronous operation is performed periodically and cancellation and exceptions are handled cleanly. AsyncReaderWriterLock Implements an async / await friendly equivalent of ReaderWriterLock . AsyncReentrantMutex Extends AsyncMutex to support reentrancy. AsyncTimer Implements a timer that runs on a background Task . Structs NonDisposableTask Used to convert a Task into an awaitable that that does not implement IDisposable . This is useful for avoiding confusion and hard to debug problems when async methods return an IDisposable intended to be referenced in a using statement. It is very easy to forget the await keyword in this situation and because Task also implements IDisposable , there will be no compiler error or warning. Wrapping the task with this structure addresses this. NonDisposableTask<T> Used to convert a Task<TResult> into an awaitable that that does not implement IDisposable . This is useful for avoiding confusion and hard to debug problems when async methods return an IDisposable intended to be referenced in a using statement. It is very easy to forget the await keyword in this situation and because Task<TResult> also implements IDisposable , there will be no compiler error or warning. Wrapping the task with this structure addresses this. SyncContext Used by public async library methods to reset the current task SynchronizationContext so that continuations won't be marshalled back to the current thread which can cause serious problems for UI apps. Interfaces IAsyncFuture Defines an interface that completes a future operation asynchronously. IAsyncFuture<T> Defines an interface that returns the value from the asynchronous operation. Enums SyncContextMode Enumerates the SyncContext modes, configured by setting Mode ."
  },
  "neonsdk/api/Neon.Tasks.IAsyncFuture.html": {
    "href": "neonsdk/api/Neon.Tasks.IAsyncFuture.html",
    "title": "Interface IAsyncFuture | NeonSDK documentation",
    "keywords": "Interface IAsyncFuture Defines an interface that completes a future operation asynchronously. Namespace : Neon.Tasks Assembly : Neon.Common.dll Syntax public interface IAsyncFuture Methods GetAsync() Returns when the asynchronous operation has completed. Declaration Task GetAsync() Returns Type Description Task The tracking Task ."
  },
  "neonsdk/api/Neon.Tasks.IAsyncFuture-1.html": {
    "href": "neonsdk/api/Neon.Tasks.IAsyncFuture-1.html",
    "title": "Interface IAsyncFuture<T> | NeonSDK documentation",
    "keywords": "Interface IAsyncFuture<T> Defines an interface that returns the value from the asynchronous operation. Namespace : Neon.Tasks Assembly : Neon.Common.dll Syntax public interface IAsyncFuture<T> Type Parameters Name Description T The result type. Methods GetAsync() Returns the value from the operation. Declaration Task<T> GetAsync() Returns Type Description Task <T> The future."
  },
  "neonsdk/api/Neon.Tasks.NonDisposableTask.html": {
    "href": "neonsdk/api/Neon.Tasks.NonDisposableTask.html",
    "title": "Struct NonDisposableTask | NeonSDK documentation",
    "keywords": "Struct NonDisposableTask Used to convert a Task into an awaitable that that does not implement IDisposable . This is useful for avoiding confusion and hard to debug problems when async methods return an IDisposable intended to be referenced in a using statement. It is very easy to forget the await keyword in this situation and because Task also implements IDisposable , there will be no compiler error or warning. Wrapping the task with this structure addresses this. Namespace : Neon.Tasks Assembly : Neon.Common.dll Syntax public struct NonDisposableTask Constructors NonDisposableTask(Task) Constructor. Declaration public NonDisposableTask(Task task) Parameters Type Name Description Task task The task being wrapped. Methods GetAwaiter() Returns the task's awaiter. Declaration public TaskAwaiter GetAwaiter() Returns Type Description TaskAwaiter"
  },
  "neonsdk/api/Neon.Tasks.NonDisposableTask-1.html": {
    "href": "neonsdk/api/Neon.Tasks.NonDisposableTask-1.html",
    "title": "Struct NonDisposableTask<T> | NeonSDK documentation",
    "keywords": "Struct NonDisposableTask<T> Used to convert a Task<TResult> into an awaitable that that does not implement IDisposable . This is useful for avoiding confusion and hard to debug problems when async methods return an IDisposable intended to be referenced in a using statement. It is very easy to forget the await keyword in this situation and because Task<TResult> also implements IDisposable , there will be no compiler error or warning. Wrapping the task with this structure addresses this. Namespace : Neon.Tasks Assembly : Neon.Common.dll Syntax public struct NonDisposableTask<T> Type Parameters Name Description T The task result type. Constructors NonDisposableTask(Task<T>) Constructor. Declaration public NonDisposableTask(Task<T> task) Parameters Type Name Description Task <T> task The task being wrapped. Methods GetAwaiter() Returns the task's awaiter. Declaration public TaskAwaiter<T> GetAwaiter() Returns Type Description TaskAwaiter <T>"
  },
  "neonsdk/api/Neon.Tasks.SyncContext.html": {
    "href": "neonsdk/api/Neon.Tasks.SyncContext.html",
    "title": "Struct SyncContext | NeonSDK documentation",
    "keywords": "Struct SyncContext Used by public async library methods to reset the current task SynchronizationContext so that continuations won't be marshalled back to the current thread which can cause serious problems for UI apps. Namespace : Neon.Tasks Assembly : Neon.Common.dll Syntax public struct SyncContext : INotifyCompletion Remarks This class was adapted from this blog post: I renamed the structure, converted it into a singleton and added an optional Yield() call and a global mode to tune the operation for server vs. UI applications. The async/await pattern is more complex than it seems because the code after the await may run on the same thread that performed the await in some circumstances (e.g. for UI applications) or on another thread in other environments. Library code needs to adapt to both situations. UI platforms like WinForms, WPF, UXP,... require that all user interface manipulation happen on the UI thread and the synchronization context in these cases will be configured to have all awaits default to continuing on the calling (typically UI) thread to make it easy for developers to await a long running operation and then update the UI afterwards. The problem for UI applications is that if the awaited operation internally awaits on additional operations (which is quite common), then each of the internal operations will also continue on the UI thread. This can be big problem because there's only one UI thread and continuing on the UI thread means that the operation needs to be queued to the application's dispatcher possibly leading to serious performance and usability issues. This is less of a problem for console and server apps where awaited operations generally continue on any free threadpool thread, but Task scheduling can be customized so this isn't necessarily always the case. As the blog post linked above describes, developers are encouraged to call ConfigureAwait(Boolean) , passing false for every async call where the result doesn't need to be marshalled back to the original synchronization context. Non-UI class libraries typically don't care about this. The problem is that to do this properly, MSFT recommends that you call Task.ConfigureAwait(false) on EVERY async call you made in these situations. This is pretty ugly and will be tough to enforce on large projects over long periods of time because it's just too easy to miss one. It's also likely that async library methods will be called serveral, perhaps hundreds of times by applications and it's a shame to require application developers to call ConfigureAwait(Boolean) everywhere rather than somehow having the library APIs handle this. This struct implements a custom awaiter that saves the current synchronization context and then clears it for the rest of the current method execution and then restores the original context when when the method returns. This means that every subsequent await performed within the method will simply fetch a pool thread to continue execution, rather than to the original context thread. To accomplish this, you'll simply await Clear at or near the top of your async methods: The global Mode property controls what the Clear method actually does. This defaults to ClearOnly which turns Clear into a NOP which is probably suitable for most non-UI applications that reduce overhead and increase performance. UI applications should probably set the ClearAndYield which prevents nested method continuations from running on the UI thread and also ensures that any initial synchronous code won't run on the UI thread either. using Neon.Task; public async Task<string> HelloAsync() { // On UI thread await SyncContext.Clear; // On background thread SlowSyncOperation(); // On background thread await DoSomthingAsync(); // On background thread await DoSomethingElseAsync(); // On background thread return \"Hello World!\"; } public async Task Main(string[] args) { // Set a mode suitable for UI apps. SyncContext.Mode = SyncContextMode.ClearAndYield; // Assume that we're running on a UI thread here. var greeting = await HelloAsync(); // On UI thread } This example sets the ClearAndYield mode and then awaits HelloAsync() which clears the sync context and then performs a long running synchronous operation and then two async operations. Note how all of the continuations in HelloAsync() after the clear are running on a background thread but the continuation after await HelloAsync() is back to running on the UI thread. This is pretty close to being ideal behavior. Properties Clear await this singleton to clear the current synchronization context for the scope of the current method as a potential performance optimization. The original context will be restored when the method returns. Declaration public static SyncContext Clear { get; } Property Value Type Description SyncContext Remarks You'll typically at or near the top of your method. This will look something like: using Neon.Task; public async Task<string> HelloAsync() { await SyncContext.Clear; await DoSomthingAsync(); await DoSomethingElseAsync(); return \"Hello World!\"; } note Clear is not a method. Awaiting this property clears the current synchronization context such that the subsequent async calls will each marshal back to threads obtained from the thread pool and due to the compiler's async magic, the original synchronization context will be restored before the HelloAsync() method returns. The Mode property controls what awaiting Clear actually does. This defaults to ClearOnly which is probably suitable for most non-UI applications. UI applications will probably want to explicitly set ClearAndYield to help keep continations off the UI thread, which is often desirable. IsCompleted INTERNAL USE ONLY: Do not call this directly. Declaration public readonly bool IsCompleted { get; } Property Value Type Description Boolean Mode Used to control what Clear actually does. This defaults to ClearOnly which is probably suitable for most non-UI applications by reducing task overhead. UI application will probably want to set ClearAndYield to keep work from running on the UI thread. This defaults to ClearOnly for server code, because we're writing more server applications than UI applications these days. Declaration public static SyncContextMode Mode { get; set; } Property Value Type Description SyncContextMode Methods GetAwaiter() INTERNAL USE ONLY: Do not call this directly. Declaration public SyncContext GetAwaiter() Returns Type Description SyncContext GetResult() INTERNAL USE ONLY: Do not call this directly. Declaration public void GetResult() OnCompleted(Action) INTERNAL USE ONLY: Do not call this directly. Declaration public void OnCompleted(Action continuation) Parameters Type Name Description Action continuation The continuation action."
  },
  "neonsdk/api/Neon.Tasks.SyncContextMode.html": {
    "href": "neonsdk/api/Neon.Tasks.SyncContextMode.html",
    "title": "Enum SyncContextMode | NeonSDK documentation",
    "keywords": "Enum SyncContextMode Enumerates the SyncContext modes, configured by setting Mode . Namespace : Neon.Tasks Assembly : Neon.Common.dll Syntax public enum SyncContextMode Fields Name Description ClearAndYield Enables await SyncContext.Clear; such that the continuations within the nested scope of the method will not happen on the original thread and that the awaitee can immediately release the current thread for other uses. This mode is useful for UI applications because it ensures that any synchronous operations won't be executed on the original thread. ClearOnly Enables await SyncContext.Clear; such that the continuations within the nested scope of the method will not happen on the original thread. This mode is the default and is generally suitable for server and other non-UI applications. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Time.GatedTimer.html": {
    "href": "neonsdk/api/Neon.Time.GatedTimer.html",
    "title": "Class GatedTimer | NeonSDK documentation",
    "keywords": "Class GatedTimer Implements a timer that allows only one thread at a time to process timer events. Inheritance Object GatedTimer Namespace : Neon.Time Assembly : Neon.Common.dll Syntax public class GatedTimer : IDisposable Remarks This is necessary to because the Timer class will continue firing thread handlers even if a long-running thread is still handling an earlier timer event. Constructors GatedTimer(TimerCallback, Object, TimeSpan) Initializes and starts the timer. Declaration public GatedTimer(TimerCallback callback, object state, TimeSpan period) Parameters Type Name Description TimerCallback callback The callback to be called when the timer fires. Object state Application state. TimeSpan period Time to wait between firing events. GatedTimer(TimerCallback, Object, TimeSpan, TimeSpan) Initializes and starts the timer. Declaration public GatedTimer(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period) Parameters Type Name Description TimerCallback callback The callback to be called when the timer fires. Object state Application state. TimeSpan dueTime Time to wait before firing the first event. TimeSpan period Time to wait between firing events. Methods Change(TimeSpan, TimeSpan) Modifies the timer. Declaration public void Change(TimeSpan dueTime, TimeSpan period) Parameters Type Name Description TimeSpan dueTime Time to wait before firing the first event. TimeSpan period Time to wait between firing events. Dispose() Releases all resources associated with the timer. Declaration public void Dispose() Dispose(Boolean) Releases any important resources associated with the instance. Declaration protected void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if the instance is being disposed as opposed to being finalized. Finalize() Finalizer. Declaration protected void Finalize()"
  },
  "neonsdk/api/Neon.Time.GoDuration.html": {
    "href": "neonsdk/api/Neon.Time.GoDuration.html",
    "title": "Struct GoDuration | NeonSDK documentation",
    "keywords": "Struct GoDuration Implements support for GO Language formatted durations. This class is useful for integrating with GO applications. Namespace : Neon.Time Assembly : Neon.Common.dll Syntax public struct GoDuration Remarks note GoDuration measures time down 1 nanosecond resolution whereas TimeSpan 's resolution is 100ns and both implementations use a signed 64-bit integer as the underlying representation. This means that GoDuration can represent of maximum duration of about 290 years (positive and negative) where TimeSpan can handle about 29,000 years. This class will throw a ArgumentOutOfRangeException when converting a TimeSpan that is beyound the capability of a GoDuration . Constructors GoDuration(Int64) Constructs a GoDuration from nanoseconds. Declaration public GoDuration(long nanoseconds) Parameters Type Name Description Int64 nanoseconds The duration in nanoseconds. GoDuration(TimeSpan) Constructs an instance from a TimeSpan . Declaration public GoDuration(TimeSpan timespan) Parameters Type Name Description TimeSpan timespan The time span. Exceptions Type Condition ArgumentOutOfRangeException Thrown if the input is outside the capability of a GoDuration . Fields PartialRegEx The partial regular expression that can be used to validate GOLANG duration strings. This does not include the start/end anchors and is suitable for situations where these are implied. Declaration public const string PartialRegEx = \"0|(((\\\\d+(\\\\.\\\\d+)?h)(\\\\d+(\\\\.\\\\d+)?m)?(\\\\d+(\\\\.\\\\d+)?s)?(\\\\d+(\\\\.\\\\d+)?ms)?((\\\\d+(\\\\.\\\\d+)?us)|(\\\\d+(.\\\\d+)?µs))?(\\\\d+(\\\\.\\\\d+)?ns)?)|((\\\\d+(\\\\.\\\\d+)?h)?(\\\\d+(\\\\.\\\\d+)?m)(\\\\d+(\\\\.\\\\d+)?s)?(\\\\d+(\\\\.\\\\d+)?ms)?((\\\\d+(\\\\.\\\\d+)?us)|(\\\\d+(.\\\\d+)?µs))?(\\\\d+(\\\\.\\\\d+)?ns)?)|((\\\\d+(\\\\.\\\\d+)?h)?(\\\\d+(\\\\.\\\\d+)?m)?(\\\\d+(\\\\.\\\\d+)?s)(\\\\d+(\\\\.\\\\d+)?ms)?((\\\\d+(\\\\.\\\\d+)?us)|(\\\\d+(.\\\\d+)?µs))?(\\\\d+(\\\\.\\\\d+)?ns)?)|((\\\\d+(\\\\.\\\\d+)?h)?(\\\\d+(\\\\.\\\\d+)?m)?(\\\\d+(\\\\.\\\\d+)?s)?(\\\\d+(\\\\.\\\\d+)?ms)((\\\\d+(\\\\.\\\\d+)?us)|(\\\\d+(.\\\\d+)?µs))?(\\\\d+(\\\\.\\\\d+)?ns)?)|((\\\\d+(\\\\.\\\\d+)?h)?(\\\\d+(\\\\.\\\\d+)?m)?(\\\\d+(\\\\.\\\\d+)?s)?(\\\\d+(\\\\.\\\\d+)?ms)?((\\\\d+(\\\\.\\\\d+)?us)|(\\\\d+(.\\\\d+)?µs))(\\\\d+(\\\\.\\\\d+)?ns)?)|((\\\\d+(\\\\.\\\\d+)?h)?(\\\\d+(\\\\.\\\\d+)?m)?(\\\\d+(\\\\.\\\\d+)?s)?(\\\\d+(\\\\.\\\\d+)?ms)?((\\\\d+(\\\\.\\\\d+)?us)|(\\\\d+(.\\\\d+)?µs))?(\\\\d+(\\\\.\\\\d+)?ns)))\" Field Value Type Description String RegEx The full regular expression (including start/end anchors) use to validate GOLANG duration strings. Declaration public const string RegEx = \"^(0|(((\\\\d+(\\\\.\\\\d+)?h)(\\\\d+(\\\\.\\\\d+)?m)?(\\\\d+(\\\\.\\\\d+)?s)?(\\\\d+(\\\\.\\\\d+)?ms)?((\\\\d+(\\\\.\\\\d+)?us)|(\\\\d+(.\\\\d+)?µs))?(\\\\d+(\\\\.\\\\d+)?ns)?)|((\\\\d+(\\\\.\\\\d+)?h)?(\\\\d+(\\\\.\\\\d+)?m)(\\\\d+(\\\\.\\\\d+)?s)?(\\\\d+(\\\\.\\\\d+)?ms)?((\\\\d+(\\\\.\\\\d+)?us)|(\\\\d+(.\\\\d+)?µs))?(\\\\d+(\\\\.\\\\d+)?ns)?)|((\\\\d+(\\\\.\\\\d+)?h)?(\\\\d+(\\\\.\\\\d+)?m)?(\\\\d+(\\\\.\\\\d+)?s)(\\\\d+(\\\\.\\\\d+)?ms)?((\\\\d+(\\\\.\\\\d+)?us)|(\\\\d+(.\\\\d+)?µs))?(\\\\d+(\\\\.\\\\d+)?ns)?)|((\\\\d+(\\\\.\\\\d+)?h)?(\\\\d+(\\\\.\\\\d+)?m)?(\\\\d+(\\\\.\\\\d+)?s)?(\\\\d+(\\\\.\\\\d+)?ms)((\\\\d+(\\\\.\\\\d+)?us)|(\\\\d+(.\\\\d+)?µs))?(\\\\d+(\\\\.\\\\d+)?ns)?)|((\\\\d+(\\\\.\\\\d+)?h)?(\\\\d+(\\\\.\\\\d+)?m)?(\\\\d+(\\\\.\\\\d+)?s)?(\\\\d+(\\\\.\\\\d+)?ms)?((\\\\d+(\\\\.\\\\d+)?us)|(\\\\d+(.\\\\d+)?µs))(\\\\d+(\\\\.\\\\d+)?ns)?)|((\\\\d+(\\\\.\\\\d+)?h)?(\\\\d+(\\\\.\\\\d+)?m)?(\\\\d+(\\\\.\\\\d+)?s)?(\\\\d+(\\\\.\\\\d+)?ms)?((\\\\d+(\\\\.\\\\d+)?us)|(\\\\d+(.\\\\d+)?µs))?(\\\\d+(\\\\.\\\\d+)?ns))))$\" Field Value Type Description String TicksPerHour The number of nanosecond ticks per minute. Declaration public const long TicksPerHour = 3600000000000L Field Value Type Description Int64 TicksPerMicrosecond The number of nanosecond ticks per micrososecond. Declaration public const long TicksPerMicrosecond = 1000L Field Value Type Description Int64 TicksPerMillisecond The number of nanosecond ticks per millisecond. Declaration public const long TicksPerMillisecond = 1000000L Field Value Type Description Int64 TicksPerMinute The number of nanosecond ticks per minute. Declaration public const long TicksPerMinute = 60000000000L Field Value Type Description Int64 TicksPerSecond The number of nanosecond ticks per second; Declaration public const long TicksPerSecond = 1000000000L Field Value Type Description Int64 Properties Hours Returns the hours component of the duration. Declaration public readonly long Hours { get; } Property Value Type Description Int64 MaxValue Returns the maximum possible GoDuration . Declaration public static GoDuration MaxValue { get; } Property Value Type Description GoDuration Microseconds Returns the microsecond component of the duration. Declaration public readonly long Microseconds { get; } Property Value Type Description Int64 Milliseconds Returns the millisecond component of the duration. Declaration public readonly long Milliseconds { get; } Property Value Type Description Int64 Minutes Returns the minutes component of the duration. Declaration public readonly long Minutes { get; } Property Value Type Description Int64 MinValue Returns the minimum possible GoDuration . Declaration public static GoDuration MinValue { get; } Property Value Type Description GoDuration Nanoseconds Returns the nanosecond component of the duration. Declaration public readonly long Nanoseconds { get; } Property Value Type Description Int64 Seconds Returns the second component of the duration. Declaration public readonly long Seconds { get; } Property Value Type Description Int64 Ticks The duration expressed as nanosecond ticks. Declaration public long Ticks { readonly get; } Property Value Type Description Int64 TimeSpan Returns the equivalent TimeSpan . Declaration public readonly TimeSpan TimeSpan { get; } Property Value Type Description TimeSpan TotalHours Returns the total number of hours. Declaration public readonly double TotalHours { get; } Property Value Type Description Double TotalMicroseconds Returns the total number of microseconds. Declaration public readonly double TotalMicroseconds { get; } Property Value Type Description Double TotalMilliseconds Returns the total number of milliseconds. Declaration public readonly double TotalMilliseconds { get; } Property Value Type Description Double TotalMinutes Returns the total number of minutes. Declaration public readonly double TotalMinutes { get; } Property Value Type Description Double TotalNanoseconds Returns the duration as nanoseconds. Declaration public readonly double TotalNanoseconds { get; } Property Value Type Description Double TotalSeconds Returns the total number of seconds. Declaration public readonly double TotalSeconds { get; } Property Value Type Description Double Zero Returns a zero GoDuration . Declaration public static GoDuration Zero { get; } Property Value Type Description GoDuration Methods FromHours(Double) Returns a GoDuration from hours. Declaration public static GoDuration FromHours(double hours) Parameters Type Name Description Double hours The duration in hours. Returns Type Description GoDuration The new GoDuration . Exceptions Type Condition ArgumentOutOfRangeException Thrown if the input is outside the capability of a GoDuration . FromMicroseconds(Double) Returns a GoDuration from microseconds. Declaration public static GoDuration FromMicroseconds(double milliseconds) Parameters Type Name Description Double milliseconds The duration in microseconds. Returns Type Description GoDuration The new GoDuration . Exceptions Type Condition ArgumentOutOfRangeException Thrown if the input is outside the capability of a GoDuration . FromMilliseconds(Double) Returns a GoDuration from milliseconds. Declaration public static GoDuration FromMilliseconds(double milliseconds) Parameters Type Name Description Double milliseconds The duration in milliseconds. Returns Type Description GoDuration The new GoDuration . Exceptions Type Condition ArgumentOutOfRangeException Thrown if the input is outside the capability of a GoDuration . FromMinutes(Double) Returns a GoDuration from minutes. Declaration public static GoDuration FromMinutes(double minutes) Parameters Type Name Description Double minutes The duration in minutes. Returns Type Description GoDuration The new GoDuration . Exceptions Type Condition ArgumentOutOfRangeException Thrown if the input is outside the capability of a GoDuration . FromNanoseconds(Int64) Returns a GoDuration from nanoseconds. Declaration public static GoDuration FromNanoseconds(long nanoseconds) Parameters Type Name Description Int64 nanoseconds The duration in nanoseconds. Returns Type Description GoDuration The new GoDuration . FromSeconds(Double) Returns a GoDuration from seconds. Declaration public static GoDuration FromSeconds(double seconds) Parameters Type Name Description Double seconds The duration in seconds. Returns Type Description GoDuration The new GoDuration . Exceptions Type Condition ArgumentOutOfRangeException Thrown if the input is outside the capability of a GoDuration . FromTimeSpan(TimeSpan) Creates a GoDuration from a TimeSpan . Declaration public static GoDuration FromTimeSpan(TimeSpan timespan) Parameters Type Name Description TimeSpan timespan The input time span. Returns Type Description GoDuration The new GoDuration . Parse(String) Parses a GoDuration from a string. Declaration public static GoDuration Parse(string input) Parameters Type Name Description String input The input string. Returns Type Description GoDuration The parsed GoDuration . Remarks The input is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". note null or empty strings are parsed as Zero . note GO timespans are limited to about 290 years (the maximum number of nanoseconds that can be represented in a signed 64-bit integer). Exceptions Type Condition FormatException Thrown if the input is not valid. ToPretty() Renders the duration into a string including hour, minute, and seconds with fractions as required, avoiding millisecond, microsecond, and nanosecond units. Declaration public string ToPretty() Returns Type Description String The pretty string. ToString() Renders the time span as a GO Duration compatible string. Declaration public override string ToString() Returns Type Description String The GO duration. Overrides ValueType.ToString() TryParse(String, out GoDuration) Attempts to parse a GO formatted timespan. Declaration public static bool TryParse(string input, out GoDuration goTimeSpan) Parameters Type Name Description String input The input string. GoDuration goTimeSpan Returns as the parsed timespan on success. Returns Type Description Boolean true on success. Remarks The input is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". note GO timespans are limited to about 290 years (the maximum number of nanoseconds that can be represented in a signed 64-bit integer). Operators Implicit(GoDuration to TimeSpan) Implicitly converts a GoDuration into a TimeSpan . Declaration public static implicit operator TimeSpan(GoDuration goTimeSpan) Parameters Type Name Description GoDuration goTimeSpan The input GoDuration . Returns Type Description TimeSpan The equivalent TimeSpan . Implicit(TimeSpan to GoDuration) Implicitly converts a TimeSpan into a GoDuration . Declaration public static implicit operator GoDuration(TimeSpan timespan) Parameters Type Name Description TimeSpan timespan The input TimeSpan . Returns Type Description GoDuration The equivalent GoDuration ."
  },
  "neonsdk/api/Neon.Time.html": {
    "href": "neonsdk/api/Neon.Time.html",
    "title": "Namespace Neon.Time | NeonSDK documentation",
    "keywords": "Namespace Neon.Time Classes GatedTimer Implements a timer that allows only one thread at a time to process timer events. PolledTimer Implements a timer suitable for use in scenarios that need to poll periodically to see if an action needs to be performed. RecurringTimer Used to manage tasks that need to be performed on a periodic basis. SysTime A date/time implementation that is guaranteed to be monotonically increasing even as the underlying system time is updated manually or automatically to adjust for daylight savings time or clock skewing. Structs GoDuration Implements support for GO Language formatted durations. This class is useful for integrating with GO applications. TimeOfDay Represents the time offset since the beginning of the day. Enums RecurringTimerType Enumerates the possible RecurringTimer types."
  },
  "neonsdk/api/Neon.Time.PolledTimer.html": {
    "href": "neonsdk/api/Neon.Time.PolledTimer.html",
    "title": "Class PolledTimer | NeonSDK documentation",
    "keywords": "Class PolledTimer Implements a timer suitable for use in scenarios that need to poll periodically to see if an action needs to be performed. Inheritance Object PolledTimer Namespace : Neon.Time Assembly : Neon.Common.dll Syntax public sealed class PolledTimer Remarks A common programming pattern is to have background threads check periodically for something to do; like resend a message, clean up idle connections, or signal a timeout. The PolledTimer class provides an easy way to encapsulate the interval and next scheduled time at which these events should happen. Use PolledTimer(TimeSpan) or PolledTimer(TimeSpan, Boolean) to create a timer, specifying the firing interval. The second constructor also specifies the autoReset parameter which indicates that the timer should automatically reschedule itself after being fired. Note that one of these constructors must be used . PolledTimer structures created with the default constructor will thow a InvalidOperationException when an attempt is made to use it. While being constructed, a polled timer calculates its next scheduled firing time (SYS). Note that this value generated by SysTime not a normal system time. The scheduled firing time is available as the FireTime property. Ther current interval is available as the Interval property. Use HasFired to determine if the timer has been fired. This will return true if this is the case. If autoReset=true was passed to the constructor, then HasFired will automatically reset the timer by scheduling the next firing time. If autoReset=false , then the timer will remain in the fired state until Reset() is called. Asynchronous applications may find it more convienent to call WaitAsync(TimeSpan) to wait for the timer to fire. The Reset() , ResetImmediate() , and ResetRandom() methods are used recalcuclate the firing time. The first variation schedules this time as the current time plus the timer interval. The second variation schedules the timer for immediate firing (typically used right after the timer is constructed in situations where the application wishes the timer to fire right away the first time it is polled), and the third method resets the timer to fire at a random interval between zero and the timer's interval (useful when trying to avoid having multiple timers fire at the same time). The Disable() method prevents the timer from firing until Reset() is called or Interval is set. This is useful for preventing a timer from firing when an operation initiated from a previous firing is still executing (perhaps on another thread). Constructors PolledTimer() The default constructor creates a timer that is initially disabled. Declaration public PolledTimer() PolledTimer(Boolean) The default constructor creates a timer that is initially disabled with optional auto reset capabilities. Declaration public PolledTimer(bool autoReset) Parameters Type Name Description Boolean autoReset Indicates whether the timer should automatically reset itself after firing. PolledTimer(TimeSpan) Constructs a timer, initializing it to fire at the specified interval. Declaration public PolledTimer(TimeSpan interval) Parameters Type Name Description TimeSpan interval The timer interval. Exceptions Type Condition ArgumentException Thrown if the interval passed is not positive. PolledTimer(TimeSpan, Boolean) Constructs a timer with the option of auto resetting itself. Declaration public PolledTimer(TimeSpan interval, bool autoReset) Parameters Type Name Description TimeSpan interval The timer interval. Boolean autoReset Pass true to create an auto reset timer. Exceptions Type Condition ArgumentException Thrown if the interval passed is not positive. Properties FireTime Returns the scheduled firing time (SYS). Declaration public DateTime FireTime { get; } Property Value Type Description DateTime Exceptions Type Condition InvalidOperationException Thrown if the timer was created using the default constructor. HasFired Determines whether the timer has fired. Declaration public bool HasFired { get; } Property Value Type Description Boolean true if the timer has fired. Remarks For auto reset timers, this property will reschedule the next firing time if the timer has fired. Exceptions Type Condition InvalidOperationException Thrown if the timer was created using the default constructor. Interval The current timer interval. Declaration public TimeSpan Interval { get; set; } Property Value Type Description TimeSpan Remarks note Setting a new interval causes the timer fire time to be rescheduled. Exceptions Type Condition InvalidOperationException Thrown if the timer was created using the default constructor. ArgumentException Thrown if the interval passed is not positive. Methods Disable() Prevents the timer from firing until one of the Reset() methods are called or Interval is assigned a new value. Declaration public void Disable() FireNow() Sets the timer into the fired state. Declaration public void FireNow() Reset() Reschedules the timer to fire at the current time plus the timer interval. Declaration public void Reset() Exceptions Type Condition InvalidOperationException Thrown if the timer was created using the default constructor. Reset(TimeSpan) Assigns a new interval to the timer and reschedules the timer to fire at the current time plus the new interval. Declaration public void Reset(TimeSpan interval) Parameters Type Name Description TimeSpan interval The new timer interval. Exceptions Type Condition ArgumentException Thrown if the interval passed is not positive. InvalidOperationException Thrown if the timer was created using the default constructor. ResetAddRandom(TimeSpan) Reschedules the timer to fire at a random time between the current scheduled firing time and a random interval between Zero and interval . Declaration public void ResetAddRandom(TimeSpan interval) Parameters Type Name Description TimeSpan interval The interval to be randomized (can be positive or negative). ResetImmediate() Reschedules the timer to fire immediately. Declaration public void ResetImmediate() Exceptions Type Condition InvalidOperationException Thrown if the timer was created using the default constructor. ResetRandom() Reschedules the timer to fire at a random time between now and the timer interval. Declaration public void ResetRandom() Exceptions Type Condition InvalidOperationException Thrown if the timer was created using the default constructor. ResetRandomTemporary(TimeSpan, TimeSpan) Reschedules the timer to fire at the current time plus a randomly selected time between the two intervals passed. This call does not change the underlying timer interval. Subsequent timer resets will continue to use the original interval. Declaration public void ResetRandomTemporary(TimeSpan minInterval, TimeSpan maxInterval) Parameters Type Name Description TimeSpan minInterval The minimum timer wait interval. TimeSpan maxInterval The maximum timer wait interval. ResetTemporary(TimeSpan) Reschedules the timer to fire at the current time plus the specified interval but does not change the underlying timer interval. Subsequent timer resets will continue to use the original interval. Declaration public void ResetTemporary(TimeSpan interval) Parameters Type Name Description TimeSpan interval The timer wait interval. WaitAsync(TimeSpan) Waits aynchronously for the timer to fire. Declaration public async Task WaitAsync(TimeSpan pollInterval = default(TimeSpan)) Parameters Type Name Description TimeSpan pollInterval Optional timer polling interval (defaults to 15 seconds ). Returns Type Description Task The tracking Task ."
  },
  "neonsdk/api/Neon.Time.RecurringTimer.html": {
    "href": "neonsdk/api/Neon.Time.RecurringTimer.html",
    "title": "Class RecurringTimer | NeonSDK documentation",
    "keywords": "Class RecurringTimer Used to manage tasks that need to be performed on a periodic basis. Inheritance Object RecurringTimer Namespace : Neon.Time Assembly : Neon.Common.dll Syntax public class RecurringTimer Remarks This timer is designed to be polled periodically from an application's background thread by calling the HasFired() or HasFired(DateTime) methods. These methods will return true if the action associated with the timer is to be performed. This class works by watching for the transition between a call to HasFired() made at a time before the scheduled event and then a subsequent call made when the current time is at or after the scheduled event time. HasFired() will return true on the subsequent call if the time is right. This behavior ensures that scheduled tasks will only be executed once for any recurring schedule, even if the application is restarted. The HasFired() method uses the current UTC time to perform the time comparison. The HasFired(DateTime) will use the time passed (which may be local time, etc.) to do this. note This timer auto resets after HasFired() returns true . Note also that HasFired() must be called fairly frequently (on the order of a few minutes or less) to obtain reasonable accuracy. Asynchronous applications may find it more convienent to call WaitAsync(TimeSpan) to wait for the timer to fire. The Reset() and Reset(DateTime) methods may be used to explicitly reset the timer to fire at the next scheduled time. This may be useful for ensuring that short duration timers are properly reset after an operation that may take longer to complete than the timer interval. Recurring timers are represented as strings with the format of the string depending on the type of timer. The table below describes these formats: Disabled Disabled timers never fire. Simply place the word Disabled at the beginning of the timer string. Minute Minute timers fire at the top of every minute. There is no offset. Minute timers are formatted as: Minute QuarterHour Quarter hour timers are fired four times an hour at the offset from the 15 minute time. Quarter hour timers formatted as: QuarterHour QuarterHour:MM QuarterHour:MM:SS Hourly Hourly timers are fired once per hour at the offset from the top of the hour. Hourly timers are formatted as: Hourly Hourly:MM Hourly:MM:SS Daily Daily timers are fired once per day at the specified time of day. Daily timers are formatted as: Daily Daily:HH:MM Daily:HH:MM:SS Interval Interval timers are fired on a regular interval that is not not tied to a specific period. Interval timers are formatted as: Interval:HH:MM:SS Constructors RecurringTimer() Default constructor that creates a Disabled timer. Declaration public RecurringTimer() RecurringTimer(RecurringTimerType, TimeSpan) Constructs a recurring timer of the specified type and time offset from the beginning of the implied period. Declaration public RecurringTimer(RecurringTimerType type, TimeSpan timeOffset) Parameters Type Name Description RecurringTimerType type Describes the timer type which implies the period. TimeSpan timeOffset The time offset from the beginning of the implied timer period. RecurringTimer(TimeOfDay) Constructs a recurring timer that will fire once a day at the specified time offset. Declaration public RecurringTimer(TimeOfDay timeOfDay) Parameters Type Name Description TimeOfDay timeOfDay The time of day offset. RecurringTimer(String) Constructs a timer by parsing a string value. Declaration public RecurringTimer(string value) Parameters Type Name Description String value The string representation. Exceptions Type Condition ArgumentException Thrown if the string passed is not valid. Properties Disabled Returns a disabled timer. Declaration public static RecurringTimer Disabled { get; } Property Value Type Description RecurringTimer TimeOffset Returns the TimeSpan offet from the beginning of the period when the timer is scheduled to fire. Declaration public TimeSpan TimeOffset { get; } Property Value Type Description TimeSpan Type Returns the timer type. Declaration public RecurringTimerType Type { get; } Property Value Type Description RecurringTimerType Methods HasFired() Determines whether the timer has fired by comparing the current UTC time with the scheduled event time. Declaration public bool HasFired() Returns Type Description Boolean HasFired(DateTime) Determines if the timer has fired by comparing the current time passed with the next scheduled firing time. Declaration public bool HasFired(DateTime nowUtc) Parameters Type Name Description DateTime nowUtc The current time (UTC). Returns Type Description Boolean Reset() Resets the timer to fire at the next scheduled interval after the current UTC time. Declaration public void Reset() Reset(DateTime) Resets the timer to fire at the next scheduled interval after the time passed. Declaration public void Reset(DateTime now) Parameters Type Name Description DateTime now The current time. Set(DateTime) Sets the firing time for the timer. Declaration public void Set(DateTime timeUtc = default(DateTime)) Parameters Type Name Description DateTime timeUtc Optionally specifies the scheduled time (UTC) (defaults to now). Remarks This is useful in situations where it is necessary to special-case a specific firing time. Start() Starts the timer by computing the next firing time after the current time (UTC). Declaration public void Start() Remarks Applications may use this method to initalize the timer. This is useful in situations where some time may pass between the time the timer was constructed and the first time HasFired() has been called. In these situations, the timer will not fire for a scheduled event that occurs during this interval. Start(DateTime) Starts the timer by computing the next firing time after the time passed. Declaration public void Start(DateTime nowUtc) Parameters Type Name Description DateTime nowUtc The current time (UTC). Remarks Applications may use this method to initalize the timer. This is useful in situations where some time may pass between the time the timer was constructed and the first time HasFired() has been called. In these situations, the timer will not fire for a scheduled event that occurs during this interval. ToString() Renders the timer into a string. Declaration public override string ToString() Returns Type Description String The timer string. Overrides Object.ToString() TryParse(String, out RecurringTimer) Attempts to parse RecurringTimer from a string. Declaration public static bool TryParse(string input, out RecurringTimer timer) Parameters Type Name Description String input The input string. RecurringTimer timer Returns as the parsed timer. Returns Type Description Boolean true if the timer was parsed successfully. WaitAsync(TimeSpan) Waits aynchronously for the timer to fire. Declaration public async Task WaitAsync(TimeSpan pollInterval = default(TimeSpan)) Parameters Type Name Description TimeSpan pollInterval Optional timer polling interval (defaults to 15 seconds ). Returns Type Description Task The tracking Task ."
  },
  "neonsdk/api/Neon.Time.RecurringTimerType.html": {
    "href": "neonsdk/api/Neon.Time.RecurringTimerType.html",
    "title": "Enum RecurringTimerType | NeonSDK documentation",
    "keywords": "Enum RecurringTimerType Enumerates the possible RecurringTimer types. Namespace : Neon.Time Assembly : Neon.Common.dll Syntax public enum RecurringTimerType Fields Name Description Daily The timer will be fired once per day. Disabled The timer never fires. Hourly The timer will be fired once per hour. Interval The timer is fired on a specified interval rather than a specific period offset. This is similar to how PolledTimer works. Minute The timer will be fired once per minute. QuarterHour The timer will be fired once every 15 minutes. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Time.SysTime.html": {
    "href": "neonsdk/api/Neon.Time.SysTime.html",
    "title": "Class SysTime | NeonSDK documentation",
    "keywords": "Class SysTime A date/time implementation that is guaranteed to be monotonically increasing even as the underlying system time is updated manually or automatically to adjust for daylight savings time or clock skewing. Inheritance Object SysTime Namespace : Neon.Time Assembly : Neon.Common.dll Syntax public static class SysTime Remarks Use of system time rather than real-time is useful in situations where events need to be timed in relative rather than absolute time. Using absolute time to measure intervals call can be problematic because system clock may be have to be periodically corrected to keep it in sync with a global time base. These corrections will cause event timers to become inaccurate. The Now property returns the current system time and Infinite calculates and returns an essentially infinite timespan value that will be safe when added to the current system time. note The DateTime instances returned by this class are useful only for measuring timespans. The Day, Month, Year properties will have no useful meaning. note The class is implemented such that the first time returned by the Now property will be a time value that is a minumim of one year after MinValue . This is useful in situations where programs want to schedule a periodic event for immediate triggering when the application starts by setting the last trigger time to MinValue . The SysTime class is also capable of maintaining rough synchronization with an external time source. To use this feature, you'll periodically get the time from the external source and assign it to the static ExternalNow property then you can use the ExternalNow property to get and estimate of the current external time. The local side clock will likely drift over time, resulting in a skew between the time returned by ExternalNow and the actual time at the external source. This skew can be limited by getting the external time and assigning it to ExternalNow more frequently. note The time returned by ExternalNow is not guaranteed to be monotimically increasing since reported times may jump around as the bias between the local and external clocks are adjusted. Implementation Note This class is currently implemented using the Windows GetTickCount() API. This function returns the number of milliseconds since the operating system was booted with a resolution equal to the process/threading timeslice (typically 10-15 milliseconds). The actual resolution for the current machine can be obtained from Resolution . The TickCount counter is an unsigned 32-bit value and will wrap-around every 49.7 days. The SysTime class handles this by using a GatedTimer to wake up every five minutes to check for and handle this wrap-around. As noted above, the time value returned by Now has no relation to the actual calendar date. The first date returned after booting the computer will be approximately 1/1/0002 00:00:00, one year greater the minimum DateTime value. Infinite returns a calculated value that when added to Now will result in a date one year less then the maximum DateTime value. These one year offsets were choosen so that applications can perform reasonable offset calculations (e.g. within background tasks) without fear of wrap-around. Since DateTime and TimeSpan span up to 10,000 years, this means that SysTime calculations will remain valid for up to 9,998 years after the computer has been started, which should be good enough for most applications. Properties ExternalNow Tracks an external time source. Declaration public static DateTime ExternalNow { get; set; } Property Value Type Description DateTime Remarks The SysTime class is also capable of maintaining rough synchronization with an external time source. To use this feature, you'll periodically get the time from the external source and assign it to the static ExternalNow property then you can use the ExternalNow property to get and estimate of the current external time. The local side clock will likely drift over time, resulting in a skew between the time returned by ExternalNow and the actual time at the external source. This skew can be limited by getting the external time and assigning it to ExternalNow more frequently. note The time returned by ExternalNow is not guaranteed to be monotimically increasing since reported times may jump around as the bias between the local and external clocks are adjusted. Infinite Returns what is essentially an infinite timespan. Declaration public static TimeSpan Infinite { get; } Property Value Type Description TimeSpan Remarks The value returned will calculated such that when added to the current SysTime . Now value that the result will be MaxValue minus one year. This is useful for situations where you need specify an infinite timeout but you want to avoid wrap-around when adding this to the current SysTime . Exceptions Type Condition InvalidOperationException Thrown if there's a problem with the system timer. Now Returns the current time relative to time the system started. Declaration public static DateTime Now { get; } Property Value Type Description DateTime Exceptions Type Condition InvalidOperationException Thrown if there's a problem with the system timer. Resolution Returns the resolution of the underlying system timer. Declaration public static TimeSpan Resolution { get; } Property Value Type Description TimeSpan Exceptions Type Condition InvalidOperationException Thrown if there's a problem with the system timer. Methods Reset() Used by Unit tests to reset the timer class to its initial value. Declaration public static void Reset()"
  },
  "neonsdk/api/Neon.Time.TimeOfDay.html": {
    "href": "neonsdk/api/Neon.Time.TimeOfDay.html",
    "title": "Struct TimeOfDay | NeonSDK documentation",
    "keywords": "Struct TimeOfDay Represents the time offset since the beginning of the day. Namespace : Neon.Time Assembly : Neon.Common.dll Syntax public struct TimeOfDay Constructors TimeOfDay(DateTime) Constructs a time of day offset by stripping the date portion from the parameter passed. Declaration public TimeOfDay(DateTime date) Parameters Type Name Description DateTime date The source date time. TimeOfDay(Int32, Int32) Constructs a time of day offset from hours and minutes. Declaration public TimeOfDay(int hours, int minutes) Parameters Type Name Description Int32 hours The hours. Int32 minutes The minutes. Exceptions Type Condition ArgumentException Thrown if the specified offset is negative or >= 24 hours. TimeOfDay(Int32, Int32, Int32) Constructs a time of day offset from hours, minutes, and seconds. Declaration public TimeOfDay(int hours, int minutes, int seconds) Parameters Type Name Description Int32 hours The hours. Int32 minutes The minutes. Int32 seconds The seconds. Exceptions Type Condition ArgumentException Thrown if the specified offset is negative or >= 24 hours. TimeOfDay(String) Constructs a time of day offset by parsing a string of the form HH:MM or HH:MM:SS. Declaration public TimeOfDay(string value) Parameters Type Name Description String value The input string. Exceptions Type Condition ArgumentException Thrown if the string passed does not represent a valid time of day offset. TimeOfDay(TimeSpan) Constructs a time of day offset from a TimeSpan . Declaration public TimeOfDay(TimeSpan offset) Parameters Type Name Description TimeSpan offset The time offset from the beginning of the day. Exceptions Type Condition ArgumentException Thrown if the specified offset is negative or >= 24 hours. Properties Hour Returns the hours part of the time offset. Declaration public readonly int Hour { get; } Property Value Type Description Int32 Minute Returns the minutes part of the time offset. Declaration public readonly int Minute { get; } Property Value Type Description Int32 Second Returns the seconds part of the time offset. Declaration public readonly int Second { get; } Property Value Type Description Int32 TimeSpan Returns the offset as a TimeSpan . Declaration public readonly TimeSpan TimeSpan { get; } Property Value Type Description TimeSpan Methods ToString() Renders the time of day value as a string formatted as HH:MM:SS. Declaration public override string ToString() Returns Type Description String The formatted string. Overrides ValueType.ToString() TryParse(String, out TimeOfDay) Attempts to parse a string of the form HH:MM or HH:MM:SS into a time of day offset. Declaration public static bool TryParse(string value, out TimeOfDay timeOfDay) Parameters Type Name Description String value The string to be parsed. TimeOfDay timeOfDay Returns as the parsed time of day on success. Returns Type Description Boolean true if the string was parsed successfully, false otherwise."
  },
  "neonsdk/api/Neon.Web.html": {
    "href": "neonsdk/api/Neon.Web.html",
    "title": "Namespace Neon.Web | NeonSDK documentation",
    "keywords": "Namespace Neon.Web Classes NeonController Enhances the Controller class to simplify and enhance web application logging. Use this as the base class for ASP.NET UX applications. NeonControllerBase Enhances the ControllerBase class to simplify and enhance web service logging. Use this class for ASP.NET REST API. Although NeonController can be used for REST APIs as well, NeonControllerBase may have lower overhead. RoundTripJsonInputFormatter Handles deserialization of JSON objects for noSQL scenarios that supports round trips without any property loss, even if one side of the transaction is out of data and is not aware of all of the possible JSON properties. This class is designed to support classes generated by the Neon.ModelGen assembly that implement IRoundtripData . RoundTripJsonOutputFormatter Handles serialization of JSON objects for noSQL scenarios that supports round trips without any property loss, even if one side of the transaction is out of data and is not aware of all of the possible JSON properties. This class is designed to support classes generated by the Neon.ModelGen assembly that implement IRoundtripData . WebHelper Misc ASP.NET related helper methods."
  },
  "neonsdk/api/Neon.Web.NeonController.html": {
    "href": "neonsdk/api/Neon.Web.NeonController.html",
    "title": "Class NeonController | NeonSDK documentation",
    "keywords": "Class NeonController Enhances the Controller class to simplify and enhance web application logging. Use this as the base class for ASP.NET UX applications. Inheritance Object ControllerBase Controller NeonController Namespace : Neon.Web Assembly : Neon.Web.dll Syntax [TypeFilter(typeof(LoggingExceptionFilter))] public abstract class NeonController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Remarks This class includes the Logger property which returns a logger that can be used for logging controller events. This logger will have it's module set to WEB-CONTROLLER-NAME and can be used as a simplier alternative to doing dependency injection to your controller's constructor. Constructors NeonController() Constructor. Declaration protected NeonController() Properties Logger Returns the controller's logger. Declaration public ILogger Logger { get; } Property Value Type Description ILogger Methods Requires(Boolean, String, String, HttpStatusCode) Throws a HttpApiException when condition is false . Declaration public void Requires(bool condition, string message = null, string errorCode = null, HttpStatusCode statusCode = HttpStatusCode.BadRequest) Parameters Type Name Description Boolean condition The condition being checked. String message Optionally specifies a human readable message. String errorCode Optionally specifies a computer readable error code string. HttpStatusCode statusCode Optionally specifies the HTTP status code. This defaults to BadRequest . Remarks note errorCode is restricted to 1-32 characters including ASCII letters, digits, undercores, dots, or dashes. Exceptions Type Condition HttpApiException Thrown when condition is false . Requires(Func<Boolean>, String, String, HttpStatusCode) Throws a HttpApiException when the predicate function returns false . Declaration public void Requires(Func<bool> predicate, string message = null, string errorCode = null, HttpStatusCode statusCode = HttpStatusCode.BadRequest) Parameters Type Name Description Func < Boolean > predicate Called to retrieve the condition value. String message Optionally specifies a human readable message. String errorCode Optionally specifies a computer readable error code string. HttpStatusCode statusCode Optionally specifies the HTTP status code. This defaults to BadRequest . Remarks note errorCode is restricted to 1-32 characters including ASCII letters, digits, undercores, dots, or dashes. Exceptions Type Condition HttpApiException Thrown when predicate returns false . RequiresNotNull(Object, String, String, HttpStatusCode) Throws a HttpApiException when value is null . Declaration public void RequiresNotNull(object value, string name, string errorCode = null, HttpStatusCode statusCode = HttpStatusCode.BadRequest) Parameters Type Name Description Object value The object value being checked. String name Identifies the value being checked. String errorCode Optionally specifies a computer readable error code string. HttpStatusCode statusCode Optionally specifies the HTTP status code. This defaults to BadRequest . Remarks note errorCode is restricted to 1-32 characters including ASCII letters, digits, undercores, dots, or dashes. Exceptions Type Condition HttpApiException Thrown when value is null . RequiresNotNull(String, String, String, HttpStatusCode) Throws a HttpApiException when value is null or empty. Declaration public void RequiresNotNull(string value, string name, string errorCode = null, HttpStatusCode statusCode = HttpStatusCode.BadRequest) Parameters Type Name Description String value The string value being checked. String name Identifies the value being checked. String errorCode Optionally specifies a computer readable error code string. HttpStatusCode statusCode Optionally specifies the HTTP status code. This defaults to BadRequest . Remarks note errorCode is restricted to 1-32 characters including ASCII letters, digits, undercores, dots, or dashes. Exceptions Type Condition HttpApiException Thrown when value is null ."
  },
  "neonsdk/api/Neon.Web.NeonControllerBase.html": {
    "href": "neonsdk/api/Neon.Web.NeonControllerBase.html",
    "title": "Class NeonControllerBase | NeonSDK documentation",
    "keywords": "Class NeonControllerBase Enhances the ControllerBase class to simplify and enhance web service logging. Use this class for ASP.NET REST API. Although NeonController can be used for REST APIs as well, NeonControllerBase may have lower overhead. Inheritance Object ControllerBase NeonControllerBase Namespace : Neon.Web Assembly : Neon.Web.dll Syntax [TypeFilter(typeof(LoggingExceptionFilter))] public abstract class NeonControllerBase : ControllerBase Remarks This class includes the Logger property which returns a logger that can be used for logging controller events. This logger will have it's module set to WEB-CONTROLLER-NAME and can be used as a simplier alternative to doing dependency injection to your controller's constructor. Constructors NeonControllerBase() Constructor. Declaration protected NeonControllerBase() Properties Logger Returns the controller's logger. Declaration public ILogger Logger { get; } Property Value Type Description ILogger Methods Requires(Boolean, String, String, HttpStatusCode) Throws a HttpApiException when condition is false . Declaration protected void Requires(bool condition, string message = null, string errorCode = null, HttpStatusCode statusCode = HttpStatusCode.BadRequest) Parameters Type Name Description Boolean condition The condition being checked. String message Optionally specifies a human readable message. String errorCode Optionally specifies a computer readable error code string. HttpStatusCode statusCode Optionally specifies the HTTP status code. This defaults to BadRequest . Remarks note errorCode is restricted to 1-32 characters including ASCII letters, digits, undercores, dots, or dashes. Exceptions Type Condition HttpApiException Thrown when condition is false . Requires(Func<Boolean>, String, String, HttpStatusCode) Throws a HttpApiException when the predicate function returns false . Declaration protected void Requires(Func<bool> predicate, string message = null, string errorCode = null, HttpStatusCode statusCode = HttpStatusCode.BadRequest) Parameters Type Name Description Func < Boolean > predicate Called to retrieve the condition value. String message Optionally specifies a human readable message. String errorCode Optionally specifies a computer readable error code string. HttpStatusCode statusCode Optionally specifies the HTTP status code. This defaults to BadRequest . Remarks note errorCode is restricted to 1-32 characters including ASCII letters, digits, undercores, dots, or dashes. Exceptions Type Condition HttpApiException Thrown when predicate returns false . RequiresNotNull(Object, String, String, HttpStatusCode) Throws a HttpApiException when value is null . Declaration protected void RequiresNotNull(object value, string name, string errorCode = null, HttpStatusCode statusCode = HttpStatusCode.BadRequest) Parameters Type Name Description Object value The object value being checked. String name Identifies the value being checked. String errorCode Optionally specifies a computer readable error code string. HttpStatusCode statusCode Optionally specifies the HTTP status code. This defaults to BadRequest . Remarks note errorCode is restricted to 1-32 characters including ASCII letters, digits, undercores, dots, or dashes. Exceptions Type Condition HttpApiException Thrown when value is null . RequiresNotNull(String, String, String, HttpStatusCode) Throws a HttpApiException when value is null or empty. Declaration protected void RequiresNotNull(string value, string name, string errorCode = null, HttpStatusCode statusCode = HttpStatusCode.BadRequest) Parameters Type Name Description String value The string value being checked. String name Identifies the value being checked. String errorCode Optionally specifies a computer readable error code string. HttpStatusCode statusCode Optionally specifies the HTTP status code. This defaults to BadRequest . Remarks note errorCode is restricted to 1-32 characters including ASCII letters, digits, undercores, dots, or dashes. Exceptions Type Condition HttpApiException Thrown when value is null ."
  },
  "neonsdk/api/Neon.Web.RoundTripJsonInputFormatter.html": {
    "href": "neonsdk/api/Neon.Web.RoundTripJsonInputFormatter.html",
    "title": "Class RoundTripJsonInputFormatter | NeonSDK documentation",
    "keywords": "Class RoundTripJsonInputFormatter Handles deserialization of JSON objects for noSQL scenarios that supports round trips without any property loss, even if one side of the transaction is out of data and is not aware of all of the possible JSON properties. This class is designed to support classes generated by the Neon.ModelGen assembly that implement IRoundtripData . Inheritance Object InputFormatter TextInputFormatter RoundTripJsonInputFormatter Namespace : Neon.Web Assembly : Neon.Web.dll Syntax public sealed class RoundTripJsonInputFormatter : TextInputFormatter, IInputFormatter, IApiRequestFormatMetadataProvider Constructors RoundTripJsonInputFormatter(Func<Type, Boolean>) Constructor. Declaration public RoundTripJsonInputFormatter(Func<Type, bool> allowRoundtripFormatter = null) Parameters Type Name Description Func < Type , Boolean > allowRoundtripFormatter Optional lamba function that returns true if the type is allowed to be handled by the formatter. Passing null indicates that all types should be handled. Methods CanReadType(Type) Declaration protected override bool CanReadType(Type type) Parameters Type Name Description Type type Returns Type Description Boolean Overrides InputFormatter.CanReadType(Type) ReadRequestBodyAsync(InputFormatterContext, Encoding) Declaration public override async Task<InputFormatterResult> ReadRequestBodyAsync(InputFormatterContext context, Encoding encoding) Parameters Type Name Description InputFormatterContext context Encoding encoding Returns Type Description Task < InputFormatterResult > Overrides TextInputFormatter.ReadRequestBodyAsync(InputFormatterContext, Encoding)"
  },
  "neonsdk/api/Neon.Web.RoundTripJsonOutputFormatter.html": {
    "href": "neonsdk/api/Neon.Web.RoundTripJsonOutputFormatter.html",
    "title": "Class RoundTripJsonOutputFormatter | NeonSDK documentation",
    "keywords": "Class RoundTripJsonOutputFormatter Handles serialization of JSON objects for noSQL scenarios that supports round trips without any property loss, even if one side of the transaction is out of data and is not aware of all of the possible JSON properties. This class is designed to support classes generated by the Neon.ModelGen assembly that implement IRoundtripData . Inheritance Object OutputFormatter TextOutputFormatter RoundTripJsonOutputFormatter Namespace : Neon.Web Assembly : Neon.Web.dll Syntax public sealed class RoundTripJsonOutputFormatter : TextOutputFormatter, IOutputFormatter, IApiResponseTypeMetadataProvider Constructors RoundTripJsonOutputFormatter(Func<Type, Boolean>) Constructor. Declaration public RoundTripJsonOutputFormatter(Func<Type, bool> allowRoundtripFormatter = null) Parameters Type Name Description Func < Type , Boolean > allowRoundtripFormatter Optional lamba function that returns true if the type is allowed to be handled by the formatter. Passing null indicates that all types should be handled. Methods CanWriteType(Type) Declaration protected override bool CanWriteType(Type type) Parameters Type Name Description Type type Returns Type Description Boolean Overrides OutputFormatter.CanWriteType(Type) WriteResponseBodyAsync(OutputFormatterWriteContext, Encoding) Declaration public override async Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding) Parameters Type Name Description OutputFormatterWriteContext context Encoding selectedEncoding Returns Type Description Task Overrides TextOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext, Encoding)"
  },
  "neonsdk/api/Neon.Web.SignalR.DependencyInjectionExtensions.html": {
    "href": "neonsdk/api/Neon.Web.SignalR.DependencyInjectionExtensions.html",
    "title": "Class DependencyInjectionExtensions | NeonSDK documentation",
    "keywords": "Class DependencyInjectionExtensions Helpers for adding Neon NATS backplane via dependency injection. Inheritance Object DependencyInjectionExtensions Namespace : Neon.Web.SignalR Assembly : Neon.Web.dll Syntax public static class DependencyInjectionExtensions Methods AddNeonNats(ISignalRServerBuilder) Adds scale-out to a ISignalRServerBuilder , using a shared Nats server. Declaration public static IServiceCollection AddNeonNats(this ISignalRServerBuilder signalrBuilder) Parameters Type Name Description ISignalRServerBuilder signalrBuilder The ISignalRServerBuilder . Returns Type Description IServiceCollection The same instance of the IServiceCollection for chaining. AddNeonNats(ISignalRServerBuilder, IConnection) Adds scale-out to a ISignalRServerBuilder , using a shared Nats server. Declaration public static IServiceCollection AddNeonNats(this ISignalRServerBuilder signalrBuilder, IConnection connection) Parameters Type Name Description ISignalRServerBuilder signalrBuilder The ISignalRServerBuilder . NATS.Client.IConnection connection The nats NATS.Client.IConnection . Returns Type Description IServiceCollection The same instance of the IServiceCollection for chaining. AddNeonNats(ISignalRServerBuilder, String) Adds scale-out to a ISignalRServerBuilder , using a shared Nats server. Declaration public static IServiceCollection AddNeonNats(this ISignalRServerBuilder signalrBuilder, string natConnectionString) Parameters Type Name Description ISignalRServerBuilder signalrBuilder The ISignalRServerBuilder . String natConnectionString The nats connection string. Returns Type Description IServiceCollection The same instance of the IServiceCollection for chaining."
  },
  "neonsdk/api/Neon.Web.SignalR.GroupAction.html": {
    "href": "neonsdk/api/Neon.Web.SignalR.GroupAction.html",
    "title": "Enum GroupAction | NeonSDK documentation",
    "keywords": "Enum GroupAction Represents a group action. Namespace : Neon.Web.SignalR Assembly : Neon.Web.dll Syntax public enum GroupAction Fields Name Description Add Add a member to the group. Remove Remove a member from the group. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Web.SignalR.GroupCommand.html": {
    "href": "neonsdk/api/Neon.Web.SignalR.GroupCommand.html",
    "title": "Class GroupCommand | NeonSDK documentation",
    "keywords": "Class GroupCommand Used to serialize a group command. Inheritance Object GroupCommand Namespace : Neon.Web.SignalR Assembly : Neon.Web.dll Syntax [MessagePackObject(false)] public class GroupCommand Properties Action The action to be performed on the group. Declaration [Key(2)] public GroupAction Action { get; set; } Property Value Type Description GroupAction ConnectionId Gets the ID of the connection to be added or removed from the group. Declaration [Key(4)] public string ConnectionId { get; set; } Property Value Type Description String GroupName Gets the group on which the action is performed. Declaration [Key(3)] public string GroupName { get; set; } Property Value Type Description String Id The ID of the group command. Declaration [Key(0)] public int Id { get; set; } Property Value Type Description Int32 ServerName The name of the server that sent the command. Declaration [Key(1)] public string ServerName { get; set; } Property Value Type Description String Methods Read(Byte[]) Reads an GroupCommand from a byte array. Declaration public static GroupCommand Read(byte[] message) Parameters Type Name Description Byte [] message The message bytes. Returns Type Description GroupCommand The parsed GroupCommand . Write(Int32, String, GroupAction, String, String) Writes a GroupCommand to a byte array. Declaration public static byte[] Write(int id, string serverName, GroupAction action, string groupName, string connectionId) Parameters Type Name Description Int32 id The message ID. String serverName The target server. GroupAction action The action. String groupName The group name. String connectionId The connection ID. Returns Type Description Byte []"
  },
  "neonsdk/api/Neon.Web.SignalR.html": {
    "href": "neonsdk/api/Neon.Web.SignalR.html",
    "title": "Namespace Neon.Web.SignalR | NeonSDK documentation",
    "keywords": "Namespace Neon.Web.SignalR Classes DependencyInjectionExtensions Helpers for adding Neon NATS backplane via dependency injection. GroupCommand Used to serialize a group command. Invocation Represents a method invokation. NatsHubLifetimeManager<THub> The NATS scaleout provider for multi-server support. Enums GroupAction Represents a group action."
  },
  "neonsdk/api/Neon.Web.SignalR.Invocation.html": {
    "href": "neonsdk/api/Neon.Web.SignalR.Invocation.html",
    "title": "Class Invocation | NeonSDK documentation",
    "keywords": "Class Invocation Represents a method invokation. Inheritance Object Invocation Namespace : Neon.Web.SignalR Assembly : Neon.Web.dll Syntax [MessagePackObject(false)] public class Invocation Properties Args The method arguments. Declaration [Key(2)] public object[] Args { get; set; } Property Value Type Description Object [] ExcludedConnectionIds The list of connection IDs that should not receive this message. Declaration [Key(3)] public IReadOnlyList<string> ExcludedConnectionIds { get; set; } Property Value Type Description IReadOnlyList < String > InvocationId The optional invokation ID. Declaration [Key(0)] public string InvocationId { get; set; } Property Value Type Description String MethodName The method name. Declaration [Key(1)] public string MethodName { get; set; } Property Value Type Description String ReturnChannel The optional return channel. Declaration [Key(5)] public string ReturnChannel { get; set; } Property Value Type Description String Methods Read(Byte[]) Reads an Invocation from a byte array. Declaration public static Invocation Read(byte[] message) Parameters Type Name Description Byte [] message The message bytes. Returns Type Description Invocation The parsed Invocation . Write(String, Object[]) Writes a Invocation to a byte array. Declaration public static byte[] Write(string methodName, object[] args) Parameters Type Name Description String methodName Object [] args Returns Type Description Byte [] Write(String, Object[], String, IReadOnlyList<String>, String) Writes a Invocation to a byte array. Declaration public static byte[] Write(string methodName, object[] args, string invocationId = null, IReadOnlyList<string> excludedConnectionIds = null, string returnChannel = null) Parameters Type Name Description String methodName The method name. Object [] args The arguments. String invocationId Optionally specifies an invocation ID. IReadOnlyList < String > excludedConnectionIds Optionally specifies excluded connection IDs. String returnChannel Optionally specifies the return channel. Returns Type Description Byte [] The serialized message."
  },
  "neonsdk/api/Neon.Web.SignalR.NatsHubLifetimeManager-1.html": {
    "href": "neonsdk/api/Neon.Web.SignalR.NatsHubLifetimeManager-1.html",
    "title": "Class NatsHubLifetimeManager<THub> | NeonSDK documentation",
    "keywords": "Class NatsHubLifetimeManager<THub> The NATS scaleout provider for multi-server support. Inheritance Object HubLifetimeManager <THub> NatsHubLifetimeManager<THub> Namespace : Neon.Web.SignalR Assembly : Neon.Web.dll Syntax public class NatsHubLifetimeManager<THub> : HubLifetimeManager<THub>, IDisposable where THub : Hub Type Parameters Name Description THub The type of Hub to manage connections for. Constructors NatsHubLifetimeManager(IConnection) Constructs the NatsHubLifetimeManager<THub> with types from Dependency Injection. Declaration public NatsHubLifetimeManager(IConnection connection) Parameters Type Name Description NATS.Client.IConnection connection The NATS NATS.Client.IConnection . NatsHubLifetimeManager(IConnection, ILogger) Constructs the NatsHubLifetimeManager<THub> with types from Dependency Injection. Declaration public NatsHubLifetimeManager(IConnection connection, ILogger logger = null) Parameters Type Name Description NATS.Client.IConnection connection The NATS NATS.Client.IConnection . ILogger logger The logger to write information about what the class is doing. Methods AddToGroupAsync(String, String, CancellationToken) Declaration public override async Task AddToGroupAsync(string connectionId, string groupName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String connectionId String groupName CancellationToken cancellationToken Returns Type Description Task Overrides Microsoft.AspNetCore.SignalR.HubLifetimeManager<THub>.AddToGroupAsync(System.String, System.String, System.Threading.CancellationToken) Dispose() Declaration public void Dispose() OnConnectedAsync(HubConnectionContext) Declaration public override async Task OnConnectedAsync(HubConnectionContext connection) Parameters Type Name Description HubConnectionContext connection Returns Type Description Task Overrides Microsoft.AspNetCore.SignalR.HubLifetimeManager<THub>.OnConnectedAsync(Microsoft.AspNetCore.SignalR.HubConnectionContext) OnDisconnectedAsync(HubConnectionContext) Declaration public override async Task OnDisconnectedAsync(HubConnectionContext connection) Parameters Type Name Description HubConnectionContext connection Returns Type Description Task Overrides Microsoft.AspNetCore.SignalR.HubLifetimeManager<THub>.OnDisconnectedAsync(Microsoft.AspNetCore.SignalR.HubConnectionContext) RemoveFromGroupAsync(String, String, CancellationToken) Declaration public override async Task RemoveFromGroupAsync(string connectionId, string groupName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String connectionId String groupName CancellationToken cancellationToken Returns Type Description Task Overrides Microsoft.AspNetCore.SignalR.HubLifetimeManager<THub>.RemoveFromGroupAsync(System.String, System.String, System.Threading.CancellationToken) SendAllAsync(String, Object[], CancellationToken) Declaration public override async Task SendAllAsync(string methodName, object[] args, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String methodName Object [] args CancellationToken cancellationToken Returns Type Description Task Overrides Microsoft.AspNetCore.SignalR.HubLifetimeManager<THub>.SendAllAsync(System.String, System.Object[], System.Threading.CancellationToken) SendAllExceptAsync(String, Object[], IReadOnlyList<String>, CancellationToken) Declaration public override async Task SendAllExceptAsync(string methodName, object[] args, IReadOnlyList<string> excludedConnectionIds, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String methodName Object [] args IReadOnlyList < String > excludedConnectionIds CancellationToken cancellationToken Returns Type Description Task Overrides Microsoft.AspNetCore.SignalR.HubLifetimeManager<THub>.SendAllExceptAsync(System.String, System.Object[], System.Collections.Generic.IReadOnlyList<System.String>, System.Threading.CancellationToken) SendConnectionAsync(String, String, Object[], CancellationToken) Declaration public override async Task SendConnectionAsync(string connectionId, string methodName, object[] args, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String connectionId String methodName Object [] args CancellationToken cancellationToken Returns Type Description Task Overrides Microsoft.AspNetCore.SignalR.HubLifetimeManager<THub>.SendConnectionAsync(System.String, System.String, System.Object[], System.Threading.CancellationToken) SendConnectionsAsync(IReadOnlyList<String>, String, Object[], CancellationToken) Declaration public override async Task SendConnectionsAsync(IReadOnlyList<string> connectionIds, string methodName, object[] args, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IReadOnlyList < String > connectionIds String methodName Object [] args CancellationToken cancellationToken Returns Type Description Task Overrides Microsoft.AspNetCore.SignalR.HubLifetimeManager<THub>.SendConnectionsAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.String, System.Object[], System.Threading.CancellationToken) SendGroupAsync(String, String, Object[], CancellationToken) Declaration public override async Task SendGroupAsync(string groupName, string methodName, object[] args, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String groupName String methodName Object [] args CancellationToken cancellationToken Returns Type Description Task Overrides Microsoft.AspNetCore.SignalR.HubLifetimeManager<THub>.SendGroupAsync(System.String, System.String, System.Object[], System.Threading.CancellationToken) SendGroupExceptAsync(String, String, Object[], IReadOnlyList<String>, CancellationToken) Declaration public override async Task SendGroupExceptAsync(string groupName, string methodName, object[] args, IReadOnlyList<string> excludedConnectionIds, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String groupName String methodName Object [] args IReadOnlyList < String > excludedConnectionIds CancellationToken cancellationToken Returns Type Description Task Overrides Microsoft.AspNetCore.SignalR.HubLifetimeManager<THub>.SendGroupExceptAsync(System.String, System.String, System.Object[], System.Collections.Generic.IReadOnlyList<System.String>, System.Threading.CancellationToken) SendGroupsAsync(IReadOnlyList<String>, String, Object[], CancellationToken) Declaration public override async Task SendGroupsAsync(IReadOnlyList<string> groupNames, string methodName, object[] args, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IReadOnlyList < String > groupNames String methodName Object [] args CancellationToken cancellationToken Returns Type Description Task Overrides Microsoft.AspNetCore.SignalR.HubLifetimeManager<THub>.SendGroupsAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.String, System.Object[], System.Threading.CancellationToken) SendUserAsync(String, String, Object[], CancellationToken) Declaration public override async Task SendUserAsync(string userId, string methodName, object[] args, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String userId String methodName Object [] args CancellationToken cancellationToken Returns Type Description Task Overrides Microsoft.AspNetCore.SignalR.HubLifetimeManager<THub>.SendUserAsync(System.String, System.String, System.Object[], System.Threading.CancellationToken) SendUsersAsync(IReadOnlyList<String>, String, Object[], CancellationToken) Declaration public override async Task SendUsersAsync(IReadOnlyList<string> userIds, string methodName, object[] args, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IReadOnlyList < String > userIds String methodName Object [] args CancellationToken cancellationToken Returns Type Description Task Overrides Microsoft.AspNetCore.SignalR.HubLifetimeManager<THub>.SendUsersAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.String, System.Object[], System.Threading.CancellationToken)"
  },
  "neonsdk/api/Neon.Web.WebHelper.html": {
    "href": "neonsdk/api/Neon.Web.WebHelper.html",
    "title": "Class WebHelper | NeonSDK documentation",
    "keywords": "Class WebHelper Misc ASP.NET related helper methods. Inheritance Object WebHelper Namespace : Neon.Web Assembly : Neon.Web.dll Syntax public static class WebHelper Methods AddNeon(IMvcBuilder, Boolean, Func<Type, Boolean>, Boolean) Performs Neon related initialization including adding the the RoundTripJsonInputFormatter , RoundTripJsonOutputFormatter and Newtonsoft JSON formatters to the request pipeline. These handle serialization and deserailzation of JSON text submitted to and returned from web services and classes generated by Neon.ModelGen implementing IRoundtripData as well as many basic .NET types. By default, this also adds an exception filter to the ASP.NET middleware that logs any uncaught exceptions and handles exception response formatting. Declaration public static IMvcBuilder AddNeon(this IMvcBuilder builder, bool disableRoundTripFormatters = false, Func<Type, bool> allowRoundtripFormatter = null, bool disableExceptionFilter = false) Parameters Type Name Description IMvcBuilder builder The MVC builder. Boolean disableRoundTripFormatters Optionally disable adding the round-trip formatters. Func < Type , Boolean > allowRoundtripFormatter Optional lamda function that can be used to customize which types allowed to be handled by the custom round-trip formatters. When this is null , all types will be handled by the formatters, otherwise only those types where this function returns true will be handled by the custom formatters. Other types will be passed on to the remaining formatters. Boolean disableExceptionFilter Optionally disables the addition of the built-in exception filter middleware (see remarks). Returns Type Description IMvcBuilder The builder . Remarks This provides both backwards and forwards data compatibility on both the client and service side by retaining object properties that one side or the other doesn't know about. This enables scenarios where new properties are added to a data object but the solution components aren't all upgraded at the same time as a monolithic app. By default, this method adds a an exception filter to the MVC middleware pipeline. This filter handles ArgumentException , ArgumentNullException , and HttpApiException exceptions by having ASP.NET return a BadRequest for the argument exceptions and the status code and error code (reason phrase) from the HttpApiException . This combined with the Requires(Boolean, String, String, HttpStatusCode) , Requires(Func<Boolean>, String, String, HttpStatusCode) , Requires(Boolean, String, String, HttpStatusCode) and Requires(Func<Boolean>, String, String, HttpStatusCode) methods help make it easier for REST methods to check input parameters as well as transmit additional details back to the calling client. GetUri(HttpRequest) Returns the full URI for an HttpRequest (not including the port number). Declaration public static string GetUri(this HttpRequest request) Parameters Type Name Description HttpRequest request The request. Returns Type Description String The fully qualified URI including any query parameters."
  },
  "neonsdk/api/Neon.Windows.html": {
    "href": "neonsdk/api/Neon.Windows.html",
    "title": "Namespace Neon.Windows | NeonSDK documentation",
    "keywords": "Namespace Neon.Windows Classes MEMORYSTATUSEX Holds information about memory utilization for a Windows computer. PowerShell A simple proxy for executing PowerShell commands on Windows machines. note This class requires elevated administrative rights. PowerShellException Thrown by PowerShell when an error is detected. Win32 Low-level Windows system calls."
  },
  "neonsdk/api/Neon.Windows.MEMORYSTATUSEX.html": {
    "href": "neonsdk/api/Neon.Windows.MEMORYSTATUSEX.html",
    "title": "Class MEMORYSTATUSEX | NeonSDK documentation",
    "keywords": "Class MEMORYSTATUSEX Holds information about memory utilization for a Windows computer. Inheritance Object MEMORYSTATUSEX Namespace : Neon.Windows Assembly : Neon.Common.dll Syntax public class MEMORYSTATUSEX Constructors MEMORYSTATUSEX() Default constructor. Declaration public MEMORYSTATUSEX() Fields dwLength Size of the structure, in bytes. You must set this member before calling GlobalMemoryStatusEx. Declaration public uint dwLength Field Value Type Description UInt32 dwMemoryLoad Number between 0 and 100 that specifies the approximate percentage of physical memory that is in use (0 indicates no memory use and 100 indicates full memory use). Declaration public uint dwMemoryLoad Field Value Type Description UInt32 ullAvailExtendedVirtual Size of unreserved and uncommitted memory in the extended portion of the virtual address space of the calling process, in bytes. Declaration public ulong ullAvailExtendedVirtual Field Value Type Description UInt64 ullAvailPageFile Size of available memory to commit, in bytes. The limit is ullTotalPageFile. Declaration public ulong ullAvailPageFile Field Value Type Description UInt64 ullAvailPhys Size of physical memory available, in bytes. Declaration public ulong ullAvailPhys Field Value Type Description UInt64 ullAvailVirtual Size of unreserved and uncommitted memory in the user mode portion of the virtual address space of the calling process, in bytes. Declaration public ulong ullAvailVirtual Field Value Type Description UInt64 ullTotalPageFile Size of the committed memory limit, in bytes. This is physical memory plus the size of the page file, minus a small overhead. Declaration public ulong ullTotalPageFile Field Value Type Description UInt64 ullTotalPhys Total size of physical memory, in bytes. Declaration public ulong ullTotalPhys Field Value Type Description UInt64 ullTotalVirtual Total size of the user mode portion of the virtual address space of the calling process, in bytes. Declaration public ulong ullTotalVirtual Field Value Type Description UInt64"
  },
  "neonsdk/api/Neon.Windows.PowerShell.html": {
    "href": "neonsdk/api/Neon.Windows.PowerShell.html",
    "title": "Class PowerShell | NeonSDK documentation",
    "keywords": "Class PowerShell A simple proxy for executing PowerShell commands on Windows machines. note This class requires elevated administrative rights. Inheritance Object PowerShell Namespace : Neon.Windows Assembly : Neon.Common.dll Syntax public class PowerShell : IDisposable Constructors PowerShell(Action<String>, Action<String>) Default constructor to be used to execute local PowerShell commands. Declaration public PowerShell(Action<string> outputAction = null, Action<string> errorAction = null) Parameters Type Name Description Action < String > outputAction Optionally specifies an action to receive logged output. Action < String > errorAction Optionally specifies an action to receive logged error output. Remarks You can pass callbacks to the outputAction and/or errorAction parameters to be receive logged output and errors. Note that outputAction will receive both STDERR and STDOUT text if errorAction isn't specified. Exceptions Type Condition NotSupportedException Thrown if we're not running on Windows. Properties PwshPath Optional path to the Powershell Core pwsh executable. The PATH environment variable will be searched by default. Declaration public static string PwshPath { get; set; } Property Value Type Description String Methods Dispose() Releases all resources associated with the instance. Declaration public void Dispose() Dispose(Boolean) Releases all associated resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. Execute(String, Boolean) Executes a PowerShell command that returns a simple string result. Declaration public string Execute(string command, bool noEnvironmentVars = false) Parameters Type Name Description String command The command string. Boolean noEnvironmentVars Optionally disables that environment variable subsitution (defaults to false ). Returns Type Description String The command response. Exceptions Type Condition PowerShellException Thrown if the command failed. ExecuteJson(String, Boolean) Executes a PowerShell command that returns result JSON, subsituting any environment variable references of the form ${NAME} and returning a list of dynamic objects parsed from the table with the object property names set to the table column names and the values parsed as strings. Declaration public List<dynamic> ExecuteJson(string command, bool noEnvironmentVars = false) Parameters Type Name Description String command The command string. Boolean noEnvironmentVars Optionally disables that environment variable subsitution (defaults to false ). Returns Type Description List < Object > The list of dynamic objects parsed from the command response. Exceptions Type Condition PowerShellException Thrown if the command failed. Finalize() Finalizer. Declaration protected void Finalize()"
  },
  "neonsdk/api/Neon.Windows.PowerShellException.html": {
    "href": "neonsdk/api/Neon.Windows.PowerShellException.html",
    "title": "Class PowerShellException | NeonSDK documentation",
    "keywords": "Class PowerShellException Thrown by PowerShell when an error is detected. Inheritance Object Exception PowerShellException Namespace : Neon.Windows Assembly : Neon.Common.dll Syntax public class PowerShellException : Exception, ISerializable Constructors PowerShellException(String, Exception) Constructor. Declaration public PowerShellException(string message, Exception innerException = null) Parameters Type Name Description String message The exception message. Exception innerException Optionally specifies an inner exception. Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Windows.Win32.html": {
    "href": "neonsdk/api/Neon.Windows.Win32.html",
    "title": "Class Win32 | NeonSDK documentation",
    "keywords": "Class Win32 Low-level Windows system calls. Inheritance Object Win32 Namespace : Neon.Windows Assembly : Neon.Common.dll Syntax public static class Win32 Methods DecryptFile(String) Has Windows decrypt a file or folder at rest. Declaration public static extern bool DecryptFile(string path) Parameters Type Name Description String path The file or folder path. Returns Type Description Boolean true on success. EncryptFile(String) Has Windows encrypt a file or folder at rest. Declaration public static extern bool EncryptFile(string path) Parameters Type Name Description String path The file or folder path. Returns Type Description Boolean true on success. GetPhysicallyInstalledSystemMemory(out UInt64) Returns the total installed physical RAM as kilobytes. Declaration public static extern bool GetPhysicallyInstalledSystemMemory(out ulong TotalMemoryInKilobytes) Parameters Type Name Description UInt64 TotalMemoryInKilobytes Returns as the physical RAM as KiB. Returns Type Description Boolean true on success. GlobalMemoryStatusEx(MEMORYSTATUSEX) Obtains information about memory utilization on the current Windows machine. Declaration public static extern bool GlobalMemoryStatusEx(MEMORYSTATUSEX lpBuffer) Parameters Type Name Description MEMORYSTATUSEX lpBuffer Returns as a MEMORYSTATUSEX with the infirmation. Returns Type Description Boolean true on success."
  },
  "neonsdk/api/Neon.WinTTY.ConsoleTTY.html": {
    "href": "neonsdk/api/Neon.WinTTY.ConsoleTTY.html",
    "title": "Class ConsoleTTY | NeonSDK documentation",
    "keywords": "Class ConsoleTTY Implements a pseudo TTY that links the Console for the current application to a remote process started via a command line. Inheritance Object ConsoleTTY Namespace : Neon.WinTTY Assembly : Neon.WinTTY.dll Syntax public sealed class ConsoleTTY Remarks This is very easy to use. Just instantiate an instance in your console application and then call Run(String, IDictionary<ConsoleKeyInfo, String>) , passing the command line to be executed with a TTY. using System; using Neon.WinTTY; namespace MyConsoleApp { public class Program { public static void Main(string[] args) { new ConsoleTTY().Run(@\"docker exec -it alpine /bin/sh\"); } } } Run(String, IDictionary<ConsoleKeyInfo, String>) receives user keystrokes and then forwards them to the remote process, optionally translating the keystroke into an ECMA-48 control sequence. By default, this methods uses the DefaultKeyMap dictionary to translate keystrokes but users may override this by passing a custom dictionary. The ConsoleKeyInfo values received as the user types include flag bits indicating the current state of the ALT , CONTROL , and SHIFT keys, the ConsoleKey code identifying the specific key, and the key character. The key character is either the Unicode value for the keystroke or 0 when the keystroke doesn't map to a character (e.g. for an ARROW key). Here's how keypress handling work: A new ConsoleKeyInfo is received by Run(String, IDictionary<ConsoleKeyInfo, String>) . The key map is searched for a control sequence string for the ConsoleKeyInfo . If a control sequence is found then it will be sent to the remote process. Note that the control sequence string is null then nothing will be sent and the keypress will essentially be ignored. If there's no matching control sequence in the key map and the key character is not zero, then the key character will be sent to the remote process. Zero key characters are never transmitted. Constructors ConsoleTTY() Constructor. Declaration public ConsoleTTY() Properties DefaultKeyMap Returns the default mapping used to translate a keyboard keypress into the ECMA-48 (or other) control sequence to be sent to the remote process. Declaration public static IDictionary<ConsoleKeyInfo, string> DefaultKeyMap { get; } Property Value Type Description IDictionary < ConsoleKeyInfo , String > Methods Run(String, IDictionary<ConsoleKeyInfo, String>) Starts a remote process by executing a command line and then wiring up a pseudo TTY that forwards keystrokes to the remote process and also receives VTx formatted output from the process and handle rendering on the local Console . Declaration public void Run(string command, IDictionary<ConsoleKeyInfo, string> keyMap = null) Parameters Type Name Description String command Specifies the local command to execute as the remote process. note You must take care to quote the command executable path or any arguments that include spaces. IDictionary < ConsoleKeyInfo , String > keyMap Optionally specifies the map to be used for translating keystrokes into ECMA-48 (or other) control sequences. This defaults to DefaultKeyMap but you may pass a custom map when required. Remarks If the command path specifies an absolute or relative directory then the command will be execute from there, otherwise the method will first attempt executing the command from the current directory before searching the PATH for the command. You may omit the command file extension and the method will try .exe , .cmd , and .bat extensions in that order."
  },
  "neonsdk/api/Neon.WinTTY.html": {
    "href": "neonsdk/api/Neon.WinTTY.html",
    "title": "Namespace Neon.WinTTY | NeonSDK documentation",
    "keywords": "Namespace Neon.WinTTY Classes ConsoleTTY Implements a pseudo TTY that links the Console for the current application to a remote process started via a command line."
  },
  "neonsdk/api/Neon.WSL.html": {
    "href": "neonsdk/api/Neon.WSL.html",
    "title": "Namespace Neon.WSL | NeonSDK documentation",
    "keywords": "Namespace Neon.WSL Classes Wsl2Proxy INTERNAL USE ONLY: Handles interactions with our neonKUBE WSL2 distribution running on the local Windows workstation. Note that this is not intended to be generally useful at this time."
  },
  "neonsdk/api/Neon.WSL.Wsl2Proxy.html": {
    "href": "neonsdk/api/Neon.WSL.Wsl2Proxy.html",
    "title": "Class Wsl2Proxy | NeonSDK documentation",
    "keywords": "Class Wsl2Proxy INTERNAL USE ONLY: Handles interactions with our neonKUBE WSL2 distribution running on the local Windows workstation. Note that this is not intended to be generally useful at this time. Inheritance Object Wsl2Proxy Namespace : Neon.WSL Assembly : Neon.WSL.dll Syntax public sealed class Wsl2Proxy : IDisposable Remarks WSL2 distibutions are managed by the Microsoft wsl.exe command line tool. This includes commands to import/export, register, and terminate WSL2 Linux distributions as well as the ability to login and/or execute commands, wsl.exe seems to be primarily intended to be used by users performing interactive commands from within some sort of command shell like cmd.exe , Powershell, cmdr.exe , ms-terminal , etc. The Wsl2Proxy class wraps the wsl.exe tool such that Linux commands can be be invoked via code running on Windows. We currently use this for managing WSL2 for a local neonDESKTOP cluster. Managing WSL2 Distros This class provides these static methods for managing distros: Import(String, String, String) Imports a WSL2 distro from a TAR file. Export(String, String) Exports a WSL2 distro to a TAR file. Terminate(String) Terminates the named WSL2 disto. Unregister(String) Unregisters the named WSL2 distribution. Note that you must Terminate(String) it first when the distro is running. List(Boolean, Boolean) Lists registered distributions, optionally returning only the running distros. Executing Commands To start a WSL distro, you'll need to instantiate an instance via new Wsl2Proxy(String, String) , passing the registered name of the distribution and optionally the Linux user name (defaults to root ). By default, the constructor logs into the distro using specified user name. This class provides several methods for executing commands within the distro: Execute(String, Object[]) Executes a command as the current user. ExecuteAs(String, String, Object[]) Executes a command as a specific user. ExecuteScript(String) Executes a script as the current user. ExecuteScriptAs(String, String) Executes a script as a specific user. SudoExecute(String, Object[]) sudo executes a command as the current user. SudoExecuteAs(String, String, Object[]) sudo executes a command as a specific user. SudoExecuteScript(String) sudo executes a script as the current user. SudoExecuteScriptAs(String, String) sudo executes a script as the current user. note IMPORTANT: Do not depend on the executed commands sharing the same environment variables. Also, don't depend on the Linux login having been started. Managing Files WSL2 distro file management is pretty easy because Windows mounts its file system at /mnt/DRIVE-LETTER/... within the distro so Linux code can access them and the distro files are mounted on Windows at //wsl$/DISTRO-NAME/... . ToLinuxPath(String) Maps a host Windows file system path to the equivalent path within the Linux distro. ToWindowsPath(String) Maps a Linux distro file system path to the equivalent path on the Windows host. UploadFile(String, String, String, String, Boolean) Uploads a file from the Windows host to the distro, optionally setting the owner and permissions as well as optionally converting Windows style line endings (\\r\\n) to Linux (\\n); note These file methods work when Wsl2Proxy instance regardless of whether the instance is logged into the distro or not. Constructors Wsl2Proxy(String, String) Constructs a proxy connected to a specific WSL2 distribution, starting the distribution by default of it's not already running. Declaration public Wsl2Proxy(string name, string user = \"root\") Parameters Type Name Description String name Identifies the target WSL2 distribution. String user Optionally connect as a non-root user. Remarks The user passed will become the default user for subsequent proxy operations. This may be overridden by for specific operations by specifying a different user in the call. Fields RootUser The name of the root Linux user. Declaration public const string RootUser = \"root\" Field Value Type Description String Properties IsDebian Returns true for Debian/Ubuntu based distributions. Declaration public bool IsDebian { get; } Property Value Type Description Boolean IsRunning Determines whether the distribution is running. Declaration public bool IsRunning { get; } Property Value Type Description Boolean IsWsl2Enabled Returns true if WSL2 is enabled on the local Windows workstation. Declaration public static bool IsWsl2Enabled { get; } Property Value Type Description Boolean Name Returns the distribution's name. Declaration public string Name { get; } Property Value Type Description String OSRelease Returns a dictionary with the properties loaded from the /etc/os-release file on the distribution. Declaration public IDictionary<string, string> OSRelease { get; } Property Value Type Description IDictionary < String , String > Remarks The contents will look something like: NAME=Ubuntu VERSION=20.04.1 LTS (Focal Fossa) ID=ubuntu ID_LIKE=debian PRETTY_NAME=Ubuntu 20.04.1 LTS VERSION_ID=20.04 HOME_URL=https://www.ubuntu.com/ SUPPORT_URL=https://help.ubuntu.com/ BUG_REPORT_URL=https://bugs.launchpad.net/ubuntu/ PRIVACY_POLICY_URL=https://www.ubuntu.com/legal/terms-and-policies/privacy-policy VERSION_CODENAME=focal UBUNTU_CODENAME=focal User Sppecifies the distribution user account to use for operations. This will be initialized to the user passed to the constructor but may be changed afterwards to perform operations under other accounts. Declaration public string User { get; set; } Property Value Type Description String Methods Dispose() Declaration public void Dispose() Execute(String, Object[]) Executes a program within the distribution as the current user. note The program will be executed within the current login session if there is one. Declaration public ExecuteResponse Execute(string path, params object[] args) Parameters Type Name Description String path The program path. Object [] args Optional program arguments. Returns Type Description ExecuteResponse An ExecuteResponse with the command results. ExecuteAs(String, String, Object[]) Executes a program within the distribution as a specific user. Declaration public ExecuteResponse ExecuteAs(string user, string path, params object[] args) Parameters Type Name Description String user The user. String path The program path. Object [] args Optional program arguments. Returns Type Description ExecuteResponse An ExecuteResponse with the command results. ExecuteScript(String) Executes a bash script on the distribution as the current user. note The script will be executed within the current login session if there is one. Declaration public ExecuteResponse ExecuteScript(string script) Parameters Type Name Description String script The script text. Returns Type Description ExecuteResponse An ExecuteResponse with the command results. ExecuteScriptAs(String, String) Executes a bash script on the distribution as a specific user. Declaration public ExecuteResponse ExecuteScriptAs(string user, string script) Parameters Type Name Description String user The user. String script The script text. Returns Type Description ExecuteResponse An ExecuteResponse with the command results. Exists(String) Checks to see if a named distribution exists. Declaration public static bool Exists(string name) Parameters Type Name Description String name The distribution name. Returns Type Description Boolean true if the distribution exists. Export(String, String) Exports a named distribution to a TAR file. Declaration public static void Export(string name, string tarPath) Parameters Type Name Description String name The new distribution's name. String tarPath Path to the distribution output TAR file. GetDefault() Returns the name of the default WSL2 distribution, if any. Declaration public static string GetDefault() Returns Type Description String The name of the default distribution or null . Import(String, String, String) Imports a distribution from a TAR file. Declaration public static void Import(string name, string tarPath, string targetFolder) Parameters Type Name Description String name The new distribution's name. String tarPath Path to the distribution input TAR file. String targetFolder Path to the folder where the distribution image will be created. IsPortListening(Int32) Determines whether a WSL2 IPv4 port is currently listening for connections. Declaration public bool IsPortListening(int port) Parameters Type Name Description Int32 port The port number. Returns Type Description Boolean true if the port is available. Remarks This is useful for ensuring that another distro hasn't started listening on a port that's going to conflict with this distro. This can happen because all WSL2 distros share the same network namespace. This can also happen when a Windows process is listening on the port. List(Boolean, Boolean) Lists the names of the installed WSL2 distributions, optionally limiting this to the running distributions. Declaration public static IEnumerable<string> List(bool runningOnly = false, bool keepDefault = false) Parameters Type Name Description Boolean runningOnly Optionally return just the running distribitions. Boolean keepDefault Optionally retain the \" (Default)\" substring identifying the default repo. Returns Type Description IEnumerable < String > The list of WSL2 distributions. SudoExecute(String, Object[]) Executes a program within the distribution as the current user under SUDO. note The program will be executed within the current login session if there is one. Declaration public ExecuteResponse SudoExecute(string path, params object[] args) Parameters Type Name Description String path The program path. Object [] args Optional program arguments. Returns Type Description ExecuteResponse An ExecuteResponse with the command results. SudoExecuteAs(String, String, Object[]) Executes a program within the distribution as a specifc user under SUDO. Declaration public ExecuteResponse SudoExecuteAs(string user, string path, params object[] args) Parameters Type Name Description String user The user. String path The program path. Object [] args Optional pprogram arguments. Returns Type Description ExecuteResponse An ExecuteResponse with the command results. SudoExecuteScript(String) Executes a bash script as SUDO on the distribution as the current user. note The script will be executed within the current login session if there is one. Declaration public ExecuteResponse SudoExecuteScript(string script) Parameters Type Name Description String script The script text. Returns Type Description ExecuteResponse An ExecuteResponse with the command results. SudoExecuteScriptAs(String, String) Executes a bash script as SUDO on the distribution as a specific user. Declaration public ExecuteResponse SudoExecuteScriptAs(string user, string script) Parameters Type Name Description String user The user. String script The script text. Returns Type Description ExecuteResponse An ExecuteResponse with the command results. Terminate() Terminates the distribution if it's running. Declaration public void Terminate() Terminate(String) Terminates the named distribution if it exists and is running. Declaration public static void Terminate(string name) Parameters Type Name Description String name Identifies the target WSL2 distribution. ToLinuxPath(String) Maps a fully qualified Windows host filesystem path to the corresponding path within the Linux distribution. Declaration public string ToLinuxPath(string windowsPath) Parameters Type Name Description String windowsPath The fully qualified host Windows path. Returns Type Description String The corresponding Windows host path. ToWindowsPath(String) Maps a fully qualified filesystem path within the Linux distribution to the corresponding Windows filesystem path on the host machine. Declaration public string ToWindowsPath(string linuxPath) Parameters Type Name Description String linuxPath The fully qualified internal Linux path. Returns Type Description String The corresponding Linux path. Remarks note This assumes that the internal Linux path includes only characters supported by Windows. Unregister(String) Terminates the named distribution (if it exists ans is running) and then unregisters it with WSL2 effectively removing it. Declaration public static void Unregister(string name) Parameters Type Name Description String name Identifies the target WSL2 distribution. UploadFile(String, String, String, String, Boolean) Creates a text file at the specifid path within the distribution. The file will be created with the current User as the owner by default by this can be overridden. Declaration public void UploadFile(string path, string text, string owner = null, string permissions = null, bool toLinuxText = false) Parameters Type Name Description String path The target path. String text The text to be written. String owner Optionally overrides the current user when setting the file owner. String permissions Optionally specifies the linux file permissions. Boolean toLinuxText Optionally convertes conversion of Windows (CRLF) line endings to the Linux standard (LF)."
  },
  "neonsdk/api/Neon.XenServer.html": {
    "href": "neonsdk/api/Neon.XenServer.html",
    "title": "Namespace Neon.XenServer | NeonSDK documentation",
    "keywords": "Namespace Neon.XenServer Classes XenClient This class provides a simple light-weight XenServer or XCP-ng API that connects to the XenServer host operating system via SSH and executes commands using the xe XenServer client tool. XenClient.MachineOperations Implements the XenClient virtual machine operations. XenClient.StorageOperations Implements the XenClient virtual machine template operations. XenClient.TemplateOperations Implements the XenClient virtual machine template operations. XenException Thrown by XenClient when an error is detected. XenHostInfo Holds information about a XenServer or XCP-ng host machine. XenObject Base class for all XenServer objects that implement common properties. XenResponse Holds the response from a XenServer command invoked using the xe CLI. XenStorageRepository Describes a XenServer storage repository. XenTempIso Holds information about a temporary ISO. These are created temporarily and used during neonKUBE cluster setup to inject a configuration script into a new node VM during cluster setup. See CreateTempIso(String, String) for more information. XenTemplate Describes a XenServer virtual machine template. XenVirtualDisk Specifies virtual disk creation parameters. XenVirtualMachine Describes a XenServer virtual machine. Interfaces IXenClient INTERNAL USE ONLY: Used internally by cluster as a potentially temporary hack required by SetupController<NodeMetadata> to display XenServer provisioning status. This may be removed at some point in the future. Enums XenVmPowerState Enumerates the possible virtual machine states."
  },
  "neonsdk/api/Neon.XenServer.IXenClient.html": {
    "href": "neonsdk/api/Neon.XenServer.IXenClient.html",
    "title": "Interface IXenClient | NeonSDK documentation",
    "keywords": "Interface IXenClient INTERNAL USE ONLY: Used internally by cluster as a potentially temporary hack required by SetupController<NodeMetadata> to display XenServer provisioning status. This may be removed at some point in the future. Namespace : Neon.XenServer Assembly : Neon.XenServer.dll Syntax public interface IXenClient Properties Name Returns the name of the connected XenServer. Declaration string Name { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.XenServer.XenClient.html": {
    "href": "neonsdk/api/Neon.XenServer.XenClient.html",
    "title": "Class XenClient | NeonSDK documentation",
    "keywords": "Class XenClient This class provides a simple light-weight XenServer or XCP-ng API that connects to the XenServer host operating system via SSH and executes commands using the xe XenServer client tool. Inheritance Object XenClient Implements IXenClient Namespace : Neon.XenServer Assembly : Neon.XenServer.dll Syntax public sealed class XenClient : IDisposable, IXenClient Remarks Ideally, we'd use the XenServer .NET API but at this time (Jan 2018), the API is not compatible with .NET Core which cluster neon-cli requires because it needs to run on Windows, OSX, and perhaps some day within the Ubuntu based tool container. The workaround is to simnply connect to the XenServer host via SSH and perform commands using the xe command line tool installed with XenServer. We're going to take advantage of the SSH.NET package to handle the SSH connection and command execution. XenServer template operations are implemented by the Template property, storage repository operations by Storage and virtual machine operations by Machine . Constructors XenClient(String, String, String, String, String) Constructor. Note that you should dispose the instance when you're finished with it. Declaration public XenClient(string addressOrFQDN, string username, string password, string name = null, string logFolder = null) Parameters Type Name Description String addressOrFQDN The target XenServer IP address or FQDN. String username The user name. String password The password. String name Optionally specifies the XenServer name. String logFolder The folder where log files are to be written, otherwise null or empty to disable logging. Properties Address Returns the address or FQDN of the remote XenServer. Declaration public string Address { get; } Property Value Type Description String LogWriter Returns the client's log writer or null . Declaration public TextWriter LogWriter { get; } Property Value Type Description TextWriter Machine Implements the XenServer virtual machine operations. Declaration public XenClient.MachineOperations Machine { get; } Property Value Type Description XenClient.MachineOperations Name Returns the XenServer name as passed to the constructor. Declaration public string Name { get; } Property Value Type Description String Storage Implements the XenServer storage repository operations. Declaration public XenClient.StorageOperations Storage { get; } Property Value Type Description XenClient.StorageOperations Template Implements the XenServer virtual machine template operations. Declaration public XenClient.TemplateOperations Template { get; } Property Value Type Description XenClient.TemplateOperations Methods Connect() Establishes an SSH connection to the assocated XenServer. Declaration public LinuxSshProxy Connect() Returns Type Description LinuxSshProxy The connected LinuxSshProxy . CreateTempIso(String, String) Used for temporarily uploading an ISO disk to a XenServer such that it can be mounted to a VM, typically for one-time initialization purposes. neonKUBE uses this as a very simple poor man's alternative to cloud-init for initializing a VM on first boot. Declaration public XenTempIso CreateTempIso(string isoPath, string srName = null) Parameters Type Name Description String isoPath Path to the source ISO file on the local workstation. String srName Optionally specifies the storage repository name. neon-UUID with a generated UUID will be used by default. Returns Type Description XenTempIso A XenTempIso with information about the new storage repository and its contents. Remarks During cluster setup on virtualization platforms like XenServer and Hyper-V, neonKUBE need to configure new VMs with IP addresses, hostnames, etc. Traditionally, we've relied on being able to SSH into the VM to perform all of these actions, but this relied on being VM being able to obtain an IP address via DHCP and for setup to be able to discover the assigned address. The dependency on DHCP is somewhat problematic, because it's conceivable that this may not be available for more controlled environments. We looked into using Linux cloud-init for this, but that requires additional local infrastructure for non-cloud deployments and was also a bit more complex than what we had time for. Instead of cloud-init , we provisioned our XenServer and Hyper-V node templates with a neon-init service that runs before the network service to determine whether a DVD (ISO) is inserted into the VM and runs the neon-init.sh script there one time, if it exists. This script will initialize the node's IP address and could also be used for other configuration as well, like setting user credentials. note In theory, we could have used the same technique for mounting a cloud-init data source via this ISO, but we decided not to go there, at least for now (we couldn't get that working). note neonKUBE doesn't use this technique for true cloud deployments (AWS, Azure, Google,...) because we can configure VM networking directly via the cloud APIs. The XenServer requires the temporary ISO implementation to be a bit odd. We want these temporary ISOs to be created directly on the XenServer host machine so users won't have to configure any additional infrastructure as well as to simplify cluster setup. We'll be creating a local ISO storage repository from a folder on the host. Any files to be added to the repository must exist when the repository is created and it is not possible to add, modify, or remove files from a repository after its been created. note XenServer hosts have only 4GB of free space at the root Linux level, so you must take care not to create large ISOs or to allow these to accumulate. This method uploads the ISO file isoPath from the local workstation to the XenServer host, creating a new folder named with a UUID. Then a new storage repository will be created from this folder and a XenTempIso will be returned holding details about the new storage repository and its contents. The setup code will use this to insert the ISO into a VM. Once the setup code is done with the ISO, it will eject it from the VM and call RemoveTempIso(XenTempIso) to remove the storage repository. Dispose() Releases any resources associated with the instance. Declaration public void Dispose() GetHostInfo() Returns information about the connected XenServer host machine. Declaration public XenHostInfo GetHostInfo() Returns Type Description XenHostInfo The XenHostInfo . Invoke(String, String[]) Invokes a low-level XE-CLI command on the remote XenServer host that returns text. Declaration public ExecuteResponse Invoke(string command, params string[] args) Parameters Type Name Description String command The XE-CLI command. String [] args The optional arguments formatted as name=value . Returns Type Description ExecuteResponse The command response. InvokeItems(String, String[]) Invokes a low-level XE-CLI command on the remote XenServer host that returns a list of items. Declaration public XenResponse InvokeItems(string command, params string[] args) Parameters Type Name Description String command The XE-CLI command. String [] args The optional arguments formatted as name=value . Returns Type Description XenResponse The command XenResponse . ParseValues(String) Parses xe client properties formatted like name1:value1; name2: value2;... into a dictionary, making it easy to retrieve specific values. Declaration public static Dictionary<string, string> ParseValues(string property) Parameters Type Name Description String property The property string. Returns Type Description Dictionary < String , String > The case-insensitive dictionary. RemoveTempIso(XenTempIso) Removes a temporary ISO disk along with its PBD and storage repository. Declaration public void RemoveTempIso(XenTempIso tempIso) Parameters Type Name Description XenTempIso tempIso The ISO disk information returned by CreateTempIso(String, String) . Remarks CreateTempIso(String, String) for more information. SafeInvoke(String, String[]) Invokes a low-level XE-CLI command on the remote XenServer host that returns text, throwing an exception on failure. Declaration public ExecuteResponse SafeInvoke(string command, params string[] args) Parameters Type Name Description String command The XE-CLI command. String [] args The optional arguments formatted as name=value . Returns Type Description ExecuteResponse The command response. Exceptions Type Condition XenException Thrown if the operation failed. SafeInvokeItems(String, String[]) Invokes a low-level XE-CLI command on the remote XenServer host that returns a list of items, throwing an exception on failure. Declaration public XenResponse SafeInvokeItems(string command, params string[] args) Parameters Type Name Description String command The XE-CLI command. String [] args The optional arguments formatted as name=value . Returns Type Description XenResponse The command XenResponse . Exceptions Type Condition XenException Thrown if the operation failed. Implements IXenClient"
  },
  "neonsdk/api/Neon.XenServer.XenClient.MachineOperations.html": {
    "href": "neonsdk/api/Neon.XenServer.XenClient.MachineOperations.html",
    "title": "Class XenClient.MachineOperations | NeonSDK documentation",
    "keywords": "Class XenClient.MachineOperations Implements the XenClient virtual machine operations. Inheritance Object XenClient.MachineOperations Namespace : Neon.XenServer Assembly : Neon.XenServer.dll Syntax public class MachineOperations Methods AddDisk(XenVirtualMachine, XenVirtualDisk) Adds a new disk to a virtual machine. note The virtual machine must be stopped. Declaration public void AddDisk(XenVirtualMachine virtualMachine, XenVirtualDisk disk) Parameters Type Name Description XenVirtualMachine virtualMachine The target virtual machine. XenVirtualDisk disk The disk information. Create(String, String, Int32, Int64, Int64, Boolean, IEnumerable<XenVirtualDisk>, String, String) Creates a virtual machine from a template, optionally initializing its memory and disk size. note This does not start the machine. Declaration public XenVirtualMachine Create(string name, string templateName, int cores = 2, long memoryBytes = 0L, long diskBytes = 0L, bool snapshot = false, IEnumerable<XenVirtualDisk> extraDisks = null, string primaryStorageRepository = \"Local storage\", string extraStorageRespository = \"Local storage\") Parameters Type Name Description String name Name for the new virtual machine. String templateName Identifies the template. Int32 cores Optionally specifies the number of CPU cores to be assigned. This defaults to 2 . Int64 memoryBytes Optionally specifies the memory assigned to the machine (overriding the template). Int64 diskBytes Optionally specifies the primary disk size (overriding the template). Boolean snapshot Optionally specifies that the virtual machine should snapshot the template. This defaults to false . IEnumerable < XenVirtualDisk > extraDisks Optionally specifies any additional virtual disks to be created and then attached to the new virtual machine. String primaryStorageRepository Optionally specifies the storage repository where the virtual machine's primary disk will be created. This defaults to Local storage . String extraStorageRespository Optionally specifies the storage repository where any extra disks for the virtual machine will be created. This defaults to Local storage . note The default value assumes that your XenServer pool is NOT CONFIGURED FOR HA . Auto start VMs are not recommended for HA pools due to potential conflicts. We're not sure what problems having autostart VMs in a HA pool cause. Returns Type Description XenVirtualMachine The new XenVirtualMachine . Remarks note snapshot is ignored if the virtual machine template is not hosted by the same storage repository where the virtual machine is to be created. Exceptions Type Condition XenException Thrown if the operation failed. DiskCount(XenVirtualMachine) Returns the number of disks attached to a virtual machine. Declaration public int DiskCount(XenVirtualMachine virtualMachine) Parameters Type Name Description XenVirtualMachine virtualMachine The target virtual machine. Returns Type Description Int32 The number of attached disks. Find(String, String) Finds a specific virtual machine by name or unique ID. Declaration public XenVirtualMachine Find(string name = null, string uuid = null) Parameters Type Name Description String name Specifies the target name. String uuid Specifies the target unique ID. Returns Type Description XenVirtualMachine The named item or null if it doesn't exist. Remarks note One of name or uuid must be specified. Exceptions Type Condition XenException Thrown if the operation failed. List() Lists the XenServer virtual machines. Declaration public List<XenVirtualMachine> List() Returns Type Description List < XenVirtualMachine > The list of virtual machines. Remarks note Only virtual machines with names will be returned with the assumption that unnamed VMs are XenServer infrastructure related. Exceptions Type Condition XenException Thrown if the operation failed. Reboot(XenVirtualMachine, Boolean) Reboots a virtual machine. Declaration public void Reboot(XenVirtualMachine virtualMachine, bool force = false) Parameters Type Name Description XenVirtualMachine virtualMachine The target virtual machine. Boolean force Optionally forces the virtual machine to reboot. Exceptions Type Condition XenException Thrown if the operation failed. Remove(XenVirtualMachine, Boolean) Removes a virtual machine and its drives. Declaration public void Remove(XenVirtualMachine virtualMachine, bool keepDrives = false) Parameters Type Name Description XenVirtualMachine virtualMachine The target virtual machine. Boolean keepDrives Optionally retains the VM disks. Shutdown(XenVirtualMachine, Boolean) Shuts down a virtual machine. Declaration public void Shutdown(XenVirtualMachine virtualMachine, bool turnOff = false) Parameters Type Name Description XenVirtualMachine virtualMachine The target virtual machine. Boolean turnOff Optionally just turns the VM off without performing a graceful shutdown first. note WARNING! This could result in the loss of unsaved data. Exceptions Type Condition XenException Thrown if the operation failed. Start(XenVirtualMachine) Starts a stopped virtual machine resumes a suspended or paused virtual machine. This does nothing when the virtual machine is already running. Declaration public void Start(XenVirtualMachine virtualMachine) Parameters Type Name Description XenVirtualMachine virtualMachine The target virtual machine. Exceptions Type Condition XenException Thrown if the operation failed. Suspend(XenVirtualMachine) Suspends a virtual machine by persisting its memory to disk and stopping the virtual machine so that it can be restarted where it left off later. Declaration public void Suspend(XenVirtualMachine virtualMachine) Parameters Type Name Description XenVirtualMachine virtualMachine The target virtual machine. Exceptions Type Condition XenException Thrown if the operation failed."
  },
  "neonsdk/api/Neon.XenServer.XenClient.StorageOperations.html": {
    "href": "neonsdk/api/Neon.XenServer.XenClient.StorageOperations.html",
    "title": "Class XenClient.StorageOperations | NeonSDK documentation",
    "keywords": "Class XenClient.StorageOperations Implements the XenClient virtual machine template operations. Inheritance Object XenClient.StorageOperations Namespace : Neon.XenServer Assembly : Neon.XenServer.dll Syntax public class StorageOperations Methods Find(String, String, Boolean) Finds a specific storage repository by name or unique ID. Declaration public XenStorageRepository Find(string name = null, string uuid = null, bool mustExist = false) Parameters Type Name Description String name Specifies the target name. String uuid Specifies the target unique ID. Boolean mustExist Optionally specifies that the request repository must exist. This defaults to false . Returns Type Description XenStorageRepository The named item or null if it doesn't exist. Remarks note One of name or uuid must be specified. Exceptions Type Condition ArgumentException Thrown if neither name or uuid were passed. KeyNotFoundException Thrown if mustExist is true and the request repository doesn't exist. GetTargetStorageRepository(String) Returns the XenServer storage repository where the image template and virtual machine disk images will be stored. Declaration public XenStorageRepository GetTargetStorageRepository(string nameOrUuid) Parameters Type Name Description String nameOrUuid The storage repository name or UUID. Returns Type Description XenStorageRepository The local storage repository. Exceptions Type Condition XenException Thrown if the operation failed. List() Lists the XenServer storage repositories. Declaration public List<XenStorageRepository> List() Returns Type Description List < XenStorageRepository > The list of storage repositories."
  },
  "neonsdk/api/Neon.XenServer.XenClient.TemplateOperations.html": {
    "href": "neonsdk/api/Neon.XenServer.XenClient.TemplateOperations.html",
    "title": "Class XenClient.TemplateOperations | NeonSDK documentation",
    "keywords": "Class XenClient.TemplateOperations Implements the XenClient virtual machine template operations. Inheritance Object XenClient.TemplateOperations Namespace : Neon.XenServer Assembly : Neon.XenServer.dll Syntax public class TemplateOperations Methods Destroy(XenTemplate) Removes a virtual machine template. Declaration public void Destroy(XenTemplate template) Parameters Type Name Description XenTemplate template The target template. Exceptions Type Condition XenException Thrown if the operation failed. Find(String, String) Finds a specific virtual machine template by name or unique ID. Declaration public XenTemplate Find(string name = null, string uuid = null) Parameters Type Name Description String name Specifies the target name. String uuid Specifies the target unique ID. Returns Type Description XenTemplate The named item or null if it doesn't exist. Remarks note One of name or uuid must be specified. Exceptions Type Condition XenException Thrown if the operation failed. ImportVmTemplate(String, String, String, String) Installs from an XVA or OVA virtual machine template file on the local workstation to the remote XenServer host an XVA or OVA virtual machine template, optionally renaming it. Declaration public XenTemplate ImportVmTemplate(string path, string name = null, string repositoryNameOrUuid = \"Local storage\", string description = null) Parameters Type Name Description String path The path to the template file on the local workstation. String name The optional template name. String repositoryNameOrUuid Optionally specifies the target storage repository by name or UUID. This defaults to Local storage . String description Optionally specifies the template description. Returns Type Description XenTemplate The installed template. Exceptions Type Condition XenException Thrown if the operation failed. List() Lists the XenServer virtual machine templates. Declaration public List<XenTemplate> List() Returns Type Description List < XenTemplate > The list of templates. Exceptions Type Condition XenException Thrown if the operation failed. Rename(XenTemplate, String) Renames a virtual machine template. Declaration public XenTemplate Rename(XenTemplate template, string newName) Parameters Type Name Description XenTemplate template The target template. String newName The new template name. Returns Type Description XenTemplate The modified template. Exceptions Type Condition XenException Thrown if the operation failed."
  },
  "neonsdk/api/Neon.XenServer.XenException.html": {
    "href": "neonsdk/api/Neon.XenServer.XenException.html",
    "title": "Class XenException | NeonSDK documentation",
    "keywords": "Class XenException Thrown by XenClient when an error is detected. Inheritance Object Exception XenException Namespace : Neon.XenServer Assembly : Neon.XenServer.dll Syntax public class XenException : Exception, ISerializable Constructors XenException(String, Exception) Constructor. Declaration public XenException(string message, Exception innerException = null) Parameters Type Name Description String message The exception message. Exception innerException Optionally specifies an inner exception. Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.XenServer.XenHostInfo.html": {
    "href": "neonsdk/api/Neon.XenServer.XenHostInfo.html",
    "title": "Class XenHostInfo | NeonSDK documentation",
    "keywords": "Class XenHostInfo Holds information about a XenServer or XCP-ng host machine. Inheritance Object XenHostInfo Namespace : Neon.XenServer Assembly : Neon.XenServer.dll Syntax public class XenHostInfo Properties AvailableDisk Returns the bytes of disk available for new virtual machines. Declaration public long AvailableDisk { get; } Property Value Type Description Int64 AvailableMemory Returns the bytes of memory available for new virtual machines. Declaration public long AvailableMemory { get; } Property Value Type Description Int64 Edition Indicates the installed edition. This will be xcp-ng or xenserver . Declaration public string Edition { get; } Property Value Type Description String Params Holds the raw host parameters. Declaration public IDictionary<string, string> Params { get; } Property Value Type Description IDictionary < String , String > UsableCores Returns the number of cores usable by virtual machines. note This includes all usable cores and includes cores that are pinned to specific virtual machines. Declaration public int UsableCores { get; set; } Property Value Type Description Int32 Version Indicates the XenServer/XCP-ng version number. Declaration public SemanticVersion Version { get; } Property Value Type Description SemanticVersion"
  },
  "neonsdk/api/Neon.XenServer.XenObject.html": {
    "href": "neonsdk/api/Neon.XenServer.XenObject.html",
    "title": "Class XenObject | NeonSDK documentation",
    "keywords": "Class XenObject Base class for all XenServer objects that implement common properties. Inheritance Object XenObject XenStorageRepository XenTemplate XenVirtualMachine Namespace : Neon.XenServer Assembly : Neon.XenServer.dll Syntax public class XenObject Properties Properties Returns the read-only dictionary including all raw object properties. Declaration public IDictionary<string, string> Properties { get; } Property Value Type Description IDictionary < String , String >"
  },
  "neonsdk/api/Neon.XenServer.XenResponse.html": {
    "href": "neonsdk/api/Neon.XenServer.XenResponse.html",
    "title": "Class XenResponse | NeonSDK documentation",
    "keywords": "Class XenResponse Holds the response from a XenServer command invoked using the xe CLI. Inheritance Object XenResponse Namespace : Neon.XenServer Assembly : Neon.XenServer.dll Syntax public class XenResponse Properties ExitCode Returns the command exit code. Declaration public int ExitCode { get; } Property Value Type Description Int32 Items The list of raw property dictionaries returned by the command. Declaration public List<Dictionary<string, string>> Items { get; } Property Value Type Description List < Dictionary < String , String >> Response Returns the low-level command response. Declaration public ExecuteResponse Response { get; } Property Value Type Description ExecuteResponse Methods EnsureSuccess() Ensures that the command executed successfully. Declaration public void EnsureSuccess() Exceptions Type Condition ExecuteException Thrown when the command failed."
  },
  "neonsdk/api/Neon.XenServer.XenStorageRepository.html": {
    "href": "neonsdk/api/Neon.XenServer.XenStorageRepository.html",
    "title": "Class XenStorageRepository | NeonSDK documentation",
    "keywords": "Class XenStorageRepository Describes a XenServer storage repository. Inheritance Object XenObject XenStorageRepository Inherited Members XenObject.Properties Namespace : Neon.XenServer Assembly : Neon.XenServer.dll Syntax public class XenStorageRepository : XenObject Properties ContentType Returns the type of content stored in the repository. Declaration public string ContentType { get; } Property Value Type Description String Host Returns the XenServer host. Declaration public string Host { get; } Property Value Type Description String NameDescription Returns the repository description. Declaration public string NameDescription { get; } Property Value Type Description String NameLabel Returns the repository name. Declaration public string NameLabel { get; } Property Value Type Description String Type Returns the repository type. Declaration public string Type { get; } Property Value Type Description String Uuid Returns the repository unique ID. Declaration public string Uuid { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.XenServer.XenTempIso.html": {
    "href": "neonsdk/api/Neon.XenServer.XenTempIso.html",
    "title": "Class XenTempIso | NeonSDK documentation",
    "keywords": "Class XenTempIso Holds information about a temporary ISO. These are created temporarily and used during neonKUBE cluster setup to inject a configuration script into a new node VM during cluster setup. See CreateTempIso(String, String) for more information. Inheritance Object XenTempIso Namespace : Neon.XenServer Assembly : Neon.XenServer.dll Syntax public class XenTempIso Constructors XenTempIso() Default constructor. Declaration public XenTempIso() Properties IsoName Returns the name of the CD/DVD that can be insterted into a VM. This is currently set to a unique name like neon-dvd-UUID.iso to avoid conflicts. Declaration public string IsoName { get; } Property Value Type Description String PdbUuid Returns the UUID for the temporary Physical Block Device (PBD) hosting the storage repository. Declaration public string PdbUuid { get; } Property Value Type Description String SrPath Returns the path on the XenServer for the folder for the storage repository. Declaration public string SrPath { get; } Property Value Type Description String SrUuid Returns the UUID for the temporary storage repository holding the ISO. Declaration public string SrUuid { get; } Property Value Type Description String VdiUuid Returns the UUID for the ISO VDI. Declaration public string VdiUuid { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.XenServer.XenTemplate.html": {
    "href": "neonsdk/api/Neon.XenServer.XenTemplate.html",
    "title": "Class XenTemplate | NeonSDK documentation",
    "keywords": "Class XenTemplate Describes a XenServer virtual machine template. Inheritance Object XenObject XenTemplate Inherited Members XenObject.Properties Namespace : Neon.XenServer Assembly : Neon.XenServer.dll Syntax public class XenTemplate : XenObject Properties NameDescription Returns the repository description. Declaration public string NameDescription { get; } Property Value Type Description String NameLabel Returns the repository name. Declaration public string NameLabel { get; } Property Value Type Description String Uuid Returns the repository unique ID. Declaration public string Uuid { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.XenServer.XenVirtualDisk.html": {
    "href": "neonsdk/api/Neon.XenServer.XenVirtualDisk.html",
    "title": "Class XenVirtualDisk | NeonSDK documentation",
    "keywords": "Class XenVirtualDisk Specifies virtual disk creation parameters. Inheritance Object XenVirtualDisk Namespace : Neon.XenServer Assembly : Neon.XenServer.dll Syntax public class XenVirtualDisk Properties Description Optionally specifies the disk description. Declaration public string Description { get; set; } Property Value Type Description String Name Optionally specifies the disk name. Declaration public string Name { get; set; } Property Value Type Description String Size The disk size in bytes. Declaration public decimal Size { get; set; } Property Value Type Description Decimal StorageRepository Identifies the storage repository where the disk will be created. This defaults to \"Local storage\" indicating that the disk will be created on the XenServer host's local file system. Declaration public string StorageRepository { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.XenServer.XenVirtualMachine.html": {
    "href": "neonsdk/api/Neon.XenServer.XenVirtualMachine.html",
    "title": "Class XenVirtualMachine | NeonSDK documentation",
    "keywords": "Class XenVirtualMachine Describes a XenServer virtual machine. Inheritance Object XenObject XenVirtualMachine Inherited Members XenObject.Properties Namespace : Neon.XenServer Assembly : Neon.XenServer.dll Syntax public class XenVirtualMachine : XenObject Properties Address Returns the IP address associated with the VM or null if the VM is not running or hasn't obtained an address yet. Declaration public string Address { get; } Property Value Type Description String IsRunning Indicates whether the virtual machine is running. Declaration public bool IsRunning { get; } Property Value Type Description Boolean NameLabel Returns the virtual machine name. Declaration public string NameLabel { get; } Property Value Type Description String PowerState Returns the virtual machine state. Declaration public XenVmPowerState PowerState { get; } Property Value Type Description XenVmPowerState Uuid Returns the virtual machine ID. Declaration public string Uuid { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.XenServer.XenVmPowerState.html": {
    "href": "neonsdk/api/Neon.XenServer.XenVmPowerState.html",
    "title": "Enum XenVmPowerState | NeonSDK documentation",
    "keywords": "Enum XenVmPowerState Enumerates the possible virtual machine states. Namespace : Neon.XenServer Assembly : Neon.XenServer.dll Syntax public enum XenVmPowerState Fields Name Description Halted The virtual machine is turned off. Paused The virtual machine is either paused with its memory still loaded in RAM or suspended with its memory persisted to disk. Running The virtual machine is running. Unknown Could not determine the virtual machine state. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Xunit.AnsiblePlayer.html": {
    "href": "neonsdk/api/Neon.Xunit.AnsiblePlayer.html",
    "title": "Class AnsiblePlayer | NeonSDK documentation",
    "keywords": "Class AnsiblePlayer Used for running Ansible playbooks within unit tests. Inheritance Object AnsiblePlayer Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public static class AnsiblePlayer Methods Play(String, String[]) Plays a playbook within a temporary directory using neon ansible play -- [args] playbook . note This method will have Ansible gather facts by default which can be quite slow. Consider using PlayNoGather(String, String[]) instead for unit tests that don't required the facts. Declaration public static AnsiblePlayResults Play(string playbook, params string[] args) Parameters Type Name Description String playbook The playbook text. String [] args Optional command line arguments to be included in the command. Returns Type Description AnsiblePlayResults An AnsiblePlayResults describing what happened. Remarks note Use this method for playbooks that need to read or write files. PlayInFolder(String, String, String[]) Plays a playbook within a specific working directory using neon ansible play -- [args] playbook . note This method will have Ansible gather facts by default which can be quite slow. Consider using PlayInFolderNoGather(String, String, String[]) instead for unit tests that don't required the facts. Declaration public static AnsiblePlayResults PlayInFolder(string workDir, string playbook, params string[] args) Parameters Type Name Description String workDir The playbook working directory (or null to use a temporary folder). String playbook The playbook text. String [] args Optional command line arguments to be included in the command. Returns Type Description AnsiblePlayResults An AnsiblePlayResults describing what happened. Remarks note Use this method for playbooks that need to read or write files. PlayInFolderNoGather(String, String, String[]) Plays a playbook without gathering facts by default within a specific working directory using neon ansible play -- [args] playbook . Declaration public static AnsiblePlayResults PlayInFolderNoGather(string workDir, string playbook, params string[] args) Parameters Type Name Description String workDir The playbook working directory (or null to use a temporary folder). String playbook The playbook text. String [] args Optional command line arguments to be included in the command. Returns Type Description AnsiblePlayResults An AnsiblePlayResults describing what happened. Remarks note Use this method for playbooks that need to read or write files. This method will add gather_facts: no to the playbook when this argument isn't already present. PlayNoGather(String, String[]) Plays a playbook without gathering facts by default within a temporary directory using neon ansible play -- [args] playbook . Declaration public static AnsiblePlayResults PlayNoGather(string playbook, params string[] args) Parameters Type Name Description String playbook The playbook text. String [] args Optional command line arguments to be included in the command. Returns Type Description AnsiblePlayResults An AnsiblePlayResults describing what happened. Remarks note Use this method for playbooks that need to read or write files. This method will add gather_facts: no to the playbook when this argument isnt already present."
  },
  "neonsdk/api/Neon.Xunit.AnsiblePlayResults.html": {
    "href": "neonsdk/api/Neon.Xunit.AnsiblePlayResults.html",
    "title": "Class AnsiblePlayResults | NeonSDK documentation",
    "keywords": "Class AnsiblePlayResults Holds the results from an AnsiblePlayer play operation. Inheritance Object AnsiblePlayResults Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class AnsiblePlayResults Properties RawResults Returns the raw execution results. Declaration public ExecuteResponse RawResults { get; } Property Value Type Description ExecuteResponse TaskResults Returns the list of AnsibleTaskResult instance in the order of execution. Declaration public List<AnsibleTaskResult> TaskResults { get; } Property Value Type Description List < AnsibleTaskResult > Methods GetTaskResult(String) Returns the first AnsibleTaskResult for a named task. Declaration public AnsibleTaskResult GetTaskResult(string taskName) Parameters Type Name Description String taskName The task name. Returns Type Description AnsibleTaskResult The AnsibleTaskResult or null if the named task was not found. Remarks note Ansible does not enforce task name uniqueness, so it's possible to have more than one task sharing the same name."
  },
  "neonsdk/api/Neon.Xunit.AnsibleTaskResult.html": {
    "href": "neonsdk/api/Neon.Xunit.AnsibleTaskResult.html",
    "title": "Class AnsibleTaskResult | NeonSDK documentation",
    "keywords": "Class AnsibleTaskResult Holds the results for a specific task executed in an Ansible playbook. Inheritance Object AnsibleTaskResult Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class AnsibleTaskResult Properties Changed Returns true if the task made any changes. Declaration public bool Changed { get; } Property Value Type Description Boolean ErrorText Returns the standard error text from the task. Declaration public string ErrorText { get; } Property Value Type Description String HasStatus Returns true for tasks that returned JSON status. Declaration public bool HasStatus { get; } Property Value Type Description Boolean Message Returns the error message (if any). Declaration public string Message { get; } Property Value Type Description String OutputText Returns the standard output text from the task. Declaration public string OutputText { get; } Property Value Type Description String RawResults Returns the raw task results. Declaration public string RawResults { get; } Property Value Type Description String Success Returns true if the task succeeded. Declaration public bool Success { get; } Property Value Type Description Boolean TaskName Returns the task name. Declaration public string TaskName { get; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Xunit.AspNetFixture.html": {
    "href": "neonsdk/api/Neon.Xunit.AspNetFixture.html",
    "title": "Class AspNetFixture | NeonSDK documentation",
    "keywords": "Class AspNetFixture Fixture for testing ASP.NET Core based websites and services. Inheritance Object TestFixture AspNetFixture Implements ITestFixture Inherited Members TestFixture.IsDisposed TestFixture.InAction TestFixture.IsRunning TestFixture.CheckDisposed() TestFixture.CheckWithinAction() TestFixture.Start(Action) TestFixture.Dispose() TestFixture.OnRestart() TestFixture.State Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class AspNetFixture : TestFixture, ITestFixture, IDisposable Constructors AspNetFixture() Constructs the fixture. Declaration public AspNetFixture() Properties BaseAddress Returns the base URI for the running service. Declaration public Uri BaseAddress { get; } Property Value Type Description Uri HttpClient Returns an HttpClient suitable for querying the service. Declaration public HttpClient HttpClient { get; } Property Value Type Description HttpClient JsonClient Returns a JsonClient suitable for querying the service. Declaration public JsonClient JsonClient { get; } Property Value Type Description JsonClient WebHost Returns the service's IWebHost . Declaration public IWebHost WebHost { get; } Property Value Type Description IWebHost Methods Dispose(Boolean) Releases all associated resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. Overrides TestFixture.Dispose(Boolean) Finalize() Finalizer. Declaration protected void Finalize() Reset() INTERNAL USE ONLY: Resets the fixture state. Declaration public override void Reset() Overrides TestFixture.Reset() Restart<TStartup>() Restarts the web service. Declaration public void Restart<TStartup>() where TStartup : class Type Parameters Name Description TStartup Specifies the web service startup class. Start<TStartup>(Action<IWebHostBuilder>, Int32) Starts the ASP.NET service using the default controller factory. note You'll need to call StartAsComposed<TStartup>(Action<IWebHostBuilder>, Int32) instead when this fixture is being added to a ComposedFixture . Declaration public void Start<TStartup>(Action<IWebHostBuilder> hostConfigurator = null, int port = 0) where TStartup : class Parameters Type Name Description Action < IWebHostBuilder > hostConfigurator Optional action providing for customization of the hosting environment. Int32 port The port where the server will listen or zero to allow the operating system to select a free port. Type Parameters Name Description TStartup The startup class for the service. StartAsComposed<TStartup>(Action<IWebHostBuilder>, Int32) Used to start the fixture within a ComposedFixture . Declaration public void StartAsComposed<TStartup>(Action<IWebHostBuilder> hostConfigurator = null, int port = 0) where TStartup : class Parameters Type Name Description Action < IWebHostBuilder > hostConfigurator Optional action providing for customization of the hosting environment. Int32 port The port where the server will listen or zero to allow the operating system to select a free port. Type Parameters Name Description TStartup The startup class for the service. Implements ITestFixture"
  },
  "neonsdk/api/Neon.Xunit.CodeFixture.html": {
    "href": "neonsdk/api/Neon.Xunit.CodeFixture.html",
    "title": "Class CodeFixture | NeonSDK documentation",
    "keywords": "Class CodeFixture Used to execute some custom code while ComposedFixture is starting subfixtures. This is typically used to perform additional configuration of a ServiceMap , etc. to configure components like instances for integration testing. Inheritance Object TestFixture CodeFixture Implements ITestFixture Inherited Members TestFixture.IsDisposed TestFixture.InAction TestFixture.IsRunning TestFixture.CheckDisposed() TestFixture.CheckWithinAction() TestFixture.Start(Action) TestFixture.Dispose() TestFixture.OnRestart() TestFixture.State Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class CodeFixture : TestFixture, ITestFixture, IDisposable Remarks A common use case for this is to deploy a cluster of services in-process with databases and/or workflow engines deployed as local Docker containers by other test fixtures. The idea is to add a CodeFixture via AddFixture<TFixture>(String, TFixture, Action<TFixture>, Int32) , passing the Action as a function that performs any custom configuration. note CodeFixture really doesn't do anything by itself. It's purpose is simply to provide a mechanism for adding and executing your custom code to ComposedFixture . You action code can then do things like initialize the database schema and test data as well as initializing a ServiceMap by setting the environment variables and configuration files for any instances that will also be deployed for the test. Many integration test scenarios follow this pattern: Implement a unit test derived from IClassFixture<ComposedFixture> . In the test constructor, add any database and/or workflow engine fixtures as group=0 . These fixtures will start in parallel and will be running before any fixtures in subsequent groups are started. Then add a CodeFixture to the cluster fixture via AddFixture<TFixture>(String, TFixture, Action<TFixture>, Int32) , passing your action as group=1 . Your action should perform any custom configuration. Add your and/or other fixtures as group=2 or beyond, as required. So when the ComposedFixture starts, it'll start the database/workflow engine fixtures first as group=0 and then start your CodeFixture as group=1 and your custom action can initialize the database and perhaps configure a ServiceMap . Once your action has returned, ComposedFixture will start the fixtures in any remaining groups with a configured database and ServiceMap before the test framework starts executing your tests cases. Constructors CodeFixture() Constructs the fixture. Declaration public CodeFixture() Methods Dispose(Boolean) Releases all associated resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. Overrides TestFixture.Dispose(Boolean) Finalize() Finalizer. Declaration protected void Finalize() Reset() INTERNAL USE ONLY: Resets the fixture state. Declaration public override void Reset() Overrides TestFixture.Reset() Implements ITestFixture"
  },
  "neonsdk/api/Neon.Xunit.CollectionComparer-1.html": {
    "href": "neonsdk/api/Neon.Xunit.CollectionComparer-1.html",
    "title": "Class CollectionComparer<T> | NeonSDK documentation",
    "keywords": "Class CollectionComparer<T> Compares two collections for strict equality by ensuring they have the same items in the same order. Inheritance Object CollectionComparer<T> Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class CollectionComparer<T> : IEqualityComparer<IEnumerable<T>> where T : IEquatable<T> Type Parameters Name Description T The collection item type. Methods Equals(IEnumerable<T>, IEnumerable<T>) Returns true if two collections are identical. Declaration public bool Equals(IEnumerable<T> collection1, IEnumerable<T> collection2) Parameters Type Name Description IEnumerable <T> collection1 Collection #1. IEnumerable <T> collection2 Collection #2 Returns Type Description Boolean true if the collections are identical. GetHashCode(IEnumerable<T>) Not implemented. Declaration public int GetHashCode(IEnumerable<T> obj) Parameters Type Name Description IEnumerable <T> obj Returns Type Description Int32"
  },
  "neonsdk/api/Neon.Xunit.ComposedFixture.html": {
    "href": "neonsdk/api/Neon.Xunit.ComposedFixture.html",
    "title": "Class ComposedFixture | NeonSDK documentation",
    "keywords": "Class ComposedFixture Implements an ITestFixture that is composed of other test fixtures. Inheritance Object TestFixture ComposedFixture DockerFixture Implements ITestFixture Inherited Members TestFixture.IsDisposed TestFixture.InAction TestFixture.IsRunning TestFixture.CheckDisposed() TestFixture.CheckWithinAction() TestFixture.Dispose() TestFixture.OnRestart() TestFixture.State Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class ComposedFixture : TestFixture, ITestFixture, IDisposable, IEnumerable<KeyValuePair<string, ITestFixture>>, IEnumerable Remarks note IMPORTANT: The base Neon TestFixture implementation DOES NOT support parallel test execution. You need to explicitly disable parallel execution in all test assemblies that rely on thesex test fixtures by adding a C# file called AssemblyInfo.cs with: [assembly: CollectionBehavior(DisableTestParallelization = true, MaxParallelThreads = 1)] and then define your test classes like: public class MyTests : IClassFixture<ComposedFixture>, IDisposable { [Collection(TestCollection.NonParallel)] [CollectionDefinition(TestCollection.NonParallel, DisableParallelization = true)] [Fact] public void Test() { } } Derived test fixtures that modify global machine or other environmental state must implement a public static void EnsureReset() method resets the state to a reasonable default. These will be reflected and called when the first TestFixture is created by the test runner for every test class. INTEGRATION TESTING One use case we've found valuable is to use ComposedFixture to enulate an entire cluster of services as a unit test or in a console application. The idea is to have the unit test or console app code reference all of your service assemblies and then add these services to a ComposedFixture as well as any database and/or workflow engines and then start the composed fixtures. This can require a lot of memory and CPU, but it can be really nice to have an entire service running in Visual Studio where you can set breakpoints anywhere. We've emulated clusters with well over 75 services this way. One of the problems we encountered is that it can take several minutes for the all of the services and other subfixtures to start because they are started one at a time by default. We've enhanced this class so that you can optionally start groups of subfixtures in parallel via the optional group parameter. By default, this is passed as -1 , indicating that subfixtures with group=-1 will be started one at a time in the group they were added to the ComposedFixture and these will be started before any other fixtures. This results in the same behavior as older versions of the fixture. Fixtures added with group passed as zero or a positive number are started when you call Start(Action) . This starts the subfixtures in the same group in parallel with any others in the group. Note that we'll start at the lowest group number and wait for all fixtures to start before moving on to the next group. CodeFixture can be used as a way to inject custom code what will be executed while ComposedFixture is starting subfixtures. The basic idea is to add things like database fixtures as group=0 and then add a CodeFixture with a custom action as group=1 followed by and/or other fixtures as group=2+ . Then the ComposedFixture will start the database first, followed by the CodeFixture where the action has an opportunity to initialize the database before the remaining fixtures are started. Constructors ComposedFixture() Constructor. Declaration public ComposedFixture() Properties Children Returns the subfixtures. Declaration public IEnumerable<ITestFixture> Children { get; } Property Value Type Description IEnumerable < ITestFixture > Count Returns the number of fixtures in the set. Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Returns the fixture at the specified index (based on the order the fixture was added). Declaration public ITestFixture this[int index] { get; } Parameters Type Name Description Int32 index specifies the index of the desired fixture. Property Value Type Description ITestFixture The test fixture. Exceptions Type Condition IndexOutOfRangeException Thrown if index is outside the range of valid indexes. Item[String] Returns the named test fixture. Declaration public ITestFixture this[string name] { get; } Parameters Type Name Description String name The fixture name (case insensitive). Property Value Type Description ITestFixture The test fixture. Exceptions Type Condition KeyNotFoundException Thrown if the named fixture does not exist. Methods AddFixture<TFixture>(String, TFixture, Action<TFixture>, Int32) Adds a named ITestFixture . Declaration public void AddFixture<TFixture>(string name, TFixture subFixture, Action<TFixture> action = null, int group = -1) where TFixture : class, ITestFixture Parameters Type Name Description String name The fixture name (case insenstitive). TFixture subFixture The subfixture instance. Action <TFixture> action The optional Action to be called when the fixture is initialized. This can be used for things like waiting until the service is actually ready before returning. Int32 group Optionally specifies the fixture group. Fixtures with group =-1 (the default) will be started one by one before all other fixtures. Fixtures with a group >= 0 will be started in parallel by group starting at the lowest group. All of the fixtures in the same group will be started in parallel on separate threads and the ComposedFixture will wait until all fixtures in a group have started before advancing to the next group. Type Parameters Name Description TFixture The new fixture type. Remarks note This method doesn't work for based fixtures. Use instead. Dispose(Boolean) Disposes all fixtures in the set. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. Overrides TestFixture.Dispose(Boolean) Finalize() Finalizer. Declaration protected void Finalize() GetEnumerator() Enumerates the named test fixtures in the set. Declaration public IEnumerator<KeyValuePair<string, ITestFixture>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair < String , ITestFixture >> The fixtures as KeyValuePair<string, ITestFixture> instances. Reset() INTERNAL USE ONLY: Resets the fixture state. Declaration public override void Reset() Overrides TestFixture.Reset() Start(Action) Starts the fixture if it hasn't already been started including invoking the optional Action when the first time Start(Action) is called for a fixture instance. Declaration public override TestFixtureStatus Start(Action action = null) Parameters Type Name Description Action action The optional custom start action. note This is generally intended for use when developing custom test fixtures. Returns Type Description TestFixtureStatus Started if the fixture wasn't previously started and this method call started it or AlreadyRunning if the fixture was already running. Overrides TestFixture.Start(Action) Exceptions Type Condition InvalidOperationException Thrown if this is called from within the Action . Implements ITestFixture Extension Methods IEnumerableExtensions.SelectRandom<T>(IEnumerable<T>, Int32) IEnumerableExtensions.IsEmpty<T>(IEnumerable<T>, Func<T, Boolean>)"
  },
  "neonsdk/api/Neon.Xunit.ContainerFixture.html": {
    "href": "neonsdk/api/Neon.Xunit.ContainerFixture.html",
    "title": "Class ContainerFixture | NeonSDK documentation",
    "keywords": "Class ContainerFixture Used to run a Docker container on the current machine as a test fixture while tests are being performed and then deletes the container when the fixture is disposed. Inheritance Object TestFixture ContainerFixture NatsFixture NatsStreamingFixture Implements ITestFixture Inherited Members TestFixture.IsDisposed TestFixture.InAction TestFixture.IsRunning TestFixture.CheckDisposed() TestFixture.CheckWithinAction() TestFixture.Start(Action) TestFixture.Dispose() TestFixture.OnRestart() TestFixture.State Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class ContainerFixture : TestFixture, ITestFixture, IDisposable Remarks note IMPORTANT: The base Neon TestFixture implementation DOES NOT support parallel test execution. You need to explicitly disable parallel execution in all test assemblies that rely on thesex test fixtures by adding a C# file called AssemblyInfo.cs with: [assembly: CollectionBehavior(DisableTestParallelization = true, MaxParallelThreads = 1)] and then define your test classes like: public class MyTests : IClassFixture<ontainerFixture>, IDisposable { [Collection(TestCollection.NonParallel)] [CollectionDefinition(TestCollection.NonParallel, DisableParallelization = true)] [Fact] public void Test() { } } Constructors ContainerFixture() Constructor. Declaration public ContainerFixture() Properties ContainerId Returns the running container's short ID or null if the container has not been started. Declaration public string ContainerId { get; } Property Value Type Description String ContainerName Returns the running container's name or null if the container has not been started. Declaration public string ContainerName { get; } Property Value Type Description String DefaultHostInterface Specifies the IP address of host interface where container ports will be published. This defaults to 0.0.0.0 which binds ports to all network interfaces. Declaration public static string DefaultHostInterface { get; set; } Property Value Type Description String Remarks You may need to customize this to avoid port conflicts with other running applications. When all tests are running on a single host, you should consider setting this to one of the 16 million loopback addresses in the 127.0.0.0/8 subnet (e.g. 127.0.0.1, 127.0.0.2, etc). You'll need to set this before starting any fixture containers. note Fixtures implemented by NEONFORGE that are derived from ContainerFixture all implement this behavior. If you implement your own derived fixtures, you should consider implementing this as well for consistency. Methods Dispose(Boolean) Releases all associated resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. Overrides TestFixture.Dispose(Boolean) Finalize() Finalizer. Declaration protected void Finalize() GetHostInterface(String, Boolean) Used by derived fixtures to retrieve the host network interface address for the docker -p port publish option or the address to use for establishing a Cadence connections. interfaces. Declaration protected static string GetHostInterface(string hostInterface, bool forConnection = false) Parameters Type Name Description String hostInterface The desired host interface IPv4 address or null . Boolean forConnection Indicates that the address a client should use to establish a connection should be returned vs. the address the container will listen on. Returns Type Description String The target network interface address. Remarks This method returns DefaultHostInterface when hostInterface is null or empty otherwise it will ensure that the parameter is valid and before returning it. Reset() INTERNAL USE ONLY: Resets the fixture state. Declaration public override void Reset() Overrides TestFixture.Reset() Restart() Restarts the container. This is a handy way to deploy a fresh container with the same properties while running unit tests. Declaration public void Restart() Start(String, String, String[], IEnumerable<String>, IEnumerable<String>, Boolean, Boolean, ContainerLimits) Starts the container. note You'll need to call StartAsComposed(String, String, String[], IEnumerable<String>, IEnumerable<String>, Boolean, Boolean, ContainerLimits) instead when this fixture is being added to a ComposedFixture . Declaration public TestFixtureStatus Start(string name, string image, string[] dockerArgs = null, IEnumerable<string> containerArgs = null, IEnumerable<string> env = null, bool noRemove = false, bool keepOpen = false, ContainerLimits limits = null) Parameters Type Name Description String name Specifies the container name. String image Specifies the container Docker image. String [] dockerArgs Optional arguments to be passed to the docker run ... command. IEnumerable < String > containerArgs Optional arguments to be passed to the container. IEnumerable < String > env Optional environment variables to be passed to the Couchbase container, formatted as NAME=VALUE or just NAME . Boolean noRemove Optionally indicates that the --rm option should not be included when creating the container. Boolean keepOpen Optionally indicates that the container should continue to run after the fixture is disposed. This implies Neon.Xunit.ContainerFixture.noRemove =true and defaults to false . ContainerLimits limits Optionally specifies the Docker container resource limits. Returns Type Description TestFixtureStatus Started if the fixture wasn't previously started and this method call started it or AlreadyRunning if the fixture was already running. Remarks note You must specify a valid container name so that the fixure can remove any existing container with the same name before starting the new container. This is very useful during test debugging when the test might be interrupted during debugging before ensuring that the container is stopped. Exceptions Type Condition InvalidOperationException Thrown if this is not called from within the Action method passed Start(Action) StartAsComposed(String, String, String[], IEnumerable<String>, IEnumerable<String>, Boolean, Boolean, ContainerLimits) Used to start the fixture within a ComposedFixture . Declaration public void StartAsComposed(string name, string image, string[] dockerArgs = null, IEnumerable<string> containerArgs = null, IEnumerable<string> env = null, bool noRemove = false, bool keepOpen = false, ContainerLimits limits = null) Parameters Type Name Description String name Specifies the container name. String image Specifies the container Docker image. String [] dockerArgs Optional arguments to be passed to the docker run ... command. IEnumerable < String > containerArgs Optional arguments to be passed to the container. IEnumerable < String > env Optional environment variables to be passed to the Couchbase container, formatted as NAME=VALUE or just NAME . Boolean noRemove Optionally indicates that the --rm option should not be included when creating the container. Boolean keepOpen Optionally indicates that the container should continue to run after the fixture is disposed. This implies Neon.Xunit.ContainerFixture.noRemove =true and defaults to true . ContainerLimits limits Optionally specifies Docker container resource limits. Remarks note You must specify a valid container name so that the fixure can remove any existing container with the same name before starting the new container. This is very useful during test debugging when the test might be interrupted during debugging before ensuring that the container is stopped. Exceptions Type Condition InvalidOperationException Thrown if this is not called from within the Action method passed Start(Action) Implements ITestFixture"
  },
  "neonsdk/api/Neon.Xunit.ContainerLimits.html": {
    "href": "neonsdk/api/Neon.Xunit.ContainerLimits.html",
    "title": "Class ContainerLimits | NeonSDK documentation",
    "keywords": "Class ContainerLimits Used by same Docker related (and derived) fixtures to limit the machine resources that can be consumed by managed containers. We support many of the limits described in detail bere: https://docs.docker.com/config/containers/resource_constraints/ note Byte size properties like Memory are strings including the size (a double ) along with an optional unit designation from ByteUnits like KiB , MiB , and GiB rather than using the Docker unit conventions for consistency with neonKUBE cluster definitions, etc. These values will be converted to a simple byte count before passing them on to Docker. note We're currently implementing some memory limits along with one CPU limit. Inheritance Object ContainerLimits Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class ContainerLimits Properties KernelMemory The minimum amount of kernel memory the container can use. Setting this can prevent the container from obtaining so much kernel memory that other machine level components are impacted. The minimum value is 4MiB and the default is unconstrained. See the Docker documentation for more details on how this works: https://docs.docker.com/config/containers/resource_constraints/#--kernel-memory-details Declaration public string KernelMemory { get; set; } Property Value Type Description String Memory Optionally specifies the maximum memory that can be allocated to the container. The minimum value is 4MiB . The default value is unconstrained. Declaration public string Memory { get; set; } Property Value Type Description String MemoryReservation Specifies a lower soft limit on memory than Memory when Docker detects contention or low memory on the host. Memory must also be set and MemoryReservation must be less than that for this to have any effect. note Because it is a soft limit, it does not guarantee that the container doesn’t exceed this value. Declaration public string MemoryReservation { get; set; } Property Value Type Description String MemorySwap The amount of memory the container is allowed to swap to disk. This required Memory to be also set to have any effect. See the Docker documentation for more details on how this works: https://docs.docker.com/config/containers/resource_constraints/#--memory-swap-details Declaration public string MemorySwap { get; set; } Property Value Type Description String MemorySwappiness The percentage of anonymous memory pages used by the container that may be swapped to disk. This is an integer number between 0..100. See the Docker documentation for more details on how this works: https://docs.docker.com/config/containers/resource_constraints/#--memory-swappiness-details Declaration public int? MemorySwappiness { get; set; } Property Value Type Description Nullable < Int32 > OomKillDisable By default, the host machine's OOM killer will kill processes in a container when the host runs out of memory (OOM). You can disable this behavior by setting this to true . This defaults to false . note WARNING: You should also set Memory when enabling this to help prevent the OOM killer from killing important host level processes. Validate() will check for this condition. Declaration public bool OomKillDisable { get; set; } Property Value Type Description Boolean Methods Validate() Verifies that the limit properties make sense. Declaration public string Validate() Returns Type Description String null for valid properties, otherwise an error message."
  },
  "neonsdk/api/Neon.Xunit.DockerComposeFixture.html": {
    "href": "neonsdk/api/Neon.Xunit.DockerComposeFixture.html",
    "title": "Class DockerComposeFixture | NeonSDK documentation",
    "keywords": "Class DockerComposeFixture Used to run a docker-compose application on the current machine as a test fixture while tests are being performed and then deletes the applicatiuon when the fixture is disposed. note The DockerComposeFixture and DockerFixture fixtures are not compatible with each other. You may only use one of these at a time. Inheritance Object TestFixture DockerComposeFixture YugaByteFixture Implements ITestFixture Inherited Members TestFixture.IsDisposed TestFixture.InAction TestFixture.IsRunning TestFixture.CheckDisposed() TestFixture.CheckWithinAction() TestFixture.Start(Action) TestFixture.Dispose() TestFixture.OnRestart() TestFixture.State Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class DockerComposeFixture : TestFixture, ITestFixture, IDisposable Remarks note IMPORTANT: The base Neon TestFixture implementation DOES NOT support parallel test execution. You need to explicitly disable parallel execution in all test assemblies that rely on thesex test fixtures by adding a C# file called AssemblyInfo.cs with: [assembly: CollectionBehavior(DisableTestParallelization = true, MaxParallelThreads = 1)] and then define your test classes like: public class MyTests : IClassFixture<DockerComposeFixture>, IDisposable { [Collection(TestCollection.NonParallel)] [CollectionDefinition(TestCollection.NonParallel, DisableParallelization = true)] [Fact] public void Test() { } } Constructors DockerComposeFixture() Constructor. Declaration public DockerComposeFixture() Properties ApplicationName Returns the running application name or null if the compose file has not been started. Declaration public string ApplicationName { get; } Property Value Type Description String Methods Dispose(Boolean) Releases all associated resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. Overrides TestFixture.Dispose(Boolean) Finalize() Finalizer. Declaration protected void Finalize() Reset() INTERNAL USE ONLY: Resets the fixture state. Declaration public override void Reset() Overrides TestFixture.Reset() Restart() Restarts the application. This is a handy way to deploy a fresh instance with the same properties while running unit tests. Declaration public virtual void Restart() Start(String, String, Boolean, String[]) Starts the fixture by running a Docker compose application. note You'll need to call StartAsComposed(String, String, Boolean, String[]) instead when this fixture is being added to a ComposedFixture . Declaration public TestFixtureStatus Start(string name, string composeFile, bool keepOpen = false, string[] customContainerNames = null) Parameters Type Name Description String name Specifies the application name. String composeFile Specifies the contents of the docker-compose.yml file defining the application. Boolean keepOpen Optionally indicates that the application should continue to run after the fixture is disposed. This defaults to false . String [] customContainerNames Optionally specifies custom container names deployed by the Docker Compose file that will not be prefixed by the application name. The fixture needs to know these so it can remove the containers when required. Returns Type Description TestFixtureStatus Started if the fixture wasn't previously started and this method call started it or AlreadyRunning if the fixture was already running. Remarks note You must specify a valid application name so that the fixure can remove any existing application with the same name before starting the new instance of the application. This is very useful during test debugging when the test might be interrupted during debugging or when keepOpen =true . Exceptions Type Condition InvalidOperationException Thrown if this is not called from within the Action method passed Start(Action) StartAsComposed(String, String, Boolean, String[]) Used to start the fixture within a ComposedFixture . Declaration public void StartAsComposed(string name, string composeFile, bool keepOpen = false, string[] customContainerNames = null) Parameters Type Name Description String name Specifies the application name. String composeFile Specifies the contents of the docker-compose.yml file defining the application. Boolean keepOpen Optionally indicates that the application should continue to run after the fixture is disposed. This defaults to false . String [] customContainerNames Optionally specifies custom container names deployed by the Docker Compose file that will not be prefixed by the application name. The fixture needs to know these so it can remove the containers when required. Remarks note You must specify a valid application name so that the fixure can remove any existing application with the same name before starting the new instance of the application. This is very useful during test debugging when the test might be interrupted during debugging or when keepOpen =true . Exceptions Type Condition InvalidOperationException Thrown if this is not called from within the Action method passed Start(Action) Implements ITestFixture"
  },
  "neonsdk/api/Neon.Xunit.DockerFixture.ConfigInfo.html": {
    "href": "neonsdk/api/Neon.Xunit.DockerFixture.ConfigInfo.html",
    "title": "Class DockerFixture.ConfigInfo | NeonSDK documentation",
    "keywords": "Class DockerFixture.ConfigInfo Holds information about a Docker config. Inheritance Object DockerFixture.ConfigInfo Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class ConfigInfo Properties ID Returns the config ID. Declaration public string ID { get; set; } Property Value Type Description String Name Returns the config name. Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Xunit.DockerFixture.ContainerInfo.html": {
    "href": "neonsdk/api/Neon.Xunit.DockerFixture.ContainerInfo.html",
    "title": "Class DockerFixture.ContainerInfo | NeonSDK documentation",
    "keywords": "Class DockerFixture.ContainerInfo Holds information about a Docker container. Inheritance Object DockerFixture.ContainerInfo Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class ContainerInfo Properties ID Returns the container ID. Declaration public string ID { get; set; } Property Value Type Description String Name Returns the container name. Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Xunit.DockerFixture.html": {
    "href": "neonsdk/api/Neon.Xunit.DockerFixture.html",
    "title": "Class DockerFixture | NeonSDK documentation",
    "keywords": "Class DockerFixture An Xunit test fixture used to manage a local Docker daemon within unit tests. note The DockerComposeFixture and DockerFixture fixtures are not compatible with each other. You may only use one of these at a time. Inheritance Object TestFixture ComposedFixture DockerFixture Implements ITestFixture Inherited Members ComposedFixture.AddFixture<TFixture>(String, TFixture, Action<TFixture>, Int32) ComposedFixture.Start(Action) ComposedFixture.Children ComposedFixture.Item[String] ComposedFixture.Item[Int32] ComposedFixture.Count ComposedFixture.GetEnumerator() TestFixture.IsDisposed TestFixture.InAction TestFixture.IsRunning TestFixture.CheckDisposed() TestFixture.CheckWithinAction() TestFixture.Dispose() TestFixture.OnRestart() TestFixture.State Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class DockerFixture : ComposedFixture, ITestFixture, IDisposable, IEnumerable<KeyValuePair<string, ITestFixture>>, IEnumerable Remarks note IMPORTANT: The base Neon TestFixture implementation DOES NOT support parallel test execution. You need to explicitly disable parallel execution in all test assemblies that rely on thesex test fixtures by adding a C# file called AssemblyInfo.cs with: [assembly: CollectionBehavior(DisableTestParallelization = true, MaxParallelThreads = 1)] and then define your test classes like: public class MyTests : IClassFixture<DockerFixture>, IDisposable { [Collection(TestCollection.NonParallel)] [CollectionDefinition(TestCollection.NonParallel, DisableParallelization = true)] [Fact] public void Test() { } } This fixture resets the state of the local Docker daemon before and after the test runner executes the tests in a test class by removing all containers and services as well as swarm items such as secrets, configs and networks. note This fixture works only for local Docker instances that ARE NOT members of a multi-node cluster as a safety measure to help avoid the possiblity of accidentially wiping out a production cluster. note The fixture Reset() method does not purge images from the target test node for performance reasons. This can be a problem if you're testing container and you need to ensure that the latest image is downloaded from the registry first. You can call ClearImages() to accomplish this or PullImage(String) to pull a specific image from the registry. This fixture is pretty easy to use. Simply have your test class inherit from Xunit.IClassFixture`1 and add a public constructor that accepts a DockerFixture as the only argument. Then you can call it's Start(Action) method within the constructor and optionally have your custom Action use the fixture to initialize swarm services, networks, secrets, etc. This fixture provides several methods for managing the cluster state. These may be called within the test class constructor's action method, within the test constructor but outside of the action, or within the test methods: Local Machine DNS LocalMachineHosts Docker DockerExecute(String) DockerExecute(Object[]) Configs ClearConfigs(Boolean) CreateConfig(String, Byte[], String[]) CreateConfig(String, String, String[]) ListConfigs(Boolean) RemoveConfig(String) Containers ClearContainers(Boolean) ListContainers(Boolean) RemoveContainer(String) RunContainer(String, String, String[], String[], String[]) Images ClearImages() PullImage(String) Networks ClearNetworks(Boolean) CreateNetwork(String, String[]) ListNetworks(Boolean) RemoveNetwork(String) Secrets ClearSecrets(Boolean) CreateSecret(String, Byte[], String[]) CreateSecret(String, String, String[]) ListSecrets(Boolean) RemoveSecret(String) Services ClearServices(Boolean) CreateService(String, String, String[], String[], String[]) ListServices(Boolean) InspectService(String, Boolean) RemoveService(String) RestartService(String) RollbackService(String) UpdateService(String, String[]) Stacks ClearStacks(Boolean) DeployStack(String, String, String[], TimeSpan, TimeSpan) ListStacks(Boolean) RemoveStack(String) Volumes ClearVolumes(Boolean) note DockerFixture derives from ComposedFixture so you can use AddFixture<TFixture>(String, TFixture, Action<TFixture>, Int32) to add additional fixtures within your custom initialization action for advanced scenarios. There are two basic patterns for using this fixture. initialize once The basic idea here is to have your test class initialize the swarm once within the test class constructor inside of the initialize action with common state and services that all of the tests can access. This will be quite a bit faster than reconfiguring the swarm at the beginning of every test and can work well for many situations but it assumes that your test methods guarantee that running any test in any order will not impact the results of subsequent tests. A good example of this is a series of read-only tests against a service or database. initialize every test For common scenarios where the swarm must be reset before every test, you can call Reset() within the test class constructor (but outside of the custom initialization Action to reset the swarm state before the next test method is invoked. Constructors DockerFixture() Constructs the fixture. Declaration public DockerFixture() DockerFixture(Boolean) Used for derived classes that need to disable the Reset() call on construction Declaration protected DockerFixture(bool reset = false) Parameters Type Name Description Boolean reset Optionally calls Reset() when the reference count is zero. Fields DockerNetworks Identifies the built-in Docker networks. These networks will not be returned by ListNetworks(Boolean) and cannot be deleted. Declaration protected static HashSet<string> DockerNetworks Field Value Type Description HashSet < String > Properties ClearDelay Some Docker clear operations appear to take a few moments to complete. This delay will be added afterwards in an attempt to address this. Declaration public static TimeSpan ClearDelay { get; } Property Value Type Description TimeSpan LocalMachineHosts Returns an integrated HostsFixture that can be used to manage DNS entries in the local machine's DNS hosts file. Declaration public HostsFixture LocalMachineHosts { get; } Property Value Type Description HostsFixture Methods ClearConfigs(Boolean) Removes all swarm configs. Declaration public void ClearConfigs(bool removeSystem = false) Parameters Type Name Description Boolean removeSystem Optionally remove core cluster configs as well. Remarks By default, this method will not remove core cluster configs whose names begin with neon- . You can remove these too by passing removeSystem =true . ClearContainers(Boolean) Removes all running containers. Declaration public void ClearContainers(bool removeSystem = false) Parameters Type Name Description Boolean removeSystem Optionally remove core cluster containers as well. Remarks By default, this method will not remove core cluster containers whose names begin with neon- . You can remove these too by passing removeSystem =true . ClearImages() Removes all unreferenced images from the target test node. Reset() does not do this for performance reasonse but tests may use this method if necessary. Declaration public virtual void ClearImages() Remarks note Using this may result in very slow test performance, especially since it will purge a local copy of neon-cli if present. This means this and any other test images (like Couchbase) will need to be downloaded again after every reset. We highly recommend that you use PullImage(String) to ensure that the desired images are up-to-date rather than using ClearImages() . ClearNetworks(Boolean) Removes all swarm networks. Declaration public void ClearNetworks(bool removeSystem = false) Parameters Type Name Description Boolean removeSystem Optionally remove core cluster networks as well. Remarks By default, this method will not remove core cluster networks whose names begin with neon- . You can remove these too by passing removeSystem =true . ClearSecrets(Boolean) Removes all swarm secrets. Declaration public void ClearSecrets(bool removeSystem = false) Parameters Type Name Description Boolean removeSystem Optionally remove core cluster secrets as well. Remarks By default, this method will not remove cluster cluster secrets whose names begin with neon- . You can remove these too by passing removeSystem =true . ClearServices(Boolean) Removes all deployed services. Declaration public void ClearServices(bool removeSystem = false) Parameters Type Name Description Boolean removeSystem Optionally remove core cluster services as well. Remarks By default, this method will not remove core cluster services whose names begin with neon- . You can remove these too by passing removeSystem =true . ClearStacks(Boolean) Removes all deployed stacks. Declaration public void ClearStacks(bool removeSystem = false) Parameters Type Name Description Boolean removeSystem Optionally remove core cluster stacks as well. Remarks By default, this method will not remove core cluster stacks whose names begin with neon- . You can remove these too by passing removeSystem =true . ClearVolumes(Boolean) Removes all swarm volumes. Declaration public void ClearVolumes(bool removeSystem = false) Parameters Type Name Description Boolean removeSystem Optionally remove core cluster volumes as well. Remarks By default, this method will not remove core cluster volumes whose names begin with neon- . You can remove these too by passing removeSystem =true . CreateConfig(String, Byte[], String[]) Creates a Docker config from bytes. Declaration public void CreateConfig(string name, byte[] configBytes, string[] dockerArgs = null) Parameters Type Name Description String name The secret name. Byte [] configBytes The secret bytes. String [] dockerArgs Optional arguments to be passed to the docker config create ... command. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. CreateConfig(String, String, String[]) Creates a Docker config from text. Declaration public void CreateConfig(string name, string configText, string[] dockerArgs = null) Parameters Type Name Description String name The secret name. String configText The secret text. String [] dockerArgs Optional arguments to be passed to the docker config create ... command. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. CreateNetwork(String, String[]) Creates a Docker network. Declaration public void CreateNetwork(string name, string[] dockerArgs = null) Parameters Type Name Description String name The network name. String [] dockerArgs Optional arguments to be passed to the docker network create ... command. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. CreateSecret(String, Byte[], String[]) Creates a Docker secret from bytes. Declaration public void CreateSecret(string name, byte[] secretBytes, string[] dockerArgs = null) Parameters Type Name Description String name The secret name. Byte [] secretBytes The secret bytes. String [] dockerArgs Optional arguments to be passed to the docker secret create ... command. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. CreateSecret(String, String, String[]) Creates a Docker secret from text. Declaration public void CreateSecret(string name, string secretText, string[] dockerArgs = null) Parameters Type Name Description String name The secret name. String secretText The secret text. String [] dockerArgs Optional arguments to be passed to the docker secret create ... command. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. CreateService(String, String, String[], String[], String[]) Creates a Docker service. Declaration public void CreateService(string name, string image, string[] dockerArgs = null, string[] serviceArgs = null, string[] env = null) Parameters Type Name Description String name The service name. String image Specifies the service image. String [] dockerArgs Optional arguments to be passed to the docker service create ... command. String [] serviceArgs Optional arguments to be passed to the service. String [] env Optional environment variables to be passed to the service, formatted as NAME=VALUE or just NAME . Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. DeployStack(String, String, String[], TimeSpan, TimeSpan) Deploys a Docker stack. Declaration public void DeployStack(string name, string composeYaml, string[] dockerArgs = null, TimeSpan timeout = default(TimeSpan), TimeSpan convergeTime = default(TimeSpan)) Parameters Type Name Description String name The stack name. String composeYaml The compose-file YAML text. String [] dockerArgs Optional arguments to be passed to the docker secret create ... command. TimeSpan timeout Optionally specifies the maximum time to wait for service tasks to start (defaults to 5 minutes ). TimeSpan convergeTime Optionally specifies the time to wait after the service tasks have been started for the tasks to initialize. This defaults to 5 seconds which is the same time that Docker waits for Swarm services to converge. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. TimeoutException Thrown if the stack tasks were not deployed after waiting timeout . Dispose(Boolean) Releases all associated resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. Overrides ComposedFixture.Dispose(Boolean) DockerExecute(Object[]) Executes an arbitrary docker CLI command passing unformatted arguments and returns the results. Declaration public virtual ExecuteResponse DockerExecute(params object[] args) Parameters Type Name Description Object [] args The docker command arguments. Returns Type Description ExecuteResponse The ExecuteResponse . Remarks This method formats any arguments passed so they will be suitable for passing on the command line by quoting and escaping them as necessary. note This method is defined as virtual so that derived classes can modify how Docker is called. For example, the HiveFixture class implemented in another assembly will override this to run the docker within a cluster using neon-cli . DockerExecute(String) Executes an arbitrary docker CLI command passing a pre-formatted argument string and returns the results. Declaration public virtual ExecuteResponse DockerExecute(string argString) Parameters Type Name Description String argString The docker command arguments. Returns Type Description ExecuteResponse The ExecuteResponse . Remarks This method assumes that the single string argument passed is already formatted as required to pass on the command line. note This method is defined as virtual so that derived classes can modify how Docker is called. For example, the HiveFixture class implemented in another assembly will override this to run the docker within a cluster using neon-cli . EnsureReset() Called by TestFixture to ensure that Docker is reset after an interrupted test run. Declaration public static void EnsureReset() Finalize() Finalizer. Declaration protected void Finalize() InspectService(String, Boolean) Inspects a service, returning details about its current state. Declaration public ServiceDetails InspectService(string name, bool strict = false) Parameters Type Name Description String name The service name. Boolean strict Optionally specify strict JSON parsing. Returns Type Description ServiceDetails The ServiceDetails . ListConfigs(Boolean) Returns information about the current swarm configs. Declaration public List<DockerFixture.ConfigInfo> ListConfigs(bool includeSystem = false) Parameters Type Name Description Boolean includeSystem Optionally include core built-in cluster configs whose names start with neon- . Returns Type Description List < DockerFixture.ConfigInfo > A list of DockerFixture.ConfigInfo . Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. ListContainers(Boolean) Returns information about the current Docker containers. Declaration public List<DockerFixture.ContainerInfo> ListContainers(bool includeSystem = false) Parameters Type Name Description Boolean includeSystem Optionally include core built-in cluster containers whose names start with neon- . Returns Type Description List < DockerFixture.ContainerInfo > A list of DockerFixture.ContainerInfo . Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. ListNetworks(Boolean) Returns information about the current swarm networks. Declaration public List<DockerFixture.NetworkInfo> ListNetworks(bool includeSystem = false) Parameters Type Name Description Boolean includeSystem Optionally include core built-in cluster networks whose names start with neon- . Returns Type Description List < DockerFixture.NetworkInfo > A list of DockerFixture.NetworkInfo . Remarks note This method DOES NOT include built-in Docker networks such as bridge , docker_gwbridge , host , ingress , or none in the listed networks. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. ListSecrets(Boolean) Returns information about the current swarm secrets. Declaration public List<DockerFixture.SecretInfo> ListSecrets(bool includeSystem = false) Parameters Type Name Description Boolean includeSystem Optionally include core built-in cluster secrets whose names start with neon- . Returns Type Description List < DockerFixture.SecretInfo > A list of DockerFixture.SecretInfo . Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. ListServices(Boolean) Returns information about the current swarm services. Declaration public List<DockerFixture.ServiceInfo> ListServices(bool includeSystem = false) Parameters Type Name Description Boolean includeSystem Optionally include core built-in cluster services whose names start with neon- . Returns Type Description List < DockerFixture.ServiceInfo > A list of DockerFixture.ServiceInfo . Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. ListStacks(Boolean) Returns information about the current swarm stacks. Declaration public List<DockerFixture.StackInfo> ListStacks(bool includeSystem = false) Parameters Type Name Description Boolean includeSystem Optionally include core built-in cluster stacks whose names start with neon- . Returns Type Description List < DockerFixture.StackInfo > A list of DockerFixture.StackInfo . Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. PullImage(String) Pulls a specific image to the target test node. Declaration public virtual void PullImage(string image) Parameters Type Name Description String image The image name. RemoveConfig(String) Removes a Docker config. Declaration public void RemoveConfig(string name) Parameters Type Name Description String name The config name. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. RemoveContainer(String) Removes a Docker container. Declaration public void RemoveContainer(string name) Parameters Type Name Description String name The container name. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. RemoveNetwork(String) Removes a Docker network. Declaration public void RemoveNetwork(string name) Parameters Type Name Description String name The network name. Remarks note This method DOES NOT allow the removal of built-in Docker networks such as bridge , docker_gwbridge , host , ingress , or none in the listed networks. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. NotSupportedException Thrown for built-in Docker networks. RemoveSecret(String) Removes a Docker secret. Declaration public void RemoveSecret(string name) Parameters Type Name Description String name The secret name. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. RemoveService(String) Removes a Docker service. Declaration public void RemoveService(string name) Parameters Type Name Description String name The service name. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. RemoveStack(String) Removes a Docker stack. Declaration public void RemoveStack(string name) Parameters Type Name Description String name The stack name. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. Reset() Resets the local Docker daemon by clearing all swarm services and state as well as removing all containers. Declaration public override void Reset() Overrides ComposedFixture.Reset() Remarks note This method does not reset the Docker images on the test node for performance reasons. You can call ClearImages() from your tests if required. note As a safety measure, this method ensures that the local Docker instance IS NOT a member of a multi-node swarm to avoid wiping out production clusters by accident. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. InvalidOperationException Thrown if the local Docker instance is a member of a multi-node swarm. RestartService(String) Restarts a Docker service. Declaration public void RestartService(string name) Parameters Type Name Description String name The service name. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. RollbackService(String) Rolls back a Docker service. Declaration public void RollbackService(string name) Parameters Type Name Description String name The service name. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. RunContainer(String, String, String[], String[], String[]) Creates a Docker container. Declaration public void RunContainer(string name, string image, string[] dockerArgs = null, string[] containerArgs = null, string[] env = null) Parameters Type Name Description String name The container name. String image Specifies the container image. String [] dockerArgs Optional arguments to be passed to the docker service create ... command. String [] containerArgs Optional arguments to be passed to the service. String [] env Optional environment variables to be passed to the container, formatted as NAME=VALUE or just NAME . Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. UpdateService(String, String[]) Updates a Docker service. Declaration public void UpdateService(string name, string[] dockerArgs = null) Parameters Type Name Description String name The service name. String [] dockerArgs Arguments to be passed to the docker service update ... command. Exceptions Type Condition ObjectDisposedException Thrown if the fixture has been disposed. Implements ITestFixture Extension Methods IEnumerableExtensions.SelectRandom<T>(IEnumerable<T>, Int32) IEnumerableExtensions.IsEmpty<T>(IEnumerable<T>, Func<T, Boolean>)"
  },
  "neonsdk/api/Neon.Xunit.DockerFixture.NetworkInfo.html": {
    "href": "neonsdk/api/Neon.Xunit.DockerFixture.NetworkInfo.html",
    "title": "Class DockerFixture.NetworkInfo | NeonSDK documentation",
    "keywords": "Class DockerFixture.NetworkInfo Holds information about a Docker network. Inheritance Object DockerFixture.NetworkInfo Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class NetworkInfo Properties ID Returns the network ID. Declaration public string ID { get; set; } Property Value Type Description String Name Returns the network name. Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Xunit.DockerFixture.SecretInfo.html": {
    "href": "neonsdk/api/Neon.Xunit.DockerFixture.SecretInfo.html",
    "title": "Class DockerFixture.SecretInfo | NeonSDK documentation",
    "keywords": "Class DockerFixture.SecretInfo Holds information about a Docker secret. Inheritance Object DockerFixture.SecretInfo Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class SecretInfo Properties ID Returns the secret ID. Declaration public string ID { get; set; } Property Value Type Description String Name Returns the secret name. Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "neonsdk/api/Neon.Xunit.DockerFixture.ServiceInfo.html": {
    "href": "neonsdk/api/Neon.Xunit.DockerFixture.ServiceInfo.html",
    "title": "Class DockerFixture.ServiceInfo | NeonSDK documentation",
    "keywords": "Class DockerFixture.ServiceInfo Holds information about a Docker service. Inheritance Object DockerFixture.ServiceInfo Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class ServiceInfo Properties ID Returns the service ID. Declaration public string ID { get; set; } Property Value Type Description String Name Returns the service name. Declaration public string Name { get; set; } Property Value Type Description String ReplicasDeployed Returns the number of replicas actually deployed. Declaration public int ReplicasDeployed { get; set; } Property Value Type Description Int32 ReplicasDesired Returns the number of replicas desired. Declaration public int ReplicasDesired { get; set; } Property Value Type Description Int32"
  },
  "neonsdk/api/Neon.Xunit.DockerFixture.StackDefinition.html": {
    "href": "neonsdk/api/Neon.Xunit.DockerFixture.StackDefinition.html",
    "title": "Class DockerFixture.StackDefinition | NeonSDK documentation",
    "keywords": "Class DockerFixture.StackDefinition Parses useful information from a Docker YAML compose file. Inheritance Object DockerFixture.StackDefinition Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class StackDefinition Constructors StackDefinition(String, String) Constructor. Declaration public StackDefinition(string name, string composeYaml) Parameters Type Name Description String name The stack name. String composeYaml The stack compose YAML definition. Properties Name Returns the stack name. Declaration public string Name { get; } Property Value Type Description String Services Returns information about the stack's services. Declaration public List<DockerFixture.StackService> Services { get; } Property Value Type Description List < DockerFixture.StackService > Methods GetServiceName(DockerFixture.StackService) Returns the service name Docker will assign to a stack service. Declaration public string GetServiceName(DockerFixture.StackService service) Parameters Type Name Description DockerFixture.StackService service The stack service. Returns Type Description String The service name."
  },
  "neonsdk/api/Neon.Xunit.DockerFixture.StackInfo.html": {
    "href": "neonsdk/api/Neon.Xunit.DockerFixture.StackInfo.html",
    "title": "Class DockerFixture.StackInfo | NeonSDK documentation",
    "keywords": "Class DockerFixture.StackInfo Holds information about a Docker stack. Inheritance Object DockerFixture.StackInfo Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class StackInfo Properties Name Returns the stack name. Declaration public string Name { get; set; } Property Value Type Description String ServiceCount Returns the number of services deployed by the stack. Declaration public int ServiceCount { get; set; } Property Value Type Description Int32"
  },
  "neonsdk/api/Neon.Xunit.DockerFixture.StackService.html": {
    "href": "neonsdk/api/Neon.Xunit.DockerFixture.StackService.html",
    "title": "Class DockerFixture.StackService | NeonSDK documentation",
    "keywords": "Class DockerFixture.StackService Describes a Docker stack service. Inheritance Object DockerFixture.StackService Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class StackService Properties Name The service name. Declaration public string Name { get; set; } Property Value Type Description String Replicas The number of service replicas. Declaration public int Replicas { get; set; } Property Value Type Description Int32"
  },
  "neonsdk/api/Neon.Xunit.EnvironmentFixture.html": {
    "href": "neonsdk/api/Neon.Xunit.EnvironmentFixture.html",
    "title": "Class EnvironmentFixture | NeonSDK documentation",
    "keywords": "Class EnvironmentFixture Used to save environment variables before unit tests run and then restore them afterwards. Inheritance Object TestFixture EnvironmentFixture Implements ITestFixture Inherited Members TestFixture.IsDisposed TestFixture.InAction TestFixture.IsRunning TestFixture.CheckDisposed() TestFixture.CheckWithinAction() TestFixture.Start(Action) TestFixture.Dispose() TestFixture.OnRestart() TestFixture.State Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class EnvironmentFixture : TestFixture, ITestFixture, IDisposable Remarks You may instantiate a single EnvironmentFixture within your unit tests to manage environment variables and test files and folders such as simulated service config and secret files. note IMPORTANT: The base Neon TestFixture implementation DOES NOT support parallel test execution. You need to explicitly disable parallel execution in all test assemblies that rely on thesex test fixtures by adding a C# file called AssemblyInfo.cs with: [assembly: CollectionBehavior(DisableTestParallelization = true, MaxParallelThreads = 1)] and then define your test classes like: public class MyTests : IClassFixture<EnvironmentFixture> { private EnvironmentFixture fixture; public MyTests() { this.fixture = fixture; if (fixture.Start() == TestFixtureStatus.AlreadyRunning) { fixture.Restore(); } } [Collection(TestCollection.NonParallel)] [CollectionDefinition(TestCollection.NonParallel, DisableParallelization = true)] [Fact] public void Test() { } } Constructors EnvironmentFixture() Constructs the fixture. Declaration public EnvironmentFixture() Methods Dispose(Boolean) Releases all associated resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. Overrides TestFixture.Dispose(Boolean) Finalize() Finalizer. Declaration protected void Finalize() Reset() INTERNAL USE ONLY: Resets the fixture state. Declaration public override void Reset() Overrides TestFixture.Reset() Restore() Restores the original environment variables captured at the time the fixture was instantiated and also removes any temporary test files. Declaration public void Restore() Implements ITestFixture"
  },
  "neonsdk/api/Neon.Xunit.HostsFixture.html": {
    "href": "neonsdk/api/Neon.Xunit.HostsFixture.html",
    "title": "Class HostsFixture | NeonSDK documentation",
    "keywords": "Class HostsFixture Used to manage the local DNS resolver hosts file on the current computer. Inheritance Object TestFixture HostsFixture Implements ITestFixture Inherited Members TestFixture.IsDisposed TestFixture.InAction TestFixture.IsRunning TestFixture.CheckDisposed() TestFixture.CheckWithinAction() TestFixture.Start(Action) TestFixture.Dispose() TestFixture.OnRestart() TestFixture.State Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class HostsFixture : TestFixture, ITestFixture, IDisposable Remarks note IMPORTANT: The base Neon TestFixture implementation DOES NOT support parallel test execution. You need to explicitly disable parallel execution in all test assemblies that rely on thesex test fixtures by adding a C# file called AssemblyInfo.cs with: [assembly: CollectionBehavior(DisableTestParallelization = true, MaxParallelThreads = 1)] and then define your test classes like: public class MyTests : IClassFixture<HostsFixture>, IDisposable { [Collection(TestCollection.NonParallel)] [CollectionDefinition(TestCollection.NonParallel, DisableParallelization = true)] [Fact] public void Test() { } } Constructors HostsFixture() Constructs the fixture. Declaration public HostsFixture() Methods AddHostAddress(String, String, Boolean) Adds an IP address to the local DNS resolver's hosts file. Declaration public void AddHostAddress(string hostname, string address, bool deferCommit = false) Parameters Type Name Description String hostname The hostname. String address The IP address. Boolean deferCommit Optionally indicates that the change will not be committed to the hosts until Commit() is called. This defaults to falsae . Remarks note This method will not add the duplicate hostname/address mappings to the fixture. Commit() Commits the DNS records to the hosts file. Declaration public void Commit() Dispose(Boolean) Releases all associated resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. Overrides TestFixture.Dispose(Boolean) EnsureReset() Called by TestFixture to ensure that the hosts file contains no DNS records remaining after an interrupted test run. Declaration public static void EnsureReset() Finalize() Finalizer. Declaration protected void Finalize() Reset() INTERNAL USE ONLY: Resets the fixture state. Declaration public override void Reset() Overrides TestFixture.Reset() Implements ITestFixture"
  },
  "neonsdk/api/Neon.Xunit.html": {
    "href": "neonsdk/api/Neon.Xunit.html",
    "title": "Namespace Neon.Xunit | NeonSDK documentation",
    "keywords": "Namespace Neon.Xunit Classes AnsiblePlayer Used for running Ansible playbooks within unit tests. AnsiblePlayResults Holds the results from an AnsiblePlayer play operation. AnsibleTaskResult Holds the results for a specific task executed in an Ansible playbook. AspNetFixture Fixture for testing ASP.NET Core based websites and services. CodeFixture Used to execute some custom code while ComposedFixture is starting subfixtures. This is typically used to perform additional configuration of a ServiceMap , etc. to configure components like instances for integration testing. CollectionComparer<T> Compares two collections for strict equality by ensuring they have the same items in the same order. ComposedFixture Implements an ITestFixture that is composed of other test fixtures. ContainerFixture Used to run a Docker container on the current machine as a test fixture while tests are being performed and then deletes the container when the fixture is disposed. ContainerLimits Used by same Docker related (and derived) fixtures to limit the machine resources that can be consumed by managed containers. We support many of the limits described in detail bere: https://docs.docker.com/config/containers/resource_constraints/ note Byte size properties like Memory are strings including the size (a double ) along with an optional unit designation from ByteUnits like KiB , MiB , and GiB rather than using the Docker unit conventions for consistency with neonKUBE cluster definitions, etc. These values will be converted to a simple byte count before passing them on to Docker. note We're currently implementing some memory limits along with one CPU limit. DockerComposeFixture Used to run a docker-compose application on the current machine as a test fixture while tests are being performed and then deletes the applicatiuon when the fixture is disposed. note The DockerComposeFixture and DockerFixture fixtures are not compatible with each other. You may only use one of these at a time. DockerFixture An Xunit test fixture used to manage a local Docker daemon within unit tests. note The DockerComposeFixture and DockerFixture fixtures are not compatible with each other. You may only use one of these at a time. DockerFixture.ConfigInfo Holds information about a Docker config. DockerFixture.ContainerInfo Holds information about a Docker container. DockerFixture.NetworkInfo Holds information about a Docker network. DockerFixture.SecretInfo Holds information about a Docker secret. DockerFixture.ServiceInfo Holds information about a Docker service. DockerFixture.StackDefinition Parses useful information from a Docker YAML compose file. DockerFixture.StackInfo Holds information about a Docker stack. DockerFixture.StackService Describes a Docker stack service. EnvironmentFixture Used to save environment variables before unit tests run and then restore them afterwards. HostsFixture Used to manage the local DNS resolver hosts file on the current computer. IncompatibleServiceException Thrown by ValidateController<TServiceController>(IGeneratedServiceClient) when the service type doesn't match a generated service client. MaintainerFactAttribute Inherits from Xunit.FactAttribute and sets Xunit.FactAttribute.Skip when the current operating system platform doesn't match any of the specified platform flags. MockHttpServer Implements a very lightweight HTTP server suitable for locally mocking an HTTP based service. note This currently runs only on Windows. MockHttpServerExtensions Misc extsnsions. NatsFixture Used to run a Docker nats container on the current machine as a test fixture while tests are being performed and then deletes the container when the fixture is disposed. NatsStreamingFixture Used to run a Docker nats-streaming container on the current machine as a test fixture while tests are being performed and then deletes the container when the fixture is disposed. PlatformFactAttribute Inherits from Xunit.FactAttribute and sets Xunit.FactAttribute.Skip when the current operating system platform doesn't match any of the specified platform flags. RepeatAttribute Used to annotate an Xunit [Theory] test method to have the test executed the specified number of times. TestArea Defines the NEONFORGE related test areas. These currently map to NEONFORGE related projects. Use these in [Trait(TestTrait.Category, ...)] attributes tagging your test methods. TestCollection Enumerates the neonSDK related xUnit test collections. TestContext Holds information like settings and test files for unit tests. TestFixture Abstract test fixture base class. TestHelper Misc local unit test helpers. TestHttpClient Implements a HttpClient compatible client with additional capabilities, like disabling connection reuse. This is intended for unit testing purposes like verifying that load balancing actually works. TestOutputWriter Wraps an Xunit.Abstractions.ITestOutputHelper with a TextWriter that can be used generate output in unit tests that will be included in the captured test log. note Only the Write(...) and WriteLine(...) methods are implemented. TestTrait Identifies the common NEONFORGE related test traits. XunitExtensions Unit test related extensions. Interfaces ITestFixture INTERNAL USE ONLY: Defines the behavior of a Neon Xunit test fixture. note All test fixture implementations must inherit from TestFixture to work properly. Do not attempt to create a fixture from scratch that implements this interface. Enums TargetPlatforms Enumerates the platforms that can be targeted by unit tests tagged with PlatformFactAttribute . Note that these flags may be bitwise-ORed together. TestFixtureStatus Returned by Start(Action) to indicate whether the test fixture is disabled, was just started, or was already running."
  },
  "neonsdk/api/Neon.Xunit.IncompatibleServiceException.html": {
    "href": "neonsdk/api/Neon.Xunit.IncompatibleServiceException.html",
    "title": "Class IncompatibleServiceException | NeonSDK documentation",
    "keywords": "Class IncompatibleServiceException Thrown by ValidateController<TServiceController>(IGeneratedServiceClient) when the service type doesn't match a generated service client. Inheritance Object Exception IncompatibleServiceException Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class IncompatibleServiceException : Exception, ISerializable Constructors IncompatibleServiceException(String) Constructor. Declaration public IncompatibleServiceException(string message) Parameters Type Name Description String message The error message. Extension Methods ExceptionExtensions.Contains<T>(Exception) ExceptionExtensions.Find<T>(Exception) ExceptionExtensions.Find(Exception, Type) ExceptionExtensions.GetNonAggregateException(Exception)"
  },
  "neonsdk/api/Neon.Xunit.ITestFixture.html": {
    "href": "neonsdk/api/Neon.Xunit.ITestFixture.html",
    "title": "Interface ITestFixture | NeonSDK documentation",
    "keywords": "Interface ITestFixture INTERNAL USE ONLY: Defines the behavior of a Neon Xunit test fixture. note All test fixture implementations must inherit from TestFixture to work properly. Do not attempt to create a fixture from scratch that implements this interface. Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public interface ITestFixture : IDisposable Remarks Xunit test fixtures are designed to provide initialize global state that tests can then reference during their execution. Typical scenarios include: Starting a database server and prepopulating it with a schema and data to test database access code. Starting a Docker service such that REST endpoints can be tested. Initializing a cluster and then configuring it with certificates, routes, services etc. and then performing tests against the actual swarm. Test fixture lifecycle: First, you'll need create your Xunit test class and have it derive from Xunit.IClassFixture`1 , where TFixture identifies the fixture. The Xunit test runner reflects the test assemblies and identifies the test classes with [Fact] test methods to be executed. For each test class to be executed, the test runner first creates an instance of the test fixture. This is created before one before any of the test classes are instantiated and any test methods are called. The test runner creates a new instance of the test class for each test method to be invoked. The test class constructor must accept a single parameter with type TFixture . The test class constructor should call Start(Action) to initialize the fixture, passing an optional Action that does any custom initialization for the test. The Action parameter is generally intended for internal use when implementing custom test fixtures. Test fixtures are designed to be aware of whether they've been initialized or not such that only the first call to Start(Action) will perform any necessary initialization (including calling the custom action) and any subsequent calls will do nothing. note Some test fixtures may define a different different initialization method. The test runner will continue instantiating test class instances and calling test methods using the test fixture state setup during the first test. Once all of the test methods have been called, the test runner will call the test fixtures Dispose() method so that it can clean up any state. Properties IsRunning Returns true if the fixture has been started. Declaration bool IsRunning { get; } Property Value Type Description Boolean State Used by unit test classes to persist arbitrary name/value information across individual unit tests. Declaration IDictionary<string, object> State { get; } Property Value Type Description IDictionary < String , Object > Methods OnRestart() Called when an already started fixture is being restarted. This provides the fixture an opportunity to do some custom initialization. note This method is intended only for use by test fixture implementations. Unit tests or test fixtures should never call this directly. Declaration void OnRestart() Reset() INTERNAL USE ONLY: Resets the fixture state. Declaration void Reset() Start(Action) Starts the fixture if it hasn't already been started including invoking the optional Action the first time Start(Action) is called for a fixture instance. Declaration TestFixtureStatus Start(Action action = null) Parameters Type Name Description Action action The optional custom start action. note This is generally intended for use when developing custom test fixtures. Returns Type Description TestFixtureStatus Started if the fixture wasn't previously started and this method call started it or AlreadyRunning if the fixture was already running."
  },
  "neonsdk/api/Neon.Xunit.MaintainerFactAttribute.html": {
    "href": "neonsdk/api/Neon.Xunit.MaintainerFactAttribute.html",
    "title": "Class MaintainerFactAttribute | NeonSDK documentation",
    "keywords": "Class MaintainerFactAttribute Inherits from Xunit.FactAttribute and sets Xunit.FactAttribute.Skip when the current operating system platform doesn't match any of the specified platform flags. Inheritance Object Attribute Xunit.FactAttribute MaintainerFactAttribute Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class MaintainerFactAttribute : FactAttribute Constructors MaintainerFactAttribute() Default constructor. Declaration public MaintainerFactAttribute()"
  },
  "neonsdk/api/Neon.Xunit.MockHttpServer.html": {
    "href": "neonsdk/api/Neon.Xunit.MockHttpServer.html",
    "title": "Class MockHttpServer | NeonSDK documentation",
    "keywords": "Class MockHttpServer Implements a very lightweight HTTP server suitable for locally mocking an HTTP based service. note This currently runs only on Windows. Inheritance Object MockHttpServer Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public sealed class MockHttpServer : IDisposable Constructors MockHttpServer(String, Func<RequestContext, Task>) Constuctor. Declaration public MockHttpServer(string urlPrefix, Func<RequestContext, Task> handler) Parameters Type Name Description String urlPrefix Specifies the URL prefixes to be served. Func < RequestContext , Task > handler The custom asynchronous request handler. Methods Dispose() Declaration public void Dispose()"
  },
  "neonsdk/api/Neon.Xunit.MockHttpServerExtensions.html": {
    "href": "neonsdk/api/Neon.Xunit.MockHttpServerExtensions.html",
    "title": "Class MockHttpServerExtensions | NeonSDK documentation",
    "keywords": "Class MockHttpServerExtensions Misc extsnsions. Inheritance Object MockHttpServerExtensions Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public static class MockHttpServerExtensions Methods GetBodyText(Request) Returns a request body payload as text. Declaration public static string GetBodyText(this Request request) Parameters Type Name Description Request request The request. Returns Type Description String The body text. QueryGet(Request, String) Returns the value of a request query argument. Declaration public static string QueryGet(this Request request, string name) Parameters Type Name Description Request request The request. String name The query argument name. Returns Type Description String The argument value or null . WritAsynce(Response, Byte[]) Asynchronously writes bytes to an HTTP response. Declaration public static async Task WritAsynce(this Response response, byte[] bytes) Parameters Type Name Description Response response The response. Byte [] bytes The bytes. Returns Type Description Task The tracking Task . Write(Response, Byte[]) Writes bytes to an HTTP response. Declaration public static void Write(this Response response, byte[] bytes) Parameters Type Name Description Response response The response. Byte [] bytes The bytes. Write(Response, Byte[], Int32, Int32) Writes bytes to an HTTP response. Declaration public static void Write(this Response response, byte[] bytes, int offset, int count) Parameters Type Name Description Response response The response. Byte [] bytes The bytes. Int32 offset The offset of the first byte to write. Int32 count The number of bytes to be written. Write(Response, String) Writes a string to an HTTP response using UTF-8 encoding. Declaration public static void Write(this Response response, string text) Parameters Type Name Description Response response The response. String text The text to be written. WriteAsync(Response, Byte[], Int32, Int32) Asynchronously writes bytes to an HTTP response. Declaration public static async Task WriteAsync(this Response response, byte[] bytes, int offset, int count) Parameters Type Name Description Response response The response. Byte [] bytes The bytes. Int32 offset The offset of the first byte to write. Int32 count The number of bytes to be written. Returns Type Description Task The tracking Task . WriteAsync(Response, String) Asynchronously writes a string to an HTTP response using UTF-8 encoding. Declaration public static async Task WriteAsync(this Response response, string text) Parameters Type Name Description Response response The response. String text The text to be written. Returns Type Description Task The tracking Task ."
  },
  "neonsdk/api/Neon.Xunit.NatsFixture.html": {
    "href": "neonsdk/api/Neon.Xunit.NatsFixture.html",
    "title": "Class NatsFixture | NeonSDK documentation",
    "keywords": "Class NatsFixture Used to run a Docker nats container on the current machine as a test fixture while tests are being performed and then deletes the container when the fixture is disposed. Inheritance Object TestFixture ContainerFixture NatsFixture Implements ITestFixture Inherited Members ContainerFixture.DefaultHostInterface ContainerFixture.GetHostInterface(String, Boolean) ContainerFixture.ContainerName ContainerFixture.ContainerId ContainerFixture.Start(String, String, String[], IEnumerable<String>, IEnumerable<String>, Boolean, Boolean, ContainerLimits) ContainerFixture.StartAsComposed(String, String, String[], IEnumerable<String>, IEnumerable<String>, Boolean, Boolean, ContainerLimits) ContainerFixture.Dispose(Boolean) TestFixture.IsDisposed TestFixture.InAction TestFixture.IsRunning TestFixture.CheckDisposed() TestFixture.CheckWithinAction() TestFixture.Start(Action) TestFixture.Dispose() TestFixture.OnRestart() TestFixture.State Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public sealed class NatsFixture : ContainerFixture, ITestFixture, IDisposable Remarks This fixture assumes that NATS is not currently running on the local workstation or as a container named nats-test . You may see port conflict errors if either of these conditions are not true. A somewhat safer but slower alternative, is to use the DockerFixture instead and add NatsFixture as a subfixture. The advantage is that DockerFixture will ensure that all (potentially conflicting) containers are removed before the NatsFixture fixture is started. Use Restart() to clear the NATS server state by restarting its Docker container. This also returns the new client connection. Constructors NatsFixture() Constructs the fixture. Declaration public NatsFixture() Fields ConnectionUri Returns the URI for a NATS server running locally (probably as a Docker container). Declaration public const string ConnectionUri = \"nats://localhost:4222\" Field Value Type Description String Properties Connection Returns the NATS connection. Declaration public IConnection Connection { get; } Property Value Type Description NATS.Client.IConnection Methods Reset() This method completely resets the fixture by removing and recreating the NATS container. Declaration public override void Reset() Overrides ContainerFixture.Reset() Restart() Restarts the NATS container to clear any previous state and returns the new client connection. Declaration public IConnection Restart() Returns Type Description NATS.Client.IConnection The new connection. Start(String, String, String[], String) Starts a NATS container if it's not already running. You'll generally want to call this in your test class constructor instead of Start(Action) . note You'll need to call StartAsComposed(String, String, String[], String) instead when this fixture is being added to a ComposedFixture . Declaration public TestFixtureStatus Start(string image = null, string name = \"nats-test\", string[] args = null, string hostInterface = null) Parameters Type Name Description String image Optionally specifies the NATS container image. This defaults to ghcr.io/neonrelease/nats:latest or ghcr.io/ghcr.io/neonrelease-dev/nats:latest depending on whether the assembly was built from a git release branch or not. String name Optionally specifies the NATS container name (defaults to nats-test ). String [] args Optional NATS server command line arguments. String hostInterface Optionally specifies the host interface where the container public ports will be published. This defaults to DefaultHostInterface but may be customized. This needs to be an IPv4 address. Returns Type Description TestFixtureStatus Started if the fixture wasn't previously started and this method call started it or AlreadyRunning if the fixture was already running. StartAsComposed(String, String, String[], String) Used to start the fixture within a ComposedFixture . Declaration public void StartAsComposed(string image = null, string name = \"nats-test\", string[] args = null, string hostInterface = null) Parameters Type Name Description String image Optionally specifies the NATS container image. This defaults to ghcr.io/neonrelease/nats:latest or ghcr.io/ghcr.io/neonrelease-dev/nats:latest depending on whether the assembly was built from a git release branch or not. String name Optionally specifies the container name (defaults to nats-test ). String [] args Optional NATS server command line arguments. String hostInterface Optionally specifies the host interface where the container public ports will be published. This defaults to DefaultHostInterface but may be customized. This needs to be an IPv4 address. Implements ITestFixture"
  },
  "neonsdk/api/Neon.Xunit.NatsStreamingFixture.html": {
    "href": "neonsdk/api/Neon.Xunit.NatsStreamingFixture.html",
    "title": "Class NatsStreamingFixture | NeonSDK documentation",
    "keywords": "Class NatsStreamingFixture Used to run a Docker nats-streaming container on the current machine as a test fixture while tests are being performed and then deletes the container when the fixture is disposed. Inheritance Object TestFixture ContainerFixture NatsStreamingFixture Implements ITestFixture Inherited Members ContainerFixture.DefaultHostInterface ContainerFixture.GetHostInterface(String, Boolean) ContainerFixture.ContainerName ContainerFixture.ContainerId ContainerFixture.Start(String, String, String[], IEnumerable<String>, IEnumerable<String>, Boolean, Boolean, ContainerLimits) ContainerFixture.StartAsComposed(String, String, String[], IEnumerable<String>, IEnumerable<String>, Boolean, Boolean, ContainerLimits) ContainerFixture.Dispose(Boolean) TestFixture.IsDisposed TestFixture.InAction TestFixture.IsRunning TestFixture.CheckDisposed() TestFixture.CheckWithinAction() TestFixture.Start(Action) TestFixture.Dispose() TestFixture.OnRestart() TestFixture.State Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public sealed class NatsStreamingFixture : ContainerFixture, ITestFixture, IDisposable Remarks This fixture assumes that NATS-SERVER is not currently running on the local workstation or as a container named nats-test . You may see port conflict errors if either of these conditions are not true. A somewhat safer but slower alternative, is to use the DockerFixture instead and add NatsStreamingFixture as a subfixture. The advantage is that DockerFixture will ensure that all (potentially conflicting) containers are removed before the NatsFixture fixture is started. Use Restart() to clear the NATS-SATREAMIN server state by restarting its Docker container. This also returns the new client connection. Constructors NatsStreamingFixture() Constructs the fixture. Declaration public NatsStreamingFixture() Properties Connection Returns the NATS-STREAMING connection. Declaration public IStanConnection Connection { get; } Property Value Type Description STAN.Client.IStanConnection Methods Reset() This method completely resets the fixture by removing and recreating the NATS-STREAMING container. Declaration public override void Reset() Overrides ContainerFixture.Reset() Restart() Restarts the NATS container to clear any previous state and returns the new client connection. Declaration public IStanConnection Restart() Returns Type Description STAN.Client.IStanConnection The new connection. Start(String, String, String[]) Starts a NATS-STREAMING container if it's not already running. You'll generally want to call this in your test class constructor instead of Start(Action) . note You'll need to call StartAsComposed(String, String, String[]) instead when this fixture is being added to a ComposedFixture . Declaration public TestFixtureStatus Start(string image = null, string name = \"nats-streaming-test\", string[] args = null) Parameters Type Name Description String image Optionally specifies the NATS-STREAMING container image. This defaults to ghcr.io/neonrelease/nats-streaming:latest or ghcr.io/neonrelease-dev/nats-streaming:latest depending on whether the assembly was built from a git release branch or not. String name Optionally specifies the NATS-STREAMING container name (defaults to nats-streaming-test ). String [] args Optional NATS-STREAMING server command line arguments. Returns Type Description TestFixtureStatus Started if the fixture wasn't previously started and this method call started it or AlreadyRunning if the fixture was already running. StartAsComposed(String, String, String[]) Used to start the fixture within a ComposedFixture . Declaration public void StartAsComposed(string image = null, string name = \"nats-streaming-test\", string[] args = null) Parameters Type Name Description String image Optionally specifies the NATS container image. This defaults to ghcr.io/neonrelease/nats-streaming:latest or ghcr.io/neonrelease-dev/nats-streaming:latest depending on whether the assembly was built from a git release branch or not. String name Optionally specifies the container name (defaults to nats-streaming-test ). String [] args Optional NATS-STREAMING server command line arguments. note Reasonable defaults are used when args is passed as null . These connect the NATS streaming server to the NATS core server running within the container and also configure the default MEMORY persisted store. Implements ITestFixture"
  },
  "neonsdk/api/Neon.Xunit.PlatformFactAttribute.html": {
    "href": "neonsdk/api/Neon.Xunit.PlatformFactAttribute.html",
    "title": "Class PlatformFactAttribute | NeonSDK documentation",
    "keywords": "Class PlatformFactAttribute Inherits from Xunit.FactAttribute and sets Xunit.FactAttribute.Skip when the current operating system platform doesn't match any of the specified platform flags. Inheritance Object Attribute Xunit.FactAttribute PlatformFactAttribute Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class PlatformFactAttribute : FactAttribute Constructors PlatformFactAttribute(TargetPlatforms) Default constructor. Declaration public PlatformFactAttribute(TargetPlatforms platforms) Parameters Type Name Description TargetPlatforms platforms Specifies the platforms where the tagged test should execute."
  },
  "neonsdk/api/Neon.Xunit.RepeatAttribute.html": {
    "href": "neonsdk/api/Neon.Xunit.RepeatAttribute.html",
    "title": "Class RepeatAttribute | NeonSDK documentation",
    "keywords": "Class RepeatAttribute Used to annotate an Xunit [Theory] test method to have the test executed the specified number of times. Inheritance Object Attribute Xunit.Sdk.DataAttribute RepeatAttribute Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class RepeatAttribute : DataAttribute Constructors RepeatAttribute(Int32) Constructor. Declaration public RepeatAttribute(int count) Parameters Type Name Description Int32 count Specifies the number of times the theory should be executed. Methods GetData(MethodInfo) Returns the data to be passed to the test theory method an enumeration of data arrays, each holding the objects to be passed as a test call. Declaration public override IEnumerable<object[]> GetData(MethodInfo testMethod) Parameters Type Name Description MethodInfo testMethod Specifies the target test method. Returns Type Description IEnumerable < Object []> The argument arrays. Overrides Xunit.Sdk.DataAttribute.GetData(System.Reflection.MethodInfo)"
  },
  "neonsdk/api/Neon.Xunit.TargetPlatforms.html": {
    "href": "neonsdk/api/Neon.Xunit.TargetPlatforms.html",
    "title": "Enum TargetPlatforms | NeonSDK documentation",
    "keywords": "Enum TargetPlatforms Enumerates the platforms that can be targeted by unit tests tagged with PlatformFactAttribute . Note that these flags may be bitwise-ORed together. Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax [Flags] public enum TargetPlatforms : uint Fields Name Description All Target all platforms. Linux Target Linux. Osx Target OS/X. Windows Target Windows. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Xunit.TestArea.html": {
    "href": "neonsdk/api/Neon.Xunit.TestArea.html",
    "title": "Class TestArea | NeonSDK documentation",
    "keywords": "Class TestArea Defines the NEONFORGE related test areas. These currently map to NEONFORGE related projects. Use these in [Trait(TestTrait.Category, ...)] attributes tagging your test methods. Inheritance Object TestArea Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public static class TestArea Fields NeonCassandra Identifies Neon.Cassandra tests. Declaration public const string NeonCassandra = \"Neon.Cassandra\" Field Value Type Description String NeonCli Identifies neon-cli tests. Declaration public const string NeonCli = \"neon-cli\" Field Value Type Description String NeonCloud Identifies Neon.Cloud tests. Declaration public const string NeonCloud = \"Neon.Cloud\" Field Value Type Description String NeonCommon Identifies Neon.Common tests. Declaration public const string NeonCommon = \"Neon.Common\" Field Value Type Description String NeonCouchbase Identifies Neon.Couchbase tests. Declaration public const string NeonCouchbase = \"Neon.Couchbase\" Field Value Type Description String NeonCryptography Identifies Neon.Cryptography tests. Declaration public const string NeonCryptography = \"Neon.Cryptography\" Field Value Type Description String NeonDeployment Identifies Neon.Deployment tests. Declaration public const string NeonDeployment = \"Neon.Deployment\" Field Value Type Description String NeonDesktop Identifies neon-desktop tests. Declaration public const string NeonDesktop = \"neon-desktop\" Field Value Type Description String NeonGit Identifies the Neon.Git unit tests. Declaration public const string NeonGit = \"Neon.Git\" Field Value Type Description String NeonGrpc Identifies gRPC service related tests. Declaration public const string NeonGrpc = \"Neon.Grpc\" Field Value Type Description String NeonHyperV Identifies Neon.HyperV unit tests. Declaration public const string NeonHyperV = \"Neon.HyperV\" Field Value Type Description String NeonJsonConverters Identifies Neon.JsonConverters tests. Declaration public const string NeonJsonConverters = \"Neon.JsonConverters\" Field Value Type Description String NeonKube Identifies Neon.Kube tests. Declaration public const string NeonKube = \"Neon.Kube\" Field Value Type Description String NeonModelGen Identifies Neon.ModelGen tests. Declaration public const string NeonModelGen = \"Neon.ModelGen\" Field Value Type Description String NeonPostgres Identifies Neon.Postgres tests. Declaration public const string NeonPostgres = \"Neon.Postgres\" Field Value Type Description String NeonService Identifies the Neon.Service tests. Declaration public const string NeonService = \"Neon.Service\" Field Value Type Description String NeonWeb Identifies Neon.Web tests. Declaration public const string NeonWeb = \"Neon.Web\" Field Value Type Description String NeonWSL Identifies Neon.WSL tests. Declaration public const string NeonWSL = \"Neon.WSL\" Field Value Type Description String NeonXenServer Identifies Neon.XenServer tests. Declaration public const string NeonXenServer = \"Neon.XenServer\" Field Value Type Description String NeonXunit Identifies neon-xunit tests. Declaration public const string NeonXunit = \"neon-xunit\" Field Value Type Description String NeonYugaByte Identifies Neon.YugaByte tests. Declaration public const string NeonYugaByte = \"Neon.YugaByte\" Field Value Type Description String"
  },
  "neonsdk/api/Neon.Xunit.TestCollection.html": {
    "href": "neonsdk/api/Neon.Xunit.TestCollection.html",
    "title": "Class TestCollection | NeonSDK documentation",
    "keywords": "Class TestCollection Enumerates the neonSDK related xUnit test collections. Inheritance Object TestCollection Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public static class TestCollection Fields NonParallel Identifies the test collection where tests are never executed in parallel. Declaration public const string NonParallel = \"Non-parallel\" Field Value Type Description String"
  },
  "neonsdk/api/Neon.Xunit.TestContext.html": {
    "href": "neonsdk/api/Neon.Xunit.TestContext.html",
    "title": "Class TestContext | NeonSDK documentation",
    "keywords": "Class TestContext Holds information like settings and test files for unit tests. Inheritance Object TestContext Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public sealed class TestContext : IDisposable Remarks This class is pretty easy to use. Simply construct an instance, perform any desired initialization such as reading files (potentionally encypted) and configuring variables/settings. Then your tests can reference this via the static Current property. You'll generally construct one of these instances at the beginning of your test method or within a test fixture. Only one TestContext may be active at any given time, so remember to call Dispose() when your test run is commplete. Constructors TestContext() Constructor. Declaration public TestContext() Remarks note Only one TestContext instance may exist at any time. Exceptions Type Condition InvalidOperationException Thrown if another TestContext already exists. Properties Current Returns the cuurent TestContext or null . Declaration public static TestContext Current { get; } Property Value Type Description TestContext Files Returns a case sensitive dictionary mapping file names to byte arrays with the file contents. You can use this to pass file data to tests. Declaration public Dictionary<string, byte[]> Files { get; } Property Value Type Description Dictionary < String , Byte []> Settings Returns a case senstive dictionary mapping setting names to object values. You can use this to pass settings and other information to tests. Declaration public Dictionary<string, object> Settings { get; } Property Value Type Description Dictionary < String , Object > Methods Dispose() Declaration public void Dispose() GetFileBytes(String) Returns the raw bytes for the named file from the Files dictionary. Declaration public byte[] GetFileBytes(string filename) Parameters Type Name Description String filename The file name. Returns Type Description Byte [] The file bytes. Exceptions Type Condition KeyNotFoundException Thrown if the file doesn't exist. GetFileText(String, Encoding) Returns the text for the named file from the Files . dictionary. Declaration public string GetFileText(string filename, Encoding encoding = null) Parameters Type Name Description String filename The file name. Encoding encoding The encoding to be used (defaults to UTF8 ). Returns Type Description String The file text. Exceptions Type Condition KeyNotFoundException Thrown if the file doesn't exist. LoadEnvironment(String, Func<String, String>) Loads environment variables formatted as NAME=VALUE from a text file into environment variables. The file will be decrypted using NeonVault if necessary. note Blank lines and lines beginning with '#' will be ignored. Declaration public void LoadEnvironment(string path, Func<string, string> passwordProvider = null) Parameters Type Name Description String path The input file path. Func < String , String > passwordProvider Optionally specifies the password provider function to be used to locate the password required to decrypt the source file when necessary. This defaults to looking for the password inb ~/.neonkube/passwords when passwordProvider is null . Exceptions Type Condition FileNotFoundException Thrown if the file doesn't exist. FormatException Thrown for file formatting problems. LoadFile(String, Func<String, String>) Loads a file into the Files dictionary, using the file name (without the directory path) as the key. The file will be decrypted via NeonVault as necessary. Declaration public void LoadFile(string path, Func<string, string> passwordProvider = null) Parameters Type Name Description String path The file path. Func < String , String > passwordProvider Optionally specifies the password provider function to be used to locate the password required to decrypt the source file when necessary. This defaults to looking for the password inb ~/.neonkube/passwords when passwordProvider is null . Exceptions Type Condition FileNotFoundException Thrown if the file doesn't exist. FormatException Thrown for file formatting problems. LoadSettings(String, Func<String, String>) Loads settings formatted as NAME=VALUE from a text file into the Settings dictionary. The file will be decrypted using NeonVault if necessary. note Blank lines and lines beginning with '#' will be ignored. Declaration public void LoadSettings(string path, Func<string, string> passwordProvider = null) Parameters Type Name Description String path The input file path. Func < String , String > passwordProvider Optionally specifies the password provider function to be used to locate the password required to decrypt the source file when necessary. This defaults to looking for the password inb ~/.neonkube/passwords when passwordProvider is null . Exceptions Type Condition FileNotFoundException Thrown if the file doesn't exist. FormatException Thrown for file formatting problems."
  },
  "neonsdk/api/Neon.Xunit.TestFixture.html": {
    "href": "neonsdk/api/Neon.Xunit.TestFixture.html",
    "title": "Class TestFixture | NeonSDK documentation",
    "keywords": "Class TestFixture Abstract test fixture base class. Inheritance Object TestFixture AspNetFixture CodeFixture ComposedFixture ContainerFixture DockerComposeFixture EnvironmentFixture HostsFixture Implements ITestFixture Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public abstract class TestFixture : ITestFixture, IDisposable Remarks note IMPORTANT: The base Neon TestFixture implementation DOES NOT support parallel test execution. You need to explicitly disable parallel execution in all test assemblies that rely on thesex test fixtures by adding a C# file called AssemblyInfo.cs with: [assembly: CollectionBehavior(DisableTestParallelization = true, MaxParallelThreads = 1)] and then define your test classes like: public class MyTests { [Collection(TestCollection.NonParallel)] [CollectionDefinition(TestCollection.NonParallel, DisableParallelization = true)] [Fact] public void Test() { } } Test fixtures that modify global machine or other environmental state must implement a public static void EnsureReset() method resets the state to reasonable defaults. These will be reflected and called when the first TestFixture is created by the test runner for every test class. Constructors TestFixture() Constructs the fixture. Declaration public TestFixture() Properties InAction Returns true if the Start(Action) method is running. Declaration protected bool InAction { get; set; } Property Value Type Description Boolean IsDisposed Returns true if the instance has been disposed. Declaration protected bool IsDisposed { get; set; } Property Value Type Description Boolean IsRunning Returns true if the fixture has been initialized. Declaration public bool IsRunning { get; set; } Property Value Type Description Boolean State Used by unit test classes to persist arbitrary name/value information across individual unit tests. Declaration public IDictionary<string, object> State { get; } Property Value Type Description IDictionary < String , Object > Methods CheckDisposed() Verifies that the fixture instance has not been disposed. Declaration protected void CheckDisposed() CheckWithinAction() Verifies that the fixture instance's Start(Action) method is executing. Declaration protected void CheckWithinAction() Dispose() Declaration public void Dispose() Dispose(Boolean) Releases all associated resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. Finalize() Finalizer. Declaration protected void Finalize() OnRestart() Called when an already started fixture is being restarted. This provides the fixture an opportunity to do some custom initialization. This base method does nothing. note This method is intended only for use by test fixture implementations. Unit tests or test fixtures should never call this directly. Declaration public virtual void OnRestart() Reset() INTERNAL USE ONLY: Resets the fixture state. Declaration public virtual void Reset() Start(Action) Starts the fixture if it hasn't already been started including invoking the optional Action when the first time Start(Action) is called for a fixture instance. Declaration public virtual TestFixtureStatus Start(Action action = null) Parameters Type Name Description Action action The optional custom start action. Returns Type Description TestFixtureStatus Started if the fixture wasn't previously started and this method call started it or AlreadyRunning if the fixture was already running. Exceptions Type Condition InvalidOperationException Thrown if this is called from within the Action . Implements ITestFixture"
  },
  "neonsdk/api/Neon.Xunit.TestFixtureStatus.html": {
    "href": "neonsdk/api/Neon.Xunit.TestFixtureStatus.html",
    "title": "Enum TestFixtureStatus | NeonSDK documentation",
    "keywords": "Enum TestFixtureStatus Returned by Start(Action) to indicate whether the test fixture is disabled, was just started, or was already running. Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public enum TestFixtureStatus Fields Name Description AlreadyRunning The fixture has already been started for the current test class. Disabled The fixrture is disable. Started The fixture was just started. Extension Methods EnumExtensions.ToMemberString()"
  },
  "neonsdk/api/Neon.Xunit.TestHelper.html": {
    "href": "neonsdk/api/Neon.Xunit.TestHelper.html",
    "title": "Class TestHelper | NeonSDK documentation",
    "keywords": "Class TestHelper Misc local unit test helpers. Inheritance Object TestHelper Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public static class TestHelper Fields ClusterTestingVariable The presence of this environment variable indicates that neonKUBE cluster based unit tests should be enabled. Declaration public const string ClusterTestingVariable = \"NEON_CLUSTER_TESTING\" Field Value Type Description String IsClusterTestingEnabled Indicates whether neonKUBE cluster based testing is enabled by the presence of the NEON_CLUSTER_TESTING environment variable. Declaration public static bool IsClusterTestingEnabled Field Value Type Description Boolean Properties NeonForgeTestAssetsFolder Returns the path to the NEONFORGE project test assets folder. This folder is used to hold various assets required by some NEONFORGE unit tests. Declaration public static string NeonForgeTestAssetsFolder { get; } Property Value Type Description String Exceptions Type Condition NotSupportedException Thrown when the development environment is not fully configured. Methods AssertEqualLines(String, String) Compares two strings such that platform line ending differences will be ignored. This works by removing any embedded carriage returns before performing the comparision. Declaration public static void AssertEqualLines(string expected, string actual) Parameters Type Name Description String expected The expected value. String actual The actual valut. Exceptions Type Condition AssertException Thrown on failure. AssertEquivalent<T>(IEnumerable<T>, IEnumerable<T>) Ensures that two enumerations contain the same items, possibly in different orders. This is similar to Xunit collection comparison assert method but it doesn't enforce the item order. This uses the default equality comparer. Declaration public static void AssertEquivalent<T>(IEnumerable<T> expected, IEnumerable<T> collection) Parameters Type Name Description IEnumerable <T> expected The expected items. IEnumerable <T> collection The collection being tested. Type Parameters Name Description T Exceptions Type Condition AssertException Thrown on failure. AssertEquivalent<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>) Ensures that two enumerations contain the same items, possibly in different orders. This is similar to Xunit collection comparison assert method but it doesn't enforce the item order. This uses a custom equality comparer. Declaration public static void AssertEquivalent<T>(IEnumerable<T> expected, IEnumerable<T> collection, IEqualityComparer<T> comparer) Parameters Type Name Description IEnumerable <T> expected The expected items. IEnumerable <T> collection The collection being tested. IEqualityComparer <T> comparer The comparer used to equate objects in the collection with the expected object Type Parameters Name Description T Exceptions Type Condition AssertException Thrown on failure. AssertEquivalent<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>) Ensures that two dictionaries contain the same items using the default equality comparer. Declaration public static void AssertEquivalent<TKey, TValue>(IDictionary<TKey, TValue> expected, IDictionary<TKey, TValue> dictionary) Parameters Type Name Description IDictionary <TKey, TValue> expected The expected items. IDictionary <TKey, TValue> dictionary The collection being tested. Type Parameters Name Description TKey Specifies the dictionary key type. TValue Specifies the dictionary value type. Exceptions Type Condition AssertException Thrown on failure. AssertEquivalent<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, IEqualityComparer<TValue>) Ensures that two dictionaries contain the same items using an equality comparer. Declaration public static void AssertEquivalent<TKey, TValue>(IDictionary<TKey, TValue> expected, IDictionary<TKey, TValue> dictionary, IEqualityComparer<TValue> comparer) Parameters Type Name Description IDictionary <TKey, TValue> expected The expected items. IDictionary <TKey, TValue> dictionary The collection being tested. IEqualityComparer <TValue> comparer The equality comparer to be used. Type Parameters Name Description TKey Specifies the dictionary key type. TValue Specifies the dictionary value type. Exceptions Type Condition AssertException Thrown on failure. AssertNotEquivalent<T>(IEnumerable<T>, IEnumerable<T>) Ensures that two enumerations are not equivalent, using the default equality comparer. Declaration public static void AssertNotEquivalent<T>(IEnumerable<T> expected, IEnumerable<T> collection) Parameters Type Name Description IEnumerable <T> expected The expected items. IEnumerable <T> collection The collection being tested. Type Parameters Name Description T Exceptions Type Condition AssertException Thrown on failure. AssertNotEquivalent<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>) Ensures that two enumerations are not equivalent, using a custom equality comparer. Declaration public static void AssertNotEquivalent<T>(IEnumerable<T> expected, IEnumerable<T> collection, IEqualityComparer<T> comparer) Parameters Type Name Description IEnumerable <T> expected The expected items. IEnumerable <T> collection The collection being tested. IEqualityComparer <T> comparer The comparer used to equate objects in the collection with the expected object Type Parameters Name Description T Exceptions Type Condition AssertException Thrown on failure. AssertNotEquivalent<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>) Ensures that two dictionaries do not contain the same items using the default equality comparer. Declaration public static void AssertNotEquivalent<TKey, TValue>(IDictionary<TKey, TValue> expected, IDictionary<TKey, TValue> dictionary) Parameters Type Name Description IDictionary <TKey, TValue> expected The expected items. IDictionary <TKey, TValue> dictionary The collection being tested. Type Parameters Name Description TKey Specifies the dictionary key type. TValue Specifies the dictionary value type. Exceptions Type Condition AssertException Thrown on failure. AssertNotEquivalent<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, IEqualityComparer<TValue>) Ensures that two dictionaries do not contain the same items using an equality comparer. Declaration public static void AssertNotEquivalent<TKey, TValue>(IDictionary<TKey, TValue> expected, IDictionary<TKey, TValue> dictionary, IEqualityComparer<TValue> comparer) Parameters Type Name Description IDictionary <TKey, TValue> expected The expected items. IDictionary <TKey, TValue> dictionary The collection being tested. IEqualityComparer <TValue> comparer The equality comparer to be used. Type Parameters Name Description TKey Specifies the dictionary key type. TValue Specifies the dictionary value type. Exceptions Type Condition AssertException Thrown on failure. AssertThrows<TException>(Action) Verifies that an action throws a TException or an AggregateException that contains TException . Declaration public static void AssertThrows<TException>(Action action) where TException : Exception Parameters Type Name Description Action action The test action. Type Parameters Name Description TException The required exception type. Exceptions Type Condition AssertException Thrown when no exception was thrown or the exception thrown had an unexpected type. AssertThrowsAsync<TException>(Func<Task>) Verifies that an asynchronous action throws a TException or an AggregateException that contains TException . Declaration public static async Task AssertThrowsAsync<TException>(Func<Task> action) where TException : Exception Parameters Type Name Description Func < Task > action The test action. Returns Type Description Task The tracking Task . Type Parameters Name Description TException The required exception type. GetUbuntuTestVhdxPath() Returns the path to the Ubuntu VHDX file suitable for basic unit testing. This will be located in the NeonForgeTestAssetsFolder and will be downloaded from S3 if it's not already present. Declaration public static string GetUbuntuTestVhdxPath() Returns Type Description String Path to the VHDX file. ResetDocker(Type, Boolean) Resets Docker state by removing all containers, volumes, networks and optionally the Docker image cache. This is useful ensuring that Docker is in a known state. This also disables swarm mode . Declaration public static void ResetDocker(Type testClass, bool pruneImages = false) Parameters Type Name Description Type testClass Specifies the current test class or pass null to force the reset). Boolean pruneImages Optionally prunes the Docker image cache. Remarks This method works by comparing the testClass passed with any previous test class passed. The method only resets the Docker state when the test class changes. This prevents Docker from being reset when every test in the same class runs (which will probably break tests). note This does not support multiple test classes performing parallel Docker operations. RunFixture<T>(Object[]) Used to run a TestFixture outside of a unit test. Declaration public static void RunFixture<T>(params object[] args) where T : class Parameters Type Name Description Object [] args Optional parameters that will be passed to the constructor after the fixture parameter. Note that the number of parameters and their types must match the constructor parameters after the fixture one. Type Parameters Name Description T Specifies the test type. Remarks This is often used to run a using or a collection of instances for debugging purposes using a combination of a ComposedFixture with sub-fixtures. But, this can also be used for any ITestFixture implementation. You'll need to implement a test class that derives from a Xunit.IClassFixture`1 implementation and optionally implements IDisposable . You'll pass your test type as T . Your test class must include a public constructor that accepts a single parameter with the test fixture type and a public method with no parameters called public void Run() . This will look something like: public class MyTestRunner : IClassFixture<ComposedFixture> { private ComposedFixture composedFixture; private NatsFixture natsFixture; private NeonServiceFixture<QueueService> queueServiceFixture; public MyTestRunner(ComposedFixture fixture) { this.composedFixture = fixture; composedFixture.Start( () => { composedFixture.AddFixture(\"nats\", new NatsFixture(), natsFixture => { natsFixture.StartAsComposed(); }); composedFixture.AddServiceFixture(\"queue-service\", new NeonServiceFixture<QueueService>(), () => CreateQueueService()); }); this.natsFixture = (NatsFixture)composedFixture[\"nats\"]; this.queueServiceFixture = (NeonServiceFixture<QueueService>)composedFixture[\"queue-service\"]; } public void Run() { // The runner will stop when this method returns. You can // also use this as an opportunity to perform any initialization. // For this example, we're just going to spin slowly forever. while (true) { System.Threading.Thread.Sleep(10000); } } } This method performs these steps: Perform a runtime check to verify that T has a public constructor that accepts a single parameter of type T as well as any additional parameters. Perform a runtime check to ensure that T has a public void Run() method. Instantiate an instance of the test fixture specified by Xunit.IClassFixture`1 . Instantiate an instance of T , passing the test fixture just created as the parameter. Call the Run() method and wait for it to return. Dispose the test fixture. Call Dispose() , if implemented by the test class. The method returns. TempFolder(String, String) Creates and populates a temporary test folder with a test file. Declaration public static TempFolder TempFolder(string filename, string data) Parameters Type Name Description String filename The file data. String data The file name Returns Type Description TempFolder The TempFolder(String, String) . Remarks note Ensure that the TempFolder(String, String) returned is disposed so it and any files within will be deleted."
  },
  "neonsdk/api/Neon.Xunit.TestHttpClient.html": {
    "href": "neonsdk/api/Neon.Xunit.TestHttpClient.html",
    "title": "Class TestHttpClient | NeonSDK documentation",
    "keywords": "Class TestHttpClient Implements a HttpClient compatible client with additional capabilities, like disabling connection reuse. This is intended for unit testing purposes like verifying that load balancing actually works. Inheritance Object TestHttpClient Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class TestHttpClient : IDisposable Constructors TestHttpClient(Boolean, HttpMessageHandler, Boolean) Constructor. Declaration public TestHttpClient(bool disableConnectionReuse, HttpMessageHandler handler = null, bool disposeHandler = false) Parameters Type Name Description Boolean disableConnectionReuse Indicates whether connection reuse should be disabled. HttpMessageHandler handler Optionally specifies a message handler. Boolean disposeHandler Optionally specifies that the handler should be disposed when this instance is disposed. Properties BaseAddress The base address that to be used when sending requests. Declaration public Uri BaseAddress { get; set; } Property Value Type Description Uri DefaultRequestHeaders The headers that should be sent with each request. Declaration public HttpRequestHeaders DefaultRequestHeaders { get; } Property Value Type Description HttpRequestHeaders MaxResponseContentBufferSize the maximum number of bytes to buffer when reading the response content. This defaults to 2GiB. Declaration public long MaxResponseContentBufferSize { get; set; } Property Value Type Description Int64 Timeout The maximum time allowed before a request times out. Declaration public TimeSpan Timeout { get; set; } Property Value Type Description TimeSpan Methods DeleteAsync(String) Sends a DELETE request. Declaration public async Task<HttpResponseMessage> DeleteAsync(string requestUri) Parameters Type Name Description String requestUri The request URI. Returns Type Description Task < HttpResponseMessage > The response. DeleteAsync(String, CancellationToken) Sends a DELETE request. Declaration public async Task<HttpResponseMessage> DeleteAsync(string requestUri, CancellationToken cancellationToken) Parameters Type Name Description String requestUri The request URI. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. DeleteAsync(Uri) Sends a DELETE request. Declaration public async Task<HttpResponseMessage> DeleteAsync(Uri requestUri) Parameters Type Name Description Uri requestUri The request URI. Returns Type Description Task < HttpResponseMessage > The response. DeleteAsync(Uri, CancellationToken) Sends a DELETE request. Declaration public async Task<HttpResponseMessage> DeleteAsync(Uri requestUri, CancellationToken cancellationToken) Parameters Type Name Description Uri requestUri The request URI. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. Dispose() Declaration public void Dispose() Dispose(Boolean) Releases all associated resources. Declaration protected void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Pass true if we're disposing, false if we're finalizing. GetAsync(String) Sends a GET request. Declaration public async Task<HttpResponseMessage> GetAsync(string requestUri) Parameters Type Name Description String requestUri The request URI. Returns Type Description Task < HttpResponseMessage > The response. GetAsync(String, HttpCompletionOption) Sends a GET request. Declaration public async Task<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption) Parameters Type Name Description String requestUri The request URI. HttpCompletionOption completionOption The copmpletion options. Returns Type Description Task < HttpResponseMessage > The response. GetAsync(String, HttpCompletionOption, CancellationToken) Sends a GET request. Declaration public async Task<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption, CancellationToken cancellationToken) Parameters Type Name Description String requestUri The request URI. HttpCompletionOption completionOption The copmpletion options. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. GetAsync(String, CancellationToken) Sends a GET request. Declaration public async Task<HttpResponseMessage> GetAsync(string requestUri, CancellationToken cancellationToken) Parameters Type Name Description String requestUri The request URI. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. GetAsync(Uri) Sends a GET request. Declaration public async Task<HttpResponseMessage> GetAsync(Uri requestUri) Parameters Type Name Description Uri requestUri The request URI. Returns Type Description Task < HttpResponseMessage > The response. GetAsync(Uri, HttpCompletionOption) Sends a GET request. Declaration public async Task<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption) Parameters Type Name Description Uri requestUri The request URI. HttpCompletionOption completionOption The completion option. Returns Type Description Task < HttpResponseMessage > The response. GetAsync(Uri, HttpCompletionOption, CancellationToken) Sends a GET request. Declaration public async Task<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption, CancellationToken cancellationToken) Parameters Type Name Description Uri requestUri The request URI. HttpCompletionOption completionOption The completion option. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. GetAsync(Uri, CancellationToken) Sends a GET request. Declaration public async Task<HttpResponseMessage> GetAsync(Uri requestUri, CancellationToken cancellationToken) Parameters Type Name Description Uri requestUri The request URI. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. GetByteArrayAsync(String) Performs a GET request and returns the response contents as a byte array. Declaration public async Task<byte[]> GetByteArrayAsync(string requestUri) Parameters Type Name Description String requestUri The request URI. Returns Type Description Task < Byte []> The content bytes. GetByteArrayAsync(Uri) Performs a GET request and returns the response contents as a byte array. Declaration public async Task<byte[]> GetByteArrayAsync(Uri requestUri) Parameters Type Name Description Uri requestUri The request URI. Returns Type Description Task < Byte []> The content bytes. GetStreamAsync(String) Performs a GET request and returns the response as a stream. Declaration public async Task<Stream> GetStreamAsync(string requestUri) Parameters Type Name Description String requestUri The request URI. Returns Type Description Task < Stream > The response stream. GetStreamAsync(Uri) Performs a GET request and returns the response as a stream. Declaration public async Task<Stream> GetStreamAsync(Uri requestUri) Parameters Type Name Description Uri requestUri The request URI. Returns Type Description Task < Stream > The response stream. GetStringAsync(String) Performs a GET request and returns the response as a string. Declaration public async Task<string> GetStringAsync(string requestUri) Parameters Type Name Description String requestUri The request URI. Returns Type Description Task < String > The response string. GetStringAsync(Uri) Performs a GET request and returns the response as a string. Declaration public async Task<string> GetStringAsync(Uri requestUri) Parameters Type Name Description Uri requestUri The request URI. Returns Type Description Task < String > The response string. PostAsync(String, HttpContent) Performs a POST request. Declaration public async Task<HttpResponseMessage> PostAsync(string requestUri, HttpContent content) Parameters Type Name Description String requestUri The request URI. HttpContent content The request contents. Returns Type Description Task < HttpResponseMessage > The response. PostAsync(String, HttpContent, CancellationToken) Performs a POST request. Declaration public async Task<HttpResponseMessage> PostAsync(string requestUri, HttpContent content, CancellationToken cancellationToken) Parameters Type Name Description String requestUri The request URI. HttpContent content The request contents. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. PostAsync(Uri, HttpContent) Performs a POST request. Declaration public async Task<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent content) Parameters Type Name Description Uri requestUri The request URI. HttpContent content The request contents. Returns Type Description Task < HttpResponseMessage > The response. PostAsync(Uri, HttpContent, CancellationToken) Performs a POST request. Declaration public async Task<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent content, CancellationToken cancellationToken) Parameters Type Name Description Uri requestUri The request URI. HttpContent content The request contents. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. PutAsync(String, HttpContent) Performs a PUT request. Declaration public async Task<HttpResponseMessage> PutAsync(string requestUri, HttpContent content) Parameters Type Name Description String requestUri The request URI. HttpContent content The request contents. Returns Type Description Task < HttpResponseMessage > The response. PutAsync(String, HttpContent, CancellationToken) Performs a PUT request. Declaration public async Task<HttpResponseMessage> PutAsync(string requestUri, HttpContent content, CancellationToken cancellationToken) Parameters Type Name Description String requestUri The request URI. HttpContent content The request contents. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. PutAsync(Uri, HttpContent) Performs a PUT request. Declaration public async Task<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent content) Parameters Type Name Description Uri requestUri The request URI. HttpContent content The request contents. Returns Type Description Task < HttpResponseMessage > The response. PutAsync(Uri, HttpContent, CancellationToken) Performs a PUT request. Declaration public async Task<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent content, CancellationToken cancellationToken) Parameters Type Name Description Uri requestUri The request URI. HttpContent content The request contents. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. SendAsync(HttpRequestMessage) Sends a request. Declaration public async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request) Parameters Type Name Description HttpRequestMessage request The request. Returns Type Description Task < HttpResponseMessage > The response. SendAsync(HttpRequestMessage, HttpCompletionOption) Sends a request. Declaration public async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption) Parameters Type Name Description HttpRequestMessage request The request. HttpCompletionOption completionOption The completion option. Returns Type Description Task < HttpResponseMessage > The response. SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken) Sends a request. Declaration public async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken) Parameters Type Name Description HttpRequestMessage request The request. HttpCompletionOption completionOption The completion option. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response. SendAsync(HttpRequestMessage, CancellationToken) Sends a request. Declaration public async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters Type Name Description HttpRequestMessage request The request. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The response."
  },
  "neonsdk/api/Neon.Xunit.TestOutputWriter.html": {
    "href": "neonsdk/api/Neon.Xunit.TestOutputWriter.html",
    "title": "Class TestOutputWriter | NeonSDK documentation",
    "keywords": "Class TestOutputWriter Wraps an Xunit.Abstractions.ITestOutputHelper with a TextWriter that can be used generate output in unit tests that will be included in the captured test log. note Only the Write(...) and WriteLine(...) methods are implemented. Inheritance Object MarshalByRefObject TextWriter TestOutputWriter Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public class TestOutputWriter : TextWriter, IDisposable Remarks To use this class, you'll need to obtain a Xunit.Abstractions.ITestOutputHelper instance from Xunit via dependency injection by adding a parameter to your test constructor and then creating a TestOutputWriter from it, like: public class MyTest : IClassFixture<AspNetFixture> { private AspNetFixture fixture; private TestAspNetFixtureClient client; private TestOutputWriter testWriter; public Test_EndToEnd(AspNetFixture fixture, ITestOutputHelper outputHelper) { this.fixture = fixture; this.testWriter = new TestOutputWriter(outputHelper); fixture.Start<Startup>(logWriter: testWriter, logLevel: Neon.Diagnostics.LogLevel.Debug); client = new TestAspNetFixtureClient() { BaseAddress = fixture.BaseAddress }; } } Constructors TestOutputWriter(ITestOutputHelper) Constructor. Declaration public TestOutputWriter(ITestOutputHelper outputHelper) Parameters Type Name Description Xunit.Abstractions.ITestOutputHelper outputHelper The test output helper. Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Properties Encoding Declaration public override Encoding Encoding { get; } Property Value Type Description Encoding Overrides TextWriter.Encoding Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Methods Flush() Declaration public override void Flush() Overrides TextWriter.Flush() Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . FlushAsync() Declaration public override async Task FlushAsync() Returns Type Description Task Overrides TextWriter.FlushAsync() Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(Boolean) Declaration public override void Write(bool value) Parameters Type Name Description Boolean value Overrides TextWriter.Write(Boolean) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(Char) Declaration public override void Write(char value) Parameters Type Name Description Char value Overrides TextWriter.Write(Char) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(Char[]) Declaration public override void Write(char[] buffer) Parameters Type Name Description Char [] buffer Overrides TextWriter.Write(Char[]) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(Char[], Int32, Int32) Declaration public override void Write(char[] buffer, int index, int count) Parameters Type Name Description Char [] buffer Int32 index Int32 count Overrides TextWriter.Write(Char[], Int32, Int32) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(Decimal) Declaration public override void Write(decimal value) Parameters Type Name Description Decimal value Overrides TextWriter.Write(Decimal) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(Double) Declaration public override void Write(double value) Parameters Type Name Description Double value Overrides TextWriter.Write(Double) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(Int32) Declaration public override void Write(int value) Parameters Type Name Description Int32 value Overrides TextWriter.Write(Int32) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(Int64) Declaration public override void Write(long value) Parameters Type Name Description Int64 value Overrides TextWriter.Write(Int64) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(Object) Declaration public override void Write(object value) Parameters Type Name Description Object value Overrides TextWriter.Write(Object) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(Single) Declaration public override void Write(float value) Parameters Type Name Description Single value Overrides TextWriter.Write(Single) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(String) Declaration public override void Write(string value) Parameters Type Name Description String value Overrides TextWriter.Write(String) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(String, Object) Declaration public override void Write(string format, object arg0) Parameters Type Name Description String format Object arg0 Overrides TextWriter.Write(String, Object) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(String, Object, Object) Declaration public override void Write(string format, object arg0, object arg1) Parameters Type Name Description String format Object arg0 Object arg1 Overrides TextWriter.Write(String, Object, Object) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(String, Object, Object, Object) Declaration public override void Write(string format, object arg0, object arg1, object arg2) Parameters Type Name Description String format Object arg0 Object arg1 Object arg2 Overrides TextWriter.Write(String, Object, Object, Object) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(String, Object[]) Declaration public override void Write(string format, params object[] arg) Parameters Type Name Description String format Object [] arg Overrides TextWriter.Write(String, Object[]) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(UInt32) Declaration public override void Write(uint value) Parameters Type Name Description UInt32 value Overrides TextWriter.Write(UInt32) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . Write(UInt64) Declaration public override void Write(ulong value) Parameters Type Name Description UInt64 value Overrides TextWriter.Write(UInt64) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteAsync(Char) Declaration public override Task WriteAsync(char value) Parameters Type Name Description Char value Returns Type Description Task Overrides TextWriter.WriteAsync(Char) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteAsync(Char[], Int32, Int32) Declaration public override Task WriteAsync(char[] buffer, int index, int count) Parameters Type Name Description Char [] buffer Int32 index Int32 count Returns Type Description Task Overrides TextWriter.WriteAsync(Char[], Int32, Int32) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteAsync(String) Declaration public override Task WriteAsync(string value) Parameters Type Name Description String value Returns Type Description Task Overrides TextWriter.WriteAsync(String) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine() Declaration public override void WriteLine() Overrides TextWriter.WriteLine() Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(Boolean) Declaration public override void WriteLine(bool value) Parameters Type Name Description Boolean value Overrides TextWriter.WriteLine(Boolean) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(Char) Declaration public override void WriteLine(char value) Parameters Type Name Description Char value Overrides TextWriter.WriteLine(Char) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(Char[]) Declaration public override void WriteLine(char[] buffer) Parameters Type Name Description Char [] buffer Overrides TextWriter.WriteLine(Char[]) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(Char[], Int32, Int32) Declaration public override void WriteLine(char[] buffer, int index, int count) Parameters Type Name Description Char [] buffer Int32 index Int32 count Overrides TextWriter.WriteLine(Char[], Int32, Int32) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(Decimal) Declaration public override void WriteLine(decimal value) Parameters Type Name Description Decimal value Overrides TextWriter.WriteLine(Decimal) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(Double) Declaration public override void WriteLine(double value) Parameters Type Name Description Double value Overrides TextWriter.WriteLine(Double) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(Int32) Declaration public override void WriteLine(int value) Parameters Type Name Description Int32 value Overrides TextWriter.WriteLine(Int32) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(Int64) Declaration public override void WriteLine(long value) Parameters Type Name Description Int64 value Overrides TextWriter.WriteLine(Int64) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(Object) Declaration public override void WriteLine(object value) Parameters Type Name Description Object value Overrides TextWriter.WriteLine(Object) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(Single) Declaration public override void WriteLine(float value) Parameters Type Name Description Single value Overrides TextWriter.WriteLine(Single) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(String) Declaration public override void WriteLine(string value) Parameters Type Name Description String value Overrides TextWriter.WriteLine(String) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(String, Object) Declaration public override void WriteLine(string format, object arg0) Parameters Type Name Description String format Object arg0 Overrides TextWriter.WriteLine(String, Object) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(String, Object, Object) Declaration public override void WriteLine(string format, object arg0, object arg1) Parameters Type Name Description String format Object arg0 Object arg1 Overrides TextWriter.WriteLine(String, Object, Object) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(String, Object, Object, Object) Declaration public override void WriteLine(string format, object arg0, object arg1, object arg2) Parameters Type Name Description String format Object arg0 Object arg1 Object arg2 Overrides TextWriter.WriteLine(String, Object, Object, Object) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(String, Object[]) Declaration public override void WriteLine(string format, params object[] arg) Parameters Type Name Description String format Object [] arg Overrides TextWriter.WriteLine(String, Object[]) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(UInt32) Declaration public override void WriteLine(uint value) Parameters Type Name Description UInt32 value Overrides TextWriter.WriteLine(UInt32) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLine(UInt64) Declaration public override void WriteLine(ulong value) Parameters Type Name Description UInt64 value Overrides TextWriter.WriteLine(UInt64) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLineAsync() Declaration public override async Task WriteLineAsync() Returns Type Description Task Overrides TextWriter.WriteLineAsync() Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLineAsync(Char) Declaration public override async Task WriteLineAsync(char value) Parameters Type Name Description Char value Returns Type Description Task Overrides TextWriter.WriteLineAsync(Char) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLineAsync(Char[], Int32, Int32) Declaration public override async Task WriteLineAsync(char[] buffer, int index, int count) Parameters Type Name Description Char [] buffer Int32 index Int32 count Returns Type Description Task Overrides TextWriter.WriteLineAsync(Char[], Int32, Int32) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) . WriteLineAsync(String) Declaration public override async Task WriteLineAsync(string value) Parameters Type Name Description String value Returns Type Description Task Overrides TextWriter.WriteLineAsync(String) Exceptions Type Condition NotImplementedException Thrown for all methods except for Write(...) and WriteLine(...) ."
  },
  "neonsdk/api/Neon.Xunit.TestTrait.html": {
    "href": "neonsdk/api/Neon.Xunit.TestTrait.html",
    "title": "Class TestTrait | NeonSDK documentation",
    "keywords": "Class TestTrait Identifies the common NEONFORGE related test traits. Inheritance Object TestTrait Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public static class TestTrait Fields Buggy Set as the category value to identify test cases that appear to have bugs as opposed to the thing being tested having bugs. This also covers transient environmental issues generally out of control of the test case developer. Declaration public const string Buggy = \"buggy\" Field Value Type Description String Category Identifies the Category test trait. Declaration public const string Category = \"Category\" Field Value Type Description String Incomplete Set as the category value to identify test cases that are still under development. Declaration public const string Incomplete = \"incomplete\" Field Value Type Description String Investigate Set as the category value to identify test cases that are failing and are actively under investigation. Declaration public const string Investigate = \"investigate\" Field Value Type Description String NeonKube Set this as the category value for tests that require a neonKUBE cluster. Declaration public const string NeonKube = \"neon-kube\" Field Value Type Description String RequiresProfile Requires one or more profile values, potentially requiring the developer to enter a master password. Declaration public const string RequiresProfile = \"requires-profile\" Field Value Type Description String Slow Set this as the category value for slow tests. Declaration public const string Slow = \"slow\" Field Value Type Description String"
  },
  "neonsdk/api/Neon.Xunit.XunitExtensions.html": {
    "href": "neonsdk/api/Neon.Xunit.XunitExtensions.html",
    "title": "Class XunitExtensions | NeonSDK documentation",
    "keywords": "Class XunitExtensions Unit test related extensions. Inheritance Object XunitExtensions Namespace : Neon.Xunit Assembly : Neon.Xunit.dll Syntax public static class XunitExtensions Methods ValidateController<TServiceController>(IGeneratedServiceClient) Compares the service model implemented by the generated service client against the actual ASP.NET service controller implementation. This ensures that the generated client actually matches the controller implementation. note IMPORTANT: You should always include a call to this in your service unit tests to ensure that the service models used to generate the service clients actually match the service as implemented. It is very likely for definitions and implementations to diverge over time. Declaration public static void ValidateController<TServiceController>(this IGeneratedServiceClient client) Parameters Type Name Description IGeneratedServiceClient client The service client implementation being tested. Type Parameters Name Description TServiceController The service controller implementation type. Exceptions Type Condition IncompatibleServiceException Thrown when the service implementaton doesn't match the generated client."
  },
  "neonsdk/api/Neon.Xunit.YugaByte.html": {
    "href": "neonsdk/api/Neon.Xunit.YugaByte.html",
    "title": "Namespace Neon.Xunit.YugaByte | NeonSDK documentation",
    "keywords": "Namespace Neon.Xunit.YugaByte Classes YugaByteFixture Used to run YugaByte database server and its related and services as a Docker compose application on the current machine as a test fixture while tests are being performed and then deletes the application when the fixture is disposed."
  },
  "neonsdk/api/Neon.Xunit.YugaByte.YugaByteFixture.html": {
    "href": "neonsdk/api/Neon.Xunit.YugaByte.YugaByteFixture.html",
    "title": "Class YugaByteFixture | NeonSDK documentation",
    "keywords": "Class YugaByteFixture Used to run YugaByte database server and its related and services as a Docker compose application on the current machine as a test fixture while tests are being performed and then deletes the application when the fixture is disposed. Inheritance Object TestFixture DockerComposeFixture YugaByteFixture Implements ITestFixture Inherited Members DockerComposeFixture.ApplicationName DockerComposeFixture.Start(String, String, Boolean, String[]) DockerComposeFixture.StartAsComposed(String, String, Boolean, String[]) DockerComposeFixture.Dispose(Boolean) DockerComposeFixture.Reset() TestFixture.IsDisposed TestFixture.InAction TestFixture.IsRunning TestFixture.CheckDisposed() TestFixture.CheckWithinAction() TestFixture.Start(Action) TestFixture.Dispose() TestFixture.OnRestart() TestFixture.State Namespace : Neon.Xunit.YugaByte Assembly : Neon.Xunit.YugaByte.dll Syntax public sealed class YugaByteFixture : DockerComposeFixture, ITestFixture, IDisposable Remarks This fixture assumes that YugaByte is not currently running on the local workstation or is running as a application named yugabyte-dev . You may see port conflict errors if either of these conditions are not true. See Start(String, String, String, Boolean, Int32, Int32) for more information about how this works. Constructors YugaByteFixture() Constructs the fixture. Declaration public YugaByteFixture() Properties CassandraSession Returns the Cassandra session. Declaration public ISession CassandraSession { get; } Property Value Type Description Cassandra.ISession PostgresConnection Returns the Postgres connection. Declaration public NpgsqlConnection PostgresConnection { get; } Property Value Type Description Npgsql.NpgsqlConnection Methods Restart() Restarts the application. This is a handy way to deploy a fresh instance with the same properties while running unit tests. Declaration public override void Restart() Overrides DockerComposeFixture.Restart() Start(String, String, String, Boolean, Int32, Int32) Starts a YugaByte compose application if it's not already running. You'll generally want to call this in your test class constructor instead of Start(Action) . note You'll need to call StartAsComposed(String, String, String, Boolean, Int32, Int32) instead when this fixture is being added to a ComposedFixture . Declaration public TestFixtureStatus Start(string name = \"yugabyte-dev\", string cassandraKeyspace = \"test_cassandra\", string postgresDatabase = \"test_postgres\", bool keepRunning = false, int ycqlPort = 9042, int ysqlPort = 5432) Parameters Type Name Description String name Optionally specifies the Docker compose application name (defaults to yugabyte-dev ). String cassandraKeyspace Optionally specifies the Cassandra keyspace. This defaults to test_cassandra . Note that the cassandraKeyspace and postgresDatabase must be different. String postgresDatabase Optionally specifies the Postgres database. This defaults to test_postgres . Note that the cassandraKeyspace and postgresDatabase must be different. Boolean keepRunning Optionally indicates that the compose application should remain running after the fixture is disposed. Int32 ycqlPort Specifies the port to be exposed by the Cassandra YCQL service. This currently defaults to Neon.Xunit.YugaByte.YugaByteFixture.DefaultYcqlPort which is temporarily set to 9099 to avoid conflicts with the Cassandra DBs deployed by the Cadence test fixtures but we hope eventually to change those to use a different port so we can revert this to the standard 9042 port. Int32 ysqlPort Specifies the port to be exposed by the Postgres YCQL service. This defaults to Neon.Xunit.YugaByte.YugaByteFixture.DefaultYsqlPort which is set to the default Postgres port 5433 . Returns Type Description TestFixtureStatus Started if the fixture wasn't previously started and this method call started it or AlreadyRunning if the fixture was already running. StartAsComposed(String, String, String, Boolean, Int32, Int32) Used to start the fixture within a ComposedFixture . Declaration public void StartAsComposed(string name = \"yugabyte-dev\", string cassandraKeyspace = \"test_cassandra\", string postgresDatabase = \"test_postgres\", bool keepRunning = false, int ycqlPort = 9042, int ysqlPort = 5432) Parameters Type Name Description String name Optionally specifies the YugaByte compose application name (defaults to yugabyte-dev ). String cassandraKeyspace Optionally specifies the name of the test Cassandra keyspace to be created. This defaults to test_cassandra . Note that the cassandraKeyspace and postgresDatabase must be different. String postgresDatabase Optionally specifies the name of the test Postgres database to be created. This defaults to test_postgres . Note that the cassandraKeyspace and postgresDatabase must be different. Boolean keepRunning Optionally indicates that the compose application should remain running after the fixture is disposed. Int32 ycqlPort Specifies the port to be exposed by the Cassandra YCQL service. This currently defaults to Neon.Xunit.YugaByte.YugaByteFixture.DefaultYcqlPort which is temporarily set to 9099 to avoid conflicts with the Cassandra DBs deployed by the Cadence tess fixtures but we hope eventually to change those to use a different port so we can revert this to the standard 9042 port. Int32 ysqlPort Specifies the port to be exposed by the Postgres YCQL service. This defaults to Neon.Xunit.YugaByte.YugaByteFixture.DefaultYsqlPort which is set to the default Postgres port 5433 . Implements ITestFixture"
  },
  "neonsdk/api/Neon.YugaByte.html": {
    "href": "neonsdk/api/Neon.YugaByte.html",
    "title": "Namespace Neon.YugaByte | NeonSDK documentation",
    "keywords": "Namespace Neon.YugaByte Classes YugaByteHelper Implements YugaByte related utilities."
  },
  "neonsdk/api/Neon.YugaByte.YugaByteHelper.html": {
    "href": "neonsdk/api/Neon.YugaByte.YugaByteHelper.html",
    "title": "Class YugaByteHelper | NeonSDK documentation",
    "keywords": "Class YugaByteHelper Implements YugaByte related utilities. Inheritance Object YugaByteHelper Namespace : Neon.YugaByte Assembly : Neon.YugaByte.dll Syntax public static class YugaByteHelper"
  }
}