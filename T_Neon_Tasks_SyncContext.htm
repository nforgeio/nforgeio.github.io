<html><head><!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-151329628-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-151329628-1');
</script>
<meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="styles/branding.css" /><link rel="stylesheet" type="text/css" href="styles/branding-en-US.css" /><script type="text/javascript" src="scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>SyncContext Structure</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="SyncContext structure" /><meta name="System.Keywords" content="Neon.Tasks.SyncContext structure" /><meta name="Microsoft.Help.F1" content="Neon.Tasks.SyncContext" /><meta name="Microsoft.Help.Id" content="T:Neon.Tasks.SyncContext" /><meta name="Description" content="Used by public async library methods to reset the current task so that continuations won't be marshalled back to the current thread, improving performance." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Neon.Tasks" /><meta name="file" content="T_Neon_Tasks_SyncContext" /><meta name="guid" content="T_Neon_Tasks_SyncContext" /><link type="text/css" rel="stylesheet" href="styles/highlight.css" /><script type="text/javascript" src="scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="styles/branding-Website.css" /><script type="text/javascript" src="scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="scripts/branding-Website.js"></script><script type="text/javascript" src="scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Neon and neonKUBE class libraries and tools<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="Neon and neonKUBE class libraries and tools" tocid="roottoc">Neon and neonKUBE class libraries and tools</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_neon.htm" title="Neon Namespaces" tocid="R_Project_neon">Neon Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Neon_Tasks.htm" title="Neon.Tasks" tocid="N_Neon_Tasks">Neon.Tasks</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Neon_Tasks_SyncContext.htm" title="SyncContext Structure" tocid="T_Neon_Tasks_SyncContext">SyncContext Structure</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Properties_T_Neon_Tasks_SyncContext.htm" title="SyncContext Properties" tocid="Properties_T_Neon_Tasks_SyncContext">SyncContext Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_Neon_Tasks_SyncContext.htm" title="SyncContext Methods" tocid="Methods_T_Neon_Tasks_SyncContext">SyncContext Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="icons/Help.png" /></td><td class="titleColumn"><h1>SyncContext Structure</h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Used by public <span class="code">async</span> library methods to reset the current
            task <a href="https://docs.microsoft.com/dotnet/api/system.threading.synchronizationcontext" target="_blank">SynchronizationContext</a> so that continuations won't
            be marshalled back to the current thread, improving performance.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Neon_Tasks.htm">Neon.Tasks</a><br />
    <strong>Assembly:</strong>
   Neon.Common (in Neon.Common.dll) Version: 2.11.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EDCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','cs','1','4');return false;">C#</a></div><div id="ID0EDCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','vb','2','4');return false;">VB</a></div><div id="ID0EDCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','cpp','3','4');return false;">C++</a></div><div id="ID0EDCA_tab4" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EDCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EDCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EDCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="identifier">SyncContext</span> : <span class="identifier">INotifyCompletion</span></pre></div><div id="ID0EDCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Structure</span> <span class="identifier">SyncContext</span>
	<span class="keyword">Implements</span> <span class="identifier">INotifyCompletion</span></pre></div><div id="ID0EDCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">value class</span> <span class="identifier">SyncContext</span> : <span class="identifier">INotifyCompletion</span></pre></div><div id="ID0EDCA_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">[&lt;<span class="identifier">SealedAttribute</span>&gt;]
<span class="keyword">type</span> <span class="identifier">SyncContext</span> =  
    <span class="keyword">struct</span>
        <span class="keyword">interface</span> <span class="identifier">INotifyCompletion</span>
    <span class="keyword">end</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EDCA");</script></div><p>The <span class="selflink">SyncContext</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Properties</span></div><div id="ID2RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;static;declared;notNetfw;"><td><img src="icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="P_Neon_Tasks_SyncContext_ClearAsync.htm">ClearAsync</a></td><td><div class="summary"><span class="code">await</span> this singleton to clear the current synchronization
            context for the scope of the current method.  The original context
            will be restored when the method returns.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Neon_Tasks_SyncContext_IsCompleted.htm">IsCompleted</a></td><td><div class="summary"><b>INTERNAL USE ONLY:</b> Do not call this directly.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="P_Neon_Tasks_SyncContext_IsDisabled.htm">IsDisabled</a></td><td><div class="summary"><p>
            Optionally disables context resetting globally.  This provides an
            escape hatch for situations where an application needs to revert
            back to the default synchronization context behavior.  This turns
            <span class="code">await SyncContext.ClearAsync</span> calls into a NOP.
            </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td>
            Most applications should never need to set this.
            </td></tr></table></div></div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Methods</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.valuetype.equals#System_ValueType_Equals_System_Object_" target="_blank">Equals</a></td><td><div class="summary">Indicates whether this instance and a specified object are equal.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.valuetype" target="_blank">ValueType</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Tasks_SyncContext_GetAwaiter.htm">GetAwaiter</a></td><td><div class="summary"><b>INTERNAL USE ONLY:</b> Do not call this directly.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.valuetype.gethashcode#System_ValueType_GetHashCode" target="_blank">GetHashCode</a></td><td><div class="summary">Returns the hash code for this instance.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.valuetype" target="_blank">ValueType</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Tasks_SyncContext_GetResult.htm">GetResult</a></td><td><div class="summary"><b>INTERNAL USE ONLY:</b> Do not call this directly.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.gettype#System_Object_GetType" target="_blank">GetType</a></td><td><div class="summary">Gets the <a href="https://docs.microsoft.com/dotnet/api/system.type" target="_blank">Type</a> of the current instance.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Tasks_SyncContext_OnCompleted.htm">OnCompleted</a></td><td><div class="summary"><b>INTERNAL USE ONLY:</b> Do not call this directly.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.valuetype.tostring#System_ValueType_ToString" target="_blank">ToString</a></td><td><div class="summary">Returns the fully qualified type name of this instance.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.valuetype" target="_blank">ValueType</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Remarks</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
            This class was adapted from this blog post:
            </p><p><a href="https://blogs.msdn.microsoft.com/benwilli/2017/02/09/an-alternative-to-configureawaitfalse-everywhere/" /></p><p>
            The only real changes are that I renamed the structure and converted
            it into a singleton.
            </p><p>
            By default, awaited tasks will always be completed on the calling thread.  This is typically required 
            for applications with user interfaces such as XAML or Windows Forms applications because the awaiter
            will typically need the results on the single UI thread to be able to manuiplate the user interface.
            This behavior is great for UI apps, but can introduce substantial overhead for server applications
            or even portions of UI apps where an async operation performs a lot other async operations.
            </p><p>
            The problem is that typical servers applications run asynchronously on thread pool threads and don't
            generally care about the thread they're running on.  The default await behavior requires that each
            async operation be completed on the calling thread, but under load, it's very likely that the calling
            thread will have been reused for another operation.  This means that when the async operation completes,
            the task will need to wait for the calling thread to be returned to the thread pool before it can be
            fetched and task continuation executed on it.  This can result in a substantial performance hit just
            to manage this process as well what may be a substantial amount of time for the original thread to
            make it back to the pool.
            </p><p>
            As the blog post describes, developers are encouraged to call <a href="https://docs.microsoft.com/dotnet/api/system.threading.tasks.task.configureawait#System_Threading_Tasks_Task_ConfigureAwait_System_Boolean_" target="_blank">ConfigureAwait(Boolean)</a>,
            passing <span class="code">false</span> for every <span class="code">async</span> call where the result doesn't need to be marshalled back
            to the original synchronization context.  Non-UI class libraries typically don't care about this.
            </p><p>
            The problem is that to do this properly, MSFT recommends that you call <span class="code">Task.ConfigureAwait(false)</span>
            on <b>EVERY</b><span class="code">async</span> call you made in these situations.  This is pretty ugly and will be tough
            to enforce on large projects over long periods of time because it's easy to miss one.
            </p><p>
            This <span class="code">struct</span> implements a custom awaiter that saves the current synchronization context and then
            clears it for the rest of the current method execution and then restores the original context when
            when the method returns.  This means that every subsequent <span class="code">await</span>  performed in the method will 
            simply fetch a pool thread to continue execution, rather than to the original context thread.  To
            accomplish this, you'll simply await <a href="P_Neon_Tasks_SyncContext_ClearAsync.htm">ClearAsync</a> at or near the top of your method:
            </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACABA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Neon.Task;

<span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task&lt;<span class="highlight-keyword">string</span>&gt; HelloAsync()
{
    <span class="highlight-keyword">await</span> SyncContext.ClearAsync;

    <span class="highlight-keyword">await</span> DoSomthingAsync();
    <span class="highlight-keyword">await</span> DoSomethingElseAsync();

    <span class="highlight-keyword">return</span> <span class="highlight-literal">"Hello World!"</span>;
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACABA");</script><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><a href="P_Neon_Tasks_SyncContext_ClearAsync.htm">ClearAsync</a> is not a method so you don't
            need to pass any parameters.
            </td></tr></table></div><p>
            This call clears the current synchronization context such that the
            subsequent <span class="code">async</span> calls will each marshal back to threads
            obtained from the thread pool and due to compiler async magic,
            the original synchronization context will be restored before the
            <span class="code">HelloAsync()</span> method returns.
            </p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />See Also</span></div><div id="ID5RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Neon_Tasks.htm">Neon.Tasks Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Offline help available for Windows: <a href="neon.chm">neon.chm</a><br />
Report any issues at: <a href="https://github.com/nforgeio/neonKUBE">https://github.com/nforgeio/neonKUBE</a><p>Copyright (c) 2005-2020 by neonFORGE LLC.  All rights reserved.</p> </div></body></html>