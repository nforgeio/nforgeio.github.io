<html><head><!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-151329628-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-151329628-1');
</script>
<meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="styles/branding.css" /><link rel="stylesheet" type="text/css" href="styles/branding-en-US.css" /><script type="text/javascript" src="scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>PreparedCommand Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="PreparedCommand class" /><meta name="System.Keywords" content="Neon.Postgres.PreparedCommand class" /><meta name="Microsoft.Help.F1" content="Neon.Postgres.PreparedCommand" /><meta name="Microsoft.Help.Id" content="T:Neon.Postgres.PreparedCommand" /><meta name="Description" content="Simplifies prepared Postgres command usage by combining the prepared command and its usage into a single type." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Neon.Postgres" /><meta name="file" content="T_Neon_Postgres_PreparedCommand" /><meta name="guid" content="T_Neon_Postgres_PreparedCommand" /><link type="text/css" rel="stylesheet" href="styles/highlight.css" /><script type="text/javascript" src="scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="styles/branding-Website.css" /><script type="text/javascript" src="scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="scripts/branding-Website.js"></script><script type="text/javascript" src="scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Neon and neonKUBE class libraries and tools<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="Neon and neonKUBE class libraries and tools" tocid="roottoc">Neon and neonKUBE class libraries and tools</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_neon.htm" title="Neon Namespaces" tocid="R_Project_neon">Neon Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Neon_Postgres.htm" title="Neon.Postgres" tocid="N_Neon_Postgres">Neon.Postgres</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Neon_Postgres_PreparedCommand.htm" title="PreparedCommand Class" tocid="T_Neon_Postgres_PreparedCommand">PreparedCommand Class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Neon_Postgres_PreparedCommand__ctor.htm" title="PreparedCommand Constructor " tocid="M_Neon_Postgres_PreparedCommand__ctor">PreparedCommand Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Properties_T_Neon_Postgres_PreparedCommand.htm" title="PreparedCommand Properties" tocid="Properties_T_Neon_Postgres_PreparedCommand">PreparedCommand Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_Neon_Postgres_PreparedCommand.htm" title="PreparedCommand Methods" tocid="Methods_T_Neon_Postgres_PreparedCommand">PreparedCommand Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="icons/Help.png" /></td><td class="titleColumn"><h1>PreparedCommand Class</h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Simplifies prepared Postgres command usage by combining the prepared command
            and its usage into a single type.  It's also often useful to create derived
            custom types from this that handle the parameter definitions and subsitutions
            and perhaps precompute result column indexes to help abstract these details
            from the calling program.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">System<span id="LST6C7F436D_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST6C7F436D_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <span class="selflink">Neon.Postgres<span id="LST6C7F436D_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST6C7F436D_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>PreparedCommand</span><br /></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Neon_Postgres.htm">Neon.Postgres</a><br />
    <strong>Assembly:</strong>
   Neon.Postgres (in Neon.Postgres.dll) Version: 2.14.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EDCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','cs','1','4');return false;">C#</a></div><div id="ID1EDCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','vb','2','4');return false;">VB</a></div><div id="ID1EDCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','cpp','3','4');return false;">C++</a></div><div id="ID1EDCA_tab4" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EDCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EDCA');return false;" title="Copy">Copy</a></div></div><div id="ID1EDCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">PreparedCommand</span></pre></div><div id="ID1EDCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">PreparedCommand</span></pre></div><div id="ID1EDCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">PreparedCommand</span></pre></div><div id="ID1EDCA_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">type</span> <span class="identifier">PreparedCommand</span> =  <span class="keyword">class</span> <span class="keyword">end</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EDCA");</script></div><p>The <span class="selflink">PreparedCommand</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Constructors</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="constructorList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Postgres_PreparedCommand__ctor.htm">PreparedCommand</a></td><td><div class="summary">
            Constructor.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Properties</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Neon_Postgres_PreparedCommand_CommandText.htm">CommandText</a></td><td><div class="summary">
            Returns the command text.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Neon_Postgres_PreparedCommand_CommandTimeout.htm">CommandTimeout</a></td><td><div class="summary">
            The command timeout in seconds.  This defaults to <b>30 seconds</b>.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Neon_Postgres_PreparedCommand_Parameters.htm">Parameters</a></td><td><div class="summary"><p>
            Returns the command parameters.
            </p><div class="alert"><table><tr><th><img src="icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td>
            The collection returned should be considered tob <b>read-only</b> and
            must not be modified.
            </td></tr></table></div></div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Methods</span></div><div id="ID5RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Neon_Postgres_PreparedCommand_Clone.htm">Clone</a></td><td><div class="summary">
            Prepares the underlying command if it hasn't already been prepared and
            then creates a clone of the command that can be executed after parameter
            values are set when necessary.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.equals#System_Object_Equals_System_Object_" target="_blank">Equals</a></td><td><div class="summary">Determines whether the specified object is equal to the current object.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.finalize#System_Object_Finalize" target="_blank">Finalize</a></td><td><div class="summary">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.gethashcode#System_Object_GetHashCode" target="_blank">GetHashCode</a></td><td><div class="summary">Serves as the default hash function.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.gettype#System_Object_GetType" target="_blank">GetType</a></td><td><div class="summary">Gets the <a href="https://docs.microsoft.com/dotnet/api/system.type" target="_blank">Type</a> of the current instance.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.memberwiseclone#System_Object_MemberwiseClone" target="_blank">MemberwiseClone</a></td><td><div class="summary">Creates a shallow copy of the current <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.tostring#System_Object_ToString" target="_blank">ToString</a></td><td><div class="summary">Returns a string that represents the current object.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />Remarks</span></div><div id="ID6RBSection" class="collapsibleSection"><p>
            You can use this class directly in your code like: 
            </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAHABA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAHABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAHABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAHABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> parameters = <span class="highlight-keyword">new</span> Dictionary&lt;<span class="highlight-keyword">string</span>, NpgsqlDbType&gt;()&gt; 
    {
        { <span class="highlight-literal">"name"</span>, NpgsqlDbType.Text }
    };

<span class="highlight-keyword">var</span> preparedCommand = <span class="highlight-keyword">new</span> PreparedCommand(connection, <span class="highlight-literal">"SELECT Name, Age, Email FROM People WHERE Name = @name"</span>, parameters);

<span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> name <span class="highlight-keyword">in</span> <span class="highlight-keyword">new</span> <span class="highlight-keyword">string</span>[] { <span class="highlight-literal">"jack"</span>, <span class="highlight-literal">"jill"</span>, <span class="highlight-literal">"john"</span>, <span class="highlight-literal">"jane"</span> })
{
    <span class="highlight-keyword">var</span> queryCommand = preparedCommand.Clone();

    queryCommand.Parameters[<span class="highlight-literal">"name"</span>].Value = name;

    <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> row <span class="highlight-keyword">in</span> queryCommand.ExecuteReader().ToEnumerable())
    {
        Console.WriteLine($<span class="highlight-literal">"Name: {row.GetString("</span>Name<span class="highlight-literal">")} Age: {row.GetInt32("</span>Age<span class="highlight-literal">"} Email: {row.GetString("</span>Email<span class="highlight-literal">")}"</span>);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAHABA");</script><p>
            In this example, we first created the prepared command that performs a query passing a 
            person's name as the parameter.   Note that we had to create a dictionary defining the 
            parameter name and type.  The below, we looped for perform four queries by cloning 
            the prepared command, setting the parameter values and then executing the command.
            </p><p>
            Note how we used methods like <span class="code">row.GetString("Name")</span> to access individual columns.
            This works and is convenient but will be somewhat inefficient because the method will need 
            to map the column name into the corresponding column index.  We could have specified 
            column indexes here, but that's starting to be fragile and could break if we inserted
            or removed result columns.  Even using names can be fragile since column names can
            be altered over time.
            </p><p>
            We recommend writing custom classes that inherit from <span class="selflink">PreparedCommand</span> to
            help abstract these things efficiently and without needing to use ORM frameworks like
            Entity Framework, NHibernate, and Dapper which tend to be inefficient and somewhat
            cumbersome to setup.  Here's an example of a class that wraps a prepared statement
            to implement the query from the example above:
            </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EADABA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EADABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EADABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EADABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> QueryPeopleByName : PreparedCommand
{
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> query = <span class="highlight-literal">"SELECT Name, Age, Email FROM People WHERE Name = @name"</span>;

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> NameIndex  = <span class="highlight-number">0</span>;
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> AgeIndex   = <span class="highlight-number">1</span>;
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> EmailIndex = <span class="highlight-number">2</span>;

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">readonly</span> Dictionary&lt;<span class="highlight-keyword">string</span>, NpgsqlDbType&gt; paramDefinitions =
        <span class="highlight-keyword">new</span> Dictionary&lt;<span class="highlight-keyword">string</span>, NpgsqlDbType&gt;()
        {
            { <span class="highlight-literal">"name"</span>, NpgsqlDbType.Text }
        };

    <span class="highlight-keyword">public</span> QueryPeopleByName(NpgsqlConnection connection)
        : <span class="highlight-keyword">base</span>(connection, query, paramDefinitions)
    {
        <span class="highlight-keyword">var</span> queryCommand = queryPeopleByName.Clone();

        queryCommand.Parameters[<span class="highlight-literal">"name"</span>] = name;

        <span class="highlight-keyword">return</span> qiery
    }

    <span class="highlight-keyword">public</span> ReaderEnumerator GetPeople(<span class="highlight-keyword">string</span> name)
    {
        <span class="highlight-keyword">var</span> queryCommand = queryPeopleByName.Clone();

        queryCommand.Parameters[<span class="highlight-literal">"name"</span>].Value = name;

        <span class="highlight-keyword">return</span> queryCommand.ExecuteReader().ToEnumerable()
    }
}

...

<span class="highlight-keyword">var</span> queryPeopleByName = <span class="highlight-keyword">new</span> QueryPeopleByName(connection);

<span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> name <span class="highlight-keyword">in</span> <span class="highlight-keyword">new</span> <span class="highlight-keyword">string</span>[] { <span class="highlight-literal">"jack"</span>, <span class="highlight-literal">"jill"</span>, <span class="highlight-literal">"john"</span>, <span class="highlight-literal">"jane"</span> })
{
    <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> row <span class="highlight-keyword">in</span> queryCommand.ExecuteReader().ToEnumerable())
    {
        Console.WriteLine($<span class="highlight-literal">"Name: {row.GetString(QueryPeopleByName.NameIndex)} Age: {row.GetInt32(QueryPeopleByName.AgeIndex} Email: {row.GetString(QueryPeopleByName.EmailIndex)}"</span>);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EADABA");</script><p>
            The example above abstracted the query SQL, the parameter subsitution, as well as the result 
            column indexes to make this a little less fragile and easier to modify when necessary.  You can 
            extend this coding pattern by having your class handle conversion of the query result to nice
            .NET model objects:
            </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EABABA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Person
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Name { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> Age { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Email { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
}

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> QueryPeopleByName : PreparedCommand
{
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> query = <span class="highlight-literal">"SELECT Name, Age, Email FROM People WHERE Name = @name"</span>;

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> NameIndex  = <span class="highlight-number">0</span>;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> AgeIndex   = <span class="highlight-number">1</span>;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> EmailIndex = <span class="highlight-number">2</span>;

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">readonly</span> Dictionary&lt;<span class="highlight-keyword">string</span>, NpgsqlDbType&gt; paramDefinitions =
        <span class="highlight-keyword">new</span> Dictionary&lt;<span class="highlight-keyword">string</span>, NpgsqlDbType&gt;()
        {
            { <span class="highlight-literal">"name"</span>, NpgsqlDbType.Text }
        };

    <span class="highlight-keyword">public</span> QueryPeopleByName(NpgsqlConnection connection)
        : <span class="highlight-keyword">base</span>(connection, query, paramDefinitions)
    {
        <span class="highlight-keyword">var</span> queryCommand = queryPeopleByName.Clone();

        queryCommand.Parameters[<span class="highlight-literal">"name"</span>] = name;

        <span class="highlight-keyword">return</span> qiery
    }

    <span class="highlight-keyword">public</span> IEnumerable&lt;Person&gt; GetPeople(<span class="highlight-keyword">string</span> name)
    {
        <span class="highlight-keyword">var</span> queryCommand = queryPeopleByName.Clone();

        queryCommand.Parameters[<span class="highlight-literal">"name"</span>] = name;

        <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> row <span class="highlight-keyword">in</span> queryCommand.ExecuteReader().ToEnumerable())
        {
            <span class="highlight-keyword">yield</span> <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> Person()
            {
                Name  = row.GetString(NameIndex),
                Age   = row.GetInt32(RowIndex),
                Email = row.GetString(EmailIndex);
            };
        }
    }
}

...

<span class="highlight-keyword">var</span> queryPeopleByName = <span class="highlight-keyword">new</span> QueryPeopleByName(connection);

<span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> name <span class="highlight-keyword">in</span> <span class="highlight-keyword">new</span> <span class="highlight-keyword">string</span>[] { <span class="highlight-literal">"jack"</span>, <span class="highlight-literal">"jill"</span>, <span class="highlight-literal">"john"</span>, <span class="highlight-literal">"jane"</span> })
{
    <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> person <span class="highlight-keyword">in</span> queryCommand.GetProple(name))
    {
        Console.WriteLine($<span class="highlight-literal">"Name: {person.Name} Age: {person.Age} Email: {person.Email}"</span>);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABABA");</script><p>
            This final example abstracted the parameter name and type as well as converted
            the query result to compile-time <span class="code">Person</span> object instances.  These patterns
            can provide a nice way to get some of the advantages of an ORM without extra
            runtime overhead.
            </p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />See Also</span></div><div id="ID7RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Neon_Postgres.htm">Neon.Postgres Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Offline help available for Windows: <a href="neon.chm">neon.chm</a><br />
Report any issues at: <a href="https://github.com/nforgeio/neonKUBE">https://github.com/nforgeio/neonKUBE</a><p>Copyright (c) 2005-2020 by neonFORGE LLC.  All rights reserved.</p> </div></body></html>