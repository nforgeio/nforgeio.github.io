<html><head><!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-151329628-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-151329628-1');
</script>
<meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="styles/branding.css" /><link rel="stylesheet" type="text/css" href="styles/branding-en-US.css" /><script type="text/javascript" src="scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Queries</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="Neon.Cadence-Workflow-Queries" /><meta name="Description" content="Cadence allow you to query a workflow's state. For example you might want to know how a workflow is progressing. To accomplish this, you define a query method that may optionally accept parameters and that returns the result. Here's an example:" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="styles/highlight.css" /><script type="text/javascript" src="scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="styles/branding-Website.css" /><script type="text/javascript" src="scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="scripts/branding-Website.js"></script><script type="text/javascript" src="scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Neon and neonKUBE class libraries and tools<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="index.html" title="Neon and neonKUBE class libraries and tools" tocid="roottoc">Neon and neonKUBE class libraries and tools</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Cadence-Overview.htm" title="Neon.Cadence" tocid="e7326365-cdde-43a4-b7ce-59c517b711e7">Neon.Cadence</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Neon.Cadence-Workflow-CodingRules.htm" title="Workflow details" tocid="8f93a9a9-c6a5-474f-bb50-655f4cae4dce">Workflow details</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-CodingRules.htm" title="Coding Rules" tocid="47a2af19-5f1f-4c5f-853e-88d9bc439d5f">Coding Rules</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-IDsExecutions.htm" title="IDs &amp; Executions" tocid="03749f45-4d19-4f65-8aeb-6e24162efdf0">IDs &amp; Executions</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-Scheduling.htm" title="Timeouts" tocid="61af6a0e-5dff-420c-826e-007977c8ecb3">Timeouts</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-ChildWorkflows.htm" title="Child Workflows" tocid="cd6968a4-2e65-48fb-ad94-bb11e19d3b71">Child Workflows</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-GettingStarted-Parallel.htm" title="Parallel Operations" tocid="0cc6a07b-e6d4-4840-9e61-aa8026a26ad4">Parallel Operations</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-Options.htm" title="Options" tocid="28e276cd-ad5b-4194-928f-14d8a42a8958">Options</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-Queries.htm" title="Queries" tocid="9dad47bc-7aa4-4979-9a5b-c68d10b230a7">Queries</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-SignalsQueues.htm" title="Signals &amp; Queues" tocid="10a488d2-0ed5-4689-b558-35dcd318889b">Signals &amp; Queues</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="4b5b88c8-3d86-442b-8015-9aef7f624df0.htm" title="Synchronous Signals" tocid="4b5b88c8-3d86-442b-8015-9aef7f624df0">Synchronous Signals</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Activity-ContinueAsNew.htm" title="Continue as new" tocid="46fb345e-f0fa-4b5e-a67c-ae6f5800d4e9">Continue as new</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Neon.Cadence-Workflow-CRON.htm" title="CRON" tocid="5b5de994-c9ca-4c5b-bc8b-85b373d66822">CRON</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="icons/Help.png" /></td><td class="titleColumn"><h1>Queries</h1></td></tr></table><span class="introStyle"></span> <div id="ID1RBSection" class="collapsibleSection"><p>
          Cadence allow you to query a workflow's state.  For example you might want to know 
          how a workflow is progressing.  To accomplish this, you define a query method that
          may optionally accept parameters and that returns the result.  Here's an example:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EADABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-keyword">using</span> System.Threading.Tasks;

<span class="highlight-keyword">using</span> Neon.Cadence;
<span class="highlight-keyword">using</span> Neon.Common;

<span class="highlight-keyword">namespace</span> Snippets_QueryWorkflow
{
    <span class="highlight-preprocessor">#region</span> code
    [WorkflowInterface(TaskList = <span class="highlight-literal">"my-tasks"</span>)]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IMyWorkflow : IWorkflow
    {
        [WorkflowMethod]
        Task DoItAsync();

        [QueryMethod(<span class="highlight-literal">"get-status"</span>)]
        Task&lt;<span class="highlight-keyword">string</span>&gt; GetStatusAsync();
    }

    [Workflow]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyWorkflow : WorkflowBase, IMyWorkflow
    {
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">string</span> state = <span class="highlight-literal">"started"</span>;

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task DoItAsync()
        {
            <span class="highlight-keyword">var</span> sleepTime = TimeSpan.FromSeconds(<span class="highlight-number">5</span>);

            state = <span class="highlight-literal">"sleeping #1"</span>;
            <span class="highlight-keyword">await</span> Workflow.SleepAsync(sleepTime);

            state = <span class="highlight-literal">"sleeping #2"</span>;
            <span class="highlight-keyword">await</span> Workflow.SleepAsync(sleepTime);

            state = <span class="highlight-literal">"sleeping #3"</span>;
            <span class="highlight-keyword">await</span> Workflow.SleepAsync(sleepTime);

            state = <span class="highlight-literal">"done"</span>;
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task&lt;<span class="highlight-keyword">string</span>&gt; GetStatusAsync()
        {
            <span class="highlight-keyword">return</span> <span class="highlight-keyword">await</span> Task.FromResult(state);
        }
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> Program
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">async</span> Task Main(<span class="highlight-keyword">string</span>[] args)
        {
            <span class="highlight-keyword">var</span> settings = <span class="highlight-keyword">new</span> CadenceSettings()
            {
                DefaultDomain = <span class="highlight-literal">"my-domain"</span>,
                CreateDomain  = <span class="highlight-keyword">true</span>,
                Servers       = <span class="highlight-keyword">new</span> List&lt;<span class="highlight-keyword">string</span>&gt;() { <span class="highlight-literal">"cadence://localhost:7933"</span> }
            };

            <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">await</span> CadenceClient.ConnectAsync(settings))
            {
                <span class="highlight-keyword">await</span> client.RegisterAssemblyAsync(System.Reflection.Assembly.GetExecutingAssembly());
                <span class="highlight-keyword">await</span> client.StartWorkerAsync(<span class="highlight-literal">"my-tasks"</span>);

                <span class="highlight-comment">// Invoke the workflow and then query it's status a few times.</span>

                <span class="highlight-keyword">var</span> stub = client.NewWorkflowStub&lt;IMyWorkflow&gt;();
                <span class="highlight-keyword">var</span> task = stub.DoItAsync();

                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; <span class="highlight-number">5</span>; i++)
                {
                    <span class="highlight-keyword">await</span> Task.Delay(TimeSpan.FromSeconds(<span class="highlight-number">2.5</span>));

                    Console.WriteLine(<span class="highlight-keyword">await</span> stub.GetStatusAsync());
                }

                <span class="highlight-keyword">await</span> task;
            }
        }
    }
    <span class="highlight-preprocessor">#endregion</span>
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADABAAA");</script><p>
          This sample defines the <span class="code">IMyWorkflow</span> interface with a query
          method.  Note that this method must be tagged by a <a href="T_Neon_Cadence_QueryMethodAttribute.htm">QueryMethodAttribute</a>
          specifying unique name identifying the query method within the workflow.  Cadence allows workflows to have
          multiple query methods and this name is use to distunguish between them.
        </p><p>
          Query methods are only allowed to return workflow state, they <strong>must never modify workflow state</strong>.
          In this example, the workflow has a field it updates with the current state as the workflow progresses.
          The query method simply returns this field value.  Near the bottom of the sample, you can see the program invoke
          the workflow and then query it a few times, writing the current status to the console.
        </p><p>
          Workflow queries can accept parameters if needed and return any serializable type.
        </p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="icons/SectionExpanded.png" />See Also</span></div><div id="ID2RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Neon_Cadence.htm">Neon.Cadence</a></div></div></div></div><div id="pageFooter" class="pageFooter">Offline help available for Windows: <a href="neon.chm">neon.chm</a><br />
Report any issues at: <a href="https://github.com/nforgeio/neonKUBE">https://github.com/nforgeio/neonKUBE</a><p>Copyright (c) 2016-2020 by neonFORGE, LLC.  All rights reserved.</p></div></body></html>